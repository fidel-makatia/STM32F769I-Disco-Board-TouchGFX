
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000262d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006890  080264d8  080264d8  000364d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000003c  0802cd68  0802cd68  0003cd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802cda4  0802cda4  00595c54  2**0
                  CONTENTS
  5 .ARM          00000008  0802cda4  0802cda4  0003cda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802cdac  0802cdac  00595c54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802cdac  0802cdac  0003cdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802cdc8  0802cdc8  0003cdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  0802cdd0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00000600  20000150  0802cf20  00040150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 Video_RGB_Buffer 00043800  20000750  0802d520  00040750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0001d464  20043f50  08070d20  00083f50  2**2
                  ALLOC
 13 ._user_heap_stack 00002004  200613b4  08070d20  000913b4  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00595c54  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00501748  90000000  90000000  00090000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 FontFlashSection 00004448  90501748  90501748  00591748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 TextFlashSection 000000c4  90505b90  90505b90  00595b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .debug_line   000622b7  00000000  00000000  00595c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000e0f46  00000000  00000000  005f7f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00018c89  00000000  00000000  006d8e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 000035c8  00000000  00000000  006f1b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0015a22d  00000000  00000000  006f50d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000059e8  00000000  00000000  0084f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  000400f6  00000000  00000000  00854ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000d2  00000000  00000000  00894dde  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000094f4  00000000  00000000  00894eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    000380aa  00000000  00000000  0089e3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20043f50 	.word	0x20043f50
 800021c:	00000000 	.word	0x00000000
 8000220:	080264c0 	.word	0x080264c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20043f54 	.word	0x20043f54
 800023c:	080264c0 	.word	0x080264c0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b96e 	b.w	800094c <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	468c      	mov	ip, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	f040 8083 	bne.w	800079e <__udivmoddi4+0x116>
 8000698:	428a      	cmp	r2, r1
 800069a:	4617      	mov	r7, r2
 800069c:	d947      	bls.n	800072e <__udivmoddi4+0xa6>
 800069e:	fab2 f282 	clz	r2, r2
 80006a2:	b142      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a4:	f1c2 0020 	rsb	r0, r2, #32
 80006a8:	fa24 f000 	lsr.w	r0, r4, r0
 80006ac:	4091      	lsls	r1, r2
 80006ae:	4097      	lsls	r7, r2
 80006b0:	ea40 0c01 	orr.w	ip, r0, r1
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbbc f6f8 	udiv	r6, ip, r8
 80006c0:	fa1f fe87 	uxth.w	lr, r7
 80006c4:	fb08 c116 	mls	r1, r8, r6, ip
 80006c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006cc:	fb06 f10e 	mul.w	r1, r6, lr
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006da:	f080 8119 	bcs.w	8000910 <__udivmoddi4+0x288>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8116 	bls.w	8000910 <__udivmoddi4+0x288>
 80006e4:	3e02      	subs	r6, #2
 80006e6:	443b      	add	r3, r7
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80006f0:	fb08 3310 	mls	r3, r8, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006fc:	45a6      	cmp	lr, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	193c      	adds	r4, r7, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8105 	bcs.w	8000914 <__udivmoddi4+0x28c>
 800070a:	45a6      	cmp	lr, r4
 800070c:	f240 8102 	bls.w	8000914 <__udivmoddi4+0x28c>
 8000710:	3802      	subs	r0, #2
 8000712:	443c      	add	r4, r7
 8000714:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000718:	eba4 040e 	sub.w	r4, r4, lr
 800071c:	2600      	movs	r6, #0
 800071e:	b11d      	cbz	r5, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c5 4300 	strd	r4, r3, [r5]
 8000728:	4631      	mov	r1, r6
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	b902      	cbnz	r2, 8000732 <__udivmoddi4+0xaa>
 8000730:	deff      	udf	#255	; 0xff
 8000732:	fab2 f282 	clz	r2, r2
 8000736:	2a00      	cmp	r2, #0
 8000738:	d150      	bne.n	80007dc <__udivmoddi4+0x154>
 800073a:	1bcb      	subs	r3, r1, r7
 800073c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000740:	fa1f f887 	uxth.w	r8, r7
 8000744:	2601      	movs	r6, #1
 8000746:	fbb3 fcfe 	udiv	ip, r3, lr
 800074a:	0c21      	lsrs	r1, r4, #16
 800074c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000750:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000754:	fb08 f30c 	mul.w	r3, r8, ip
 8000758:	428b      	cmp	r3, r1
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0xe4>
 800075c:	1879      	adds	r1, r7, r1
 800075e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0xe2>
 8000764:	428b      	cmp	r3, r1
 8000766:	f200 80e9 	bhi.w	800093c <__udivmoddi4+0x2b4>
 800076a:	4684      	mov	ip, r0
 800076c:	1ac9      	subs	r1, r1, r3
 800076e:	b2a3      	uxth	r3, r4
 8000770:	fbb1 f0fe 	udiv	r0, r1, lr
 8000774:	fb0e 1110 	mls	r1, lr, r0, r1
 8000778:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800077c:	fb08 f800 	mul.w	r8, r8, r0
 8000780:	45a0      	cmp	r8, r4
 8000782:	d907      	bls.n	8000794 <__udivmoddi4+0x10c>
 8000784:	193c      	adds	r4, r7, r4
 8000786:	f100 33ff 	add.w	r3, r0, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x10a>
 800078c:	45a0      	cmp	r8, r4
 800078e:	f200 80d9 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 8000792:	4618      	mov	r0, r3
 8000794:	eba4 0408 	sub.w	r4, r4, r8
 8000798:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800079c:	e7bf      	b.n	800071e <__udivmoddi4+0x96>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0x12e>
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	f000 80b1 	beq.w	800090a <__udivmoddi4+0x282>
 80007a8:	2600      	movs	r6, #0
 80007aa:	e9c5 0100 	strd	r0, r1, [r5]
 80007ae:	4630      	mov	r0, r6
 80007b0:	4631      	mov	r1, r6
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f683 	clz	r6, r3
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d14a      	bne.n	8000854 <__udivmoddi4+0x1cc>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0x140>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80b8 	bhi.w	8000938 <__udivmoddi4+0x2b0>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0103 	sbc.w	r1, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	468c      	mov	ip, r1
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d0a8      	beq.n	8000728 <__udivmoddi4+0xa0>
 80007d6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007da:	e7a5      	b.n	8000728 <__udivmoddi4+0xa0>
 80007dc:	f1c2 0320 	rsb	r3, r2, #32
 80007e0:	fa20 f603 	lsr.w	r6, r0, r3
 80007e4:	4097      	lsls	r7, r2
 80007e6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ee:	40d9      	lsrs	r1, r3
 80007f0:	4330      	orrs	r0, r6
 80007f2:	0c03      	lsrs	r3, r0, #16
 80007f4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007f8:	fa1f f887 	uxth.w	r8, r7
 80007fc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb06 f108 	mul.w	r1, r6, r8
 8000808:	4299      	cmp	r1, r3
 800080a:	fa04 f402 	lsl.w	r4, r4, r2
 800080e:	d909      	bls.n	8000824 <__udivmoddi4+0x19c>
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	f106 3cff 	add.w	ip, r6, #4294967295
 8000816:	f080 808d 	bcs.w	8000934 <__udivmoddi4+0x2ac>
 800081a:	4299      	cmp	r1, r3
 800081c:	f240 808a 	bls.w	8000934 <__udivmoddi4+0x2ac>
 8000820:	3e02      	subs	r6, #2
 8000822:	443b      	add	r3, r7
 8000824:	1a5b      	subs	r3, r3, r1
 8000826:	b281      	uxth	r1, r0
 8000828:	fbb3 f0fe 	udiv	r0, r3, lr
 800082c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000830:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000834:	fb00 f308 	mul.w	r3, r0, r8
 8000838:	428b      	cmp	r3, r1
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x1c4>
 800083c:	1879      	adds	r1, r7, r1
 800083e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000842:	d273      	bcs.n	800092c <__udivmoddi4+0x2a4>
 8000844:	428b      	cmp	r3, r1
 8000846:	d971      	bls.n	800092c <__udivmoddi4+0x2a4>
 8000848:	3802      	subs	r0, #2
 800084a:	4439      	add	r1, r7
 800084c:	1acb      	subs	r3, r1, r3
 800084e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000852:	e778      	b.n	8000746 <__udivmoddi4+0xbe>
 8000854:	f1c6 0c20 	rsb	ip, r6, #32
 8000858:	fa03 f406 	lsl.w	r4, r3, r6
 800085c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000860:	431c      	orrs	r4, r3
 8000862:	fa20 f70c 	lsr.w	r7, r0, ip
 8000866:	fa01 f306 	lsl.w	r3, r1, r6
 800086a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800086e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000872:	431f      	orrs	r7, r3
 8000874:	0c3b      	lsrs	r3, r7, #16
 8000876:	fbb1 f9fe 	udiv	r9, r1, lr
 800087a:	fa1f f884 	uxth.w	r8, r4
 800087e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000882:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000886:	fb09 fa08 	mul.w	sl, r9, r8
 800088a:	458a      	cmp	sl, r1
 800088c:	fa02 f206 	lsl.w	r2, r2, r6
 8000890:	fa00 f306 	lsl.w	r3, r0, r6
 8000894:	d908      	bls.n	80008a8 <__udivmoddi4+0x220>
 8000896:	1861      	adds	r1, r4, r1
 8000898:	f109 30ff 	add.w	r0, r9, #4294967295
 800089c:	d248      	bcs.n	8000930 <__udivmoddi4+0x2a8>
 800089e:	458a      	cmp	sl, r1
 80008a0:	d946      	bls.n	8000930 <__udivmoddi4+0x2a8>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4421      	add	r1, r4
 80008a8:	eba1 010a 	sub.w	r1, r1, sl
 80008ac:	b2bf      	uxth	r7, r7
 80008ae:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008ba:	fb00 f808 	mul.w	r8, r0, r8
 80008be:	45b8      	cmp	r8, r7
 80008c0:	d907      	bls.n	80008d2 <__udivmoddi4+0x24a>
 80008c2:	19e7      	adds	r7, r4, r7
 80008c4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c8:	d22e      	bcs.n	8000928 <__udivmoddi4+0x2a0>
 80008ca:	45b8      	cmp	r8, r7
 80008cc:	d92c      	bls.n	8000928 <__udivmoddi4+0x2a0>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4427      	add	r7, r4
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	eba7 0708 	sub.w	r7, r7, r8
 80008da:	fba0 8902 	umull	r8, r9, r0, r2
 80008de:	454f      	cmp	r7, r9
 80008e0:	46c6      	mov	lr, r8
 80008e2:	4649      	mov	r1, r9
 80008e4:	d31a      	bcc.n	800091c <__udivmoddi4+0x294>
 80008e6:	d017      	beq.n	8000918 <__udivmoddi4+0x290>
 80008e8:	b15d      	cbz	r5, 8000902 <__udivmoddi4+0x27a>
 80008ea:	ebb3 020e 	subs.w	r2, r3, lr
 80008ee:	eb67 0701 	sbc.w	r7, r7, r1
 80008f2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008f6:	40f2      	lsrs	r2, r6
 80008f8:	ea4c 0202 	orr.w	r2, ip, r2
 80008fc:	40f7      	lsrs	r7, r6
 80008fe:	e9c5 2700 	strd	r2, r7, [r5]
 8000902:	2600      	movs	r6, #0
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	462e      	mov	r6, r5
 800090c:	4628      	mov	r0, r5
 800090e:	e70b      	b.n	8000728 <__udivmoddi4+0xa0>
 8000910:	4606      	mov	r6, r0
 8000912:	e6e9      	b.n	80006e8 <__udivmoddi4+0x60>
 8000914:	4618      	mov	r0, r3
 8000916:	e6fd      	b.n	8000714 <__udivmoddi4+0x8c>
 8000918:	4543      	cmp	r3, r8
 800091a:	d2e5      	bcs.n	80008e8 <__udivmoddi4+0x260>
 800091c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000920:	eb69 0104 	sbc.w	r1, r9, r4
 8000924:	3801      	subs	r0, #1
 8000926:	e7df      	b.n	80008e8 <__udivmoddi4+0x260>
 8000928:	4608      	mov	r0, r1
 800092a:	e7d2      	b.n	80008d2 <__udivmoddi4+0x24a>
 800092c:	4660      	mov	r0, ip
 800092e:	e78d      	b.n	800084c <__udivmoddi4+0x1c4>
 8000930:	4681      	mov	r9, r0
 8000932:	e7b9      	b.n	80008a8 <__udivmoddi4+0x220>
 8000934:	4666      	mov	r6, ip
 8000936:	e775      	b.n	8000824 <__udivmoddi4+0x19c>
 8000938:	4630      	mov	r0, r6
 800093a:	e74a      	b.n	80007d2 <__udivmoddi4+0x14a>
 800093c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000940:	4439      	add	r1, r7
 8000942:	e713      	b.n	800076c <__udivmoddi4+0xe4>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	e724      	b.n	8000794 <__udivmoddi4+0x10c>
 800094a:	bf00      	nop

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000954:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000956:	e003      	b.n	8000960 <LoopCopyDataInit>

08000958 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800095a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800095c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800095e:	3104      	adds	r1, #4

08000960 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000964:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000966:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000968:	d3f6      	bcc.n	8000958 <CopyDataInit>
  ldr  r2, =_sbss
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800096c:	e002      	b.n	8000974 <LoopFillZerobss>

0800096e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800096e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000970:	f842 3b04 	str.w	r3, [r2], #4

08000974 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000976:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000978:	d3f9      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800097a:	f005 ff07 	bl	800678c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097e:	f024 fd5d 	bl	802543c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f002 fc75 	bl	8003270 <main>
  bx  lr    
 8000986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000988:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800098c:	0802cdd0 	.word	0x0802cdd0
  ldr  r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000994:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8000998:	20043f50 	.word	0x20043f50
  ldr  r3, = _ebss
 800099c:	200613b4 	.word	0x200613b4

080009a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>

080009a2 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80009a2:	4770      	bx	lr

080009a4 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80009a4:	f001 bc4c 	b.w	8002240 <touchgfx_init>

080009a8 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80009a8:	f001 bcba 	b.w	8002320 <touchgfx_taskEntry>

080009ac <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <BSP_PB_Init+0x60>)
 80009ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009b0:	f042 0201 	orr.w	r2, r2, #1
    {
 80009b4:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
    {
 80009b8:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 80009c4:	b959      	cbnz	r1, 80009de <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 80009c6:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 80009c8:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009ca:	4811      	ldr	r0, [pc, #68]	; (8000a10 <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80009cc:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009d0:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009d2:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009d4:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009d6:	f007 f8fb 	bl	8007bd0 <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 80009da:	b006      	add	sp, #24
 80009dc:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 80009de:	2901      	cmp	r1, #1
 80009e0:	d1fb      	bne.n	80009da <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009e2:	2400      	movs	r4, #0
 80009e4:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 80009e6:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009e8:	a901      	add	r1, sp, #4
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009ec:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80009f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f4:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009f6:	f007 f8eb 	bl	8007bd0 <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80009fa:	4622      	mov	r2, r4
 80009fc:	210f      	movs	r1, #15
 80009fe:	2006      	movs	r0, #6
 8000a00:	f006 f968 	bl	8006cd4 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000a04:	2006      	movs	r0, #6
 8000a06:	f006 f997 	bl	8006d38 <HAL_NVIC_EnableIRQ>
    }
 8000a0a:	e7e6      	b.n	80009da <BSP_PB_Init+0x2e>
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000

08000a14 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000a14:	2100      	movs	r1, #0
{
 8000a16:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000a18:	4608      	mov	r0, r1
 8000a1a:	f7ff ffc7 	bl	80009ac <BSP_PB_Init>
}
 8000a1e:	bd08      	pop	{r3, pc}

08000a20 <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a20:	2101      	movs	r1, #1
 8000a22:	4802      	ldr	r0, [pc, #8]	; (8000a2c <BSP_PB_GetState+0xc>)
    {
 8000a24:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a26:	f007 fa59 	bl	8007edc <HAL_GPIO_ReadPin>
    }
 8000a2a:	bd08      	pop	{r3, pc}
 8000a2c:	40020000 	.word	0x40020000

08000a30 <_ZN8touchgfx7Buttons6sampleEv>:
{
 8000a30:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fff4 	bl	8000a20 <BSP_PB_GetState>
}
 8000a38:	bd08      	pop	{r3, pc}

08000a3a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8000a3a:	6840      	ldr	r0, [r0, #4]
    }
 8000a3c:	4770      	bx	lr

08000a3e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8000a3e:	6041      	str	r1, [r0, #4]
    }
 8000a40:	4770      	bx	lr
	...

08000a44 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000a44:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8000a46:	6813      	ldr	r3, [r2, #0]
 8000a48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a4c:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000a4e:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8000a54:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 8000a58:	3a4c      	subs	r2, #76	; 0x4c
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000a5e:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6013      	str	r3, [r2, #0]
}
 8000a6a:	4770      	bx	lr
 8000a6c:	e000edfc 	.word	0xe000edfc
 8000a70:	c5acce55 	.word	0xc5acce55

08000a74 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000a74:	1a51      	subs	r1, r2, r1
 8000a76:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8000a7a:	fbb1 f0f3 	udiv	r0, r1, r3
 8000a7e:	4770      	bx	lr

08000a80 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000a80:	4b01      	ldr	r3, [pc, #4]	; (8000a88 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000a82:	6818      	ldr	r0, [r3, #0]
}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e0001004 	.word	0xe0001004

08000a8c <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000a8c:	4770      	bx	lr

08000a8e <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000a8e:	b510      	push	{r4, lr}
 8000a90:	4604      	mov	r4, r0
 8000a92:	210c      	movs	r1, #12
 8000a94:	f024 fab5 	bl	8025002 <_ZdlPvj>
 8000a98:	4620      	mov	r0, r4
 8000a9a:	bd10      	pop	{r4, pc}

08000a9c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 8000a9c:	6803      	ldr	r3, [r0, #0]
{
 8000a9e:	b510      	push	{r4, lr}
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000aa4:	b131      	cbz	r1, 8000ab4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000aa6:	4798      	blx	r3
 8000aa8:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8000aaa:	6863      	ldr	r3, [r4, #4]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4418      	add	r0, r3
 8000ab0:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000ab2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000ab4:	4798      	blx	r3
 8000ab6:	60a0      	str	r0, [r4, #8]
}
 8000ab8:	e7fb      	b.n	8000ab2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08000aba <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8000aba:	4770      	bx	lr

08000abc <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8000abc:	4770      	bx	lr
	...

08000ac0 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000ac0:	b508      	push	{r3, lr}
    Buttons::init();
 8000ac2:	f7ff ffa7 	bl	8000a14 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 8000ac6:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	bd08      	pop	{r3, pc}
 8000ace:	bf00      	nop
 8000ad0:	20043f6c 	.word	0x20043f6c

08000ad4 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000ad8:	f7ff ffaa 	bl	8000a30 <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 8000ade:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000ae0:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000ae2:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000ae4:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000ae6:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 8000aea:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 8000aec:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 8000aee:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000af0:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000af2:	d00a      	beq.n	8000b0a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000af4:	f016 0001 	ands.w	r0, r6, #1
 8000af8:	d007      	beq.n	8000b0a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000afa:	f011 0001 	ands.w	r0, r1, #1
 8000afe:	d004      	beq.n	8000b0a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 8000b00:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 8000b02:	bf56      	itet	pl
 8000b04:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000b06:	2000      	movmi	r0, #0
        key = 1;
 8000b08:	7028      	strbpl	r0, [r5, #0]
}
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	20043f6c 	.word	0x20043f6c

08000b10 <_ZN8touchgfx10KeySamplerD0Ev>:
 8000b10:	b510      	push	{r4, lr}
 8000b12:	4604      	mov	r4, r0
 8000b14:	2104      	movs	r1, #4
 8000b16:	f024 fa74 	bl	8025002 <_ZdlPvj>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	bd10      	pop	{r4, pc}

08000b1e <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000b1e:	4770      	bx	lr

08000b20 <_ZN20STM32TouchControllerD0Ev>:
 8000b20:	b510      	push	{r4, lr}
 8000b22:	4604      	mov	r4, r0
 8000b24:	2104      	movs	r1, #4
 8000b26:	f024 fa6c 	bl	8025002 <_ZdlPvj>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	bd10      	pop	{r4, pc}

08000b2e <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 8000b2e:	4770      	bx	lr

08000b30 <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 8000b30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b32:	2301      	movs	r3, #1
    {
 8000b34:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000b40:	f10d 0217 	add.w	r2, sp, #23
 8000b44:	9200      	str	r2, [sp, #0]
 8000b46:	460a      	mov	r2, r1
 8000b48:	4601      	mov	r1, r0
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <TS_IO_Write+0x34>)
 8000b4c:	f007 fbd6 	bl	80082fc <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8000b50:	b120      	cbz	r0, 8000b5c <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <TS_IO_Write+0x34>)
 8000b54:	f007 fbb9 	bl	80082ca <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000b58:	f002 fb68 	bl	800322c <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 8000b5c:	b007      	add	sp, #28
 8000b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b62:	bf00      	nop
 8000b64:	20060fb0 	.word	0x20060fb0

08000b68 <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 8000b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 8000b6a:	2300      	movs	r3, #0
    {
 8000b6c:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        uint8_t read_value = 0;
 8000b72:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b76:	2301      	movs	r3, #1
 8000b78:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8000b7c:	f10d 0117 	add.w	r1, sp, #23
 8000b80:	9100      	str	r1, [sp, #0]
 8000b82:	4601      	mov	r1, r0
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <TS_IO_Read+0x38>)
 8000b86:	f007 fc6f 	bl	8008468 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000b8a:	b120      	cbz	r0, 8000b96 <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <TS_IO_Read+0x38>)
 8000b8e:	f007 fb9c 	bl	80082ca <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000b92:	f002 fb4b 	bl	800322c <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 8000b96:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000b9a:	b007      	add	sp, #28
 8000b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ba0:	20060fb0 	.word	0x20060fb0

08000ba4 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 8000ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000ba6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000baa:	9200      	str	r2, [sp, #0]
 8000bac:	460a      	mov	r2, r1
 8000bae:	4601      	mov	r1, r0
 8000bb0:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <TS_IO_ReadMultiple+0x2c>)
 8000bb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f007 fc56 	bl	8008468 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	b120      	cbz	r0, 8000bca <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <TS_IO_ReadMultiple+0x2c>)
 8000bc2:	f007 fb82 	bl	80082ca <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000bc6:	f002 fb31 	bl	800322c <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 8000bca:	b2a0      	uxth	r0, r4
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd10      	pop	{r4, pc}
 8000bd0:	20060fb0 	.word	0x20060fb0

08000bd4 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000bd8:	4d17      	ldr	r5, [pc, #92]	; (8000c38 <BSP_TS_Init+0x64>)
    {
 8000bda:	4604      	mov	r4, r0
        ft6x06_ts_drv.Init(I2C_Address);
 8000bdc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8000c40 <BSP_TS_Init+0x6c>
    {
 8000be0:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	46a9      	mov	r9, r5
 8000be6:	f898 0000 	ldrb.w	r0, [r8]
 8000bea:	4646      	mov	r6, r8
 8000bec:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000bee:	686b      	ldr	r3, [r5, #4]
 8000bf0:	2054      	movs	r0, #84	; 0x54
 8000bf2:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 8000bf4:	b2c0      	uxtb	r0, r0
 8000bf6:	2811      	cmp	r0, #17
 8000bf8:	d00b      	beq.n	8000c12 <BSP_TS_Init+0x3e>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000bfa:	686b      	ldr	r3, [r5, #4]
 8000bfc:	2070      	movs	r0, #112	; 0x70
 8000bfe:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000c00:	2370      	movs	r3, #112	; 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000c02:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000c04:	f888 3000 	strb.w	r3, [r8]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000c08:	2811      	cmp	r0, #17
 8000c0a:	d005      	beq.n	8000c18 <BSP_TS_Init+0x44>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 8000c0c:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 8000c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000c12:	2354      	movs	r3, #84	; 0x54
 8000c14:	f888 3000 	strb.w	r3, [r8]
                ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 8000c18:	42bc      	cmp	r4, r7
 8000c1a:	bf34      	ite	cc
 8000c1c:	2101      	movcc	r1, #1
 8000c1e:	210c      	movcs	r1, #12
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <BSP_TS_Init+0x68>)
                ft6x06_ts_drv.Reset(I2C_Address);
 8000c22:	7830      	ldrb	r0, [r6, #0]
 8000c24:	7019      	strb	r1, [r3, #0]
 8000c26:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8000c2a:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 8000c2c:	7830      	ldrb	r0, [r6, #0]
 8000c2e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8000c32:	4798      	blx	r3
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7ea      	b.n	8000c0e <BSP_TS_Init+0x3a>
 8000c38:	20000038 	.word	0x20000038
 8000c3c:	20043f71 	.word	0x20043f71
 8000c40:	20043f70 	.word	0x20043f70

08000c44 <_ZN20STM32TouchController4initEv>:
{
 8000c44:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 8000c46:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000c4a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c4e:	f7ff ffc1 	bl	8000bd4 <BSP_TS_Init>
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_ZN20STM32TouchController4initEv+0x2c>)
 8000c54:	b910      	cbnz	r0, 8000c5c <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
}
 8000c5a:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1fb      	bne.n	8000c5a <_ZN20STM32TouchController4initEv+0x16>
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <_ZN20STM32TouchController4initEv+0x30>)
 8000c64:	2168      	movs	r1, #104	; 0x68
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <_ZN20STM32TouchController4initEv+0x34>)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <_ZN20STM32TouchController4initEv+0x38>)
 8000c6a:	f024 fb9d 	bl	80253a8 <__assert_func>
 8000c6e:	bf00      	nop
 8000c70:	20043f72 	.word	0x20043f72
 8000c74:	0802655c 	.word	0x0802655c
 8000c78:	0802656f 	.word	0x0802656f
 8000c7c:	08026599 	.word	0x08026599

08000c80 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c84:	4d35      	ldr	r5, [pc, #212]	; (8000d5c <BSP_TS_GetState+0xdc>)
{
 8000c86:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c88:	4c35      	ldr	r4, [pc, #212]	; (8000d60 <BSP_TS_GetState+0xe0>)
{
 8000c8a:	4607      	mov	r7, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c8c:	7828      	ldrb	r0, [r5, #0]
 8000c8e:	6923      	ldr	r3, [r4, #16]
 8000c90:	46a0      	mov	r8, r4
 8000c92:	4798      	blx	r3
 8000c94:	9501      	str	r5, [sp, #4]
 8000c96:	7038      	strb	r0, [r7, #0]
    if (TS_State->touchDetected)
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d05a      	beq.n	8000d52 <BSP_TS_GetState+0xd2>
 8000c9c:	4e31      	ldr	r6, [pc, #196]	; (8000d64 <BSP_TS_GetState+0xe4>)
 8000c9e:	f107 0a02 	add.w	sl, r7, #2
 8000ca2:	4d31      	ldr	r5, [pc, #196]	; (8000d68 <BSP_TS_GetState+0xe8>)
 8000ca4:	f10d 0b0c 	add.w	fp, sp, #12
 8000ca8:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 8000caa:	f04f 0900 	mov.w	r9, #0
 8000cae:	783b      	ldrb	r3, [r7, #0]
 8000cb0:	454b      	cmp	r3, r9
 8000cb2:	d94e      	bls.n	8000d52 <BSP_TS_GetState+0xd2>
        {
            /* Get each touch coordinates */
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000cb4:	9801      	ldr	r0, [sp, #4]
 8000cb6:	465a      	mov	r2, fp
 8000cb8:	4621      	mov	r1, r4
 8000cba:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8000cbe:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000cc0:	f109 0901 	add.w	r9, r9, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000cc4:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_XY)
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <BSP_TS_GetState+0xec>)
 8000cc8:	46b4      	mov	ip, r6
 8000cca:	46ae      	mov	lr, r5
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	3604      	adds	r6, #4
 8000cd0:	3504      	adds	r5, #4
 8000cd2:	0719      	lsls	r1, r3, #28
            {
                tmp = Raw_x[index];
 8000cd4:	bf41      	itttt	mi
 8000cd6:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000cd8:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 8000cdc:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 8000ce0:	8021      	strhmi	r1, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_X)
 8000ce2:	079a      	lsls	r2, r3, #30
            {
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000ce4:	bf41      	itttt	mi
 8000ce6:	8822      	ldrhmi	r2, [r4, #0]
 8000ce8:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 8000cec:	3203      	addmi	r2, #3
 8000cee:	8022      	strhmi	r2, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_Y)
 8000cf0:	075b      	lsls	r3, r3, #29
            {
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
            }

            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000cf2:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000cf6:	bf48      	it	mi
 8000cf8:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000cfc:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000d00:	bf42      	ittt	mi
 8000d02:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 8000d06:	3301      	addmi	r3, #1
 8000d08:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000d0c:	b293      	uxth	r3, r2
 8000d0e:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d10:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000d14:	bf8c      	ite	hi
 8000d16:	1ac3      	subhi	r3, r0, r3
 8000d18:	1a1b      	subls	r3, r3, r0
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	9300      	str	r3, [sp, #0]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d1e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4299      	cmp	r1, r3

            if ((xDiff + yDiff) > 5)
 8000d26:	9b00      	ldr	r3, [sp, #0]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d28:	bf8c      	ite	hi
 8000d2a:	1a8a      	subhi	r2, r1, r2
 8000d2c:	1a52      	subls	r2, r2, r1
 8000d2e:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000d30:	441a      	add	r2, r3
 8000d32:	2a05      	cmp	r2, #5
            {
                _x[index] = Raw_x[index];
 8000d34:	bfc8      	it	gt
 8000d36:	f846 0c04 	strgt.w	r0, [r6, #-4]
                _y[index] = Raw_y[index];
            }


            TS_State->touchX[index] = _x[index];
 8000d3a:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000d3e:	bfc8      	it	gt
 8000d40:	f845 1c04 	strgt.w	r1, [r5, #-4]
            TS_State->touchX[index] = _x[index];
 8000d44:	f82a 3b02 	strh.w	r3, [sl], #2
            TS_State->touchY[index] = _y[index];
 8000d48:	f8de 3000 	ldr.w	r3, [lr]
 8000d4c:	f8aa 3002 	strh.w	r3, [sl, #2]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000d50:	e7ad      	b.n	8000cae <BSP_TS_GetState+0x2e>
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 8000d52:	2000      	movs	r0, #0
 8000d54:	b005      	add	sp, #20
 8000d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20043f70 	.word	0x20043f70
 8000d60:	20000038 	.word	0x20000038
 8000d64:	20043f74 	.word	0x20043f74
 8000d68:	20043f7c 	.word	0x20043f7c
 8000d6c:	20043f71 	.word	0x20043f71

08000d70 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000d70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000d74:	460e      	mov	r6, r1
 8000d76:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000d78:	781c      	ldrb	r4, [r3, #0]
 8000d7a:	b15c      	cbz	r4, 8000d94 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
        BSP_TS_GetState(&state);
 8000d7c:	a801      	add	r0, sp, #4
 8000d7e:	f7ff ff7f 	bl	8000c80 <BSP_TS_GetState>
        if (state.touchDetected)
 8000d82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d86:	b143      	cbz	r3, 8000d9a <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
            x = state.touchX[0];
 8000d88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d8c:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000d8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000d92:	602b      	str	r3, [r5, #0]
}
 8000d94:	4620      	mov	r0, r4
 8000d96:	b004      	add	sp, #16
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	e7fa      	b.n	8000d94 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 8000d9e:	bf00      	nop
 8000da0:	20043f72 	.word	0x20043f72

08000da4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000da4:	b110      	cbz	r0, 8000dac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 8000da6:	2801      	cmp	r0, #1
 8000da8:	d009      	beq.n	8000dbe <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8000daa:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8000dae:	2140      	movs	r1, #64	; 0x40
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8000dba:	f007 b895 	b.w	8007ee8 <HAL_GPIO_WritePin>
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	0952      	lsrs	r2, r2, #5
 8000dca:	e7f5      	b.n	8000db8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8000dcc:	20043f84 	.word	0x20043f84
 8000dd0:	40020800 	.word	0x40020800

08000dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000dd4:	b110      	cbz	r0, 8000ddc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 8000dd6:	2801      	cmp	r0, #1
 8000dd8:	d009      	beq.n	8000dee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8000dda:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	3a00      	subs	r2, #0
 8000de4:	bf18      	it	ne
 8000de6:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8000dea:	f007 b87d 	b.w	8007ee8 <HAL_GPIO_WritePin>
 8000dee:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	3a00      	subs	r2, #0
 8000df6:	bf18      	it	ne
 8000df8:	2201      	movne	r2, #1
 8000dfa:	e7f5      	b.n	8000de8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 8000dfc:	20043f84 	.word	0x20043f84
 8000e00:	40020800 	.word	0x40020800

08000e04 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000e04:	b110      	cbz	r0, 8000e0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 8000e06:	2801      	cmp	r0, #1
 8000e08:	d004      	beq.n	8000e14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8000e0a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000e0c:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000e0e:	4802      	ldr	r0, [pc, #8]	; (8000e18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 8000e10:	f007 b86f 	b.w	8007ef2 <HAL_GPIO_TogglePin>
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	e7fa      	b.n	8000e0e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 8000e18:	40020800 	.word	0x40020800

08000e1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000e1c:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000e1e:	b130      	cbz	r0, 8000e2e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8000e20:	2801      	cmp	r0, #1
 8000e22:	d009      	beq.n	8000e38 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 8000e24:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000e26:	1e43      	subs	r3, r0, #1
 8000e28:	4258      	negs	r0, r3
 8000e2a:	4158      	adcs	r0, r3
 8000e2c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000e2e:	2140      	movs	r1, #64	; 0x40
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 8000e32:	f007 f853 	bl	8007edc <HAL_GPIO_ReadPin>
        break;
 8000e36:	e7f6      	b.n	8000e26 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	e7f9      	b.n	8000e30 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 8000e3c:	40020800 	.word	0x40020800

08000e40 <_ZN8touchgfx4GPIO4initEv>:
{
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	4d08      	ldr	r5, [pc, #32]	; (8000e64 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000e44:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000e46:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000e48:	b2e0      	uxtb	r0, r4
 8000e4a:	f7ff ffe7 	bl	8000e1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000e4e:	b118      	cbz	r0, 8000e58 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000e54:	bf18      	it	ne
 8000e56:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000e58:	3401      	adds	r4, #1
 8000e5a:	3504      	adds	r5, #4
 8000e5c:	2c05      	cmp	r4, #5
 8000e5e:	d1f3      	bne.n	8000e48 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
 8000e62:	bf00      	nop
 8000e64:	20043f84 	.word	0x20043f84

08000e68 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000e68:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000e6a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000e6e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000e72:	4770      	bx	lr

08000e74 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8000e74:	2000      	movs	r0, #0
 8000e76:	4770      	bx	lr

08000e78 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000e78:	2000      	movs	r0, #0
 8000e7a:	4770      	bx	lr

08000e7c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000e7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000e7e:	b10b      	cbz	r3, 8000e84 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000e80:	4608      	mov	r0, r1
 8000e82:	4718      	bx	r3
        }
    }
 8000e84:	4770      	bx	lr

08000e86 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000e86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e8a:	4770      	bx	lr

08000e8c <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000e8c:	6840      	ldr	r0, [r0, #4]
 8000e8e:	6803      	ldr	r3, [r0, #0]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4718      	bx	r3

08000e94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000e94:	4b01      	ldr	r3, [pc, #4]	; (8000e9c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20043f94 	.word	0x20043f94

08000ea0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000ea0:	4770      	bx	lr
	...

08000ea4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000ea6:	2300      	movs	r3, #0
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000ea8:	b4f0      	push	{r4, r5, r6, r7}
 8000eaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000eb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000eb6:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eba:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ebe:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000ec2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ec4:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ec8:	462c      	mov	r4, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000eca:	ea4c 7784 	orr.w	r7, ip, r4, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ece:	3c01      	subs	r4, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ed0:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8000ed4:	d2f9      	bcs.n	8000eca <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000ed6:	3b20      	subs	r3, #32
 8000ed8:	f113 0f20 	cmn.w	r3, #32
 8000edc:	d1f2      	bne.n	8000ec4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ee2:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000ee6:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000ee8:	f001 bb1e 	b.w	8002528 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000ef4:	f001 fbb8 	bl	8002668 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000ef8:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8000efc:	b113      	cbz	r3, 8000f04 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000efe:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
    }
}
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	bf00      	nop
 8000f08:	20000014 	.word	0x20000014

08000f0c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000f0c:	f001 ba6d 	b.w	80023ea <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000f10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000f10:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d803      	bhi.n	8000f22 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d905      	bls.n	8000f2e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000f24:	219e      	movs	r1, #158	; 0x9e
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000f2a:	f024 fa3d 	bl	80253a8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000f30:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000f34:	801a      	strh	r2, [r3, #0]
    }
 8000f36:	bd08      	pop	{r3, pc}
 8000f38:	20060c24 	.word	0x20060c24
 8000f3c:	20060c26 	.word	0x20060c26
 8000f40:	080265f4 	.word	0x080265f4
 8000f44:	08026657 	.word	0x08026657
 8000f48:	0802669a 	.word	0x0802669a
 8000f4c:	20060c2a 	.word	0x20060c2a
 8000f50:	20060c2c 	.word	0x20060c2c

08000f54 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000f54:	b510      	push	{r4, lr}
 8000f56:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000f58:	f00e fde2 	bl	800fb20 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 8000f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000f68:	4718      	bx	r3

08000f6a <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000f6a:	f00d bf9d 	b.w	800eea8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000f6e <_ZN11TouchGFXHALD0Ev>:
 8000f6e:	b510      	push	{r4, lr}
 8000f70:	4604      	mov	r4, r0
 8000f72:	217c      	movs	r1, #124	; 0x7c
 8000f74:	f024 f845 	bl	8025002 <_ZdlPvj>
 8000f78:	4620      	mov	r0, r4
 8000f7a:	bd10      	pop	{r4, pc}

08000f7c <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000f82:	f00d bfcd 	b.w	800ef20 <_ZN8touchgfx3HAL10beginFrameEv>
 8000f86:	bf00      	nop
 8000f88:	20000014 	.word	0x20000014

08000f8c <_ZN11TouchGFXHAL10initializeEv>:
{
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	4604      	mov	r4, r0
    GPIO::init();
 8000f90:	f7ff ff56 	bl	8000e40 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8000f94:	4d08      	ldr	r5, [pc, #32]	; (8000fb8 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 8000f96:	4620      	mov	r0, r4
 8000f98:	f001 fa3a 	bl	8002410 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000f9c:	2300      	movs	r3, #0
    instrumentation.init();
 8000f9e:	4628      	mov	r0, r5
 8000fa0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8000fa4:	f7ff fd4e 	bl	8000a44 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000fa8:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000faa:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000fac:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
        buttonController = btnCtrl;
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8000fb2:	6163      	str	r3, [r4, #20]
}
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20043f9c 	.word	0x20043f9c
 8000fbc:	20043fa8 	.word	0x20043fa8

08000fc0 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000fc0:	6803      	ldr	r3, [r0, #0]
{
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8000fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fc8:	4798      	blx	r3
    enableInterrupts();
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	4620      	mov	r0, r4
 8000fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fd0:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8000fd2:	f000 feed 	bl	8001db0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	4620      	mov	r0, r4
 8000fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fdc:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2329      	movs	r3, #41	; 0x29
 8000fe2:	2215      	movs	r2, #21
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8000fe6:	9100      	str	r1, [sp, #0]
 8000fe8:	f006 fd6b 	bl	8007ac2 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000fec:	f000 fee0 	bl	8001db0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ff6:	4798      	blx	r3
    for (;;)
 8000ff8:	e7f8      	b.n	8000fec <_ZN11TouchGFXHAL9taskEntryEv+0x2c>
 8000ffa:	bf00      	nop
 8000ffc:	20061020 	.word	0x20061020

08001000 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8001000:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8001002:	f001 f9e1 	bl	80023c8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2107      	movs	r1, #7
 800100a:	205a      	movs	r0, #90	; 0x5a
 800100c:	f005 fe62 	bl	8006cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2107      	movs	r1, #7
 8001014:	2062      	movs	r0, #98	; 0x62
}
 8001016:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800101a:	f005 be5b 	b.w	8006cd4 <HAL_NVIC_SetPriority>

0800101e <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 800101e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001022:	b11b      	cbz	r3, 800102c <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001024:	6840      	ldr	r0, [r0, #4]
 8001026:	6803      	ldr	r3, [r0, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4718      	bx	r3
    }
 800102c:	4618      	mov	r0, r3
 800102e:	4770      	bx	lr

08001030 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001030:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001036:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001038:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	428c      	cmp	r4, r1
 8001040:	d009      	beq.n	8001056 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001042:	b93a      	cbnz	r2, 8001054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001044:	490a      	ldr	r1, [pc, #40]	; (8001070 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001048:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800104a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 800104c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800104e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001050:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001052:	701a      	strb	r2, [r3, #0]
        }
    }
 8001054:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001056:	2a00      	cmp	r2, #0
 8001058:	d0fc      	beq.n	8001054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800105c:	4904      	ldr	r1, [pc, #16]	; (8001070 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800105e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001060:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001062:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001064:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001066:	2200      	movs	r2, #0
 8001068:	e7f3      	b.n	8001052 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800106a:	bf00      	nop
 800106c:	20060c28 	.word	0x20060c28
 8001070:	20060c26 	.word	0x20060c26
 8001074:	20060c24 	.word	0x20060c24

08001078 <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 8001078:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 800107a:	f001 f9ad 	bl	80023d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	4b03      	ldr	r3, [pc, #12]	; (800108c <_ZN11TouchGFXHAL16enableInterruptsEv+0x14>)
 8001080:	2204      	movs	r2, #4
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001088:	609a      	str	r2, [r3, #8]
}
 800108a:	bd08      	pop	{r3, pc}
 800108c:	e000e100 	.word	0xe000e100

08001090 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8001090:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8001092:	f001 fb0d 	bl	80026b0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_ZN11TouchGFXHAL17disableInterruptsEv+0x28>)
 8001098:	2204      	movs	r2, #4
 800109a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 800109e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010a2:	f3bf 8f6f 	isb	sy
 80010a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80010ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010b2:	f3bf 8f6f 	isb	sy
}
 80010b6:	bd08      	pop	{r3, pc}
 80010b8:	e000e100 	.word	0xe000e100

080010bc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80010bc:	b510      	push	{r4, lr}
    currFbBase = (uint16_t*)frameBuffer;
 80010be:	4c0c      	ldr	r4, [pc, #48]	; (80010f0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 80010c0:	6021      	str	r1, [r4, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80010c2:	b931      	cbnz	r1, 80010d2 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x16>
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 80010c6:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 80010ce:	f024 f96b 	bl	80253a8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80010d2:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80010d6:	3a00      	subs	r2, #0
 80010d8:	4909      	ldr	r1, [pc, #36]	; (8001100 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80010da:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80010dc:	bf18      	it	ne
 80010de:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80010e0:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80010e2:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80010e4:	bf18      	it	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x48>)
 80010ea:	7013      	strb	r3, [r2, #0]
}
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	bf00      	nop
 80010f0:	20043f94 	.word	0x20043f94
 80010f4:	080266df 	.word	0x080266df
 80010f8:	08026717 	.word	0x08026717
 80010fc:	0802669a 	.word	0x0802669a
 8001100:	20060c2e 	.word	0x20060c2e
 8001104:	20060c2f 	.word	0x20060c2f

08001108 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001108:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800110c:	60c3      	str	r3, [r0, #12]
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	2300      	movs	r3, #0
 8001114:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001118:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800111a:	8503      	strh	r3, [r0, #40]	; 0x28
 800111c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001120:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001122:	8603      	strh	r3, [r0, #48]	; 0x30
 8001124:	6603      	str	r3, [r0, #96]	; 0x60
 8001126:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 800112a:	6703      	str	r3, [r0, #112]	; 0x70
 800112c:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	6742      	str	r2, [r0, #116]	; 0x74
 8001138:	2201      	movs	r2, #1
                           height)
 800113a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 800113e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001142:	3520      	adds	r5, #32
 8001144:	e9c0 3304 	strd	r3, r3, [r0, #16]
              inProgress(false)
 8001148:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800114c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001150:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001154:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001158:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 800115c:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001160:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8001164:	b2ad      	uxth	r5, r5
        instance = this;
 8001166:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001168:	42b5      	cmp	r5, r6
        instance = this;
 800116a:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 800116e:	8015      	strh	r5, [r2, #0]
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001172:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001174:	bf28      	it	cs
 8001176:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800117a:	bf38      	it	cc
 800117c:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800117e:	8016      	strh	r6, [r2, #0]
 8001180:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001182:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001186:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001188:	4a08      	ldr	r2, [pc, #32]	; (80011ac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 800118a:	7013      	strb	r3, [r2, #0]
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 800118e:	6003      	str	r3, [r0, #0]
}
 8001190:	bd70      	pop	{r4, r5, r6, pc}
 8001192:	bf00      	nop
 8001194:	01000001 	.word	0x01000001
 8001198:	20060c30 	.word	0x20060c30
 800119c:	20060c24 	.word	0x20060c24
 80011a0:	20060c2a 	.word	0x20060c2a
 80011a4:	20060c26 	.word	0x20060c26
 80011a8:	20060c2c 	.word	0x20060c2c
 80011ac:	20060c28 	.word	0x20060c28
 80011b0:	08026770 	.word	0x08026770

080011b4 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 80011b4:	f005 bb34 	b.w	8006820 <HAL_Delay>

080011b8 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 80011b8:	2801      	cmp	r0, #1
    {
 80011ba:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 80011bc:	d80a      	bhi.n	80011d4 <DSI_IO_WriteCmd+0x1c>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 80011be:	784b      	ldrb	r3, [r1, #1]
 80011c0:	2215      	movs	r2, #21
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <DSI_IO_WriteCmd+0x30>)
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	780b      	ldrb	r3, [r1, #0]
 80011c8:	2100      	movs	r1, #0
 80011ca:	f006 fc7a 	bl	8007ac2 <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 80011ce:	b003      	add	sp, #12
 80011d0:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 80011d4:	9101      	str	r1, [sp, #4]
 80011d6:	2239      	movs	r2, #57	; 0x39
 80011d8:	5c0b      	ldrb	r3, [r1, r0]
 80011da:	2100      	movs	r1, #0
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4603      	mov	r3, r0
 80011e0:	4801      	ldr	r0, [pc, #4]	; (80011e8 <DSI_IO_WriteCmd+0x30>)
 80011e2:	f006 fc7f 	bl	8007ae4 <HAL_DSI_LongWrite>
    }
 80011e6:	e7f2      	b.n	80011ce <DSI_IO_WriteCmd+0x16>
 80011e8:	20061020 	.word	0x20061020

080011ec <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80011ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 80011ee:	2302      	movs	r3, #2
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 80011f2:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80011f4:	4c0a      	ldr	r4, [pc, #40]	; (8001220 <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 80011f6:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80011f8:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 80011fa:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80011fc:	4620      	mov	r0, r4
 80011fe:	9201      	str	r2, [sp, #4]
 8001200:	2244      	movs	r2, #68	; 0x44
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	2239      	movs	r2, #57	; 0x39
 8001206:	f006 fc6d 	bl	8007ae4 <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800120a:	2100      	movs	r1, #0
 800120c:	2335      	movs	r3, #53	; 0x35
 800120e:	462a      	mov	r2, r5
 8001210:	4620      	mov	r0, r4
 8001212:	9100      	str	r1, [sp, #0]
 8001214:	f006 fc55 	bl	8007ac2 <HAL_DSI_ShortWrite>
    }
 8001218:	b003      	add	sp, #12
 800121a:	bd30      	pop	{r4, r5, pc}
 800121c:	20043fac 	.word	0x20043fac
 8001220:	20061020 	.word	0x20061020

08001224 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001224:	b507      	push	{r0, r1, r2, lr}
 8001226:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 8001228:	f7ff ffe0 	bl	80011ec <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 800122e:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001230:	9801      	ldr	r0, [sp, #4]
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001238:	2201      	movs	r2, #1
 800123a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 800123e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800124a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800124e:	f042 0202 	orr.w	r2, r2, #2
 8001252:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800125c:	f043 0303 	orr.w	r3, r3, #3
 8001260:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001262:	b003      	add	sp, #12
 8001264:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001268:	f001 b8be 	b.w	80023e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 800126c:	20061020 	.word	0x20061020
 8001270:	2006103c 	.word	0x2006103c

08001274 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <LCD_SetUpdateRegion+0x20>)
    {
 8001276:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001278:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800127c:	232a      	movs	r3, #42	; 0x2a
 800127e:	2239      	movs	r2, #57	; 0x39
 8001280:	2100      	movs	r1, #0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2304      	movs	r3, #4
 8001286:	9001      	str	r0, [sp, #4]
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <LCD_SetUpdateRegion+0x24>)
 800128a:	f006 fc2b 	bl	8007ae4 <HAL_DSI_LongWrite>
    }
 800128e:	b003      	add	sp, #12
 8001290:	f85d fb04 	ldr.w	pc, [sp], #4
 8001294:	20000004 	.word	0x20000004
 8001298:	20061020 	.word	0x20061020

0800129c <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 800129c:	b570      	push	{r4, r5, r6, lr}
        return instance;
 800129e:	4d15      	ldr	r5, [pc, #84]	; (80012f4 <HAL_DSI_TearingEffectCallback+0x58>)
 80012a0:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fd7e 	bl	8000da4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80012a8:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 80012aa:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80012ae:	3301      	adds	r3, #1
 80012b0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80012b4:	f000 fd70 	bl	8001d98 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 80012ba:	6828      	ldr	r0, [r5, #0]
 80012bc:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80012be:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 80012c0:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 80012c4:	b123      	cbz	r3, 80012d0 <HAL_DSI_TearingEffectCallback+0x34>
 80012c6:	4d0d      	ldr	r5, [pc, #52]	; (80012fc <HAL_DSI_TearingEffectCallback+0x60>)
 80012c8:	782b      	ldrb	r3, [r5, #0]
 80012ca:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80012ce:	b123      	cbz	r3, 80012da <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 80012d0:	2000      	movs	r0, #0
        }
    }
 80012d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80012d6:	f7ff bd7d 	b.w	8000dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 80012da:	f00e fc21 	bl	800fb20 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 80012e0:	4630      	mov	r0, r6
            updateRegion = 0;
 80012e2:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 80012e4:	f7ff ffc6 	bl	8001274 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 80012e8:	4620      	mov	r0, r4
 80012ea:	f006 fbda 	bl	8007aa2 <HAL_DSI_Refresh>
            displayRefreshing = true;
 80012ee:	2301      	movs	r3, #1
 80012f0:	702b      	strb	r3, [r5, #0]
    }
 80012f2:	bd70      	pop	{r4, r5, r6, pc}
 80012f4:	20060c30 	.word	0x20060c30
 80012f8:	20000014 	.word	0x20000014
 80012fc:	20043fae 	.word	0x20043fae
 8001300:	20043f98 	.word	0x20043f98

08001304 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <HAL_DSI_EndOfRefreshCallback+0xc4>)
 8001306:	4a31      	ldr	r2, [pc, #196]	; (80013cc <HAL_DSI_EndOfRefreshCallback+0xc8>)
    {
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	4605      	mov	r5, r0
        updateRegion++;
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	4c30      	ldr	r4, [pc, #192]	; (80013d0 <HAL_DSI_EndOfRefreshCallback+0xcc>)
 8001310:	3001      	adds	r0, #1
 8001312:	6018      	str	r0, [r3, #0]
        if (updateRegion < 4)
 8001314:	2803      	cmp	r0, #3
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 8001318:	681e      	ldr	r6, [r3, #0]
 800131a:	dc2a      	bgt.n	8001372 <HAL_DSI_EndOfRefreshCallback+0x6e>
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800131c:	f8d4 1404 	ldr.w	r1, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001320:	f44f 73c8 	mov.w	r3, #400	; 0x190
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001324:	f021 0108 	bic.w	r1, r1, #8
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001328:	fb03 6300 	mla	r3, r3, r0, r6
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800132c:	f8c4 1404 	str.w	r1, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001330:	6293      	str	r3, [r2, #40]	; 0x28

            uint16_t REAL_WIDTH = 200;
            uint16_t ADJUSTED_WIDTH = 200;
            if (updateRegion == 3)
            {
                ADJUSTED_WIDTH += 32;
 8001332:	bf0c      	ite	eq
 8001334:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 8001336:	23c8      	movne	r3, #200	; 0xc8
            }

            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 8001338:	4927      	ldr	r1, [pc, #156]	; (80013d8 <HAL_DSI_EndOfRefreshCallback+0xd4>)
 800133a:	3302      	adds	r3, #2
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 8001342:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_DSI_EndOfRefreshCallback+0xd8>)
 8001346:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001348:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800134c:	6053      	str	r3, [r2, #4]
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_DSI_EndOfRefreshCallback+0xdc>)
 8001350:	62d3      	str	r3, [r2, #44]	; 0x2c

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001352:	2301      	movs	r3, #1
 8001354:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 8001356:	f7ff ff8d 	bl	8001274 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_DSI_EndOfRefreshCallback+0xcc>)
            HAL_DSI_Refresh(hdsi);
 800135c:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 800135e:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8001362:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 8001366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 800136a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            HAL_DSI_Refresh(hdsi);
 800136e:	f006 bb98 	b.w	8007aa2 <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001372:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            LCD_SetUpdateRegion(0);
 8001376:	2000      	movs	r0, #0
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001378:	491a      	ldr	r1, [pc, #104]	; (80013e4 <HAL_DSI_EndOfRefreshCallback+0xe0>)
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800137a:	f023 0308 	bic.w	r3, r3, #8
 800137e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_DSI_EndOfRefreshCallback+0xd4>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 8001384:	6296      	str	r6, [r2, #40]	; 0x28
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001386:	6119      	str	r1, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001388:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 800138c:	6159      	str	r1, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 800138e:	4916      	ldr	r1, [pc, #88]	; (80013e8 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 8001390:	6051      	str	r1, [r2, #4]
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 8001392:	4913      	ldr	r1, [pc, #76]	; (80013e0 <HAL_DSI_EndOfRefreshCallback+0xdc>)
 8001394:	62d1      	str	r1, [r2, #44]	; 0x2c
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001396:	2201      	movs	r2, #1
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 800139a:	f7ff ff6b 	bl	8001274 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 800139e:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 80013a2:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 80013ac:	f7ff fd12 	bl	8000dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_DSI_EndOfRefreshCallback+0xe8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
        return instance;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_DSI_EndOfRefreshCallback+0xec>)
 80013b8:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 80013ba:	b120      	cbz	r0, 80013c6 <HAL_DSI_EndOfRefreshCallback+0xc2>
        allowDMATransfers();
 80013bc:	6803      	ldr	r3, [r0, #0]
    }
 80013be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4718      	bx	r3
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
 80013c8:	20043f98 	.word	0x20043f98
 80013cc:	40016884 	.word	0x40016884
 80013d0:	40016c00 	.word	0x40016c00
 80013d4:	20043f94 	.word	0x20043f94
 80013d8:	40016800 	.word	0x40016800
 80013dc:	00ca01e3 	.word	0x00ca01e3
 80013e0:	06800193 	.word	0x06800193
 80013e4:	00ca01e2 	.word	0x00ca01e2
 80013e8:	00ca0003 	.word	0x00ca0003
 80013ec:	20043fae 	.word	0x20043fae
 80013f0:	20060c30 	.word	0x20060c30

080013f4 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 80013f4:	4601      	mov	r1, r0
 80013f6:	b508      	push	{r3, lr}
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <IdleTaskHook+0x14>)
 80013fa:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80013fc:	b101      	cbz	r1, 8001400 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80013fe:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001400:	f00e fba8 	bl	800fb54 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001404:	2001      	movs	r0, #1
 8001406:	bd08      	pop	{r3, pc}
 8001408:	20060c30 	.word	0x20060c30

0800140c <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <_GLOBAL__sub_I_displayRefreshing+0x18>)
 800140e:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_GLOBAL__sub_I_displayRefreshing+0x20>)
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 800141c:	6003      	str	r3, [r0, #0]
        init();
 800141e:	f7ff bb4f 	b.w	8000ac0 <_ZN8touchgfx10KeySampler4initEv>
 8001422:	bf00      	nop
 8001424:	20043f9c 	.word	0x20043f9c
 8001428:	20043fa8 	.word	0x20043fa8
 800142c:	08026520 	.word	0x08026520
 8001430:	08026548 	.word	0x08026548

08001434 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8001434:	6940      	ldr	r0, [r0, #20]
 8001436:	4770      	bx	lr

08001438 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    AVIErrors getLastError() { return lastError; }
 8001438:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800143c:	4770      	bx	lr

0800143e <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800143e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001440:	b923      	cbnz	r3, 800144c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8001442:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001444:	3800      	subs	r0, #0
 8001446:	bf18      	it	ne
 8001448:	2001      	movne	r0, #1
 800144a:	4770      	bx	lr
 800144c:	2001      	movs	r0, #1
}
 800144e:	4770      	bx	lr

08001450 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8001450:	6880      	ldr	r0, [r0, #8]
 8001452:	4770      	bx	lr

08001454 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8001454:	4770      	bx	lr

08001456 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8001456:	3004      	adds	r0, #4
{
 8001458:	b510      	push	{r4, lr}
 800145a:	460c      	mov	r4, r1
    *data = videoInfo;
 800145c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800145e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001462:	bd10      	pop	{r4, pc}

08001464 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8001464:	4770      	bx	lr
	...

08001468 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001468:	b508      	push	{r3, lr}
    assert(0);
 800146a:	4a03      	ldr	r2, [pc, #12]	; (8001478 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 800146c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8001474:	f023 ff98 	bl	80253a8 <__assert_func>
 8001478:	08026838 	.word	0x08026838
 800147c:	0802bd6e 	.word	0x0802bd6e
 8001480:	08026893 	.word	0x08026893

08001484 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8001484:	b510      	push	{r4, lr}
 8001486:	4604      	mov	r4, r0
 8001488:	2144      	movs	r1, #68	; 0x44
 800148a:	f023 fdba 	bl	8025002 <_ZdlPvj>
 800148e:	4620      	mov	r0, r4
 8001490:	bd10      	pop	{r4, pc}
	...

08001494 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001494:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001496:	2500      	movs	r5, #0
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800149a:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800149c:	6003      	str	r3, [r0, #0]
 800149e:	63c5      	str	r5, [r0, #60]	; 0x3c
 80014a0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
 80014a4:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80014a8:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80014ac:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 80014b0:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
 80014b4:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
 80014b8:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 80014bc:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 80014c0:	f001 fcde 	bl	8002e80 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 80014c4:	462a      	mov	r2, r5
 80014c6:	4629      	mov	r1, r5
 80014c8:	2001      	movs	r0, #1
 80014ca:	f00a f807 	bl	800b4dc <osSemaphoreNew>
 80014ce:	4b03      	ldr	r3, [pc, #12]	; (80014dc <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 80014d0:	6018      	str	r0, [r3, #0]
}
 80014d2:	4620      	mov	r0, r4
 80014d4:	bd38      	pop	{r3, r4, r5, pc}
 80014d6:	bf00      	nop
 80014d8:	08026b10 	.word	0x08026b10
 80014dc:	20043fe0 	.word	0x20043fe0

080014e0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80014e0:	b420      	push	{r5}
 80014e2:	460d      	mov	r5, r1
 80014e4:	4611      	mov	r1, r2
 80014e6:	461a      	mov	r2, r3
    if (reader != 0)
 80014e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80014ea:	b13b      	cbz	r3, 80014fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80014ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80014ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80014f0:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 80014f2:	4428      	add	r0, r5
}
 80014f4:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 80014f8:	f024 bbda 	b.w	8025cb0 <strncmp>
        src = (const char*)movieData + offset;
 80014fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80014fe:	e7f8      	b.n	80014f2 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08001500 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8001500:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8001502:	b510      	push	{r4, lr}
    if (reader != 0)
 8001504:	b173      	cbz	r3, 8001524 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8001506:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 8001508:	6b42      	ldr	r2, [r0, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800150a:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 800150c:	1853      	adds	r3, r2, r1
 800150e:	5c52      	ldrb	r2, [r2, r1]
 8001510:	7898      	ldrb	r0, [r3, #2]
 8001512:	785c      	ldrb	r4, [r3, #1]
 8001514:	0400      	lsls	r0, r0, #16
 8001516:	78db      	ldrb	r3, [r3, #3]
 8001518:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800151c:	4310      	orrs	r0, r2
 800151e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8001522:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8001524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001526:	5858      	ldr	r0, [r3, r1]
 8001528:	e7fb      	b.n	8001522 <_ZN20HardwareMJPEGDecoder6getU32Em+0x22>

0800152a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800152a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800152c:	b143      	cbz	r3, 8001540 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800152e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001530:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 8001532:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001534:	185a      	adds	r2, r3, r1
 8001536:	5c58      	ldrb	r0, [r3, r1]
 8001538:	7852      	ldrb	r2, [r2, #1]
 800153a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800153e:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8001540:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001542:	5a58      	ldrh	r0, [r3, r1]
}
 8001544:	4770      	bx	lr
	...

08001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	4604      	mov	r4, r0
    if (reader != 0)
 800154c:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 800154e:	460d      	mov	r5, r1
 8001550:	4616      	mov	r6, r2
    if (reader != 0)
 8001552:	b1d8      	cbz	r0, 800158c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8001554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001556:	4293      	cmp	r3, r2
 8001558:	d208      	bcs.n	800156c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800155a:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800155e:	21a9      	movs	r1, #169	; 0xa9
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001562:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            assert(!"Buffer to small");
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8001568:	f023 ff1e 	bl	80253a8 <__assert_func>
        reader->seek(offset);
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8001572:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001574:	4632      	mov	r2, r6
 8001576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001578:	6803      	ldr	r3, [r0, #0]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	4798      	blx	r3
 800157e:	b910      	cbnz	r0, 8001586 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8001580:	230d      	movs	r3, #13
 8001582:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
 8001586:	6b60      	ldr	r0, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
 8001588:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800158a:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 800158c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800158e:	4408      	add	r0, r1
 8001590:	e7fb      	b.n	800158a <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 8001592:	bf00      	nop
 8001594:	080268f1 	.word	0x080268f1
 8001598:	08026893 	.word	0x08026893
 800159c:	080268de 	.word	0x080268de

080015a0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80015a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80015a4:	6943      	ldr	r3, [r0, #20]
{
 80015a6:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80015a8:	b92b      	cbnz	r3, 80015b6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80015ac:	21ef      	movs	r1, #239	; 0xef
 80015ae:	4a22      	ldr	r2, [pc, #136]	; (8001638 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80015b0:	4822      	ldr	r0, [pc, #136]	; (800163c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80015b2:	f023 fef9 	bl	80253a8 <__assert_func>
    readData(currentMovieOffset, 8);
 80015b6:	2208      	movs	r2, #8
 80015b8:	6981      	ldr	r1, [r0, #24]
 80015ba:	f7ff ffc5 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80015be:	69a1      	ldr	r1, [r4, #24]
 80015c0:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80015c2:	f243 0730 	movw	r7, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80015c6:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80015c8:	f246 3664 	movw	r6, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80015cc:	f7ff ff98 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80015d0:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80015d2:	69a1      	ldr	r1, [r4, #24]
 80015d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015d6:	440d      	add	r5, r1
 80015d8:	f105 0208 	add.w	r2, r5, #8
 80015dc:	429a      	cmp	r2, r3
 80015de:	d222      	bcs.n	8001626 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
        frameNumber++;
 80015e0:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80015e2:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 80015e4:	2208      	movs	r2, #8
 80015e6:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80015e8:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 80015ec:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80015ee:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 80015f0:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 80015f2:	f7ff ffa9 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80015f6:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80015fa:	4620      	mov	r0, r4
 80015fc:	4641      	mov	r1, r8
 80015fe:	f7ff ff94 	bl	800152a <_ZN20HardwareMJPEGDecoder6getU16Em>
 8001602:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8001604:	f108 0104 	add.w	r1, r8, #4
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff ff79 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800160e:	45b9      	cmp	r9, r7
        chunkSize = getU32(currentMovieOffset + 4);
 8001610:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001612:	d1de      	bne.n	80015d2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001614:	f108 0102 	add.w	r1, r8, #2
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff ff86 	bl	800152a <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800161e:	42b0      	cmp	r0, r6
 8001620:	d1d7      	bne.n	80015d2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 8001622:	2001      	movs	r0, #1
 8001624:	e004      	b.n	8001630 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x90>
    frameNumber = 1;
 8001626:	2301      	movs	r3, #1
    return false;
 8001628:	2000      	movs	r0, #0
    frameNumber = 1;
 800162a:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 800162c:	6a23      	ldr	r3, [r4, #32]
 800162e:	61a3      	str	r3, [r4, #24]
}
 8001630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001634:	08026933 	.word	0x08026933
 8001638:	0802697c 	.word	0x0802697c
 800163c:	08026893 	.word	0x08026893

08001640 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber==0)
 8001640:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8001642:	6803      	ldr	r3, [r0, #0]
 8001644:	bf38      	it	cc
 8001646:	2101      	movcc	r1, #1
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 800164a:	b570      	push	{r4, r5, r6, lr}
 800164c:	460d      	mov	r5, r1
 800164e:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8001650:	4798      	blx	r3
 8001652:	42a8      	cmp	r0, r5
 8001654:	d204      	bcs.n	8001660 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	4620      	mov	r0, r4
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	4798      	blx	r3
 800165e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001660:	1e6b      	subs	r3, r5, #1
 8001662:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8001664:	2210      	movs	r2, #16
 8001666:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8001668:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 800166c:	f106 0108 	add.w	r1, r6, #8
 8001670:	f7ff ff6a 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001674:	f106 0110 	add.w	r1, r6, #16
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff ff41 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800167e:	6a23      	ldr	r3, [r4, #32]
 8001680:	3b04      	subs	r3, #4
 8001682:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8001684:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8001688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
 800168c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8001690:	2100      	movs	r1, #0
{
 8001692:	4604      	mov	r4, r0
    readData(0, 72);
 8001694:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 8001696:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8001698:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    readData(0, 72);
 800169c:	f7ff ff54 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80016a0:	69a7      	ldr	r7, [r4, #24]
 80016a2:	2304      	movs	r3, #4
 80016a4:	4a64      	ldr	r2, [pc, #400]	; (8001838 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80016a6:	4639      	mov	r1, r7
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff ff19 	bl	80014e0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80016ae:	b148      	cbz	r0, 80016c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80016b0:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80016b2:	4a62      	ldr	r2, [pc, #392]	; (800183c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80016b4:	f240 1137 	movw	r1, #311	; 0x137
        lastError = AVI_ERROR_NOT_RIFF;
 80016b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"RIFF header not found");
 80016bc:	4b60      	ldr	r3, [pc, #384]	; (8001840 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
        assert(!"AVI header not found");
 80016be:	4861      	ldr	r0, [pc, #388]	; (8001844 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80016c0:	f023 fe72 	bl	80253a8 <__assert_func>
    currentMovieOffset += 8;
 80016c4:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80016c8:	2304      	movs	r3, #4
 80016ca:	4a5f      	ldr	r2, [pc, #380]	; (8001848 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80016cc:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80016ce:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80016d0:	f7ff ff06 	bl	80014e0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80016d4:	b138      	cbz	r0, 80016e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80016d6:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80016d8:	4a58      	ldr	r2, [pc, #352]	; (800183c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80016da:	f240 113f 	movw	r1, #319	; 0x13f
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80016de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI header not found");
 80016e2:	4b5a      	ldr	r3, [pc, #360]	; (800184c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80016e4:	e7eb      	b.n	80016be <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80016e6:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80016ea:	2304      	movs	r3, #4
 80016ec:	4a58      	ldr	r2, [pc, #352]	; (8001850 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80016ee:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80016f0:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80016f2:	f7ff fef5 	bl	80014e0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80016f6:	4606      	mov	r6, r0
 80016f8:	b138      	cbz	r0, 800170a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80016fa:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80016fc:	4a4f      	ldr	r2, [pc, #316]	; (800183c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80016fe:	f44f 71a3 	mov.w	r1, #326	; 0x146
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001702:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI LIST not found");
 8001706:	4b53      	ldr	r3, [pc, #332]	; (8001854 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8001708:	e7d9      	b.n	80016be <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800170a:	f107 0110 	add.w	r1, r7, #16
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff fef6 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8001714:	4605      	mov	r5, r0
 8001716:	b920      	cbnz	r0, 8001722 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8001718:	4b4f      	ldr	r3, [pc, #316]	; (8001858 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 800171a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800171e:	4a47      	ldr	r2, [pc, #284]	; (800183c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8001720:	e7cd      	b.n	80016be <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 8001722:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 8001726:	2304      	movs	r3, #4
 8001728:	4a4c      	ldr	r2, [pc, #304]	; (800185c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800172a:	4620      	mov	r0, r4
 800172c:	4641      	mov	r1, r8
 800172e:	f7ff fed7 	bl	80014e0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001732:	2800      	cmp	r0, #0
 8001734:	d04b      	beq.n	80017ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8001736:	2306      	movs	r3, #6
 8001738:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (compare(offset, "avih", 4))
 800173c:	2304      	movs	r3, #4
 800173e:	4a48      	ldr	r2, [pc, #288]	; (8001860 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 8001740:	f107 0118 	add.w	r1, r7, #24
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff fecb 	bl	80014e0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800174a:	2800      	cmp	r0, #0
 800174c:	d041      	beq.n	80017d2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800174e:	2307      	movs	r3, #7
 8001750:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001754:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001756:	4f43      	ldr	r7, [pc, #268]	; (8001864 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
    readData(listOffset, 12);
 8001758:	220c      	movs	r2, #12
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7ff fef3 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001762:	f105 0608 	add.w	r6, r5, #8
 8001766:	2304      	movs	r3, #4
 8001768:	463a      	mov	r2, r7
 800176a:	4620      	mov	r0, r4
 800176c:	4631      	mov	r1, r6
 800176e:	f7ff feb7 	bl	80014e0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001772:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001776:	2800      	cmp	r0, #0
 8001778:	d04a      	beq.n	8001810 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d14a      	bne.n	8001814 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x188>
 800177e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001780:	1d29      	adds	r1, r5, #4
 8001782:	42ab      	cmp	r3, r5
 8001784:	d84a      	bhi.n	800181c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x190>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001786:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800178a:	1d29      	adds	r1, r5, #4
 800178c:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800178e:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001790:	9101      	str	r1, [sp, #4]
 8001792:	f7ff feb5 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001796:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001798:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800179a:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset+4)+8;
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff feaf 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80017a2:	4406      	add	r6, r0
    readData(listOffset, 4);
 80017a4:	2204      	movs	r2, #4
 80017a6:	4620      	mov	r0, r4
 80017a8:	4631      	mov	r1, r6
 80017aa:	f7ff fecd 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80017ae:	2304      	movs	r3, #4
 80017b0:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1dc>)
 80017b2:	4631      	mov	r1, r6
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fe93 	bl	80014e0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017ba:	2800      	cmp	r0, #0
 80017bc:	d139      	bne.n	8001832 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a6>
    frameNumber = 1; //next frame number is 1
 80017be:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80017c0:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 80017c2:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80017c4:	69a3      	ldr	r3, [r4, #24]
 80017c6:	6223      	str	r3, [r4, #32]
}
 80017c8:	b002      	add	sp, #8
 80017ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80017ce:	2601      	movs	r6, #1
 80017d0:	e7b4      	b.n	800173c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80017d2:	2e00      	cmp	r6, #0
 80017d4:	d0be      	beq.n	8001754 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset)/1000;
 80017d6:	f107 0120 	add.w	r1, r7, #32
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fe90 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80017e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80017e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
 80017e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80017ec:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff fe86 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80017f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80017f8:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff fe80 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8001800:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8001804:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff fe7a 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800180c:	6120      	str	r0, [r4, #16]
 800180e:	e7a1      	b.n	8001754 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0b8      	beq.n	8001786 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfa>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8001814:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8001816:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return;
 800181a:	e7d5      	b.n	80017c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13c>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff fe6f 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001822:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8001824:	220c      	movs	r2, #12
        listOffset += listSize;
 8001826:	4405      	add	r5, r0
        readData(listOffset, 12);
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7ff fe8c 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001830:	e797      	b.n	8001762 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8001832:	230b      	movs	r3, #11
 8001834:	e7ef      	b.n	8001816 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18a>
 8001836:	bf00      	nop
 8001838:	080269af 	.word	0x080269af
 800183c:	080269cd 	.word	0x080269cd
 8001840:	080269b4 	.word	0x080269b4
 8001844:	08026893 	.word	0x08026893
 8001848:	080269fa 	.word	0x080269fa
 800184c:	080269ff 	.word	0x080269ff
 8001850:	08026a17 	.word	0x08026a17
 8001854:	08026a1c 	.word	0x08026a1c
 8001858:	08026a32 	.word	0x08026a32
 800185c:	08026a3e 	.word	0x08026a3e
 8001860:	08026a43 	.word	0x08026a43
 8001864:	08026a48 	.word	0x08026a48
 8001868:	08026a4d 	.word	0x08026a4d

0800186c <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 800186c:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8001870:	2200      	movs	r2, #0
 8001872:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8001874:	f7ff bf0a 	b.w	800168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08001878 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8001878:	b510      	push	{r4, lr}
    movieData = 0;
 800187a:	2300      	movs	r3, #0
{
 800187c:	4604      	mov	r4, r0
 800187e:	4608      	mov	r0, r1
    movieData = 0;
 8001880:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8001882:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8001884:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4798      	blx	r3
 800188a:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 800188c:	4620      	mov	r0, r4
}
 800188e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8001892:	f7ff befb 	b.w	800168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08001898 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
//  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8001898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    FrameBufferAddress = output;
 800189a:	4c25      	ldr	r4, [pc, #148]	; (8001930 <JPEG_Decode_DMA+0x98>)
    Output_Is_Paused = 0;
    JPEG_OUT_Read_BufferIndex = 0;
    JPEG_OUT_Write_BufferIndex = 0;
    JPEG_InputImageIndex = 0;
 800189c:	4d25      	ldr	r5, [pc, #148]	; (8001934 <JPEG_Decode_DMA+0x9c>)
    FrameBufferAddress = output;
 800189e:	6023      	str	r3, [r4, #0]
    Output_Is_Paused = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	4c25      	ldr	r4, [pc, #148]	; (8001938 <JPEG_Decode_DMA+0xa0>)
    JPEG_InputImageIndex = 0;
 80018a4:	602b      	str	r3, [r5, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 80018a6:	4d25      	ldr	r5, [pc, #148]	; (800193c <JPEG_Decode_DMA+0xa4>)
    Output_Is_Paused = 0;
 80018a8:	6023      	str	r3, [r4, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 80018aa:	6029      	str	r1, [r5, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 80018ac:	4d24      	ldr	r5, [pc, #144]	; (8001940 <JPEG_Decode_DMA+0xa8>)
    JPEG_OUT_Read_BufferIndex = 0;
 80018ae:	4c25      	ldr	r4, [pc, #148]	; (8001944 <JPEG_Decode_DMA+0xac>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 80018b0:	602a      	str	r2, [r5, #0]
    MCU_BlockIndex = 0;
 80018b2:	4a25      	ldr	r2, [pc, #148]	; (8001948 <JPEG_Decode_DMA+0xb0>)
    JPEG_OUT_Read_BufferIndex = 0;
 80018b4:	6023      	str	r3, [r4, #0]
    MCU_BlockIndex = 0;
 80018b6:	6013      	str	r3, [r2, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 80018b8:	4c24      	ldr	r4, [pc, #144]	; (800194c <JPEG_Decode_DMA+0xb4>)

    /* Clean DCache prior to hw JPEG access to data. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80018ba:	4a25      	ldr	r2, [pc, #148]	; (8001950 <JPEG_Decode_DMA+0xb8>)
    JPEG_OUT_Write_BufferIndex = 0;
 80018bc:	6023      	str	r3, [r4, #0]
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80018be:	6955      	ldr	r5, [r2, #20]
 80018c0:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80018c4:	4625      	mov	r5, r4
 80018c6:	d01d      	beq.n	8001904 <JPEG_Decode_DMA+0x6c>
     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80018c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80018cc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80018d0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 80018d4:	f643 77e0 	movw	r7, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80018d8:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80018dc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80018e0:	015b      	lsls	r3, r3, #5
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 80018e2:	ea03 0e07 	and.w	lr, r3, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80018e6:	4634      	mov	r4, r6
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 80018e8:	ea4e 7c84 	orr.w	ip, lr, r4, lsl #30
      } while (ways-- != 0U);
 80018ec:	3c01      	subs	r4, #1
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 80018ee:	f8c2 c26c 	str.w	ip, [r2, #620]	; 0x26c
      } while (ways-- != 0U);
 80018f2:	d2f9      	bcs.n	80018e8 <JPEG_Decode_DMA+0x50>
    } while(sets-- != 0U);
 80018f4:	3b20      	subs	r3, #32
 80018f6:	f113 0f20 	cmn.w	r3, #32
 80018fa:	d1f2      	bne.n	80018e2 <JPEG_Decode_DMA+0x4a>
 80018fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001900:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache();
    }

    //Init buffers
    Jpeg_OUT_BufferTab[0].State = JPEG_BUFFER_EMPTY;
 8001904:	2400      	movs	r4, #0
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <JPEG_Decode_DMA+0xbc>)
    Jpeg_OUT_BufferTab[0].DataBufferSize = 0;
    Jpeg_OUT_BufferTab[1].State = JPEG_BUFFER_EMPTY;
    Jpeg_OUT_BufferTab[1].DataBufferSize = 0;

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, CHUNK_SIZE_OUT ); //How large should chunks be?
 8001908:	682a      	ldr	r2, [r5, #0]
 800190a:	250c      	movs	r5, #12
    Jpeg_OUT_BufferTab[0].State = JPEG_BUFFER_EMPTY;
 800190c:	701c      	strb	r4, [r3, #0]
    Jpeg_OUT_BufferTab[0].DataBufferSize = 0;
 800190e:	609c      	str	r4, [r3, #8]
    Jpeg_OUT_BufferTab[1].State = JPEG_BUFFER_EMPTY;
 8001910:	731c      	strb	r4, [r3, #12]
    Jpeg_OUT_BufferTab[1].DataBufferSize = 0;
 8001912:	615c      	str	r4, [r3, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, CHUNK_SIZE_OUT ); //How large should chunks be?
 8001914:	fb05 3302 	mla	r3, r5, r2, r3
 8001918:	f44f 7240 	mov.w	r2, #768	; 0x300
 800191c:	9200      	str	r2, [sp, #0]
 800191e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f007 f9ee 	bl	8008d04 <HAL_JPEG_Decode_DMA>

   return 0;
}
 8001928:	4620      	mov	r0, r4
 800192a:	b003      	add	sp, #12
 800192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192e:	bf00      	nop
 8001930:	20043fb0 	.word	0x20043fb0
 8001934:	20043fb8 	.word	0x20043fb8
 8001938:	20043fd8 	.word	0x20043fd8
 800193c:	20043fb4 	.word	0x20043fb4
 8001940:	20043fbc 	.word	0x20043fbc
 8001944:	20043fc0 	.word	0x20043fc0
 8001948:	20043fd0 	.word	0x20043fd0
 800194c:	20043fc4 	.word	0x20043fc4
 8001950:	e000ed00 	.word	0xe000ed00
 8001954:	20000018 	.word	0x20000018

08001958 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001958:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800195a:	684b      	ldr	r3, [r1, #4]
{
 800195c:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800195e:	2b01      	cmp	r3, #1
 8001960:	d119      	bne.n	8001996 <HAL_JPEG_InfoReadyCallback+0x3e>
  {
    if((pInfo->ImageWidth % 16) != 0)
 8001962:	68cb      	ldr	r3, [r1, #12]
 8001964:	071a      	lsls	r2, r3, #28
    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));

    if((pInfo->ImageHeight % 16) != 0)
    pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));

     HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001966:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_JPEG_InfoReadyCallback+0x88>)
    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001968:	bf1e      	ittt	ne
 800196a:	f023 030f 	bicne.w	r3, r3, #15
 800196e:	3310      	addne	r3, #16
 8001970:	60cb      	strne	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
 8001972:	688b      	ldr	r3, [r1, #8]
 8001974:	0719      	lsls	r1, r3, #28
     HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001976:	491b      	ldr	r1, [pc, #108]	; (80019e4 <HAL_JPEG_InfoReadyCallback+0x8c>)
    pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001978:	bf1e      	ittt	ne
 800197a:	f023 030f 	bicne.w	r3, r3, #15
 800197e:	3310      	addne	r3, #16
 8001980:	6083      	strne	r3, [r0, #8]
     HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001982:	f001 fa19 	bl	8002db8 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 8001986:	b348      	cbz	r0, 80019dc <HAL_JPEG_InfoReadyCallback+0x84>
    {
      assert(status == HAL_OK);
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_JPEG_InfoReadyCallback+0x90>)
 800198a:	f240 2125 	movw	r1, #549	; 0x225
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_JPEG_InfoReadyCallback+0x94>)
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
    if(status != HAL_OK)
    {
      assert(status == HAL_OK);
 8001990:	4817      	ldr	r0, [pc, #92]	; (80019f0 <HAL_JPEG_InfoReadyCallback+0x98>)
 8001992:	f023 fd09 	bl	80253a8 <__assert_func>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001996:	2b02      	cmp	r3, #2
 8001998:	d117      	bne.n	80019ca <HAL_JPEG_InfoReadyCallback+0x72>
      if((pInfo->ImageWidth % 16) != 0)
 800199a:	68cb      	ldr	r3, [r1, #12]
 800199c:	071a      	lsls	r2, r3, #28
 800199e:	d003      	beq.n	80019a8 <HAL_JPEG_InfoReadyCallback+0x50>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80019a0:	f023 030f 	bic.w	r3, r3, #15
 80019a4:	3310      	adds	r3, #16
      pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80019a6:	60c3      	str	r3, [r0, #12]
      if((pInfo->ImageHeight % 8) != 0)
 80019a8:	6883      	ldr	r3, [r0, #8]
 80019aa:	075a      	lsls	r2, r3, #29
      pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80019ac:	bf1e      	ittt	ne
 80019ae:	f023 0307 	bicne.w	r3, r3, #7
 80019b2:	3308      	addne	r3, #8
 80019b4:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_JPEG_InfoReadyCallback+0x88>)
 80019b8:	490a      	ldr	r1, [pc, #40]	; (80019e4 <HAL_JPEG_InfoReadyCallback+0x8c>)
 80019ba:	f00c fa1b 	bl	800ddf4 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 80019be:	b168      	cbz	r0, 80019dc <HAL_JPEG_InfoReadyCallback+0x84>
      assert(status == HAL_OK);
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_JPEG_InfoReadyCallback+0x90>)
 80019c2:	f240 213f 	movw	r1, #575	; 0x23f
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_JPEG_InfoReadyCallback+0x94>)
 80019c8:	e7e2      	b.n	8001990 <HAL_JPEG_InfoReadyCallback+0x38>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f3      	bne.n	80019b6 <HAL_JPEG_InfoReadyCallback+0x5e>
      if((pInfo->ImageWidth % 8) != 0)
 80019ce:	68cb      	ldr	r3, [r1, #12]
 80019d0:	0759      	lsls	r1, r3, #29
 80019d2:	d0e9      	beq.n	80019a8 <HAL_JPEG_InfoReadyCallback+0x50>
      pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80019d4:	f023 0307 	bic.w	r3, r3, #7
 80019d8:	3308      	adds	r3, #8
 80019da:	e7e4      	b.n	80019a6 <HAL_JPEG_InfoReadyCallback+0x4e>
    }
  }
}
 80019dc:	bd08      	pop	{r3, pc}
 80019de:	bf00      	nop
 80019e0:	20043fd4 	.word	0x20043fd4
 80019e4:	20043fdc 	.word	0x20043fdc
 80019e8:	08026a52 	.word	0x08026a52
 80019ec:	08026a63 	.word	0x08026a63
 80019f0:	08026893 	.word	0x08026893

080019f4 <HAL_JPEG_GetDataCallback>:
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_JPEG_GetDataCallback+0x30>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	440a      	add	r2, r1
{
 80019fa:	b430      	push	{r4, r5}
  JPEG_InputImageIndex += NbDecodedData;
 80019fc:	601a      	str	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_JPEG_GetDataCallback+0x34>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d20c      	bcs.n	8001a20 <HAL_JPEG_GetDataCallback+0x2c>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a06:	4c09      	ldr	r4, [pc, #36]	; (8001a2c <HAL_JPEG_GetDataCallback+0x38>)
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001a08:	1a9a      	subs	r2, r3, r2
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a0a:	6825      	ldr	r5, [r4, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a0c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a10:	4429      	add	r1, r5
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a12:	bf28      	it	cs
 8001a14:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a18:	6021      	str	r1, [r4, #0]
  }
}
 8001a1a:	bc30      	pop	{r4, r5}
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a1c:	f007 b9d9 	b.w	8008dd2 <HAL_JPEG_ConfigInputBuffer>
}
 8001a20:	bc30      	pop	{r4, r5}
 8001a22:	4770      	bx	lr
 8001a24:	20043fb8 	.word	0x20043fb8
 8001a28:	20043fbc 	.word	0x20043fbc
 8001a2c:	20043fb4 	.word	0x20043fb4

08001a30 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001a32:	4c16      	ldr	r4, [pc, #88]	; (8001a8c <HAL_JPEG_DataReadyCallback+0x5c>)
 8001a34:	2701      	movs	r7, #1
 8001a36:	210c      	movs	r1, #12
{
 8001a38:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	4814      	ldr	r0, [pc, #80]	; (8001a90 <HAL_JPEG_DataReadyCallback+0x60>)
 8001a3e:	4359      	muls	r1, r3
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;

    JPEG_OUT_Write_BufferIndex++;
 8001a40:	443b      	add	r3, r7
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001a42:	42bb      	cmp	r3, r7
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001a44:	eb00 0601 	add.w	r6, r0, r1
 8001a48:	5447      	strb	r7, [r0, r1]
    {
      JPEG_OUT_Write_BufferIndex = 0;
 8001a4a:	bf88      	it	hi
 8001a4c:	2300      	movhi	r3, #0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8001a4e:	60b2      	str	r2, [r6, #8]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001a50:	220c      	movs	r2, #12
 8001a52:	4606      	mov	r6, r0
      JPEG_OUT_Write_BufferIndex = 0;
 8001a54:	6023      	str	r3, [r4, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	435a      	muls	r2, r3
 8001a5a:	5c83      	ldrb	r3, [r0, r2]
 8001a5c:	b133      	cbz	r3, 8001a6c <HAL_JPEG_DataReadyCallback+0x3c>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001a5e:	2102      	movs	r1, #2
 8001a60:	4628      	mov	r0, r5
 8001a62:	f007 f983 	bl	8008d6c <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_JPEG_DataReadyCallback+0x64>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, CHUNK_SIZE_OUT);
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	220c      	movs	r2, #12
 8001a70:	4628      	mov	r0, r5
 8001a72:	fb02 6303 	mla	r3, r2, r3, r6
 8001a76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	f007 f9ac 	bl	8008dd8 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_JPEG_DataReadyCallback+0x68>)
 8001a82:	6818      	ldr	r0, [r3, #0]
}
 8001a84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SEM_POST(semDecodingDone);
 8001a88:	f009 bdb8 	b.w	800b5fc <osSemaphoreRelease>
 8001a8c:	20043fc4 	.word	0x20043fc4
 8001a90:	20000018 	.word	0x20000018
 8001a94:	20043fd8 	.word	0x20043fd8
 8001a98:	20043fe0 	.word	0x20043fe0

08001a9c <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	4604      	mov	r4, r0
  HAL_JPEG_STATETypeDef  state = HAL_JPEG_GetState(hjpeg);
 8001aa0:	f007 fd2b 	bl	80094fa <HAL_JPEG_GetState>
  uint32_t error = HAL_JPEG_GetError(hjpeg);
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f007 fd2b 	bl	8009500 <HAL_JPEG_GetError>
  while(1){}
 8001aaa:	e7fe      	b.n	8001aaa <HAL_JPEG_ErrorCallback+0xe>

08001aac <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
  Jpeg_HWDecodingEnd = 1;
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	4770      	bx	lr
 8001ab4:	20043fcc 	.word	0x20043fcc

08001ab8 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finiched, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001ab8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001abc:	4c39      	ldr	r4, [pc, #228]	; (8001ba4 <JPEG_OutputHandler+0xec>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	4939      	ldr	r1, [pc, #228]	; (8001ba8 <JPEG_OutputHandler+0xf0>)
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	460d      	mov	r5, r1
 8001ac6:	4353      	muls	r3, r2
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d149      	bne.n	8001b62 <JPEG_OutputHandler+0xaa>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001ace:	4a37      	ldr	r2, [pc, #220]	; (8001bac <JPEG_OutputHandler+0xf4>)
 8001ad0:	6953      	ldr	r3, [r2, #20]
 8001ad2:	03db      	lsls	r3, r3, #15
 8001ad4:	d51e      	bpl.n	8001b14 <JPEG_OutputHandler+0x5c>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001adc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001ae0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ae4:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ae8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001aec:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001af0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001af2:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001af6:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001af8:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 8001afc:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001afe:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001b02:	d2f9      	bcs.n	8001af8 <JPEG_OutputHandler+0x40>
    } while(sets-- != 0U);
 8001b04:	3b20      	subs	r3, #32
 8001b06:	f113 0f20 	cmn.w	r3, #32
 8001b0a:	d1f2      	bne.n	8001af2 <JPEG_OutputHandler+0x3a>
 8001b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
    {
      SCB_CleanInvalidateDCache();
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b14:	260c      	movs	r6, #12
 8001b16:	4f26      	ldr	r7, [pc, #152]	; (8001bb0 <JPEG_OutputHandler+0xf8>)
 8001b18:	6820      	ldr	r0, [r4, #0]
 8001b1a:	eb0d 0306 	add.w	r3, sp, r6
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	fb06 5000 	mla	r0, r6, r0, r5
 8001b24:	4923      	ldr	r1, [pc, #140]	; (8001bb4 <JPEG_OutputHandler+0xfc>)
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <JPEG_OutputHandler+0x100>)
 8001b2a:	6809      	ldr	r1, [r1, #0]
 8001b2c:	f8d3 8000 	ldr.w	r8, [r3]
 8001b30:	6883      	ldr	r3, [r0, #8]
 8001b32:	6840      	ldr	r0, [r0, #4]
 8001b34:	47c0      	blx	r8

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b36:	6822      	ldr	r2, [r4, #0]
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b38:	683b      	ldr	r3, [r7, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b3a:	4356      	muls	r6, r2
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8001b3c:	3201      	adds	r2, #1
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b3e:	4418      	add	r0, r3
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b40:	2300      	movs	r3, #0
    JPEG_OUT_Read_BufferIndex++;
 8001b42:	2a01      	cmp	r2, #1
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b44:	eb05 0106 	add.w	r1, r5, r6
 8001b48:	55ab      	strb	r3, [r5, r6]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8001b4a:	608b      	str	r3, [r1, #8]
    JPEG_OUT_Read_BufferIndex++;
 8001b4c:	bf98      	it	ls
 8001b4e:	4613      	movls	r3, r2
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b50:	6038      	str	r0, [r7, #0]
    JPEG_OUT_Read_BufferIndex++;
 8001b52:	6023      	str	r3, [r4, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
    {
      JPEG_OUT_Read_BufferIndex = 0;
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <JPEG_OutputHandler+0x104>)
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d10f      	bne.n	8001b7e <JPEG_OutputHandler+0xc6>
    {
      return 1;
 8001b5e:	2001      	movs	r0, #1
 8001b60:	e018      	b.n	8001b94 <JPEG_OutputHandler+0xdc>
    }
  }
  else if((Output_Is_Paused == 1) && \
 8001b62:	4c17      	ldr	r4, [pc, #92]	; (8001bc0 <JPEG_OutputHandler+0x108>)
 8001b64:	6825      	ldr	r5, [r4, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8001b66:	2d01      	cmp	r5, #1
 8001b68:	d117      	bne.n	8001b9a <JPEG_OutputHandler+0xe2>
 8001b6a:	4d16      	ldr	r5, [pc, #88]	; (8001bc4 <JPEG_OutputHandler+0x10c>)
 8001b6c:	682d      	ldr	r5, [r5, #0]
 8001b6e:	436a      	muls	r2, r5
  else if((Output_Is_Paused == 1) && \
 8001b70:	5c8a      	ldrb	r2, [r1, r2]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	d111      	bne.n	8001b9a <JPEG_OutputHandler+0xe2>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
  {
    Output_Is_Paused = 0;
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001b76:	2102      	movs	r1, #2
    Output_Is_Paused = 0;
 8001b78:	6023      	str	r3, [r4, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001b7a:	f007 fb63 	bl	8009244 <HAL_JPEG_Resume>
  else
  {
    return 2;
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <JPEG_OutputHandler+0xf8>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <JPEG_OutputHandler+0x104>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d109      	bne.n	8001b9e <JPEG_OutputHandler+0xe6>
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <JPEG_OutputHandler+0x110>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	3800      	subs	r0, #0
 8001b90:	bf18      	it	ne
 8001b92:	2001      	movne	r0, #1
  {
    return 1;
  }

  return 0;
}
 8001b94:	b004      	add	sp, #16
 8001b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 2;
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	e7fa      	b.n	8001b94 <JPEG_OutputHandler+0xdc>
  return 0;
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	e7f8      	b.n	8001b94 <JPEG_OutputHandler+0xdc>
 8001ba2:	bf00      	nop
 8001ba4:	20043fc0 	.word	0x20043fc0
 8001ba8:	20000018 	.word	0x20000018
 8001bac:	e000ed00 	.word	0xe000ed00
 8001bb0:	20043fd0 	.word	0x20043fd0
 8001bb4:	20043fb0 	.word	0x20043fb0
 8001bb8:	20043fdc 	.word	0x20043fdc
 8001bbc:	20043fd4 	.word	0x20043fd4
 8001bc0:	20043fd8 	.word	0x20043fd8
 8001bc4:	20043fc4 	.word	0x20043fc4
 8001bc8:	20043fcc 	.word	0x20043fcc

08001bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8001bcc:	b570      	push	{r4, r5, r6, lr}
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001bce:	4c0c      	ldr	r4, [pc, #48]	; (8001c00 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x34>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8001bd0:	4613      	mov	r3, r2
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001bd2:	4e0c      	ldr	r6, [pc, #48]	; (8001c04 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x38>)
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	4625      	mov	r5, r4
 8001bd8:	4601      	mov	r1, r0
 8001bda:	480a      	ldr	r0, [pc, #40]	; (8001c04 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x38>)
 8001bdc:	f7ff fe5c 	bl	8001898 <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff ff69 	bl	8001ab8 <JPEG_OutputHandler>
        if (JpegProcessing_End == 2)
 8001be6:	2802      	cmp	r0, #2
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001be8:	6020      	str	r0, [r4, #0]
        if (JpegProcessing_End == 2)
 8001bea:	d105      	bne.n	8001bf8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x2c>
          SEM_WAIT(semDecodingDone);
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x3c>)
 8001bee:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	f009 fcc8 	bl	800b588 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d1f0      	bne.n	8001be0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x14>
}
 8001bfe:	bd70      	pop	{r4, r5, r6, pc}
 8001c00:	20043fc8 	.word	0x20043fc8
 8001c04:	2006112c 	.word	0x2006112c
 8001c08:	20043fe0 	.word	0x20043fe0

08001c0c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001c0c:	6943      	ldr	r3, [r0, #20]
{
 8001c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c12:	4604      	mov	r4, r0
 8001c14:	460e      	mov	r6, r1
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001c16:	b92b      	cbnz	r3, 8001c24 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x18>
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xac>)
 8001c1a:	21bb      	movs	r1, #187	; 0xbb
 8001c1c:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>)
 8001c1e:	4828      	ldr	r0, [pc, #160]	; (8001cc0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>)
 8001c20:	f023 fbc2 	bl	80253a8 <__assert_func>
    readData(currentMovieOffset, 8);
 8001c24:	2208      	movs	r2, #8
 8001c26:	6981      	ldr	r1, [r0, #24]
 8001c28:	f7ff fc8e 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001c2c:	69a7      	ldr	r7, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f107 0808 	add.w	r8, r7, #8
 8001c34:	1d39      	adds	r1, r7, #4
 8001c36:	f7ff fc63 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001c3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c3c:	eb00 0208 	add.w	r2, r0, r8
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001c40:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d22b      	bcs.n	8001c9e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001c46:	4639      	mov	r1, r7
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff fc6e 	bl	800152a <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001c4e:	f243 0330 	movw	r3, #12336	; 0x3030
 8001c52:	4298      	cmp	r0, r3
 8001c54:	d117      	bne.n	8001c86 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x7a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001c56:	1cb9      	adds	r1, r7, #2
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f7ff fc66 	bl	800152a <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001c5e:	f246 3364 	movw	r3, #25444	; 0x6364
 8001c62:	4298      	cmp	r0, r3
 8001c64:	d10f      	bne.n	8001c86 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x7a>
 8001c66:	b175      	cbz	r5, 8001c86 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x7a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001c68:	462a      	mov	r2, r5
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8001c6e:	f8c4 8018 	str.w	r8, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001c72:	f7ff fc69 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (outputBuffer) //only decode if buffers are assigned.
 8001c76:	b11e      	cbz	r6, 8001c80 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x74>
 8001c78:	4632      	mov	r2, r6
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7ff ffa6 	bl	8001bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
            frameNumber++;
 8001c80:	6963      	ldr	r3, [r4, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8001c86:	69a3      	ldr	r3, [r4, #24]
 8001c88:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8001c8a:	b185      	cbz	r5, 8001cae <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
          currentMovieOffset += 8;
 8001c8c:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001c8e:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001c90:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001c92:	3301      	adds	r3, #1
 8001c94:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001c98:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001c9a:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001c9c:	d109      	bne.n	8001cb2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa6>
        frameNumber = 1;
 8001c9e:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8001ca0:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8001ca2:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001ca4:	61a3      	str	r3, [r4, #24]
}
 8001ca6:	f080 0001 	eor.w	r0, r0, #1
 8001caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          currentMovieOffset += 8;
 8001cae:	3308      	adds	r3, #8
 8001cb0:	e7ec      	b.n	8001c8c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x80>
        isCurrentFrameLast = false;
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	e7f7      	b.n	8001ca6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x9a>
 8001cb6:	bf00      	nop
 8001cb8:	08026933 	.word	0x08026933
 8001cbc:	08026aab 	.word	0x08026aab
 8001cc0:	08026893 	.word	0x08026893

08001cc4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8001cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cc6:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8001cc8:	6981      	ldr	r1, [r0, #24]
{
 8001cca:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8001ccc:	2208      	movs	r2, #8
 8001cce:	f7ff fc3b 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001cd2:	69a6      	ldr	r6, [r4, #24]
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	1d31      	adds	r1, r6, #4
 8001cd8:	f7ff fc12 	bl	8001500 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001cdc:	f106 0108 	add.w	r1, r6, #8
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001ce0:	4602      	mov	r2, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001ce2:	9001      	str	r0, [sp, #4]
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fc2f 	bl	8001548 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001cea:	4601      	mov	r1, r0
    if (frameBuffer) //only decode if buffers are assigned.
 8001cec:	b165      	cbz	r5, 8001d08 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001cee:	462b      	mov	r3, r5
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001cf0:	4c07      	ldr	r4, [pc, #28]	; (8001d10 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001cf2:	4d08      	ldr	r5, [pc, #32]	; (8001d14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001cf4:	9a01      	ldr	r2, [sp, #4]
 8001cf6:	4807      	ldr	r0, [pc, #28]	; (8001d14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001cf8:	f7ff fdce 	bl	8001898 <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f7ff fedb 	bl	8001ab8 <JPEG_OutputHandler>
 8001d02:	6020      	str	r0, [r4, #0]
      while(JpegProcessing_End == 0);
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d0f9      	beq.n	8001cfc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001d08:	2001      	movs	r0, #1
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
 8001d0e:	bf00      	nop
 8001d10:	20043fc8 	.word	0x20043fc8
 8001d14:	2006112c 	.word	0x2006112c

08001d18 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2200      	movs	r2, #0
{
 8001d1c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d1e:	4608      	mov	r0, r1
 8001d20:	f009 fbdc 	bl	800b4dc <osSemaphoreNew>
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001d26:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001d28:	b928      	cbnz	r0, 8001d36 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001d2c:	2128      	movs	r1, #40	; 0x28
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d30:	480a      	ldr	r0, [pc, #40]	; (8001d5c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001d32:	f023 fb39 	bl	80253a8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2104      	movs	r1, #4
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f009 fc94 	bl	800b668 <osMessageQueueNew>
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001d42:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d44:	b918      	cbnz	r0, 8001d4e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001d4c:	e7f0      	b.n	8001d30 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001d4e:	bd08      	pop	{r3, pc}
 8001d50:	20043fe8 	.word	0x20043fe8
 8001d54:	08026b4c 	.word	0x08026b4c
 8001d58:	08026b95 	.word	0x08026b95
 8001d5c:	08026bc4 	.word	0x08026bc4
 8001d60:	20043fe4 	.word	0x20043fe4
 8001d64:	08026c05 	.word	0x08026c05

08001d68 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	f009 bc0a 	b.w	800b588 <osSemaphoreAcquire>
 8001d74:	20043fe8 	.word	0x20043fe8

08001d78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001d78:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	f009 bc3e 	b.w	800b5fc <osSemaphoreRelease>
 8001d80:	20043fe8 	.word	0x20043fe8

08001d84 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	f009 bbfd 	b.w	800b588 <osSemaphoreAcquire>
 8001d8e:	bf00      	nop
 8001d90:	20043fe8 	.word	0x20043fe8

08001d94 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001d94:	f7ff bff0 	b.w	8001d78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001d98 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001d9c:	4903      	ldr	r1, [pc, #12]	; (8001dac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6800      	ldr	r0, [r0, #0]
 8001da2:	f009 bca7 	b.w	800b6f4 <osMessageQueuePut>
 8001da6:	bf00      	nop
 8001da8:	20043fe4 	.word	0x20043fe4
 8001dac:	20000030 	.word	0x20000030

08001db0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001db0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001db2:	2300      	movs	r3, #0
 8001db4:	4c07      	ldr	r4, [pc, #28]	; (8001dd4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001db6:	a901      	add	r1, sp, #4
 8001db8:	461a      	mov	r2, r3
 8001dba:	6820      	ldr	r0, [r4, #0]
 8001dbc:	f009 fcdc 	bl	800b778 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	a901      	add	r1, sp, #4
 8001dc8:	6820      	ldr	r0, [r4, #0]
 8001dca:	f009 fcd5 	bl	800b778 <osMessageQueueGet>
}
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd10      	pop	{r4, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20043fe4 	.word	0x20043fe4

08001dd8 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001dd8:	6803      	ldr	r3, [r0, #0]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	4718      	bx	r3

08001dde <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001dde:	2001      	movs	r0, #1
 8001de0:	4770      	bx	lr

08001de2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001de2:	6803      	ldr	r3, [r0, #0]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	4718      	bx	r3

08001de8 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001dea:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
 8001df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001dfa:	9201      	str	r2, [sp, #4]
 8001dfc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e04:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001e0c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_ZN8STM32DMA10initializeEv+0x40>)
 8001e12:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <_ZN8STM32DMA10initializeEv+0x44>)
 8001e1a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001e1c:	b002      	add	sp, #8
 8001e1e:	4770      	bx	lr
 8001e20:	40023800 	.word	0x40023800
 8001e24:	20061234 	.word	0x20061234
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001e30:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001e34:	4770      	bx	lr
	...

08001e38 <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <DMA2D_XferCpltCallback+0xc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001e3e:	6803      	ldr	r3, [r0, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4718      	bx	r3
 8001e44:	20060c30 	.word	0x20060c30

08001e48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001e48:	b508      	push	{r3, lr}
 8001e4a:	280b      	cmp	r0, #11
 8001e4c:	d80b      	bhi.n	8001e66 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001e4e:	e8df f000 	tbb	[pc, r0]
 8001e52:	0612      	.short	0x0612
 8001e54:	0a0a0a10 	.word	0x0a0a0a10
 8001e58:	0808080a 	.word	0x0808080a
 8001e5c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e5e:	2001      	movs	r0, #1
}
 8001e60:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001e62:	2005      	movs	r0, #5
        break;
 8001e64:	e7fc      	b.n	8001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001e68:	2166      	movs	r1, #102	; 0x66
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001e6e:	f023 fa9b 	bl	80253a8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001e72:	2000      	movs	r0, #0
 8001e74:	e7f4      	b.n	8001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e76:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001e78:	e7f2      	b.n	8001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001e7a:	bf00      	nop
 8001e7c:	08026c47 	.word	0x08026c47
 8001e80:	08026c62 	.word	0x08026c62
 8001e84:	08026cac 	.word	0x08026cac

08001e88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001e88:	b508      	push	{r3, lr}
 8001e8a:	280a      	cmp	r0, #10
 8001e8c:	d809      	bhi.n	8001ea2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001e8e:	e8df f000 	tbb	[pc, r0]
 8001e92:	0610      	.short	0x0610
 8001e94:	0808080e 	.word	0x0808080e
 8001e98:	06060608 	.word	0x06060608
 8001e9c:	06          	.byte	0x06
 8001e9d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001e9e:	2001      	movs	r0, #1
}
 8001ea0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001ea4:	2187      	movs	r1, #135	; 0x87
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001ea8:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001eaa:	f023 fa7d 	bl	80253a8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001eae:	2000      	movs	r0, #0
 8001eb0:	e7f6      	b.n	8001ea0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001eb2:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001eb4:	e7f4      	b.n	8001ea0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001eb6:	bf00      	nop
 8001eb8:	08026c47 	.word	0x08026c47
 8001ebc:	08026ceb 	.word	0x08026ceb
 8001ec0:	08026cac 	.word	0x08026cac

08001ec4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ec8:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001ecc:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ece:	4640      	mov	r0, r8
 8001ed0:	f7ff ffba 	bl	8001e48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ed4:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ed6:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ed8:	4638      	mov	r0, r7
 8001eda:	f7ff ffb5 	bl	8001e48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001ede:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	f7ff ffd1 	bl	8001e88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ee6:	8aa1      	ldrh	r1, [r4, #20]
 8001ee8:	8b62      	ldrh	r2, [r4, #26]
 8001eea:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8001eec:	1a52      	subs	r2, r2, r1
 8001eee:	469e      	mov	lr, r3
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ef2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001ef4:	8b22      	ldrh	r2, [r4, #24]
 8001ef6:	1a52      	subs	r2, r2, r1
 8001ef8:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001efa:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001efc:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001efe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f02:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001f06:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f08:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001f0a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001f0c:	f8d4 c000 	ldr.w	ip, [r4]
 8001f10:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001f14:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8001f18:	ea4f 6209 	mov.w	r2, r9, lsl #24
 8001f1c:	d030      	beq.n	8001f80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8001f1e:	d814      	bhi.n	8001f4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x86>
 8001f20:	f1bc 0f20 	cmp.w	ip, #32
 8001f24:	ea45 0002 	orr.w	r0, r5, r2
 8001f28:	d069      	beq.n	8001ffe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8001f2a:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8001f2e:	d066      	beq.n	8001ffe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8001f30:	f1bc 0f04 	cmp.w	ip, #4
 8001f34:	d020      	beq.n	8001f78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f36:	432a      	orrs	r2, r5
 8001f38:	4b37      	ldr	r3, [pc, #220]	; (8002018 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001f3a:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f40:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001f42:	d148      	bne.n	8001fd6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x112>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001f44:	f240 2201 	movw	r2, #513	; 0x201
 8001f48:	e014      	b.n	8001f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb0>
    switch (blitOp.operation)
 8001f4a:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001f4e:	d007      	beq.n	8001f60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
 8001f50:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8001f54:	d1ef      	bne.n	8001f36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f5a:	f042 0209 	orr.w	r2, r2, #9
 8001f5e:	e003      	b.n	8001f68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f64:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f68:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001f6a:	68e2      	ldr	r2, [r4, #12]
 8001f6c:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f6e:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f70:	6159      	str	r1, [r3, #20]
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001f72:	4a2a      	ldr	r2, [pc, #168]	; (800201c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001f74:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8001f76:	e04d      	b.n	8002014 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f78:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001f7c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f7e:	e7f6      	b.n	8001f6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001f80:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f82:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f84:	1d04      	adds	r4, r0, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f8a:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f8c:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8001f8e:	7802      	ldrb	r2, [r0, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f90:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f92:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001f94:	b142      	cbz	r2, 8001fa8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe4>
 8001f96:	2a01      	cmp	r2, #1
 8001f98:	d01f      	beq.n	8001fda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x116>
                assert(0 && "Unsupported format");
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8001f9c:	f240 1111 	movw	r1, #273	; 0x111
 8001fa0:	4a20      	ldr	r2, [pc, #128]	; (8002024 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 8001fa2:	4821      	ldr	r0, [pc, #132]	; (8002028 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 8001fa4:	f023 fa00 	bl	80253a8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fa8:	8842      	ldrh	r2, [r0, #2]
            bool blend = true;
 8001faa:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fac:	69d9      	ldr	r1, [r3, #28]
 8001fae:	1e50      	subs	r0, r2, #1
 8001fb0:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001fb4:	f022 0210 	bic.w	r2, r2, #16
 8001fb8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fbc:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	f042 0220 	orr.w	r2, r2, #32
 8001fc6:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	0692      	lsls	r2, r2, #26
 8001fcc:	d4fc      	bmi.n	8001fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001fce:	2210      	movs	r2, #16
 8001fd0:	609a      	str	r2, [r3, #8]
            if(blend)
 8001fd2:	2c00      	cmp	r4, #0
 8001fd4:	d1cd      	bne.n	8001f72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001fd6:	4a15      	ldr	r2, [pc, #84]	; (800202c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 8001fd8:	e7cc      	b.n	8001f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb0>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fda:	8842      	ldrh	r2, [r0, #2]
                if(blitOp.alpha == 255)
 8001fdc:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fe0:	69d9      	ldr	r1, [r3, #28]
 8001fe2:	f102 30ff 	add.w	r0, r2, #4294967295
                if(blitOp.alpha == 255)
 8001fe6:	bf18      	it	ne
 8001fe8:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fea:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001fee:	f022 0210 	bic.w	r2, r2, #16
 8001ff2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001ff6:	f042 0210 	orr.w	r2, r2, #16
 8001ffa:	61da      	str	r2, [r3, #28]
                break;
 8001ffc:	e7df      	b.n	8001fbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ffe:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002004:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002008:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800200c:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002010:	f8ce 3000 	str.w	r3, [lr]
}
 8002014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002018:	4002b000 	.word	0x4002b000
 800201c:	00020201 	.word	0x00020201
 8002020:	08026d36 	.word	0x08026d36
 8002024:	08026d50 	.word	0x08026d50
 8002028:	08026cac 	.word	0x08026cac
 800202c:	00010201 	.word	0x00010201

08002030 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002030:	b538      	push	{r3, r4, r5, lr}
 8002032:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002034:	7f88      	ldrb	r0, [r1, #30]
 8002036:	f7ff ff27 	bl	8001e88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800203c:	8aa5      	ldrh	r5, [r4, #20]
 800203e:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002040:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002042:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002046:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002048:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800204a:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800204c:	6921      	ldr	r1, [r4, #16]
 800204e:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002050:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002052:	6825      	ldr	r5, [r4, #0]
 8002054:	2d08      	cmp	r5, #8
 8002056:	d10e      	bne.n	8002076 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002058:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800205a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800205c:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800205e:	4a0f      	ldr	r2, [pc, #60]	; (800209c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8002060:	7f20      	ldrb	r0, [r4, #28]
 8002062:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002066:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002068:	68e2      	ldr	r2, [r4, #12]
 800206a:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800206e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002070:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002072:	601a      	str	r2, [r3, #0]
    }
}
 8002074:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002076:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002078:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800207a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800207c:	68e1      	ldr	r1, [r4, #12]
 800207e:	0a0a      	lsrs	r2, r1, #8
 8002080:	0948      	lsrs	r0, r1, #5
 8002082:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002086:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 800208a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800208e:	4302      	orrs	r2, r0
 8002090:	430a      	orrs	r2, r1
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002094:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002096:	e7ec      	b.n	8002072 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002098:	4002b000 	.word	0x4002b000
 800209c:	00010009 	.word	0x00010009
 80020a0:	00020201 	.word	0x00020201
 80020a4:	00030201 	.word	0x00030201

080020a8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020ae:	6003      	str	r3, [r0, #0]
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <_ZN8STM32DMAD1Ev+0x1c>)
 80020b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80020b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020ba:	f3bf 8f6f 	isb	sy
}
 80020be:	4770      	bx	lr
 80020c0:	08026d98 	.word	0x08026d98
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80020c8:	b510      	push	{r4, lr}
 80020ca:	4604      	mov	r4, r0
}
 80020cc:	f7ff ffec 	bl	80020a8 <_ZN8STM32DMAD1Ev>
 80020d0:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80020d4:	4620      	mov	r0, r4
 80020d6:	f022 ff94 	bl	8025002 <_ZdlPvj>
 80020da:	4620      	mov	r0, r4
 80020dc:	bd10      	pop	{r4, pc}
	...

080020e0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <_ZN8STM32DMAC1Ev+0x30>)
 80020e6:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80020e8:	2600      	movs	r6, #0
 80020ea:	4625      	mov	r5, r4
 80020ec:	2260      	movs	r2, #96	; 0x60
 80020ee:	6060      	str	r0, [r4, #4]
 80020f0:	7226      	strb	r6, [r4, #8]
 80020f2:	7266      	strb	r6, [r4, #9]
 80020f4:	f845 3b20 	str.w	r3, [r5], #32
 80020f8:	4629      	mov	r1, r5
 80020fa:	f00d fe93 	bl	800fe24 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80020fe:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
        : color(0)
 8002102:	60ee      	str	r6, [r5, #12]
 8002104:	3520      	adds	r5, #32
 8002106:	42ab      	cmp	r3, r5
 8002108:	d1fb      	bne.n	8002102 <_ZN8STM32DMAC1Ev+0x22>
}
 800210a:	4620      	mov	r0, r4
 800210c:	bd70      	pop	{r4, r5, r6, pc}
 800210e:	bf00      	nop
 8002110:	08026d98 	.word	0x08026d98

08002114 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002114:	2001      	movs	r0, #1
 8002116:	4770      	bx	lr

08002118 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002118:	2038      	movs	r0, #56	; 0x38
 800211a:	4770      	bx	lr

0800211c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800211c:	2338      	movs	r3, #56	; 0x38
 800211e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002122:	3008      	adds	r0, #8
 8002124:	4770      	bx	lr

08002126 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002126:	2338      	movs	r3, #56	; 0x38
 8002128:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800212c:	3008      	adds	r0, #8
 800212e:	4770      	bx	lr

08002130 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002130:	2001      	movs	r0, #1
 8002132:	4770      	bx	lr

08002134 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002134:	f643 1038 	movw	r0, #14648	; 0x3938
 8002138:	4770      	bx	lr

0800213a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800213a:	f643 1338 	movw	r3, #14648	; 0x3938
 800213e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002142:	3008      	adds	r0, #8
 8002144:	4770      	bx	lr

08002146 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002146:	f643 1338 	movw	r3, #14648	; 0x3938
 800214a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800214e:	3008      	adds	r0, #8
 8002150:	4770      	bx	lr

08002152 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002152:	2001      	movs	r0, #1
 8002154:	4770      	bx	lr

08002156 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002156:	2010      	movs	r0, #16
 8002158:	4770      	bx	lr

0800215a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800215a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800215e:	3008      	adds	r0, #8
 8002160:	4770      	bx	lr

08002162 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002162:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002166:	3008      	adds	r0, #8
 8002168:	4770      	bx	lr

0800216a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen2ScreenNoTransition();
 800216a:	4608      	mov	r0, r1
 800216c:	f002 bc54 	b.w	8004a18 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>

08002170 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8002172:	b510      	push	{r4, lr}
 8002174:	4604      	mov	r4, r0
 8002176:	6003      	str	r3, [r0, #0]
 8002178:	f00b ff24 	bl	800dfc4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800217c:	4620      	mov	r0, r4
 800217e:	bd10      	pop	{r4, pc}
 8002180:	08026e50 	.word	0x08026e50

08002184 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8002184:	b510      	push	{r4, lr}
 8002186:	4604      	mov	r4, r0
 8002188:	f7ff fff2 	bl	8002170 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	4620      	mov	r0, r4
 8002190:	f022 ff37 	bl	8025002 <_ZdlPvj>
 8002194:	4620      	mov	r0, r4
 8002196:	bd10      	pop	{r4, pc}

08002198 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800219a:	b510      	push	{r4, lr}
 800219c:	4604      	mov	r4, r0
 800219e:	6003      	str	r3, [r0, #0]
 80021a0:	f00b ff10 	bl	800dfc4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80021a4:	4620      	mov	r0, r4
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	08026e1c 	.word	0x08026e1c

080021ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80021ac:	b510      	push	{r4, lr}
 80021ae:	4604      	mov	r4, r0
 80021b0:	f7ff fff2 	bl	8002198 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80021b4:	f44f 5165 	mov.w	r1, #14656	; 0x3940
 80021b8:	4620      	mov	r0, r4
 80021ba:	f022 ff22 	bl	8025002 <_ZdlPvj>
 80021be:	4620      	mov	r0, r4
 80021c0:	bd10      	pop	{r4, pc}
	...

080021c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80021c6:	b510      	push	{r4, lr}
 80021c8:	4604      	mov	r4, r0
 80021ca:	6003      	str	r3, [r0, #0]
 80021cc:	f00b fefa 	bl	800dfc4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80021d0:	4620      	mov	r0, r4
 80021d2:	bd10      	pop	{r4, pc}
 80021d4:	08026de8 	.word	0x08026de8

080021d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	4604      	mov	r4, r0
 80021dc:	f7ff fff2 	bl	80021c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80021e0:	2118      	movs	r1, #24
 80021e2:	4620      	mov	r0, r4
 80021e4:	f022 ff0d 	bl	8025002 <_ZdlPvj>
 80021e8:	4620      	mov	r0, r4
 80021ea:	bd10      	pop	{r4, pc}

080021ec <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <_ZN12FrontendHeapD1Ev+0x28>)
 80021ee:	b510      	push	{r4, lr}
 80021f0:	4604      	mov	r4, r0
 80021f2:	6003      	str	r3, [r0, #0]
 80021f4:	f500 5065 	add.w	r0, r0, #14656	; 0x3940
 80021f8:	302c      	adds	r0, #44	; 0x2c
 80021fa:	f7ff ffb9 	bl	8002170 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80021fe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002202:	f7ff ffc9 	bl	8002198 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002206:	f104 0014 	add.w	r0, r4, #20
 800220a:	f7ff ffdb 	bl	80021c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800220e:	4620      	mov	r0, r4
 8002210:	bd10      	pop	{r4, pc}
 8002212:	bf00      	nop
 8002214:	08026e84 	.word	0x08026e84

08002218 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002218:	b508      	push	{r3, lr}
 800221a:	4802      	ldr	r0, [pc, #8]	; (8002224 <__tcf_0+0xc>)
 800221c:	f7ff ffe6 	bl	80021ec <_ZN12FrontendHeapD1Ev>
 8002220:	bd08      	pop	{r3, pc}
 8002222:	bf00      	nop
 8002224:	20043ff0 	.word	0x20043ff0

08002228 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002228:	b510      	push	{r4, lr}
 800222a:	4604      	mov	r4, r0
 800222c:	f7ff ffde 	bl	80021ec <_ZN12FrontendHeapD1Ev>
 8002230:	f643 3108 	movw	r1, #15112	; 0x3b08
 8002234:	4620      	mov	r0, r4
 8002236:	f022 fee4 	bl	8025002 <_ZdlPvj>
 800223a:	4620      	mov	r0, r4
 800223c:	bd10      	pop	{r4, pc}
	...

08002240 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8002240:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002244:	f002 fa54 	bl	80046f0 <_ZN14BitmapDatabase11getInstanceEv>
 8002248:	2400      	movs	r4, #0
 800224a:	4605      	mov	r5, r0
 800224c:	f002 fa54 	bl	80046f8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002250:	4623      	mov	r3, r4
 8002252:	4601      	mov	r1, r0
 8002254:	4622      	mov	r2, r4
 8002256:	4628      	mov	r0, r5
 8002258:	9400      	str	r4, [sp, #0]
 800225a:	f014 fb67 	bl	801692c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <touchgfx_init+0xb4>)
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002262:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002264:	4d25      	ldr	r5, [pc, #148]	; (80022fc <touchgfx_init+0xbc>)
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f003 fe14 	bl	8005e94 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800226c:	4824      	ldr	r0, [pc, #144]	; (8002300 <touchgfx_init+0xc0>)
 800226e:	f014 fa9f 	bl	80167b0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002272:	782b      	ldrb	r3, [r5, #0]
 8002274:	f3bf 8f5b 	dmb	ish
 8002278:	07db      	lsls	r3, r3, #31
 800227a:	d434      	bmi.n	80022e6 <touchgfx_init+0xa6>
 800227c:	4628      	mov	r0, r5
 800227e:	f022 fec2 	bl	8025006 <__cxa_guard_acquire>
 8002282:	b380      	cbz	r0, 80022e6 <touchgfx_init+0xa6>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002284:	4c1f      	ldr	r4, [pc, #124]	; (8002304 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <touchgfx_init+0xc8>)
 8002288:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800228c:	f104 0014 	add.w	r0, r4, #20
 8002290:	6023      	str	r3, [r4, #0]
 8002292:	f508 5765 	add.w	r7, r8, #14656	; 0x3940
 8002296:	6060      	str	r0, [r4, #4]
 8002298:	f8c4 8008 	str.w	r8, [r4, #8]
 800229c:	f107 0644 	add.w	r6, r7, #68	; 0x44
 80022a0:	60e7      	str	r7, [r4, #12]
 80022a2:	6126      	str	r6, [r4, #16]
 80022a4:	f00b fe90 	bl	800dfc8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <touchgfx_init+0xcc>)
 80022aa:	4640      	mov	r0, r8
 80022ac:	6163      	str	r3, [r4, #20]
 80022ae:	f00b fe8b 	bl	800dfc8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <touchgfx_init+0xd0>)
 80022b4:	4638      	mov	r0, r7
 80022b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022b8:	f00b fe86 	bl	800dfc8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <touchgfx_init+0xd4>)
 80022be:	f508 5066 	add.w	r0, r8, #14720	; 0x3980
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	f003 fe66 	bl	8005f94 <_ZN5ModelC1Ev>
 80022c8:	4622      	mov	r2, r4
 80022ca:	f508 5166 	add.w	r1, r8, #14720	; 0x3980
 80022ce:	4630      	mov	r0, r6
 80022d0:	f003 fe56 	bl	8005f80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80022d4:	4630      	mov	r0, r6
 80022d6:	f002 fb9f 	bl	8004a18 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        static FrontendHeap instance;
 80022da:	4628      	mov	r0, r5
 80022dc:	f022 fe9f 	bl	802501e <__cxa_guard_release>
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <touchgfx_init+0xd8>)
 80022e2:	f023 f87f 	bl	80253e4 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80022e6:	480d      	ldr	r0, [pc, #52]	; (800231c <touchgfx_init+0xdc>)
}
 80022e8:	b002      	add	sp, #8
 80022ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80022ee:	f7fe be4d 	b.w	8000f8c <_ZN11TouchGFXHAL10initializeEv>
 80022f2:	bf00      	nop
 80022f4:	20060cac 	.word	0x20060cac
 80022f8:	20048798 	.word	0x20048798
 80022fc:	20043fec 	.word	0x20043fec
 8002300:	20000034 	.word	0x20000034
 8002304:	20043ff0 	.word	0x20043ff0
 8002308:	08026e84 	.word	0x08026e84
 800230c:	08026de8 	.word	0x08026de8
 8002310:	08026e1c 	.word	0x08026e1c
 8002314:	08026e50 	.word	0x08026e50
 8002318:	08002219 	.word	0x08002219
 800231c:	2004871c 	.word	0x2004871c

08002320 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002320:	4801      	ldr	r0, [pc, #4]	; (8002328 <touchgfx_taskEntry+0x8>)
 8002322:	f7fe be4d 	b.w	8000fc0 <_ZN11TouchGFXHAL9taskEntryEv>
 8002326:	bf00      	nop
 8002328:	2004871c 	.word	0x2004871c

0800232c <_GLOBAL__sub_I_touchgfx_init>:
}
 800232c:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 800232e:	490c      	ldr	r1, [pc, #48]	; (8002360 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 8002332:	4c0d      	ldr	r4, [pc, #52]	; (8002368 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 8002334:	4608      	mov	r0, r1
 8002336:	6023      	str	r3, [r4, #0]
 8002338:	f7ff fed2 	bl	80020e0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800233e:	4610      	mov	r0, r2
 8002340:	f017 fbc6 	bl	8019ad0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8002344:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002348:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 800234e:	4808      	ldr	r0, [pc, #32]	; (8002370 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8002350:	e9cd 3200 	strd	r3, r2, [sp]
 8002354:	4623      	mov	r3, r4
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002358:	f7fe fed6 	bl	8001108 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800235c:	b002      	add	sp, #8
 800235e:	bd10      	pop	{r4, pc}
 8002360:	20047afc 	.word	0x20047afc
 8002364:	080265e4 	.word	0x080265e4
 8002368:	20047af8 	.word	0x20047af8
 800236c:	2004879c 	.word	0x2004879c
 8002370:	2004871c 	.word	0x2004871c

08002374 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002374:	4801      	ldr	r0, [pc, #4]	; (800237c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002376:	f7ff be97 	b.w	80020a8 <_ZN8STM32DMAD1Ev>
 800237a:	bf00      	nop
 800237c:	20047afc 	.word	0x20047afc

08002380 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002380:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <SCB_CleanInvalidateDCache+0x44>)
 8002382:	2300      	movs	r3, #0
{
 8002384:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002386:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800238a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800238e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002392:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002396:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800239a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800239e:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80023a0:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80023a4:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80023a6:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80023aa:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80023ac:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80023b0:	d2f9      	bcs.n	80023a6 <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 80023b2:	3b20      	subs	r3, #32
 80023b4:	f113 0f20 	cmn.w	r3, #32
 80023b8:	d1f2      	bne.n	80023a0 <SCB_CleanInvalidateDCache+0x20>
 80023ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023be:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80023ca:	2290      	movs	r2, #144	; 0x90
 80023cc:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80023da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023de:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 80023e8:	4770      	bx	lr

080023ea <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80023ea:	4770      	bx	lr

080023ec <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	03db      	lsls	r3, r3, #15
 80023f2:	d501      	bpl.n	80023f8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 80023f4:	f7ff bfc4 	b.w	8002380 <SCB_CleanInvalidateDCache>
    }
}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
 8002400:	4770      	bx	lr

08002402 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(movie, length);
    }

    void setVideoData(const Handle handle, VideoDataReader& reader)
    {
        mjpegDecoders[handle]->setVideoData(reader);
 8002402:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002406:	4611      	mov	r1, r2
 8002408:	6840      	ldr	r0, [r0, #4]
 800240a:	6803      	ldr	r3, [r0, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4718      	bx	r3

08002410 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4604      	mov	r4, r0
    HAL::initialize();
 8002414:	f00c fd9d 	bl	800ef52 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800241c:	f011 f928 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 8002420:	4601      	mov	r1, r0
 8002422:	4620      	mov	r0, r4
 8002424:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800242c:	4620      	mov	r0, r4
 800242e:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8002432:	2300      	movs	r3, #0
 8002434:	461a      	mov	r2, r3
 8002436:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8002438:	2301      	movs	r3, #1
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 800243a:	4a06      	ldr	r2, [pc, #24]	; (8002454 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800243c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002442:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002444:	4a05      	ldr	r2, [pc, #20]	; (800245c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
        topBufferRGB = bufferRGB;
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
        sizeBufferRGB = sizeOfBuffer;
 800244a:	f44f 2287 	mov.w	r2, #276480	; 0x43800
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002450:	bd38      	pop	{r3, r4, r5, pc}
 8002452:	bf00      	nop
 8002454:	20048814 	.word	0x20048814
 8002458:	20048858 	.word	0x20048858
 800245c:	20000750 	.word	0x20000750

08002460 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    bool getIsPlaying(const Handle handle)
 8002460:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002462:	b131      	cbz	r1, 8002472 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002466:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 800246e:	f022 ff9b 	bl	80253a8 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002472:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
 8002476:	bd08      	pop	{r3, pc}
 8002478:	08026e90 	.word	0x08026e90
 800247c:	08026ea4 	.word	0x08026ea4
 8002480:	0802702d 	.word	0x0802702d

08002484 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002484:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002486:	b131      	cbz	r1, 8002496 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800248a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800248e:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002490:	4806      	ldr	r0, [pc, #24]	; (80024ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002492:	f022 ff89 	bl	80253a8 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002496:	6840      	ldr	r0, [r0, #4]
 8002498:	4611      	mov	r1, r2
 800249a:	6803      	ldr	r3, [r0, #0]
    }
 800249c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4718      	bx	r3
 80024a4:	08026e90 	.word	0x08026e90
 80024a8:	08027070 	.word	0x08027070
 80024ac:	0802702d 	.word	0x0802702d

080024b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    uint32_t getCurrentFrameNumber(const Handle handle)
 80024b0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80024b2:	b129      	cbz	r1, 80024c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 80024b6:	2169      	movs	r1, #105	; 0x69
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 80024ba:	4804      	ldr	r0, [pc, #16]	; (80024cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 80024bc:	f022 ff74 	bl	80253a8 <__assert_func>
    }
 80024c0:	68c0      	ldr	r0, [r0, #12]
 80024c2:	bd08      	pop	{r3, pc}
 80024c4:	08026e90 	.word	0x08026e90
 80024c8:	0802721d 	.word	0x0802721d
 80024cc:	0802702d 	.word	0x0802702d

080024d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80024d0:	b510      	push	{r4, lr}
 80024d2:	460c      	mov	r4, r1
 80024d4:	4611      	mov	r1, r2
 80024d6:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80024d8:	b12c      	cbz	r4, 80024e6 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 80024e0:	4806      	ldr	r0, [pc, #24]	; (80024fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 80024e2:	f022 ff61 	bl	80253a8 <__assert_func>
        stream.frameNumber = 0;
 80024e6:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80024e8:	6840      	ldr	r0, [r0, #4]
 80024ea:	6803      	ldr	r3, [r0, #0]
    }
 80024ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	4718      	bx	r3
 80024f4:	08026e90 	.word	0x08026e90
 80024f8:	080273d1 	.word	0x080273d1
 80024fc:	0802702d 	.word	0x0802702d

08002500 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002500:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002502:	b129      	cbz	r1, 8002510 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002506:	2172      	movs	r1, #114	; 0x72
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 800250c:	f022 ff4c 	bl	80253a8 <__assert_func>
        stream.tickCount = 0;
 8002510:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002514:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002518:	bd08      	pop	{r3, pc}
 800251a:	bf00      	nop
 800251c:	08026e90 	.word	0x08026e90
 8002520:	080275ab 	.word	0x080275ab
 8002524:	0802702d 	.word	0x0802702d

08002528 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002528:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 800252a:	f00c fcc3 	bl	800eeb4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	03db      	lsls	r3, r3, #15
 8002534:	d503      	bpl.n	800253e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 800253a:	f7ff bf21 	b.w	8002380 <SCB_CleanInvalidateDCache>
}
 800253e:	bd08      	pop	{r3, pc}
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002544:	f00c be13 	b.w	800f16e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002548 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002548:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 800254c:	b510      	push	{r4, lr}
 800254e:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002550:	b13b      	cbz	r3, 8002562 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x1a>
            MUTEX_LOCK(mutexBuffers);
 8002552:	f04f 31ff 	mov.w	r1, #4294967295
 8002556:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002558:	f008 ff66 	bl	800b428 <osMutexAcquire>
            firstDrawThisFrame = false;
 800255c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002560:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 8002562:	bd10      	pop	{r4, pc}

08002564 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    void unregisterVideoWidget(const Handle handle)
 8002564:	b538      	push	{r3, r4, r5, lr}
 8002566:	460d      	mov	r5, r1
 8002568:	4604      	mov	r4, r0
        MUTEX_LOCK(mutexBuffers);
 800256a:	f04f 31ff 	mov.w	r1, #4294967295
 800256e:	6c00      	ldr	r0, [r0, #64]	; 0x40
        streams[handle].isActive = false;
 8002570:	3501      	adds	r5, #1
        MUTEX_LOCK(mutexBuffers);
 8002572:	f008 ff59 	bl	800b428 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8002576:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002578:	f008 ff86 	bl	800b488 <osMutexRelease>
        streams[handle].isActive = false;
 800257c:	2300      	movs	r3, #0
 800257e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8002582:	712b      	strb	r3, [r5, #4]
        if (oneIsActive == false)
 8002584:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002588:	b90b      	cbnz	r3, 800258e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2a>
            topBufferRGB = bufferRGB;
 800258a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800258c:	6363      	str	r3, [r4, #52]	; 0x34
    }
 800258e:	bd38      	pop	{r3, r4, r5, pc}

08002590 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002590:	b510      	push	{r4, lr}
 8002592:	4604      	mov	r4, r0
 8002594:	2144      	movs	r1, #68	; 0x44
 8002596:	f022 fd34 	bl	8025002 <_ZdlPvj>
 800259a:	4620      	mov	r0, r4
 800259c:	bd10      	pop	{r4, pc}
	...

080025a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    void setCommand(const Handle handle, Command cmd, uint32_t param)
 80025a0:	b510      	push	{r4, lr}
 80025a2:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80025a4:	b129      	cbz	r1, 80025b2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x60>)
 80025a8:	2192      	movs	r1, #146	; 0x92
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x64>)
 80025ac:	4816      	ldr	r0, [pc, #88]	; (8002608 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x68>)
 80025ae:	f022 fefb 	bl	80253a8 <__assert_func>
 80025b2:	2a04      	cmp	r2, #4
 80025b4:	d815      	bhi.n	80025e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80025b6:	e8df f002 	tbb	[pc, r2]
 80025ba:	1103      	.short	0x1103
 80025bc:	1715      	.short	0x1715
 80025be:	1d          	.byte	0x1d
 80025bf:	00          	.byte	0x00
            if (mjpegDecoders[handle]->hasVideo())
 80025c0:	6840      	ldr	r0, [r0, #4]
 80025c2:	6803      	ldr	r3, [r0, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	4798      	blx	r3
 80025c8:	b158      	cbz	r0, 80025e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80025d0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
            stream.frameCount = 0;
 80025d4:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80025d6:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80025da:	e002      	b.n	80025e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80025dc:	2300      	movs	r3, #0
 80025de:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    }
 80025e2:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80025e4:	6203      	str	r3, [r0, #32]
 80025e6:	e7f5      	b.n	80025d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
            stream.seek_to_frame = 1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	6203      	str	r3, [r0, #32]
            break;
 80025f2:	e7f6      	b.n	80025e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80025f4:	3b00      	subs	r3, #0
 80025f6:	bf18      	it	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    }
 80025fe:	e7f0      	b.n	80025e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002600:	08026e90 	.word	0x08026e90
 8002604:	08027766 	.word	0x08027766
 8002608:	0802702d 	.word	0x0802702d

0800260c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800260c:	b510      	push	{r4, lr}
 800260e:	4604      	mov	r4, r0
 8002610:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8002612:	b129      	cbz	r1, 8002620 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x50>)
 8002616:	21b9      	movs	r1, #185	; 0xb9
 8002618:	4a11      	ldr	r2, [pc, #68]	; (8002660 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>)
 800261a:	4812      	ldr	r0, [pc, #72]	; (8002664 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 800261c:	f022 fec4 	bl	80253a8 <__assert_func>
        if (stream.isPlaying)
 8002620:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002624:	b113      	cbz	r3, 800262c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x20>
            stream.tickCount++;
 8002626:	6963      	ldr	r3, [r4, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 800262c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8002630:	b90b      	cbnz	r3, 8002636 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2a>
        return true;
 8002632:	2001      	movs	r0, #1
    }
 8002634:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002636:	68a3      	ldr	r3, [r4, #8]
 8002638:	6303      	str	r3, [r0, #48]	; 0x30
            widget.invalidate();
 800263a:	6803      	ldr	r3, [r0, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002640:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8002642:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
            stream.doInvalidateOnNextTick = false;
 8002646:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
            if (!stream.hasMoreFrames && !stream.repeat)
 800264a:	2800      	cmp	r0, #0
 800264c:	d1f1      	bne.n	8002632 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x26>
 800264e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
                stream.isPlaying = false;
 8002656:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 800265a:	e7eb      	b.n	8002634 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
 800265c:	08026e90 	.word	0x08026e90
 8002660:	08027939 	.word	0x08027939
 8002664:	0802702d 	.word	0x0802702d

08002668 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002668:	b510      	push	{r4, lr}
            if (stream.isPlaying)
 800266a:	4c10      	ldr	r4, [pc, #64]	; (80026ac <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x44>)
    HAL::endFrame();
 800266c:	f00c fc64 	bl	800ef38 <_ZN8touchgfx3HAL8endFrameEv>
 8002670:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002674:	b153      	cbz	r3, 800268c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x24>
    bool decodeForNextTick(const Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002676:	69e1      	ldr	r1, [r4, #28]
 8002678:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800267c:	435a      	muls	r2, r3
 800267e:	6923      	ldr	r3, [r4, #16]
 8002680:	434b      	muls	r3, r1
 8002682:	429a      	cmp	r2, r3
                    stream.doDecode = true;
 8002684:	bf24      	itt	cs
 8002686:	2301      	movcs	r3, #1
 8002688:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
        firstDrawThisFrame = true;
 800268c:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 800268e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        firstDrawThisFrame = true;
 8002690:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        SEM_POST(semDecode);
 8002694:	f008 ffb2 	bl	800b5fc <osSemaphoreRelease>
        if (uiHasMutex)
 8002698:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800269c:	b12b      	cbz	r3, 80026aa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
            MUTEX_UNLOCK(mutexBuffers);
 800269e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80026a0:	f008 fef2 	bl	800b488 <osMutexRelease>
            uiHasMutex = false;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80026aa:	bd10      	pop	{r4, pc}
 80026ac:	20048858 	.word	0x20048858

080026b0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80026b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80026ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026be:	f3bf 8f6f 	isb	sy
}
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80026c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80026cc:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 80026ce:	b133      	cbz	r3, 80026de <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x16>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80026d2:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80026d6:	4a18      	ldr	r2, [pc, #96]	; (8002738 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80026d8:	4818      	ldr	r0, [pc, #96]	; (800273c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 80026da:	f022 fe65 	bl	80253a8 <__assert_func>
                streams[i] = Stream();
 80026de:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80026e0:	6b45      	ldr	r5, [r0, #52]	; 0x34
                streams[i] = Stream();
 80026e2:	60c3      	str	r3, [r0, #12]
 80026e4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80026e8:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
 80026ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
                streams[i] = Stream();
 80026f0:	6103      	str	r3, [r0, #16]
 80026f2:	6143      	str	r3, [r0, #20]
 80026f4:	6183      	str	r3, [r0, #24]
 80026f6:	61c3      	str	r3, [r0, #28]
 80026f8:	6203      	str	r3, [r0, #32]
 80026fa:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
 80026fe:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 8002702:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002706:	e9d0 260b 	ldrd	r2, r6, [r0, #44]	; 0x2c
 800270a:	4432      	add	r2, r6
 800270c:	4294      	cmp	r4, r2
 800270e:	d903      	bls.n	8002718 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8002712:	2142      	movs	r1, #66	; 0x42
 8002714:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 8002716:	e7df      	b.n	80026d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x10>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, uint16_t width, uint16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002718:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 800271c:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 800271e:	6344      	str	r4, [r0, #52]	; 0x34
    }
 8002720:	4618      	mov	r0, r3
 8002722:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8002724:	f44f 7290 	mov.w	r2, #288	; 0x120
        format = bufferFormat;
 8002728:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 800272c:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 800272e:	630b      	str	r3, [r1, #48]	; 0x30
 8002730:	bd70      	pop	{r4, r5, r6, pc}
 8002732:	bf00      	nop
 8002734:	08027ad9 	.word	0x08027ad9
 8002738:	08027b09 	.word	0x08027b09
 800273c:	0802702d 	.word	0x0802702d
 8002740:	08027c8f 	.word	0x08027c8f
 8002744:	08027cca 	.word	0x08027cca

08002748 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002748:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800274c:	4604      	mov	r4, r0
                  stream.doInvalidateOnNextTick = true;
 800274e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002750:	f44f 7770 	mov.w	r7, #960	; 0x3c0
            SEM_WAIT(semDecode);
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800275a:	f008 ff15 	bl	800b588 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800275e:	f04f 31ff 	mov.w	r1, #4294967295
 8002762:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002764:	f008 fe60 	bl	800b428 <osMutexAcquire>
                if (stream.doDecode)
 8002768:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800276c:	b323      	cbz	r3, 80027b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x70>
                    if (stream.seek_to_frame > 0)
 800276e:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8002770:	6865      	ldr	r5, [r4, #4]
                  stream.doInvalidateOnNextTick = true;
 8002772:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
                    if (stream.seek_to_frame > 0)
 8002776:	b129      	cbz	r1, 8002784 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x3c>
                        decoder->gotoFrame(stream.seek_to_frame);
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	4628      	mov	r0, r5
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800278a:	9700      	str	r7, [sp, #0]
 800278c:	4628      	mov	r0, r5
 800278e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8002792:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002796:	68a1      	ldr	r1, [r4, #8]
 8002798:	47c0      	blx	r8
                    stream.frameCount++;
 800279a:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800279c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
                    stream.frameCount++;
 80027a0:	3301      	adds	r3, #1
 80027a2:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 80027a4:	b160      	cbz	r0, 80027c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	4628      	mov	r0, r5
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	4798      	blx	r3
 80027ae:	3801      	subs	r0, #1
 80027b0:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            MUTEX_UNLOCK(mutexBuffers);
 80027b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80027ba:	f008 fe65 	bl	800b488 <osMutexRelease>
        while(1)
 80027be:	e7c9      	b.n	8002754 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        stream.frameNumber = 1;
 80027c0:	60e6      	str	r6, [r4, #12]
 80027c2:	e7f6      	b.n	80027b2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x6a>

080027c4 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void *argument)
{
    videoController.decoderTaskEntry();
 80027c4:	4801      	ldr	r0, [pc, #4]	; (80027cc <videoTaskFunc+0x8>)
{
 80027c6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80027c8:	f7ff ffbe 	bl	8002748 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 80027cc:	20048858 	.word	0x20048858

080027d0 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80027d0:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80027d2:	4812      	ldr	r0, [pc, #72]	; (800281c <_GLOBAL__sub_I_mjpegdecoder1+0x4c>)
                   isActive(false), doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027d4:	2500      	movs	r5, #0
 80027d6:	f7fe fe5d 	bl	8001494 <_ZN20HardwareMJPEGDecoderC1Ev>
          firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027da:	4c11      	ldr	r4, [pc, #68]	; (8002820 <_GLOBAL__sub_I_mjpegdecoder1+0x50>)
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
                   isActive(false), doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027de:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 80027e0:	462a      	mov	r2, r5
 80027e2:	4629      	mov	r1, r5
          firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027e4:	6023      	str	r3, [r4, #0]
                   isActive(false), doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027e6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 80027ea:	84e5      	strh	r5, [r4, #38]	; 0x26
 80027ec:	8520      	strh	r0, [r4, #40]	; 0x28
          firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027ee:	6365      	str	r5, [r4, #52]	; 0x34
 80027f0:	8720      	strh	r0, [r4, #56]	; 0x38
                   isActive(false), doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80027f2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80027f6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80027fa:	e9c4 5507 	strd	r5, r5, [r4, #28]
          firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80027fe:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
 8002802:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8002806:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
 800280a:	f008 fe67 	bl	800b4dc <osSemaphoreNew>
 800280e:	63e0      	str	r0, [r4, #60]	; 0x3c
        mutexBuffers = MUTEX_CREATE();
 8002810:	4628      	mov	r0, r5
 8002812:	f008 fdc7 	bl	800b3a4 <osMutexNew>
 8002816:	6420      	str	r0, [r4, #64]	; 0x40
}
 8002818:	bd38      	pop	{r3, r4, r5, pc}
 800281a:	bf00      	nop
 800281c:	20048814 	.word	0x20048814
 8002820:	20048858 	.word	0x20048858
 8002824:	08027e74 	.word	0x08027e74

08002828 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800282c:	b08d      	sub	sp, #52	; 0x34
 800282e:	3080      	adds	r0, #128	; 0x80
 8002830:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002832:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 8002836:	f8dd b01c 	ldr.w	fp, [sp, #28]
{
 800283a:	910b      	str	r1, [sp, #44]	; 0x2c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800283c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002840:	9306      	str	r3, [sp, #24]

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002842:	4b71      	ldr	r3, [pc, #452]	; (8002a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 8002844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800284a:	2200      	movs	r2, #0
 800284c:	f1a0 0180 	sub.w	r1, r0, #128	; 0x80
 8002850:	9100      	str	r1, [sp, #0]
 8002852:	e9dd 1406 	ldrd	r1, r4, [sp, #24]
 8002856:	4421      	add	r1, r4
 8002858:	4559      	cmp	r1, fp
 800285a:	d806      	bhi.n	800286a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x42>
 800285c:	b10a      	cbz	r2, 8002862 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3a>
 800285e:	4a6a      	ldr	r2, [pc, #424]	; (8002a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 8002860:	6293      	str	r3, [r2, #40]	; 0x28
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002862:	9806      	ldr	r0, [sp, #24]
 8002864:	b00d      	add	sp, #52	; 0x34
 8002866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800286a:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800286e:	9a05      	ldr	r2, [sp, #20]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002870:	9905      	ldr	r1, [sp, #20]
    currentMCU++;
 8002872:	f10b 0b01 	add.w	fp, fp, #1
 8002876:	f100 0c80 	add.w	ip, r0, #128	; 0x80
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800287a:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800287e:	fb01 3312 	mls	r3, r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002882:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fb01 3302 	mla	r3, r1, r2, r3
 800288c:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
 800288e:	2300      	movs	r3, #0
 8002890:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
 8002892:	9b01      	ldr	r3, [sp, #4]
 8002894:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
 8002898:	f080 80a3 	bcs.w	80029e2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ba>
        pOutAddr = pOutBuffer + refline;
 800289c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800289e:	9a01      	ldr	r2, [sp, #4]
 80028a0:	eb03 0e02 	add.w	lr, r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80028a4:	f10c 0308 	add.w	r3, ip, #8
 80028a8:	f50e 7970 	add.w	r9, lr, #960	; 0x3c0
        for(k= 0; k<2; k++)
 80028ac:	9308      	str	r3, [sp, #32]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80028ae:	9b00      	ldr	r3, [sp, #0]
 80028b0:	9303      	str	r3, [sp, #12]
          for(j=0; j < 8; j+=2)
 80028b2:	f10c 33ff 	add.w	r3, ip, #4294967295
 80028b6:	9e03      	ldr	r6, [sp, #12]
    for(i= 0; i <  16; i+=2)
 80028b8:	2500      	movs	r5, #0
 80028ba:	9304      	str	r3, [sp, #16]
 80028bc:	eb09 0305 	add.w	r3, r9, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80028c0:	4f52      	ldr	r7, [pc, #328]	; (8002a0c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80028c2:	4c53      	ldr	r4, [pc, #332]	; (8002a10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 80028c4:	3602      	adds	r6, #2
 80028c6:	9309      	str	r3, [sp, #36]	; 0x24
 80028c8:	eb0e 0305 	add.w	r3, lr, r5
            ycomp = (int32_t)(*(pLum +j));
 80028cc:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80028d0:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80028d2:	9b04      	ldr	r3, [sp, #16]
 80028d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80028d8:	9304      	str	r3, [sp, #16]
 80028da:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 80028dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80028e0:	9b04      	ldr	r3, [sp, #16]
 80028e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e6:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80028ea:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80028ee:	4f4a      	ldr	r7, [pc, #296]	; (8002a18 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 80028f0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80028f4:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028f6:	4a49      	ldr	r2, [pc, #292]	; (8002a1c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 80028f8:	4414      	add	r4, r2
 80028fa:	4617      	mov	r7, r2
 80028fc:	eb04 0208 	add.w	r2, r4, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002900:	eb07 4323 	add.w	r3, r7, r3, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002904:	4439      	add	r1, r7
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002906:	9f0a      	ldr	r7, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002908:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 800290c:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002910:	eb03 0208 	add.w	r2, r3, r8
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002914:	4488      	add	r8, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002916:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 800291a:	f898 8100 	ldrb.w	r8, [r8, #256]	; 0x100
 800291e:	0892      	lsrs	r2, r2, #2
 8002920:	0152      	lsls	r2, r2, #5
 8002922:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002926:	ea42 02d8 	orr.w	r2, r2, r8, lsr #3
            *(__IO uint16_t *)pOutAddr =
 800292a:	f82e 2005 	strh.w	r2, [lr, r5]
            ycomp = (int32_t)(*(pLum +j +1));
 800292e:	f816 8c01 	ldrb.w	r8, [r6, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002932:	eb04 0208 	add.w	r2, r4, r8
 8002936:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800293a:	eb03 0208 	add.w	r2, r3, r8
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800293e:	4488      	add	r8, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002940:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002944:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002948:	0892      	lsrs	r2, r2, #2
 800294a:	0152      	lsls	r2, r2, #5
 800294c:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002950:	f898 a100 	ldrb.w	sl, [r8, #256]	; 0x100
 8002954:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002958:	807a      	strh	r2, [r7, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800295a:	f896 8006 	ldrb.w	r8, [r6, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800295e:	eb04 0208 	add.w	r2, r4, r8
 8002962:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002966:	eb03 0208 	add.w	r2, r3, r8
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800296a:	4488      	add	r8, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800296c:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002970:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002974:	0892      	lsrs	r2, r2, #2
 8002976:	0152      	lsls	r2, r2, #5
 8002978:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 800297c:	f898 a100 	ldrb.w	sl, [r8, #256]	; 0x100
 8002980:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
 8002984:	f829 2005 	strh.w	r2, [r9, r5]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8002988:	3504      	adds	r5, #4
 800298a:	79f2      	ldrb	r2, [r6, #7]
          for(j=0; j < 8; j+=2)
 800298c:	2d10      	cmp	r5, #16
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800298e:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002990:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002992:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002994:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002998:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800299c:	ea4f 0393 	mov.w	r3, r3, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80029a0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029a4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80029a8:	ea43 24c4 	orr.w	r4, r3, r4, lsl #11
 80029ac:	f891 3100 	ldrb.w	r3, [r1, #256]	; 0x100
 80029b0:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 80029b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029b6:	805c      	strh	r4, [r3, #2]
          for(j=0; j < 8; j+=2)
 80029b8:	d180      	bne.n	80028bc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x94>
          pLum += 64;
 80029ba:	9b03      	ldr	r3, [sp, #12]
 80029bc:	f10c 0c04 	add.w	ip, ip, #4
 80029c0:	f10e 0e10 	add.w	lr, lr, #16
 80029c4:	f109 0910 	add.w	r9, r9, #16
 80029c8:	3340      	adds	r3, #64	; 0x40
 80029ca:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 80029cc:	9b08      	ldr	r3, [sp, #32]
 80029ce:	4563      	cmp	r3, ip
 80029d0:	f47f af6f 	bne.w	80028b2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8a>
        pLum = pLum - 128 + 16;
 80029d4:	9b00      	ldr	r3, [sp, #0]
 80029d6:	3310      	adds	r3, #16
 80029d8:	9300      	str	r3, [sp, #0]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 80029da:	9b01      	ldr	r3, [sp, #4]
 80029dc:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80029e0:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
 80029e2:	9b02      	ldr	r3, [sp, #8]
 80029e4:	3302      	adds	r3, #2
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	9302      	str	r3, [sp, #8]
 80029ea:	d105      	bne.n	80029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80029ec:	f500 70c0 	add.w	r0, r0, #384	; 0x180
    for(i= 0; i <  16; i+=2)
 80029f0:	2201      	movs	r2, #1
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;
 80029f2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029f6:	e729      	b.n	800284c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
        pLum = pInBuffer + 128;
 80029f8:	9a00      	ldr	r2, [sp, #0]
 80029fa:	9b02      	ldr	r3, [sp, #8]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	bf08      	it	eq
 8002a00:	4602      	moveq	r2, r0
 8002a02:	9200      	str	r2, [sp, #0]
 8002a04:	e745      	b.n	8002892 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 8002a06:	bf00      	nop
 8002a08:	2004b51c 	.word	0x2004b51c
 8002a0c:	20049c9c 	.word	0x20049c9c
 8002a10:	2004a09c 	.word	0x2004a09c
 8002a14:	2004949c 	.word	0x2004949c
 8002a18:	2004989c 	.word	0x2004989c
 8002a1c:	08027ea8 	.word	0x08027ea8

08002a20 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002a24:	0a1b      	lsrs	r3, r3, #8
{
 8002a26:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002a28:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
{
 8002a2c:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 8002a30:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a34:	9202      	str	r2, [sp, #8]

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a36:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a38:	691b      	ldr	r3, [r3, #16]
{
 8002a3a:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a3c:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a3e:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 8002a40:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8002a44:	4413      	add	r3, r2
 8002a46:	4573      	cmp	r3, lr
 8002a48:	d803      	bhi.n	8002a52 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002a4a:	9805      	ldr	r0, [sp, #20]
 8002a4c:	b00d      	add	sp, #52	; 0x34
 8002a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a52:	ea4f 110e 	mov.w	r1, lr, lsl #4
 8002a56:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 8002a58:	f10e 0e01 	add.w	lr, lr, #1
 8002a5c:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 8002a60:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a62:	fbb1 f2f3 	udiv	r2, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a66:	9b03      	ldr	r3, [sp, #12]
 8002a68:	fb03 f402 	mul.w	r4, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002a6c:	9b02      	ldr	r3, [sp, #8]
 8002a6e:	fb03 1312 	mls	r3, r3, r2, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002a78:	9300      	str	r3, [sp, #0]
    currentMCU++;
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a7e:	9b07      	ldr	r3, [sp, #28]
 8002a80:	9a00      	ldr	r2, [sp, #0]
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d96a      	bls.n	8002b5c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13c>
        pOutAddr = pOutBuffer + refline;
 8002a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a88:	f10a 0801 	add.w	r8, sl, #1
 8002a8c:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 8002a90:	f107 0308 	add.w	r3, r7, #8
 8002a94:	9309      	str	r3, [sp, #36]	; 0x24
 8002a96:	f108 33ff 	add.w	r3, r8, #4294967295
    currentMCU++;
 8002a9a:	2400      	movs	r4, #0
 8002a9c:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002a9e:	1e7b      	subs	r3, r7, #1
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8002aa6:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002aa8:	9b01      	ldr	r3, [sp, #4]
 8002aaa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002ab2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002ab6:	9b01      	ldr	r3, [sp, #4]
 8002ab8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002abe:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002ac4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
 8002ace:	9b08      	ldr	r3, [sp, #32]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002ad0:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ad2:	4a2b      	ldr	r2, [pc, #172]	; (8002b80 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x160>)
            ycomp = (int32_t)(*(pLum +j));
 8002ad4:	f813 c014 	ldrb.w	ip, [r3, r4, lsl #1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ad8:	4416      	add	r6, r2
 8002ada:	4613      	mov	r3, r2
 8002adc:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ae0:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ae4:	441d      	add	r5, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ae8:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002aec:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002af0:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002af2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002af6:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002afa:	0892      	lsrs	r2, r2, #2
 8002afc:	0152      	lsls	r2, r2, #5
 8002afe:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002b02:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 8002b06:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002b0a:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 8002b0e:	f818 2014 	ldrb.w	r2, [r8, r4, lsl #1]
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002b12:	3401      	adds	r4, #1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b14:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b16:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002b18:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 8002b1a:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b1c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b20:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b24:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b28:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b2c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002b30:	ea41 26c6 	orr.w	r6, r1, r6, lsl #11
 8002b34:	f895 1100 	ldrb.w	r1, [r5, #256]	; 0x100
 8002b38:	ea46 06d1 	orr.w	r6, r6, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002b3c:	805e      	strh	r6, [r3, #2]
          for(j=0; j < 8; j+=2)
 8002b3e:	d1b0      	bne.n	8002aa2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x82>
 8002b40:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 8002b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b44:	f109 0910 	add.w	r9, r9, #16
 8002b48:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8002b4c:	42bb      	cmp	r3, r7
 8002b4e:	d1a2      	bne.n	8002a96 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x76>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b50:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 8002b52:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b56:	9b03      	ldr	r3, [sp, #12]
 8002b58:	441a      	add	r2, r3
 8002b5a:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 8002b5c:	9b04      	ldr	r3, [sp, #16]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	9304      	str	r3, [sp, #16]
 8002b62:	d18c      	bne.n	8002a7e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8002b64:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002b68:	e76a      	b.n	8002a40 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002b6a:	bf00      	nop
 8002b6c:	2004b51c 	.word	0x2004b51c
 8002b70:	2004949c 	.word	0x2004949c
 8002b74:	2004a09c 	.word	0x2004a09c
 8002b78:	20049c9c 	.word	0x20049c9c
 8002b7c:	2004989c 	.word	0x2004989c
 8002b80:	08027ea8 	.word	0x08027ea8

08002b84 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b88:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b8a:	22c0      	movs	r2, #192	; 0xc0
{
 8002b8c:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 8002b8e:	4654      	mov	r4, sl
{
 8002b90:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b92:	fbb3 f3f2 	udiv	r3, r3, r2

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b96:	4a35      	ldr	r2, [pc, #212]	; (8002c6c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002b98:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b9a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002b9c:	9100      	str	r1, [sp, #0]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b9e:	6a91      	ldr	r1, [r2, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002ba0:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002ba2:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002ba4:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 8002ba6:	9b04      	ldr	r3, [sp, #16]
 8002ba8:	eb03 020a 	add.w	r2, r3, sl
 8002bac:	42a2      	cmp	r2, r4
 8002bae:	d803      	bhi.n	8002bb8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	b009      	add	sp, #36	; 0x24
 8002bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002bb8:	00e5      	lsls	r5, r4, #3
 8002bba:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;
 8002bbc:	3401      	adds	r4, #1
    pLum = pInBuffer;
 8002bbe:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002bc0:	fbb5 f1f2 	udiv	r1, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002bc4:	9a01      	ldr	r2, [sp, #4]
 8002bc6:	fb02 f601 	mul.w	r6, r2, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002bca:	9a00      	ldr	r2, [sp, #0]
 8002bcc:	fb02 5211 	mls	r2, r2, r1, r5
    currentMCU++;
 8002bd0:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002bd2:	0052      	lsls	r2, r2, #1
    currentMCU++;
 8002bd4:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002bd6:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002bda:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002bde:	9905      	ldr	r1, [sp, #20]
 8002be0:	4291      	cmp	r1, r2
 8002be2:	d93c      	bls.n	8002c5e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xda>
        pOutAddr = pOutBuffer+ refline;
 8002be4:	9907      	ldr	r1, [sp, #28]
 8002be6:	f106 3eff 	add.w	lr, r6, #4294967295
 8002bea:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 8002bec:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002bf0:	9102      	str	r1, [sp, #8]
 8002bf2:	f105 0110 	add.w	r1, r5, #16
 8002bf6:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8002bf8:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002bfa:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 8002bfe:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002c02:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 8002c08:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c0a:	4f1a      	ldr	r7, [pc, #104]	; (8002c74 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 8002c0c:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c10:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8002c14:	440f      	add	r7, r1
 8002c16:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c1a:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c1e:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c24:	440f      	add	r7, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c26:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 8002c2a:	08ff      	lsrs	r7, r7, #3
 8002c2c:	ea47 2bcb 	orr.w	fp, r7, fp, lsl #11
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c30:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
 8002c36:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
          for(j=0; j < 8; j++)
 8002c3a:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c3c:	4447      	add	r7, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c3e:	eb01 4727 	add.w	r7, r1, r7, asr #16
 8002c42:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 8002c46:	08bf      	lsrs	r7, r7, #2
 8002c48:	ea4b 1b47 	orr.w	fp, fp, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
 8002c4c:	f825 bb02 	strh.w	fp, [r5], #2
          for(j=0; j < 8; j++)
 8002c50:	429d      	cmp	r5, r3
 8002c52:	d1d1      	bne.n	8002bf8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c54:	9b01      	ldr	r3, [sp, #4]
 8002c56:	3608      	adds	r6, #8
          pLum += 8;
 8002c58:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c5c:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 8002c5e:	9b03      	ldr	r3, [sp, #12]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	9303      	str	r3, [sp, #12]
 8002c64:	d1bb      	bne.n	8002bde <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8002c66:	30c0      	adds	r0, #192	; 0xc0
 8002c68:	e79d      	b.n	8002ba6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 8002c6a:	bf00      	nop
 8002c6c:	2004b51c 	.word	0x2004b51c
 8002c70:	08027ea8 	.word	0x08027ea8
 8002c74:	2004a09c 	.word	0x2004a09c
 8002c78:	2004949c 	.word	0x2004949c
 8002c7c:	20049c9c 	.word	0x20049c9c
 8002c80:	2004989c 	.word	0x2004989c

08002c84 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	4604      	mov	r4, r0
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8002c8c:	0998      	lsrs	r0, r3, #6
{
 8002c8e:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
 8002c90:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c94:	491a      	ldr	r1, [pc, #104]	; (8002d00 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002c96:	9303      	str	r3, [sp, #12]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c98:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c9c:	6909      	ldr	r1, [r1, #16]
 8002c9e:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 8002ca0:	9b03      	ldr	r3, [sp, #12]
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d802      	bhi.n	8002cac <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002ca6:	b005      	add	sp, #20
 8002ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cac:	00d3      	lsls	r3, r2, #3
    pLum = pInBuffer;
 8002cae:	46a4      	mov	ip, r4
    currentMCU++;
 8002cb0:	3201      	adds	r2, #1
 8002cb2:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cb4:	fbb3 f1f8 	udiv	r1, r3, r8
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002cb8:	fb08 3311 	mls	r3, r8, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002cbc:	fb09 f501 	mul.w	r5, r9, r1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002cc6:	9901      	ldr	r1, [sp, #4]
 8002cc8:	4299      	cmp	r1, r3
 8002cca:	d914      	bls.n	8002cf6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 8002ccc:	9902      	ldr	r1, [sp, #8]
 8002cce:	46e2      	mov	sl, ip
 8002cd0:	4419      	add	r1, r3
 8002cd2:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8002cd6:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8002cda:	08f5      	lsrs	r5, r6, #3
 8002cdc:	08b6      	lsrs	r6, r6, #2
 8002cde:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002ce2:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 8002ce6:	432e      	orrs	r6, r5
 8002ce8:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 8002cec:	4559      	cmp	r1, fp
 8002cee:	d1f2      	bne.n	8002cd6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
 8002cf0:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002cf4:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8002cf6:	3f01      	subs	r7, #1
 8002cf8:	d1e5      	bne.n	8002cc6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002cfa:	3440      	adds	r4, #64	; 0x40
 8002cfc:	e7d0      	b.n	8002ca0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002cfe:	bf00      	nop
 8002d00:	2004b51c 	.word	0x2004b51c

08002d04 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002d0c:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002d0e:	0a18      	lsrs	r0, r3, #8
{
 8002d10:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8002d12:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002d16:	4927      	ldr	r1, [pc, #156]	; (8002db4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002d18:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d1a:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002d1e:	6909      	ldr	r1, [r1, #16]
 8002d20:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8002d22:	9b03      	ldr	r3, [sp, #12]
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d802      	bhi.n	8002d2e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002d28:	b005      	add	sp, #20
 8002d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002d2e:	00d1      	lsls	r1, r2, #3
    pChrom = pInBuffer;
 8002d30:	46ae      	mov	lr, r5
    currentMCU++;
 8002d32:	3201      	adds	r2, #1
 8002d34:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002d38:	fbb1 f3f9 	udiv	r3, r1, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002d3c:	fb09 1113 	mls	r1, r9, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d40:	fb0a f403 	mul.w	r4, sl, r3
 8002d44:	0049      	lsls	r1, r1, #1
 8002d46:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002d4a:	9b00      	ldr	r3, [sp, #0]
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	d92b      	bls.n	8002da8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
        pOutAddr = pOutBuffer+ refline;
 8002d50:	9b02      	ldr	r3, [sp, #8]
 8002d52:	4674      	mov	r4, lr
 8002d54:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 8002d56:	f106 0310 	add.w	r3, r6, #16
 8002d5a:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 8002d5c:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 8002d60:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002d62:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8002d66:	fb13 f308 	smulbb	r3, r3, r8
 8002d6a:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002d6e:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002d72:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002d76:	fb13 f308 	smulbb	r3, r3, r8
 8002d7a:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d7e:	109b      	asrs	r3, r3, #2
 8002d80:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002d82:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8002d86:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 8002d8a:	fb1b f808 	smulbb	r8, fp, r8
 8002d8e:	fbb8 f8f7 	udiv	r8, r8, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002d92:	ea43 03d8 	orr.w	r3, r3, r8, lsr #3
 8002d96:	b29b      	uxth	r3, r3
          *(__IO uint16_t *)pOutAddr =
 8002d98:	f826 3b02 	strh.w	r3, [r6], #2
          for(j=0; j < 8; j++)
 8002d9c:	9b01      	ldr	r3, [sp, #4]
 8002d9e:	429e      	cmp	r6, r3
 8002da0:	d1dc      	bne.n	8002d5c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
 8002da2:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002da6:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 8002da8:	f1bc 0c01 	subs.w	ip, ip, #1
 8002dac:	d1cd      	bne.n	8002d4a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002dae:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8002db2:	e7b6      	b.n	8002d22 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8002db4:	2004b51c 	.word	0x2004b51c

08002db8 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002dba:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002dbc:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002dbe:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002dc0:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002dc6:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002dc8:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002dca:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002dce:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002dd0:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002dd2:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002dd4:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002dd6:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002dd8:	d13c      	bne.n	8002e54 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002dda:	2801      	cmp	r0, #1
 8002ddc:	d122      	bne.n	8002e24 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002dde:	4823      	ldr	r0, [pc, #140]	; (8002e6c <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
 8002de0:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

      if(JPEG_ConvertorParams.LineOffset != 0)
 8002de2:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002de6:	bf18      	it	ne
 8002de8:	f1c1 0110 	rsbne	r1, r1, #16
 8002dec:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8002dee:	2110      	movs	r1, #16
 8002df0:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 8002df2:	6219      	str	r1, [r3, #32]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002df4:	6959      	ldr	r1, [r3, #20]
 8002df6:	4421      	add	r1, r4
 8002df8:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8002dfa:	0061      	lsls	r1, r4, #1
 8002dfc:	6299      	str	r1, [r3, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002dfe:	69d9      	ldr	r1, [r3, #28]
 8002e00:	fbb4 f0f1 	udiv	r0, r4, r1
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002e04:	fb01 4410 	mls	r4, r1, r0, r4
 8002e08:	b104      	cbz	r4, 8002e0c <TGFX_JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8002e0a:	3001      	adds	r0, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8002e0c:	6a1c      	ldr	r4, [r3, #32]
 8002e0e:	fbb5 f1f4 	udiv	r1, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8002e12:	fb04 5411 	mls	r4, r4, r1, r5
 8002e16:	b104      	cbz	r4, 8002e1a <TGFX_JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8002e18:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002e1a:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8002e1c:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002e1e:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8002e20:	6011      	str	r1, [r2, #0]
}
 8002e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002e24:	2802      	cmp	r0, #2
 8002e26:	d10b      	bne.n	8002e40 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002e28:	4811      	ldr	r0, [pc, #68]	; (8002e70 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
 8002e2a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8002e2c:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002e30:	bf18      	it	ne
 8002e32:	f1c1 0110 	rsbne	r1, r1, #16
 8002e36:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8002e38:	2110      	movs	r1, #16
 8002e3a:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8002e3c:	2108      	movs	r1, #8
 8002e3e:	e7d8      	b.n	8002df2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002e42:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8002e44:	f014 0107 	ands.w	r1, r4, #7
 8002e48:	d001      	beq.n	8002e4e <TGFX_JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002e4a:	f1c1 0108 	rsb	r1, r1, #8
 8002e4e:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 8002e50:	2108      	movs	r1, #8
 8002e52:	e7cd      	b.n	8002df0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8002e54:	b90e      	cbnz	r6, 8002e5a <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002e56:	4808      	ldr	r0, [pc, #32]	; (8002e78 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 8002e58:	e7f3      	b.n	8002e42 <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8002e5a:	2e30      	cmp	r6, #48	; 0x30
 8002e5c:	d101      	bne.n	8002e62 <TGFX_JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002e5e:	4807      	ldr	r0, [pc, #28]	; (8002e7c <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>)
 8002e60:	e7ef      	b.n	8002e42 <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 8002e62:	2001      	movs	r0, #1
 8002e64:	e7dd      	b.n	8002e22 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6a>
 8002e66:	bf00      	nop
 8002e68:	2004b51c 	.word	0x2004b51c
 8002e6c:	08002829 	.word	0x08002829
 8002e70:	08002a21 	.word	0x08002a21
 8002e74:	08002b85 	.word	0x08002b85
 8002e78:	08002c85 	.word	0x08002c85
 8002e7c:	08002d05 	.word	0x08002d05

08002e80 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8002e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e84:	f8df c250 	ldr.w	ip, [pc, #592]	; 80030d8 <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80030dc <TGFX_JPEG_InitColorTables+0x25c>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e8e:	f644 4b8b 	movw	fp, #19595	; 0x4c8b
 8002e92:	4f7e      	ldr	r7, [pc, #504]	; (800308c <TGFX_JPEG_InitColorTables+0x20c>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e94:	f249 6a45 	movw	sl, #38469	; 0x9645
 8002e98:	4e7d      	ldr	r6, [pc, #500]	; (8003090 <TGFX_JPEG_InitColorTables+0x210>)
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002e9a:	f641 592f 	movw	r9, #7471	; 0x1d2f
 8002e9e:	4d7d      	ldr	r5, [pc, #500]	; (8003094 <TGFX_JPEG_InitColorTables+0x214>)
 8002ea0:	4c7d      	ldr	r4, [pc, #500]	; (8003098 <TGFX_JPEG_InitColorTables+0x218>)
 8002ea2:	487e      	ldr	r0, [pc, #504]	; (800309c <TGFX_JPEG_InitColorTables+0x21c>)
 8002ea4:	497e      	ldr	r1, [pc, #504]	; (80030a0 <TGFX_JPEG_InitColorTables+0x220>)
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ea6:	fb0b f203 	mul.w	r2, fp, r3
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eaa:	f64e 3e2f 	movw	lr, #60207	; 0xeb2f
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002eb2:	1412      	asrs	r2, r2, #16
 8002eb4:	f848 2b04 	str.w	r2, [r8], #4
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002eb8:	fb0a f203 	mul.w	r2, sl, r3
 8002ebc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002ec0:	1412      	asrs	r2, r2, #16
 8002ec2:	f84c 2b04 	str.w	r2, [ip], #4
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ec6:	fb09 f203 	mul.w	r2, r9, r3
 8002eca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002ece:	1412      	asrs	r2, r2, #16
 8002ed0:	f847 2b04 	str.w	r2, [r7], #4
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ed4:	4a73      	ldr	r2, [pc, #460]	; (80030a4 <TGFX_JPEG_InitColorTables+0x224>)
 8002ed6:	435a      	muls	r2, r3
 8002ed8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002edc:	1412      	asrs	r2, r2, #16
 8002ede:	f846 2b04 	str.w	r2, [r6], #4
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ee2:	4a71      	ldr	r2, [pc, #452]	; (80030a8 <TGFX_JPEG_InitColorTables+0x228>)
 8002ee4:	435a      	muls	r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ee6:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ee8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
 8002eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ef0:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002ef4:	f845 2b04 	str.w	r2, [r5], #4
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ef8:	f343 024f 	sbfx	r2, r3, #1, #16
 8002efc:	f844 2b04 	str.w	r2, [r4], #4
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f00:	4a6a      	ldr	r2, [pc, #424]	; (80030ac <TGFX_JPEG_InitColorTables+0x22c>)
 8002f02:	fb02 e203 	mla	r2, r2, r3, lr
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f06:	f249 4ed0 	movw	lr, #38096	; 0x94d0
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f0a:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002f0e:	f840 2b04 	str.w	r2, [r0], #4
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002f12:	4a67      	ldr	r2, [pc, #412]	; (80030b0 <TGFX_JPEG_InitColorTables+0x230>)
 8002f14:	fb02 e203 	mla	r2, r2, r3, lr
 8002f18:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002f1c:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8002f20:	d1c1      	bne.n	8002ea6 <TGFX_JPEG_InitColorTables+0x26>
 8002f22:	4c64      	ldr	r4, [pc, #400]	; (80030b4 <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8002f24:	2200      	movs	r2, #0
  {
    for(j = 0; j < 16; j++)
 8002f26:	00d3      	lsls	r3, r2, #3
  for (i = 0; i <= 255; i++)
 8002f28:	4625      	mov	r5, r4
    for(j = 0; j < 16; j++)
 8002f2a:	2100      	movs	r1, #0
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
 8002f2c:	2907      	cmp	r1, #7
 8002f2e:	f240 80a6 	bls.w	800307e <TGFX_JPEG_InitColorTables+0x1fe>
 8002f32:	2a07      	cmp	r2, #7
 8002f34:	bf8c      	ite	hi
 8002f36:	f103 0078 	addhi.w	r0, r3, #120	; 0x78
      else  if((j>=8) && (i<8)) offset+= 56;
 8002f3a:	f103 0038 	addls.w	r0, r3, #56	; 0x38
    for(j = 0; j < 16; j++)
 8002f3e:	3101      	adds	r1, #1
 8002f40:	3301      	adds	r3, #1
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8002f42:	f825 0b02 	strh.w	r0, [r5], #2
    for(j = 0; j < 16; j++)
 8002f46:	2910      	cmp	r1, #16
 8002f48:	d1f0      	bne.n	8002f2c <TGFX_JPEG_InitColorTables+0xac>
  for(i = 0; i < 16; i++)
 8002f4a:	3201      	adds	r2, #1
 8002f4c:	3420      	adds	r4, #32
 8002f4e:	2a10      	cmp	r2, #16
 8002f50:	d1e9      	bne.n	8002f26 <TGFX_JPEG_InitColorTables+0xa6>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8002f52:	2000      	movs	r0, #0
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002f54:	f8df e188 	ldr.w	lr, [pc, #392]	; 80030e0 <TGFX_JPEG_InitColorTables+0x260>
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f58:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80030e4 <TGFX_JPEG_InitColorTables+0x264>

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002f5c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80030e8 <TGFX_JPEG_InitColorTables+0x268>
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f60:	f8df a188 	ldr.w	sl, [pc, #392]	; 80030ec <TGFX_JPEG_InitColorTables+0x26c>
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f64:	0844      	lsrs	r4, r0, #1
    for(j = 0; j < 16; j++)
 8002f66:	2500      	movs	r5, #0
 8002f68:	00c3      	lsls	r3, r0, #3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f6a:	00e4      	lsls	r4, r4, #3
 8002f6c:	fa1f fc83 	uxth.w	ip, r3
 8002f70:	b2a4      	uxth	r4, r4
 8002f72:	0142      	lsls	r2, r0, #5
 8002f74:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002f78:	4f4f      	ldr	r7, [pc, #316]	; (80030b8 <TGFX_JPEG_InitColorTables+0x238>)
    for(j = 0; j < 16; j++)
 8002f7a:	3501      	adds	r5, #1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f7c:	1919      	adds	r1, r3, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f7e:	4463      	add	r3, ip
    for(j = 0; j < 16; j++)
 8002f80:	2d10      	cmp	r5, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f82:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f84:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f86:	f501 7680 	add.w	r6, r1, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f8a:	f103 0b80 	add.w	fp, r3, #128	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f8e:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f92:	b2b6      	uxth	r6, r6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002f94:	f822 3008 	strh.w	r3, [r2, r8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f98:	53d6      	strh	r6, [r2, r7]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002f9a:	4f48      	ldr	r7, [pc, #288]	; (80030bc <TGFX_JPEG_InitColorTables+0x23c>)
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002f9c:	f822 600a 	strh.w	r6, [r2, sl]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002fa0:	f822 b007 	strh.w	fp, [r2, r7]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002fa4:	f501 7ba0 	add.w	fp, r1, #320	; 0x140
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002fa8:	f501 71c0 	add.w	r1, r1, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002fac:	f822 b00e 	strh.w	fp, [r2, lr]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002fb0:	f822 1009 	strh.w	r1, [r2, r9]
    for(j = 0; j < 16; j++)
 8002fb4:	f102 0202 	add.w	r2, r2, #2
 8002fb8:	d1dc      	bne.n	8002f74 <TGFX_JPEG_InitColorTables+0xf4>
  for(i = 0; i < 16; i++)
 8002fba:	3001      	adds	r0, #1
 8002fbc:	2810      	cmp	r0, #16
 8002fbe:	d1d1      	bne.n	8002f64 <TGFX_JPEG_InitColorTables+0xe4>
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80030f0 <TGFX_JPEG_InitColorTables+0x270>
 8002fc6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80030f4 <TGFX_JPEG_InitColorTables+0x274>
 8002fca:	4608      	mov	r0, r1
 8002fcc:	f8df e128 	ldr.w	lr, [pc, #296]	; 80030f8 <TGFX_JPEG_InitColorTables+0x278>
 8002fd0:	f8df c128 	ldr.w	ip, [pc, #296]	; 80030fc <TGFX_JPEG_InitColorTables+0x27c>
 8002fd4:	b283      	uxth	r3, r0
 8002fd6:	eb09 0701 	add.w	r7, r9, r1
 8002fda:	eb08 0601 	add.w	r6, r8, r1
 8002fde:	eb0e 0501 	add.w	r5, lr, r1
    }
  }

  for(i = 0; i < 8; i++)
  {
    for(j = 0; j < 8; j++)
 8002fe2:	f103 0208 	add.w	r2, r3, #8
 8002fe6:	eb0c 0401 	add.w	r4, ip, r1
 8002fea:	b292      	uxth	r2, r2
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002fec:	f103 0a40 	add.w	sl, r3, #64	; 0x40
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8002ff0:	f827 3b02 	strh.w	r3, [r7], #2
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002ff4:	f826 ab02 	strh.w	sl, [r6], #2
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8002ff8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 8002ffc:	f825 ab02 	strh.w	sl, [r5], #2
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8003000:	f103 0ac0 	add.w	sl, r3, #192	; 0xc0
 8003004:	3301      	adds	r3, #1
 8003006:	f824 ab02 	strh.w	sl, [r4], #2
    for(j = 0; j < 8; j++)
 800300a:	b29b      	uxth	r3, r3
 800300c:	4293      	cmp	r3, r2
 800300e:	d1ed      	bne.n	8002fec <TGFX_JPEG_InitColorTables+0x16c>
  for(i = 0; i < 8; i++)
 8003010:	3008      	adds	r0, #8
 8003012:	3110      	adds	r1, #16
 8003014:	2840      	cmp	r0, #64	; 0x40
 8003016:	d1dd      	bne.n	8002fd4 <TGFX_JPEG_InitColorTables+0x154>
 8003018:	4d29      	ldr	r5, [pc, #164]	; (80030c0 <TGFX_JPEG_InitColorTables+0x240>)
  for (i = 0; i <= 255; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	4c29      	ldr	r4, [pc, #164]	; (80030c4 <TGFX_JPEG_InitColorTables+0x244>)
 800301e:	482a      	ldr	r0, [pc, #168]	; (80030c8 <TGFX_JPEG_InitColorTables+0x248>)
 8003020:	492a      	ldr	r1, [pc, #168]	; (80030cc <TGFX_JPEG_InitColorTables+0x24c>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003022:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8003100 <TGFX_JPEG_InitColorTables+0x280>
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003026:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8003104 <TGFX_JPEG_InitColorTables+0x284>
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800302a:	4f29      	ldr	r7, [pc, #164]	; (80030d0 <TGFX_JPEG_InitColorTables+0x250>)
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800302c:	4e29      	ldr	r6, [pc, #164]	; (80030d4 <TGFX_JPEG_InitColorTables+0x254>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800302e:	fb0e f203 	mul.w	r2, lr, r3
 8003032:	f5a2 0232 	sub.w	r2, r2, #11665408	; 0xb20000
 8003036:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800303a:	1412      	asrs	r2, r2, #16
 800303c:	f845 2b04 	str.w	r2, [r5], #4
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003040:	fb0c f203 	mul.w	r2, ip, r3
 8003044:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8003048:	f5a2 42a0 	sub.w	r2, r2, #20480	; 0x5000
 800304c:	1412      	asrs	r2, r2, #16
 800304e:	f844 2b04 	str.w	r2, [r4], #4
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8003052:	fb07 f203 	mul.w	r2, r7, r3
 8003056:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800305a:	f502 42d0 	add.w	r2, r2, #26624	; 0x6800
 800305e:	f840 2b04 	str.w	r2, [r0], #4
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003062:	fb06 f203 	mul.w	r2, r6, r3
  for (i = 0; i <= 255; i++)
 8003066:	3301      	adds	r3, #1
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003068:	f502 1230 	add.w	r2, r2, #2883584	; 0x2c0000
  for (i = 0; i <= 255; i++)
 800306c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003070:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003074:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8003078:	d1d9      	bne.n	800302e <TGFX_JPEG_InitColorTables+0x1ae>
}
 800307a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j<8) && (i>=8)) offset+= 64;
 800307e:	2a07      	cmp	r2, #7
 8003080:	bf8c      	ite	hi
 8003082:	f103 0040 	addhi.w	r0, r3, #64	; 0x40
      offset =  j + (i*8);
 8003086:	4618      	movls	r0, r3
 8003088:	e759      	b.n	8002f3e <TGFX_JPEG_InitColorTables+0xbe>
 800308a:	bf00      	nop
 800308c:	2004909c 	.word	0x2004909c
 8003090:	2004c0dc 	.word	0x2004c0dc
 8003094:	2004a49c 	.word	0x2004a49c
 8003098:	2004889c 	.word	0x2004889c
 800309c:	2004a89c 	.word	0x2004a89c
 80030a0:	20048c9c 	.word	0x20048c9c
 80030a4:	ffffd4d1 	.word	0xffffd4d1
 80030a8:	ffffab30 	.word	0xffffab30
 80030ac:	ffff94d1 	.word	0xffff94d1
 80030b0:	ffffeb30 	.word	0xffffeb30
 80030b4:	2004bedc 	.word	0x2004bedc
 80030b8:	2004b09c 	.word	0x2004b09c
 80030bc:	2004b29c 	.word	0x2004b29c
 80030c0:	2004a09c 	.word	0x2004a09c
 80030c4:	2004949c 	.word	0x2004949c
 80030c8:	20049c9c 	.word	0x20049c9c
 80030cc:	2004989c 	.word	0x2004989c
 80030d0:	ffff4930 	.word	0xffff4930
 80030d4:	ffffa7e8 	.word	0xffffa7e8
 80030d8:	2004ac9c 	.word	0x2004ac9c
 80030dc:	2004c4dc 	.word	0x2004c4dc
 80030e0:	2004b55c 	.word	0x2004b55c
 80030e4:	2004b75c 	.word	0x2004b75c
 80030e8:	2004b9dc 	.word	0x2004b9dc
 80030ec:	2004bbdc 	.word	0x2004bbdc
 80030f0:	2004be5c 	.word	0x2004be5c
 80030f4:	2004b49c 	.word	0x2004b49c
 80030f8:	2004b95c 	.word	0x2004b95c
 80030fc:	2004bddc 	.word	0x2004bddc
 8003100:	000166e8 	.word	0x000166e8
 8003104:	0001c5a0 	.word	0x0001c5a0

08003108 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8003108:	4901      	ldr	r1, [pc, #4]	; (8003110 <vApplicationIdleHook+0x8>)
 800310a:	2000      	movs	r0, #0
 800310c:	f009 bf30 	b.w	800cf70 <vTaskSetApplicationTaskTag>
 8003110:	080013f5 	.word	0x080013f5

08003114 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003114:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(100);
 8003116:	2064      	movs	r0, #100	; 0x64
 8003118:	f008 f92a 	bl	800b370 <osDelay>
  for(;;)
 800311c:	e7fb      	b.n	8003116 <StartDefaultTask+0x2>
	...

08003120 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003120:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003122:	f44f 7340 	mov.w	r3, #768	; 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003126:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4817      	ldr	r0, [pc, #92]	; (800318c <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800312e:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003130:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003132:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003134:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003136:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003138:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800313c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 800313e:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003140:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003142:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003146:	f006 fd09 	bl	8009b5c <HAL_QSPI_Command>
 800314a:	b9e0      	cbnz	r0, 8003186 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 800314c:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 800314e:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003150:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003154:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003156:	480d      	ldr	r0, [pc, #52]	; (800318c <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8003158:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 800315c:	2310      	movs	r3, #16
 800315e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003162:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003164:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003166:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 800316a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800316e:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003170:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003172:	f241 3388 	movw	r3, #5000	; 0x1388
 8003176:	f006 fdec 	bl	8009d52 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 800317a:	3800      	subs	r0, #0
 800317c:	bf18      	it	ne
 800317e:	2001      	movne	r0, #1
}
 8003180:	b015      	add	sp, #84	; 0x54
 8003182:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003186:	2001      	movs	r0, #1
 8003188:	e7fa      	b.n	8003180 <QSPI_WriteEnable.constprop.0+0x60>
 800318a:	bf00      	nop
 800318c:	200612c8 	.word	0x200612c8

08003190 <SystemClock_Config>:
{
 8003190:	b510      	push	{r4, lr}
 8003192:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003194:	2210      	movs	r2, #16
 8003196:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003198:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800319a:	a809      	add	r0, sp, #36	; 0x24
 800319c:	f022 f994 	bl	80254c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031a0:	2214      	movs	r2, #20
 80031a2:	2100      	movs	r1, #0
 80031a4:	a802      	add	r0, sp, #8
 80031a6:	f022 f98f 	bl	80254c8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 80031ac:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ae:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c2:	4b19      	ldr	r3, [pc, #100]	; (8003228 <SystemClock_Config+0x98>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80031ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031cc:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031dc:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031e4:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 80031e8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80031ec:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80031f0:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80031f2:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 80031f6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031f8:	f006 fe3c 	bl	8009e74 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80031fc:	f006 fb3e 	bl	800987c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003200:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003202:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003204:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003206:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800320a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800320e:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003216:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003218:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800321a:	f007 f81f 	bl	800a25c <HAL_RCC_ClockConfig>
}
 800321e:	b014      	add	sp, #80	; 0x50
 8003220:	bd10      	pop	{r4, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	40007000 	.word	0x40007000

0800322c <MX_I2C4_Init>:
{
 800322c:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 800322e:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003230:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 8003232:	4c0d      	ldr	r4, [pc, #52]	; (8003268 <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003236:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003238:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 800323a:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800323e:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 8003240:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003244:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003248:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800324c:	f004 ffec 	bl	8008228 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003250:	4629      	mov	r1, r5
 8003252:	4620      	mov	r0, r4
 8003254:	f005 f9cb 	bl	80085ee <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003258:	4629      	mov	r1, r5
 800325a:	4620      	mov	r0, r4
}
 800325c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003260:	f005 b9eb 	b.w	800863a <HAL_I2CEx_ConfigDigitalFilter>
 8003264:	40006000 	.word	0x40006000
 8003268:	20060fb0 	.word	0x20060fb0
 800326c:	00c0eaff 	.word	0x00c0eaff

08003270 <main>:
{
 8003270:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003274:	b0bb      	sub	sp, #236	; 0xec

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003276:	2210      	movs	r2, #16
 8003278:	2100      	movs	r1, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800327a:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800327c:	a82c      	add	r0, sp, #176	; 0xb0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800327e:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003280:	f022 f922 	bl	80254c8 <memset>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003284:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8003286:	f003 fd79 	bl	8006d7c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800328a:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
 800328e:	4bc8      	ldr	r3, [pc, #800]	; (80035b0 <main+0x340>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003290:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003292:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003296:	f240 1701 	movw	r7, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800329a:	e9cd e32d 	strd	lr, r3, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800329e:	4bc5      	ldr	r3, [pc, #788]	; (80035b4 <main+0x344>)
 80032a0:	932f      	str	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032a2:	f003 fd8d 	bl	8006dc0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 80032a6:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80032aa:	f88d 40b1 	strb.w	r4, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80032ae:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032b0:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.BaseAddress = 0x90000000;
 80032b2:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80032b4:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80032b8:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80032bc:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032c0:	f003 fd7e 	bl	8006dc0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80032c4:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032c6:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80032c8:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80032cc:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80032d0:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80032d2:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80032d6:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032da:	f003 fd71 	bl	8006dc0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80032de:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032e2:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80032e4:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80032e8:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80032ea:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80032ec:	f88d 50b1 	strb.w	r5, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80032f0:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80032f4:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032f8:	f003 fd62 	bl	8006dc0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80032fc:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032fe:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003300:	f88d 60b1 	strb.w	r6, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003304:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003308:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800330c:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003310:	f003 fd56 	bl	8006dc0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003314:	4630      	mov	r0, r6
 8003316:	f003 fd41 	bl	8006d9c <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 800331a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800331e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003322:	4ba5      	ldr	r3, [pc, #660]	; (80035b8 <main+0x348>)
 8003324:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800332c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003336:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003338:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800333c:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003340:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003344:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003348:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800334c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003350:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003354:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8003358:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800335a:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800335e:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003360:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003364:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003366:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 800336a:	d2f9      	bcs.n	8003360 <main+0xf0>
    } while(sets-- != 0U);
 800336c:	3a20      	subs	r2, #32
 800336e:	f112 0f20 	cmn.w	r2, #32
 8003372:	d1f2      	bne.n	800335a <main+0xea>
 8003374:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800337e:	615a      	str	r2, [r3, #20]
 8003380:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003384:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8003388:	f003 fa26 	bl	80067d8 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338c:	2501      	movs	r5, #1
  SystemClock_Config();
 800338e:	f7ff feff 	bl	8003190 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003392:	2214      	movs	r2, #20
 8003394:	2100      	movs	r1, #0
 8003396:	a82c      	add	r0, sp, #176	; 0xb0
 8003398:	f022 f896 	bl	80254c8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800339c:	4b87      	ldr	r3, [pc, #540]	; (80035bc <main+0x34c>)
  HAL_GPIO_WritePin(GPIOJ, VSYNC_FREQ2_Pin|GPIO_PIN_4|RENDER_TIME2_Pin|GPIO_PIN_3
 800339e:	f242 013a 	movw	r1, #8250	; 0x203a
 80033a2:	4887      	ldr	r0, [pc, #540]	; (80035c0 <main+0x350>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a6:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 80033ac:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033b0:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80033b4:	2718      	movs	r7, #24
  hdsi.Init.TXEscapeCkdiv = 4;
 80033b6:	f04f 0a04 	mov.w	sl, #4
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80033ba:	f04f 0964 	mov.w	r9, #100	; 0x64
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  PhyTimings.ClockLaneLP2HSTime = 33;
 80033c0:	f04f 0b1c 	mov.w	fp, #28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	f002 0210 	and.w	r2, r2, #16
 80033ca:	9202      	str	r2, [sp, #8]
 80033cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d0:	f042 0202 	orr.w	r2, r2, #2
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
 80033d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d8:	f002 0202 	and.w	r2, r2, #2
 80033dc:	9203      	str	r2, [sp, #12]
 80033de:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
 80033e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ea:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80033ee:	9204      	str	r2, [sp, #16]
 80033f0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
 80033fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003400:	9205      	str	r2, [sp, #20]
 8003402:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	f042 0208 	orr.w	r2, r2, #8
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
 800340c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340e:	f002 0208 	and.w	r2, r2, #8
 8003412:	9206      	str	r2, [sp, #24]
 8003414:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003418:	f042 0204 	orr.w	r2, r2, #4
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
 800341e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003420:	f002 0204 	and.w	r2, r2, #4
 8003424:	9207      	str	r2, [sp, #28]
 8003426:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
 8003430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003432:	f002 0201 	and.w	r2, r2, #1
 8003436:	9208      	str	r2, [sp, #32]
 8003438:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800343a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
 8003442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003444:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003448:	9209      	str	r2, [sp, #36]	; 0x24
 800344a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800344c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344e:	f042 0220 	orr.w	r2, r2, #32
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	f002 0220 	and.w	r2, r2, #32
 800345a:	920a      	str	r2, [sp, #40]	; 0x28
 800345c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800345e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003460:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, VSYNC_FREQ2_Pin|GPIO_PIN_4|RENDER_TIME2_Pin|GPIO_PIN_3
 8003466:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOJ, VSYNC_FREQ2_Pin|GPIO_PIN_4|RENDER_TIME2_Pin|GPIO_PIN_3
 8003472:	f004 fd39 	bl	8007ee8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003476:	2200      	movs	r2, #0
 8003478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800347c:	4851      	ldr	r0, [pc, #324]	; (80035c4 <main+0x354>)
 800347e:	f004 fd33 	bl	8007ee8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003482:	2201      	movs	r2, #1
 8003484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003488:	484d      	ldr	r0, [pc, #308]	; (80035c0 <main+0x350>)
 800348a:	f004 fd2d 	bl	8007ee8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800348e:	2200      	movs	r2, #0
 8003490:	21c0      	movs	r1, #192	; 0xc0
 8003492:	484d      	ldr	r0, [pc, #308]	; (80035c8 <main+0x358>)
 8003494:	f004 fd28 	bl	8007ee8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003498:	f242 0320 	movw	r3, #8224	; 0x2020
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800349c:	a92c      	add	r1, sp, #176	; 0xb0
 800349e:	4848      	ldr	r0, [pc, #288]	; (80035c0 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a0:	952e      	str	r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a2:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a6:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80034aa:	f004 fb91 	bl	8007bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	a92c      	add	r1, sp, #176	; 0xb0
 80034b4:	4843      	ldr	r0, [pc, #268]	; (80035c4 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b6:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034be:	f004 fb87 	bl	8007bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80034c2:	a92c      	add	r1, sp, #176	; 0xb0
 80034c4:	483e      	ldr	r0, [pc, #248]	; (80035c0 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c6:	e9cd 652c 	strd	r6, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80034ca:	e9cd 552e 	strd	r5, r5, [sp, #184]	; 0xb8
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80034ce:	f004 fb7f 	bl	8007bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 80034d2:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d4:	a92c      	add	r1, sp, #176	; 0xb0
 80034d6:	483c      	ldr	r0, [pc, #240]	; (80035c8 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d8:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034dc:	e9cd 482e 	strd	r4, r8, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e0:	f004 fb76 	bl	8007bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80034e4:	a92c      	add	r1, sp, #176	; 0xb0
 80034e6:	4836      	ldr	r0, [pc, #216]	; (80035c0 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e8:	e9cd 752c 	strd	r7, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80034f0:	f004 fb6e 	bl	8007bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f4:	a92c      	add	r1, sp, #176	; 0xb0
 80034f6:	4833      	ldr	r0, [pc, #204]	; (80035c4 <main+0x354>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	942e      	str	r4, [sp, #184]	; 0xb8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034fa:	e9cd 542c 	strd	r5, r4, [sp, #176]	; 0xb0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fe:	f004 fb67 	bl	8007bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAMERATE_GPIO_Port, &GPIO_InitStruct);
 8003502:	a92c      	add	r1, sp, #176	; 0xb0
 8003504:	482e      	ldr	r0, [pc, #184]	; (80035c0 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	e9cd 852c 	strd	r8, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350a:	e9cd 482e 	strd	r4, r8, [sp, #184]	; 0xb8
  HAL_GPIO_Init(FRAMERATE_GPIO_Port, &GPIO_InitStruct);
 800350e:	f004 fb5f 	bl	8007bd0 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8003512:	482e      	ldr	r0, [pc, #184]	; (80035cc <main+0x35c>)
 8003514:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <main+0x360>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003516:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8003518:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800351a:	6205      	str	r5, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800351c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003520:	f003 fc76 	bl	8006e10 <HAL_CRC_Init>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8003524:	4631      	mov	r1, r6
 8003526:	4622      	mov	r2, r4
 8003528:	4825      	ldr	r0, [pc, #148]	; (80035c0 <main+0x350>)
 800352a:	f004 fcdd 	bl	8007ee8 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 800352e:	2014      	movs	r0, #20
 8003530:	f003 f976 	bl	8006820 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003534:	4631      	mov	r1, r6
 8003536:	462a      	mov	r2, r5
 8003538:	4821      	ldr	r0, [pc, #132]	; (80035c0 <main+0x350>)
 800353a:	f004 fcd5 	bl	8007ee8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800353e:	200a      	movs	r0, #10
 8003540:	f003 f96e 	bl	8006820 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8003544:	2224      	movs	r2, #36	; 0x24
 8003546:	4621      	mov	r1, r4
 8003548:	a815      	add	r0, sp, #84	; 0x54
 800354a:	f021 ffbd 	bl	80254c8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800354e:	463a      	mov	r2, r7
 8003550:	4621      	mov	r1, r4
 8003552:	a80f      	add	r0, sp, #60	; 0x3c
 8003554:	f021 ffb8 	bl	80254c8 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8003558:	2234      	movs	r2, #52	; 0x34
 800355a:	4621      	mov	r1, r4
 800355c:	a82c      	add	r0, sp, #176	; 0xb0
 800355e:	f021 ffb3 	bl	80254c8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8003562:	222c      	movs	r2, #44	; 0x2c
 8003564:	4621      	mov	r1, r4
 8003566:	a81e      	add	r0, sp, #120	; 0x78
  hdsi.Instance = DSI;
 8003568:	4f1a      	ldr	r7, [pc, #104]	; (80035d4 <main+0x364>)
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800356a:	f021 ffad 	bl	80254c8 <memset>
  hdsi.Instance = DSI;
 800356e:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <main+0x368>)
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003570:	a90c      	add	r1, sp, #48	; 0x30
 8003572:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8003574:	940e      	str	r4, [sp, #56]	; 0x38
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8003576:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800357a:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800357e:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8003580:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8003584:	e9cd 930c 	strd	r9, r3, [sp, #48]	; 0x30
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003588:	f003 ffd8 	bl	800753c <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800358c:	a915      	add	r1, sp, #84	; 0x54
 800358e:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 8003590:	941d      	str	r4, [sp, #116]	; 0x74
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003592:	f04f 0910 	mov.w	r9, #16
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8003596:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
  HostTimeouts.HighSpeedReadTimeout = 0;
 800359a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800359e:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HostTimeouts.LowPowerWriteTimeout = 0;
 80035a2:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80035a6:	f004 f9f3 	bl	8007990 <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80035aa:	2321      	movs	r3, #33	; 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 80035ac:	220f      	movs	r2, #15
 80035ae:	e015      	b.n	80035dc <main+0x36c>
 80035b0:	03000012 	.word	0x03000012
 80035b4:	01010001 	.word	0x01010001
 80035b8:	e000ed00 	.word	0xe000ed00
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40022400 	.word	0x40022400
 80035c4:	40020000 	.word	0x40020000
 80035c8:	40020800 	.word	0x40020800
 80035cc:	20060ffc 	.word	0x20060ffc
 80035d0:	40023000 	.word	0x40023000
 80035d4:	20061020 	.word	0x20061020
 80035d8:	40016c00 	.word	0x40016c00
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80035dc:	a90f      	add	r1, sp, #60	; 0x3c
 80035de:	4638      	mov	r0, r7
  PhyTimings.ClockLaneLP2HSTime = 33;
 80035e0:	e9cd b30f 	strd	fp, r3, [sp, #60]	; 0x3c
  PhyTimings.DataLaneLP2HSTime = 25;
 80035e4:	2319      	movs	r3, #25
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80035e6:	f44f 7b80 	mov.w	fp, #256	; 0x100
  PhyTimings.DataLaneLP2HSTime = 25;
 80035ea:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  PhyTimings.StopWaitTime = 0;
 80035ee:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80035f2:	f004 f990 	bl	8007916 <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80035f6:	4651      	mov	r1, sl
 80035f8:	4638      	mov	r0, r7
 80035fa:	f004 f97b 	bl	80078f4 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80035fe:	f242 7110 	movw	r1, #10000	; 0x2710
 8003602:	4638      	mov	r0, r7
 8003604:	f004 face 	bl	8007ba4 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8003608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800360c:	4638      	mov	r0, r7
 800360e:	f003 ff33 	bl	8007478 <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8003612:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8003616:	f44f 6180 	mov.w	r1, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800361a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800361e:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003622:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8003626:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800362a:	e9cd b32c 	strd	fp, r3, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800362e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003632:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8003636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800363a:	a92c      	add	r1, sp, #176	; 0xb0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800363c:	e9cd 0330 	strd	r0, r3, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8003640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003644:	4638      	mov	r0, r7
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8003646:	e9cd 6332 	strd	r6, r3, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800364a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hltdc.Instance = LTDC;
 800364e:	4eca      	ldr	r6, [pc, #808]	; (8003978 <main+0x708>)
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8003650:	e9cd c334 	strd	ip, r3, [sp, #208]	; 0xd0
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003658:	e9cd e336 	strd	lr, r3, [sp, #216]	; 0xd8
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800365c:	f004 f916 	bl	800788c <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003660:	23c8      	movs	r3, #200	; 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8003662:	a91e      	add	r1, sp, #120	; 0x78
 8003664:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8003666:	9528      	str	r5, [sp, #160]	; 0xa0
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003668:	e9cd 3920 	strd	r3, r9, [sp, #128]	; 0x80
  CmdCfg.ColorCoding = DSI_RGB565;
 800366c:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8003670:	e9cd 4a22 	strd	r4, sl, [sp, #136]	; 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8003674:	e9cd 8424 	strd	r8, r4, [sp, #144]	; 0x90
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8003678:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800367c:	f004 f894 	bl	80077a8 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8003680:	4621      	mov	r1, r4
 8003682:	4638      	mov	r0, r7
 8003684:	f004 f87f 	bl	8007786 <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003688:	2234      	movs	r2, #52	; 0x34
 800368a:	4621      	mov	r1, r4
 800368c:	a81e      	add	r0, sp, #120	; 0x78
 800368e:	f021 ff1b 	bl	80254c8 <memset>
  hltdc.Instance = LTDC;
 8003692:	4aba      	ldr	r2, [pc, #744]	; (800397c <main+0x70c>)
  hltdc.Init.AccumulatedActiveH = 482;
 8003694:	23ca      	movs	r3, #202	; 0xca
  hltdc.Init.TotalHeigh = 483;
 8003696:	21cb      	movs	r1, #203	; 0xcb
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003698:	4630      	mov	r0, r6
  hltdc.Init.Backcolor.Blue = 0;
 800369a:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 800369c:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Red = 0;
 80036a0:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80036a4:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 80036a8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80036ac:	e9c6 3209 	strd	r3, r2, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 80036b0:	f240 12e3 	movw	r2, #483	; 0x1e3
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80036b4:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 483;
 80036b8:	e9c6 120b 	strd	r1, r2, [r6, #44]	; 0x2c
  hltdc.Init.HorizontalSync = 1;
 80036bc:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 80036c0:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80036c4:	f005 ffa4 	bl	8009610 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80036c8:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80036ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 200;
 80036ce:	23c8      	movs	r3, #200	; 0xc8
  pLayerCfg.WindowY1 = 480;
 80036d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowX0 = 0;
 80036d4:	941e      	str	r4, [sp, #120]	; 0x78
  pLayerCfg.Backcolor.Blue = 0;
 80036d6:	f8ad 40a8 	strh.w	r4, [sp, #168]	; 0xa8
  pLayerCfg.ImageHeight = 480;
 80036da:	9229      	str	r2, [sp, #164]	; 0xa4
  pLayerCfg.Backcolor.Red = 0;
 80036dc:	f88d 40aa 	strb.w	r4, [sp, #170]	; 0xaa
  pLayerCfg.Alpha0 = 0;
 80036e0:	e9cd 1423 	strd	r1, r4, [sp, #140]	; 0x8c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80036e4:	2105      	movs	r1, #5
 80036e6:	e9cd 0125 	strd	r0, r1, [sp, #148]	; 0x94
  pLayerCfg.FBStartAdress = 0xC0000000;
 80036ea:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80036ee:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 200;
 80036f0:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80036f4:	e9cd 2821 	strd	r2, r8, [sp, #132]	; 0x84
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80036f8:	a91e      	add	r1, sp, #120	; 0x78
 80036fa:	4622      	mov	r2, r4
  pLayerCfg.WindowY0 = 0;
 80036fc:	e9cd 341f 	strd	r3, r4, [sp, #124]	; 0x7c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003700:	f006 f852 	bl	80097a8 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 8003704:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 8003706:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 8003708:	6993      	ldr	r3, [r2, #24]
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8003710:	f004 f9a4 	bl	8007a5c <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 8003714:	4629      	mov	r1, r5
 8003716:	4640      	mov	r0, r8
 8003718:	f002 fdec 	bl	80062f4 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 800371c:	2328      	movs	r3, #40	; 0x28
 800371e:	2215      	movs	r2, #21
 8003720:	4621      	mov	r1, r4
 8003722:	4638      	mov	r0, r7
 8003724:	9400      	str	r4, [sp, #0]
 8003726:	f004 f9cc 	bl	8007ac2 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800372a:	a92c      	add	r1, sp, #176	; 0xb0
 800372c:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800372e:	9436      	str	r4, [sp, #216]	; 0xd8
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003730:	2720      	movs	r7, #32
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8003732:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8003736:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800373a:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800373e:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8003742:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8003746:	f004 f8a1 	bl	800788c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 800374a:	4622      	mov	r2, r4
 800374c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003750:	4630      	mov	r0, r6
 8003752:	f006 f857 	bl	8009804 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8003756:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003758:	4e89      	ldr	r6, [pc, #548]	; (8003980 <main+0x710>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800375a:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 800375e:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003760:	a92c      	add	r1, sp, #176	; 0xb0
 8003762:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 8003764:	432b      	orrs	r3, r5
 8003766:	6193      	str	r3, [r2, #24]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003768:	4b86      	ldr	r3, [pc, #536]	; (8003984 <main+0x714>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800376a:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800376c:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
  SdramTiming.RPDelay = 2;
 8003770:	f8cd 80c4 	str.w	r8, [sp, #196]	; 0xc4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003774:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003778:	2340      	movs	r3, #64	; 0x40
 800377a:	e9c6 7304 	strd	r7, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800377e:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramTiming.RCDDelay = 3;
 8003782:	2703      	movs	r7, #3
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003784:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SdramTiming.RCDDelay = 3;
 800378c:	9732      	str	r7, [sp, #200]	; 0xc8
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800378e:	e9c6 c308 	strd	ip, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003792:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003794:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003798:	e9cd 3a2d 	strd	r3, sl, [sp, #180]	; 0xb4
  SdramTiming.WriteRecoveryTime = 2;
 800379c:	e9cd 382f 	strd	r3, r8, [sp, #188]	; 0xbc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80037a0:	f007 f8d6 	bl	800a950 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80037a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a8:	a91e      	add	r1, sp, #120	; 0x78
 80037aa:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 80037ac:	940f      	str	r4, [sp, #60]	; 0x3c
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80037ae:	e9cd 591e 	strd	r5, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 80037b2:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80037b6:	f007 f8eb 	bl	800a990 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80037ba:	4628      	mov	r0, r5
 80037bc:	f003 f830 	bl	8006820 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80037c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c4:	a91e      	add	r1, sp, #120	; 0x78
 80037c6:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037c8:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 80037cc:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80037d0:	f007 f8de 	bl	800a990 <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 80037d4:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80037d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037da:	a91e      	add	r1, sp, #120	; 0x78
 80037dc:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037de:	e9cd 791e 	strd	r7, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 80037e2:	e9cd 3420 	strd	r3, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80037e6:	f007 f8d3 	bl	800a990 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80037ea:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80037ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037f2:	a91e      	add	r1, sp, #120	; 0x78
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80037f4:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80037f6:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 80037f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80037fa:	f44f 7740 	mov.w	r7, #768	; 0x300
    Command->AutoRefreshNumber      = 1;
 80037fe:	9520      	str	r5, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = tmpmrd;
 8003800:	9321      	str	r3, [sp, #132]	; 0x84
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003802:	e9cd a91e 	strd	sl, r9, [sp, #120]	; 0x78
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003806:	f007 f8c3 	bl	800a990 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800380a:	f240 712a 	movw	r1, #1834	; 0x72a
 800380e:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 8003810:	4e5d      	ldr	r6, [pc, #372]	; (8003988 <main+0x718>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8003812:	f007 f8dc 	bl	800a9ce <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8003816:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800381a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800381e:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8003820:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 8003822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8003826:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 8003828:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800382c:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800382e:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003832:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8003836:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800383a:	f006 f93b 	bl	8009ab4 <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800383e:	9732      	str	r7, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003840:	2766      	movs	r7, #102	; 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	a92c      	add	r1, sp, #176	; 0xb0
 8003848:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 800384a:	972c      	str	r7, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_NONE;
 800384c:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 800384e:	9431      	str	r4, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003850:	9439      	str	r4, [sp, #228]	; 0xe4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003852:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003856:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800385a:	f006 f97f 	bl	8009b5c <HAL_QSPI_Command>
 800385e:	2800      	cmp	r0, #0
 8003860:	f040 80b6 	bne.w	80039d0 <main+0x760>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003864:	2499      	movs	r4, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	a92c      	add	r1, sp, #176	; 0xb0
 800386c:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 800386e:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003870:	f006 f974 	bl	8009b5c <HAL_QSPI_Command>
 8003874:	2800      	cmp	r0, #0
 8003876:	f040 80ab 	bne.w	80039d0 <main+0x760>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	a92c      	add	r1, sp, #176	; 0xb0
 8003880:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003882:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003886:	972c      	str	r7, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003888:	f006 f968 	bl	8009b5c <HAL_QSPI_Command>
 800388c:	2800      	cmp	r0, #0
 800388e:	f040 809f 	bne.w	80039d0 <main+0x760>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	a92c      	add	r1, sp, #176	; 0xb0
 8003898:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 800389a:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800389c:	f006 f95e 	bl	8009b5c <HAL_QSPI_Command>
 80038a0:	4604      	mov	r4, r0
 80038a2:	2800      	cmp	r0, #0
 80038a4:	f040 8094 	bne.w	80039d0 <main+0x760>
  HAL_Delay( 1000 );
 80038a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ac:	f002 ffb8 	bl	8006820 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80038b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038b4:	aa1e      	add	r2, sp, #120	; 0x78
 80038b6:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80038b8:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.Instruction     = READ_STATUS_REG_CMD;
 80038ba:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038bc:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 80038be:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.Instruction     = READ_STATUS_REG_CMD;
 80038c2:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode        = QSPI_DATA_1_LINE;
 80038c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80038c8:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.DataMode        = QSPI_DATA_1_LINE;
 80038cc:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038ce:	f241 3388 	movw	r3, #5000	; 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 80038d2:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
  s_config.StatusBytesSize = 1;
 80038d6:	e9cd 5421 	strd	r5, r4, [sp, #132]	; 0x84
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038da:	f006 fa3a 	bl	8009d52 <HAL_QSPI_AutoPolling>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d176      	bne.n	80039d0 <main+0x760>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80038e2:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 80038e4:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80038ec:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80038ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80038f2:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80038f6:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80038f8:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80038fc:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003900:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003904:	4630      	mov	r0, r6
 8003906:	f006 f929 	bl	8009b5c <HAL_QSPI_Command>
 800390a:	2800      	cmp	r0, #0
 800390c:	d160      	bne.n	80039d0 <main+0x760>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	a915      	add	r1, sp, #84	; 0x54
 8003914:	4630      	mov	r0, r6
 8003916:	f006 f9bd 	bl	8009c94 <HAL_QSPI_Receive>
 800391a:	2800      	cmp	r0, #0
 800391c:	d158      	bne.n	80039d0 <main+0x760>
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800391e:	2306      	movs	r3, #6
  s_command.DataMode          = QSPI_DATA_NONE;
 8003920:	9035      	str	r0, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003922:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003928:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800392a:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800392c:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003930:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003932:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003936:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800393a:	4630      	mov	r0, r6
 800393c:	f006 f90e 	bl	8009b5c <HAL_QSPI_Command>
 8003940:	2800      	cmp	r0, #0
 8003942:	d145      	bne.n	80039d0 <main+0x760>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003944:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 8003946:	462c      	mov	r4, r5
 8003948:	9521      	str	r5, [sp, #132]	; 0x84
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800394a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800394e:	9322      	str	r3, [sp, #136]	; 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003950:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003954:	aa1e      	add	r2, sp, #120	; 0x78
 8003956:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003958:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800395a:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800395c:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 800395e:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003962:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003964:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003968:	9535      	str	r5, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WREN;
 800396a:	e9cd 881e 	strd	r8, r8, [sp, #120]	; 0x78
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800396e:	f006 f9f0 	bl	8009d52 <HAL_QSPI_AutoPolling>
 8003972:	bb68      	cbnz	r0, 80039d0 <main+0x760>
 8003974:	e00a      	b.n	800398c <main+0x71c>
 8003976:	bf00      	nop
 8003978:	2006103c 	.word	0x2006103c
 800397c:	40016800 	.word	0x40016800
 8003980:	20061290 	.word	0x20061290
 8003984:	a0000140 	.word	0xa0000140
 8003988:	200612c8 	.word	0x200612c8
  reg |= MX25L512_SR_QUADEN;
 800398c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8003994:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003996:	a92c      	add	r1, sp, #176	; 0xb0
  reg |= MX25L512_SR_QUADEN;
 8003998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800399c:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80039a0:	942c      	str	r4, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80039a2:	9535      	str	r5, [sp, #212]	; 0xd4
  reg |= MX25L512_SR_QUADEN;
 80039a4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80039a8:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80039ac:	e9cd 4036 	strd	r4, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80039b0:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039b4:	4630      	mov	r0, r6
 80039b6:	f006 f8d1 	bl	8009b5c <HAL_QSPI_Command>
 80039ba:	b948      	cbnz	r0, 80039d0 <main+0x760>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c0:	a915      	add	r1, sp, #84	; 0x54
 80039c2:	4630      	mov	r0, r6
 80039c4:	f006 f90d 	bl	8009be2 <HAL_QSPI_Transmit>
 80039c8:	b910      	cbnz	r0, 80039d0 <main+0x760>
  HAL_Delay( 40 );
 80039ca:	2028      	movs	r0, #40	; 0x28
 80039cc:	f002 ff28 	bl	8006820 <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80039d0:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d8:	a92c      	add	r1, sp, #176	; 0xb0
 80039da:	48b7      	ldr	r0, [pc, #732]	; (8003cb8 <main+0xa48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80039dc:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = ENTER_QUAD_CMD;
 80039de:	2335      	movs	r3, #53	; 0x35
 80039e0:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80039e2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80039e4:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DataMode          = QSPI_DATA_NONE;
 80039e8:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 80039ea:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80039ec:	9339      	str	r3, [sp, #228]	; 0xe4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80039ee:	e9cd 3337 	strd	r3, r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039f2:	f006 f8b3 	bl	8009b5c <HAL_QSPI_Command>
 80039f6:	b9d0      	cbnz	r0, 8003a2e <main+0x7be>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	2341      	movs	r3, #65	; 0x41
  s_config.Interval        = 0x10;
 80039fc:	2101      	movs	r1, #1
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80039fe:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a00:	48ad      	ldr	r0, [pc, #692]	; (8003cb8 <main+0xa48>)
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8003a02:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  s_config.Interval        = 0x10;
 8003a06:	2310      	movs	r3, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a08:	aa1e      	add	r2, sp, #120	; 0x78
  s_config.Interval        = 0x10;
 8003a0a:	e9cd 3120 	strd	r3, r1, [sp, #128]	; 0x80
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a12:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003a14:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a1a:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003a1c:	2305      	movs	r3, #5
 8003a1e:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003a20:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003a24:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a26:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a2a:	f006 f992 	bl	8009d52 <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003a2e:	23b7      	movs	r3, #183	; 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003a30:	f44f 7440 	mov.w	r4, #768	; 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003a34:	931e      	str	r3, [sp, #120]	; 0x78
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003a36:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003a38:	9424      	str	r4, [sp, #144]	; 0x90
  s_command.DataMode          = QSPI_DATA_NONE;
 8003a3a:	9327      	str	r3, [sp, #156]	; 0x9c
  s_command.DummyCycles       = 0;
 8003a3c:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a3e:	932b      	str	r3, [sp, #172]	; 0xac
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a40:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003a44:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003a48:	f7ff fb6a 	bl	8003120 <QSPI_WriteEnable.constprop.0>
 8003a4c:	bb18      	cbnz	r0, 8003a96 <main+0x826>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	a91e      	add	r1, sp, #120	; 0x78
 8003a54:	4898      	ldr	r0, [pc, #608]	; (8003cb8 <main+0xa48>)
 8003a56:	f006 f881 	bl	8009b5c <HAL_QSPI_Command>
 8003a5a:	b9e0      	cbnz	r0, 8003a96 <main+0x826>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003a5c:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8003a5e:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a60:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003a62:	aa15      	add	r2, sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003a64:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003a66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  s_config.Match           = 0;
 8003a6a:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003a6c:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003a6e:	9335      	str	r3, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WIP;
 8003a70:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003a72:	9432      	str	r4, [sp, #200]	; 0xc8
  s_config.Mask            = MX25L512_SR_WIP;
 8003a74:	9316      	str	r3, [sp, #88]	; 0x58
  s_config.StatusBytesSize = 1;
 8003a76:	e9cd 3018 	strd	r3, r0, [sp, #96]	; 0x60
  s_config.Interval        = 0x10;
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	9317      	str	r3, [sp, #92]	; 0x5c
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003a7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a82:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003a86:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003a8a:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003a8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a90:	4889      	ldr	r0, [pc, #548]	; (8003cb8 <main+0xa48>)
 8003a92:	f006 f95e 	bl	8009d52 <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003a96:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003a98:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003a9c:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 8003aa0:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003aa2:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003aa4:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	a92c      	add	r1, sp, #176	; 0xb0
 8003aac:	4882      	ldr	r0, [pc, #520]	; (8003cb8 <main+0xa48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003aae:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003ab0:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003ab2:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ab4:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ab8:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003abc:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ac0:	f006 f84c 	bl	8009b5c <HAL_QSPI_Command>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d14f      	bne.n	8003b68 <main+0x8f8>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	a91e      	add	r1, sp, #120	; 0x78
 8003ace:	487a      	ldr	r0, [pc, #488]	; (8003cb8 <main+0xa48>)
 8003ad0:	f006 f8e0 	bl	8009c94 <HAL_QSPI_Receive>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d147      	bne.n	8003b68 <main+0x8f8>
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003ad8:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8003ada:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003ae2:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003ae4:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003ae6:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ae8:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003aec:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003af0:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003af4:	4870      	ldr	r0, [pc, #448]	; (8003cb8 <main+0xa48>)
 8003af6:	f006 f831 	bl	8009b5c <HAL_QSPI_Command>
 8003afa:	bba8      	cbnz	r0, 8003b68 <main+0x8f8>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8003b04:	486c      	ldr	r0, [pc, #432]	; (8003cb8 <main+0xa48>)
 8003b06:	f006 f8c5 	bl	8009c94 <HAL_QSPI_Receive>
 8003b0a:	bb68      	cbnz	r0, 8003b68 <main+0x8f8>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003b0c:	f7ff fb08 	bl	8003120 <QSPI_WriteEnable.constprop.0>
 8003b10:	bb50      	cbnz	r0, 8003b68 <main+0x8f8>
  s_command.NbData            = 2;
 8003b12:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	22c0      	movs	r2, #192	; 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003b16:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003b18:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003b1a:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003b1c:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003b1e:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003b22:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003b26:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 8003b2a:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003b2e:	2103      	movs	r1, #3
 8003b30:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003b34:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b38:	485f      	ldr	r0, [pc, #380]	; (8003cb8 <main+0xa48>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003b3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b42:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003b44:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003b4a:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b4e:	f006 f805 	bl	8009b5c <HAL_QSPI_Command>
 8003b52:	b948      	cbnz	r0, 8003b68 <main+0x8f8>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	a91e      	add	r1, sp, #120	; 0x78
 8003b5a:	4857      	ldr	r0, [pc, #348]	; (8003cb8 <main+0xa48>)
 8003b5c:	f006 f841 	bl	8009be2 <HAL_QSPI_Transmit>
 8003b60:	b910      	cbnz	r0, 8003b68 <main+0x8f8>
  HAL_Delay( 40 );
 8003b62:	2028      	movs	r0, #40	; 0x28
 8003b64:	f002 fe5c 	bl	8006820 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003b68:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003b6a:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003b6e:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 8003b72:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003b74:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003b76:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	a92c      	add	r1, sp, #176	; 0xb0
 8003b7e:	484e      	ldr	r0, [pc, #312]	; (8003cb8 <main+0xa48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003b80:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003b82:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003b84:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003b86:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003b8a:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003b8e:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b92:	f005 ffe3 	bl	8009b5c <HAL_QSPI_Command>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d14b      	bne.n	8003c32 <main+0x9c2>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	a91e      	add	r1, sp, #120	; 0x78
 8003ba0:	4845      	ldr	r0, [pc, #276]	; (8003cb8 <main+0xa48>)
 8003ba2:	f006 f877 	bl	8009c94 <HAL_QSPI_Receive>
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d143      	bne.n	8003c32 <main+0x9c2>
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003baa:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8003bac:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003bb4:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003bb6:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003bb8:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003bba:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003bbe:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003bc2:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bc6:	483c      	ldr	r0, [pc, #240]	; (8003cb8 <main+0xa48>)
 8003bc8:	f005 ffc8 	bl	8009b5c <HAL_QSPI_Command>
 8003bcc:	bb88      	cbnz	r0, 8003c32 <main+0x9c2>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd2:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8003bd6:	4838      	ldr	r0, [pc, #224]	; (8003cb8 <main+0xa48>)
 8003bd8:	f006 f85c 	bl	8009c94 <HAL_QSPI_Receive>
 8003bdc:	bb48      	cbnz	r0, 8003c32 <main+0x9c2>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003bde:	f7ff fa9f 	bl	8003120 <QSPI_WriteEnable.constprop.0>
 8003be2:	bb30      	cbnz	r0, 8003c32 <main+0x9c2>
  s_command.NbData            = 2;
 8003be4:	2302      	movs	r3, #2
 8003be6:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003be8:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003bea:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003bec:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003bee:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003bf0:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003bf4:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003bf8:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 8003bfc:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003c00:	2106      	movs	r1, #6
 8003c02:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003c06:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c0a:	482b      	ldr	r0, [pc, #172]	; (8003cb8 <main+0xa48>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003c0c:	f023 0307 	bic.w	r3, r3, #7
 8003c10:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c14:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003c16:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003c1c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c20:	f005 ff9c 	bl	8009b5c <HAL_QSPI_Command>
 8003c24:	b928      	cbnz	r0, 8003c32 <main+0x9c2>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	a91e      	add	r1, sp, #120	; 0x78
 8003c2c:	4822      	ldr	r0, [pc, #136]	; (8003cb8 <main+0xa48>)
 8003c2e:	f005 ffd8 	bl	8009be2 <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c32:	f44f 7340 	mov.w	r3, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003c36:	2400      	movs	r4, #0
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8003c38:	270a      	movs	r7, #10
  hdma2d.Instance = DMA2D;
 8003c3a:	4d20      	ldr	r5, [pc, #128]	; (8003cbc <main+0xa4c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c3c:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8003c3e:	23ec      	movs	r3, #236	; 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003c40:	aa1e      	add	r2, sp, #120	; 0x78
 8003c42:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8003c44:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003c46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003c4a:	481b      	ldr	r0, [pc, #108]	; (8003cb8 <main+0xa48>)
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003c4c:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003c4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8003c52:	9731      	str	r7, [sp, #196]	; 0xc4
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003c54:	932f      	str	r3, [sp, #188]	; 0xbc
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003c56:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c5a:	9439      	str	r4, [sp, #228]	; 0xe4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c5c:	4e18      	ldr	r6, [pc, #96]	; (8003cc0 <main+0xa50>)
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003c5e:	e9cd 4334 	strd	r4, r3, [sp, #208]	; 0xd0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c62:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003c66:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003c6a:	f006 f8c2 	bl	8009df2 <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <main+0xa54>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003c70:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003c72:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003c76:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8003c7a:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
  hdma2d.Init.Mode = DMA2D_M2M;
 8003c7e:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8003c82:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003c86:	f003 fac5 	bl	8007214 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8003c8e:	4d0e      	ldr	r5, [pc, #56]	; (8003cc8 <main+0xa58>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003c90:	f003 fb82 	bl	8007398 <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 8003c94:	f7ff faca 	bl	800322c <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 8003c98:	f7fc fe83 	bl	80009a2 <MX_LIBJPEG_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <main+0xa5c>)
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003c9e:	2105      	movs	r1, #5
 8003ca0:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003caa:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	930c      	str	r3, [sp, #48]	; 0x30
 8003cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cb6:	e00b      	b.n	8003cd0 <main+0xa60>
 8003cb8:	200612c8 	.word	0x200612c8
 8003cbc:	20061234 	.word	0x20061234
 8003cc0:	40012000 	.word	0x40012000
 8003cc4:	4002b000 	.word	0x4002b000
 8003cc8:	200610e4 	.word	0x200610e4
 8003ccc:	40023800 	.word	0x40023800
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003cd0:	f003 f800 	bl	8006cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003cd4:	2038      	movs	r0, #56	; 0x38
 8003cd6:	f003 f82f 	bl	8006d38 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003cda:	4622      	mov	r2, r4
 8003cdc:	2105      	movs	r1, #5
 8003cde:	2039      	movs	r0, #57	; 0x39
 8003ce0:	f002 fff8 	bl	8006cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003ce4:	2039      	movs	r0, #57	; 0x39
 8003ce6:	f003 f827 	bl	8006d38 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8003cea:	4622      	mov	r2, r4
 8003cec:	2105      	movs	r1, #5
 8003cee:	203c      	movs	r0, #60	; 0x3c
 8003cf0:	f002 fff0 	bl	8006cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003cf4:	203c      	movs	r0, #60	; 0x3c
 8003cf6:	f003 f81f 	bl	8006d38 <HAL_NVIC_EnableIRQ>
  hjpeg.Instance = JPEG;
 8003cfa:	4b49      	ldr	r3, [pc, #292]	; (8003e20 <main+0xbb0>)
 8003cfc:	4849      	ldr	r0, [pc, #292]	; (8003e24 <main+0xbb4>)
 8003cfe:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8003d00:	f004 fe4e 	bl	80089a0 <HAL_JPEG_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d04:	2210      	movs	r2, #16
 8003d06:	4621      	mov	r1, r4
 8003d08:	a82c      	add	r0, sp, #176	; 0xb0
 8003d0a:	f021 fbdd 	bl	80254c8 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8003d12:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d16:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d18:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003d1a:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d1c:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d20:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003d22:	616c      	str	r4, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d24:	e9c5 6300 	strd	r6, r3, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003d28:	2601      	movs	r6, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8003d2a:	f04f 6310 	mov.w	r3, #150994944	; 0x9000000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003d2e:	612e      	str	r6, [r5, #16]
  hadc1.Init.NbrOfConversion = 1;
 8003d30:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003d32:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8003d36:	e9c5 3c0a 	strd	r3, ip, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d3a:	f002 fd83 	bl	8006844 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 8003d3e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d40:	a92c      	add	r1, sp, #176	; 0xb0
 8003d42:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d44:	942e      	str	r4, [sp, #184]	; 0xb8
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d46:	e9cd 362c 	strd	r3, r6, [sp, #176]	; 0xb0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d4a:	f002 ff03 	bl	8006b54 <HAL_ADC_ConfigChannel>
 HAL_ADC_Start_DMA(&hadc1,&adcConv,10);
 8003d4e:	463a      	mov	r2, r7
 8003d50:	4935      	ldr	r1, [pc, #212]	; (8003e28 <main+0xbb8>)
 8003d52:	4628      	mov	r0, r5
 8003d54:	f002 fe1c 	bl	8006990 <HAL_ADC_Start_DMA>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d58:	221c      	movs	r2, #28
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	a81e      	add	r0, sp, #120	; 0x78
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d5e:	9417      	str	r4, [sp, #92]	; 0x5c
  htim1.Instance = TIM1;
 8003d60:	4d32      	ldr	r5, [pc, #200]	; (8003e2c <main+0xbbc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d62:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d66:	f021 fbaf 	bl	80254c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d6a:	222c      	movs	r2, #44	; 0x2c
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	a82c      	add	r0, sp, #176	; 0xb0
 8003d70:	f021 fbaa 	bl	80254c8 <memset>
  htim1.Init.Prescaler = 10000-1;
 8003d74:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8003e54 <main+0xbe4>
 8003d78:	f242 730f 	movw	r3, #9999	; 0x270f
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003d7c:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d7e:	60ac      	str	r4, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8003d80:	616c      	str	r4, [r5, #20]
  htim1.Init.Prescaler = 10000-1;
 8003d82:	e9c5 e300 	strd	lr, r3, [r5]
  htim1.Init.Period = 100-1;
 8003d86:	2363      	movs	r3, #99	; 0x63
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d88:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003d90:	f007 f8a4 	bl	800aedc <HAL_TIM_OC_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003d94:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d96:	a915      	add	r1, sp, #84	; 0x54
 8003d98:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d9a:	9417      	str	r4, [sp, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d9c:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003da0:	f007 f93a 	bl	800b018 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003da4:	4622      	mov	r2, r4
 8003da6:	a91e      	add	r1, sp, #120	; 0x78
 8003da8:	4628      	mov	r0, r5
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003daa:	9424      	str	r4, [sp, #144]	; 0x90
  sConfigOC.Pulse = 0;
 8003dac:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003db0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003db4:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003db8:	f007 f8f8 	bl	800afac <HAL_TIM_OC_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003dc0:	a92c      	add	r1, sp, #176	; 0xb0
 8003dc2:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dc4:	9430      	str	r4, [sp, #192]	; 0xc0
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003dc6:	9433      	str	r4, [sp, #204]	; 0xcc
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dc8:	9436      	str	r4, [sp, #216]	; 0xd8
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003dca:	e9cd 3431 	strd	r3, r4, [sp, #196]	; 0xc4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dd2:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003dd6:	e9cd 3434 	strd	r3, r4, [sp, #208]	; 0xd0
  sBreakDeadTimeConfig.DeadTime = 0;
 8003dda:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003dde:	f007 f965 	bl	800b0ac <HAL_TIMEx_ConfigBreakDeadTime>
 HAL_TIM_Base_Start_IT(&htim1);
 8003de2:	4628      	mov	r0, r5
 8003de4:	f006 fef2 	bl	800abcc <HAL_TIM_Base_Start_IT>
  MX_TouchGFX_Init();
 8003de8:	f7fc fddc 	bl	80009a4 <MX_TouchGFX_Init>
  osKernelInitialize();
 8003dec:	f007 fa30 	bl	800b250 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003df0:	4a0f      	ldr	r2, [pc, #60]	; (8003e30 <main+0xbc0>)
 8003df2:	4621      	mov	r1, r4
 8003df4:	480f      	ldr	r0, [pc, #60]	; (8003e34 <main+0xbc4>)
 8003df6:	f007 fa65 	bl	800b2c4 <osThreadNew>
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <main+0xbc8>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003dfc:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <main+0xbcc>)
 8003dfe:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003e00:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003e02:	480f      	ldr	r0, [pc, #60]	; (8003e40 <main+0xbd0>)
 8003e04:	f007 fa5e 	bl	800b2c4 <osThreadNew>
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <main+0xbd4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003e0a:	4a0f      	ldr	r2, [pc, #60]	; (8003e48 <main+0xbd8>)
 8003e0c:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003e0e:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003e10:	480e      	ldr	r0, [pc, #56]	; (8003e4c <main+0xbdc>)
 8003e12:	f007 fa57 	bl	800b2c4 <osThreadNew>
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <main+0xbe0>)
 8003e18:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003e1a:	f007 fa33 	bl	800b284 <osKernelStart>
  while (1)
 8003e1e:	e7fe      	b.n	8003e1e <main+0xbae>
 8003e20:	50051000 	.word	0x50051000
 8003e24:	2006112c 	.word	0x2006112c
 8003e28:	2004c8dc 	.word	0x2004c8dc
 8003e2c:	200611e8 	.word	0x200611e8
 8003e30:	080281f0 	.word	0x080281f0
 8003e34:	08003115 	.word	0x08003115
 8003e38:	20060fac 	.word	0x20060fac
 8003e3c:	080281cc 	.word	0x080281cc
 8003e40:	080009a9 	.word	0x080009a9
 8003e44:	20061184 	.word	0x20061184
 8003e48:	08028214 	.word	0x08028214
 8003e4c:	080027c5 	.word	0x080027c5
 8003e50:	2006128c 	.word	0x2006128c
 8003e54:	40010000 	.word	0x40010000

08003e58 <HAL_ADC_ConvCpltCallback>:
	for(int i=0;i<10;i++)
 8003e58:	2200      	movs	r2, #0
		sum+=adcConv[i];
 8003e5a:	4807      	ldr	r0, [pc, #28]	; (8003e78 <HAL_ADC_ConvCpltCallback+0x20>)
	uint16_t sum=0;
 8003e5c:	4613      	mov	r3, r2
		sum+=adcConv[i];
 8003e5e:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
	for(int i=0;i<10;i++)
 8003e62:	3201      	adds	r2, #1
		sum+=adcConv[i];
 8003e64:	fa13 f381 	uxtah	r3, r3, r1
	for(int i=0;i<10;i++)
 8003e68:	2a0a      	cmp	r2, #10
		sum+=adcConv[i];
 8003e6a:	b29b      	uxth	r3, r3
	for(int i=0;i<10;i++)
 8003e6c:	d1f7      	bne.n	8003e5e <HAL_ADC_ConvCpltCallback+0x6>
	adcval=(sum/10);
 8003e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e72:	4a02      	ldr	r2, [pc, #8]	; (8003e7c <HAL_ADC_ConvCpltCallback+0x24>)
 8003e74:	8013      	strh	r3, [r2, #0]
}
 8003e76:	4770      	bx	lr
 8003e78:	2004c8dc 	.word	0x2004c8dc
 8003e7c:	200612c4 	.word	0x200612c4

08003e80 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003e80:	6802      	ldr	r2, [r0, #0]
 8003e82:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003e88:	f002 bcb8 	b.w	80067fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40001000 	.word	0x40001000

08003e94 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_MspInit+0x38>)
{
 8003e9a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e9c:	210f      	movs	r1, #15
 8003e9e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8003eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eac:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003eb0:	9200      	str	r2, [sp, #0]
 8003eb2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ebc:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003eca:	f002 bf03 	b.w	8006cd4 <HAL_NVIC_SetPriority>
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eda:	2214      	movs	r2, #20
 8003edc:	2100      	movs	r1, #0
 8003ede:	a803      	add	r0, sp, #12
 8003ee0:	f021 faf2 	bl	80254c8 <memset>
  if(hadc->Instance==ADC1)
 8003ee4:	6832      	ldr	r2, [r6, #0]
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <HAL_ADC_MspInit+0x90>)
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d139      	bne.n	8003f60 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003eec:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef2:	a903      	add	r1, sp, #12
 8003ef4:	481c      	ldr	r0, [pc, #112]	; (8003f68 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003ef8:	4c1c      	ldr	r4, [pc, #112]	; (8003f6c <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
 8003f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f02:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003f06:	9201      	str	r2, [sp, #4]
 8003f08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f12:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	9302      	str	r3, [sp, #8]
 8003f1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f26:	f003 fe53 	bl	8007bd0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003f34:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f3c:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f44:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f48:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f4a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f4e:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f52:	f002 ffcf 	bl	8006ef4 <HAL_DMA_Init>
 8003f56:	b108      	cbz	r0, 8003f5c <HAL_ADC_MspInit+0x88>
    {
      Error_Handler();
 8003f58:	f7ff ff9c 	bl	8003e94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f5c:	63b4      	str	r4, [r6, #56]	; 0x38
 8003f5e:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f60:	b008      	add	sp, #32
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	40012000 	.word	0x40012000
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	20061188 	.word	0x20061188
 8003f70:	40026470 	.word	0x40026470

08003f74 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8003f74:	6802      	ldr	r2, [r0, #0]
{
 8003f76:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_CRC_MspInit+0x28>)
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d10b      	bne.n	8003f96 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003f7e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8003f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003f96:	b002      	add	sp, #8
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40023000 	.word	0x40023000

08003fa0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_DMA2D_MspInit+0x3c>)
{
 8003fa2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8003fa4:	6802      	ldr	r2, [r0, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d115      	bne.n	8003fd6 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003faa:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003fae:	2105      	movs	r1, #5
 8003fb0:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003fba:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003fc6:	f002 fe85 	bl	8006cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003fca:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003fcc:	b003      	add	sp, #12
 8003fce:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003fd2:	f002 beb1 	b.w	8006d38 <HAL_NVIC_EnableIRQ>
}
 8003fd6:	b003      	add	sp, #12
 8003fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fdc:	4002b000 	.word	0x4002b000

08003fe0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe6:	2214      	movs	r2, #20
 8003fe8:	2100      	movs	r1, #0
 8003fea:	a803      	add	r0, sp, #12
 8003fec:	f021 fa6c 	bl	80254c8 <memset>
  if(hdsi->Instance==DSI)
 8003ff0:	6822      	ldr	r2, [r4, #0]
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_DSI_MspInit+0x70>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d128      	bne.n	800404a <HAL_DSI_MspInit+0x6a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8003ff8:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003ffe:	a903      	add	r1, sp, #12
 8004000:	4814      	ldr	r0, [pc, #80]	; (8004054 <HAL_DSI_MspInit+0x74>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8004002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004004:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
 800400a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800400c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004010:	9201      	str	r2, [sp, #4]
 8004012:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004024:	9302      	str	r3, [sp, #8]
 8004026:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004028:	2302      	movs	r3, #2
 800402a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800402e:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004030:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8004034:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004036:	f003 fdcb 	bl	8007bd0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800403a:	2062      	movs	r0, #98	; 0x62
 800403c:	4622      	mov	r2, r4
 800403e:	2105      	movs	r1, #5
 8004040:	f002 fe48 	bl	8006cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004044:	2062      	movs	r0, #98	; 0x62
 8004046:	f002 fe77 	bl	8006d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800404a:	b008      	add	sp, #32
 800404c:	bd10      	pop	{r4, pc}
 800404e:	bf00      	nop
 8004050:	40016c00 	.word	0x40016c00
 8004054:	40022400 	.word	0x40022400

08004058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405a:	b0ad      	sub	sp, #180	; 0xb4
 800405c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405e:	2214      	movs	r2, #20
 8004060:	2100      	movs	r1, #0
 8004062:	a803      	add	r0, sp, #12
 8004064:	f021 fa30 	bl	80254c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004068:	2290      	movs	r2, #144	; 0x90
 800406a:	2100      	movs	r1, #0
 800406c:	a808      	add	r0, sp, #32
 800406e:	f021 fa2b 	bl	80254c8 <memset>
  if(hi2c->Instance==I2C4)
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_I2C_MspInit+0xb8>)
 8004076:	429a      	cmp	r2, r3
 8004078:	d148      	bne.n	800410c <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800407a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800407e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004080:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8004082:	2300      	movs	r3, #0
 8004084:	9324      	str	r3, [sp, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004086:	f006 f9b7 	bl	800a3f8 <HAL_RCCEx_PeriphCLKConfig>
 800408a:	b108      	cbz	r0, 8004090 <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 800408c:	f7ff ff02 	bl	8003e94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004090:	4c20      	ldr	r4, [pc, #128]	; (8004114 <HAL_I2C_MspInit+0xbc>)
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004092:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004094:	2601      	movs	r6, #1
 8004096:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004098:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409a:	a903      	add	r1, sp, #12
 800409c:	481e      	ldr	r0, [pc, #120]	; (8004118 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	6323      	str	r3, [r4, #48]	; 0x30
 80040a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040b0:	f043 0308 	orr.w	r3, r3, #8
 80040b4:	6323      	str	r3, [r4, #48]	; 0x30
 80040b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80040c6:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c8:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80040cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ce:	f003 fd7f 	bl	8007bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80040d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040d6:	a903      	add	r1, sp, #12
 80040d8:	4810      	ldr	r0, [pc, #64]	; (800411c <HAL_I2C_MspInit+0xc4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040da:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80040de:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e0:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80040e4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040e6:	f003 fd73 	bl	8007bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80040ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80040ec:	205f      	movs	r0, #95	; 0x5f
 80040ee:	2200      	movs	r2, #0
 80040f0:	2105      	movs	r1, #5
    __HAL_RCC_I2C4_CLK_ENABLE();
 80040f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f6:	6423      	str	r3, [r4, #64]	; 0x40
 80040f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040fe:	9302      	str	r3, [sp, #8]
 8004100:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004102:	f002 fde7 	bl	8006cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8004106:	205f      	movs	r0, #95	; 0x5f
 8004108:	f002 fe16 	bl	8006d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800410c:	b02d      	add	sp, #180	; 0xb4
 800410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004110:	40006000 	.word	0x40006000
 8004114:	40023800 	.word	0x40023800
 8004118:	40020400 	.word	0x40020400
 800411c:	40020c00 	.word	0x40020c00

08004120 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8004120:	6802      	ldr	r2, [r0, #0]
{
 8004122:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_I2C_MspDeInit+0x34>)
 8004126:	429a      	cmp	r2, r3
 8004128:	d112      	bne.n	8004150 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800412a:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <HAL_I2C_MspDeInit+0x38>)

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	480b      	ldr	r0, [pc, #44]	; (800415c <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004130:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004136:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004138:	f003 fe2e 	bl	8007d98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 800413c:	4808      	ldr	r0, [pc, #32]	; (8004160 <HAL_I2C_MspDeInit+0x40>)
 800413e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004142:	f003 fe29 	bl	8007d98 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004146:	205f      	movs	r0, #95	; 0x5f
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8004148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 800414c:	f002 be02 	b.w	8006d54 <HAL_NVIC_DisableIRQ>
}
 8004150:	bd08      	pop	{r3, pc}
 8004152:	bf00      	nop
 8004154:	40006000 	.word	0x40006000
 8004158:	40023800 	.word	0x40023800
 800415c:	40020400 	.word	0x40020400
 8004160:	40020c00 	.word	0x40020c00

08004164 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8004164:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8004166:	4b35      	ldr	r3, [pc, #212]	; (800423c <HAL_JPEG_MspInit+0xd8>)
{
 8004168:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 800416a:	6802      	ldr	r2, [r0, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d162      	bne.n	8004236 <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004170:	4b33      	ldr	r3, [pc, #204]	; (8004240 <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004172:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8004176:	4c33      	ldr	r4, [pc, #204]	; (8004244 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004178:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 800417a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 800417c:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004180:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8004250 <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004184:	f042 0202 	orr.w	r2, r2, #2
 8004188:	635a      	str	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 800418a:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004196:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 800419a:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 800419e:	2300      	movs	r3, #0
 80041a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 80041a8:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041aa:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 80041b2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 80041bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 80041c0:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 80041c2:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 80041c6:	f002 fe95 	bl	8006ef4 <HAL_DMA_Init>
 80041ca:	b108      	cbz	r0, 80041d0 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80041cc:	f7ff fe62 	bl	8003e94 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 80041d0:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 80041d2:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 80041d6:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 80041dc:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041de:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 80041e0:	4c1a      	ldr	r4, [pc, #104]	; (800424c <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 80041e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 80041e6:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ee:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041f0:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 80041f8:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 80041fa:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 80041fe:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004202:	2303      	movs	r3, #3
 8004204:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004208:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 800420c:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 800420e:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004212:	f002 fe6f 	bl	8006ef4 <HAL_DMA_Init>
 8004216:	b108      	cbz	r0, 800421c <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 8004218:	f7ff fe3c 	bl	8003e94 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 800421c:	636c      	str	r4, [r5, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	2105      	movs	r1, #5
 8004222:	206c      	movs	r0, #108	; 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004224:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004226:	f002 fd55 	bl	8006cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800422a:	206c      	movs	r0, #108	; 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 800422c:	b003      	add	sp, #12
 800422e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004232:	f002 bd81 	b.w	8006d38 <HAL_NVIC_EnableIRQ>
}
 8004236:	b003      	add	sp, #12
 8004238:	bd30      	pop	{r4, r5, pc}
 800423a:	bf00      	nop
 800423c:	50051000 	.word	0x50051000
 8004240:	40023800 	.word	0x40023800
 8004244:	20060f4c 	.word	0x20060f4c
 8004248:	40026428 	.word	0x40026428
 800424c:	20060eec 	.word	0x20060eec
 8004250:	40026410 	.word	0x40026410

08004254 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004254:	b510      	push	{r4, lr}
 8004256:	b0a6      	sub	sp, #152	; 0x98
 8004258:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800425a:	2290      	movs	r2, #144	; 0x90
 800425c:	2100      	movs	r1, #0
 800425e:	a802      	add	r0, sp, #8
 8004260:	f021 f932 	bl	80254c8 <memset>
  if(hltdc->Instance==LTDC)
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <HAL_LTDC_MspInit+0x68>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d125      	bne.n	80042b8 <HAL_LTDC_MspInit+0x64>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800426c:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800426e:	2007      	movs	r0, #7
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004270:	2201      	movs	r2, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004272:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004274:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004278:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800427a:	2302      	movs	r3, #2
 800427c:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8004280:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004282:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8004284:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004286:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800428a:	f006 f8b5 	bl	800a3f8 <HAL_RCCEx_PeriphCLKConfig>
 800428e:	b108      	cbz	r0, 8004294 <HAL_LTDC_MspInit+0x40>
    {
      Error_Handler();
 8004290:	f7ff fe00 	bl	8003e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_LTDC_MspInit+0x6c>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004296:	2058      	movs	r0, #88	; 0x58
 8004298:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 800429a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80042a2:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80042ae:	f002 fd11 	bl	8006cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80042b2:	2058      	movs	r0, #88	; 0x58
 80042b4:	f002 fd40 	bl	8006d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80042b8:	b026      	add	sp, #152	; 0x98
 80042ba:	bd10      	pop	{r4, pc}
 80042bc:	40016800 	.word	0x40016800
 80042c0:	40023800 	.word	0x40023800

080042c4 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c4:	2214      	movs	r2, #20
 80042c6:	2100      	movs	r1, #0
{
 80042c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d0:	eb0d 0002 	add.w	r0, sp, r2
 80042d4:	f021 f8f8 	bl	80254c8 <memset>
  if(hqspi->Instance==QUADSPI)
 80042d8:	6822      	ldr	r2, [r4, #0]
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_QSPI_MspInit+0x104>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d16f      	bne.n	80043c0 <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 80042e0:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <HAL_QSPI_MspInit+0x108>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e4:	2403      	movs	r4, #3
 80042e6:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 80042e8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80042ea:	2609      	movs	r6, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042f0:	a905      	add	r1, sp, #20
    __HAL_RCC_QSPI_FORCE_RESET();
 80042f2:	f042 0202 	orr.w	r2, r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042f6:	4836      	ldr	r0, [pc, #216]	; (80043d0 <HAL_QSPI_MspInit+0x10c>)
    __HAL_RCC_QSPI_FORCE_RESET();
 80042f8:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	f022 0202 	bic.w	r2, r2, #2
 8004300:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004304:	f042 0202 	orr.w	r2, r2, #2
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
 800430a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430c:	f002 0202 	and.w	r2, r2, #2
 8004310:	9200      	str	r2, [sp, #0]
 8004312:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004316:	f042 0210 	orr.w	r2, r2, #16
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
 800431c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431e:	f002 0210 	and.w	r2, r2, #16
 8004322:	9201      	str	r2, [sp, #4]
 8004324:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004328:	f042 0202 	orr.w	r2, r2, #2
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	f002 0202 	and.w	r2, r2, #2
 8004334:	9202      	str	r2, [sp, #8]
 8004336:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433a:	f042 0204 	orr.w	r2, r2, #4
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
 8004340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004342:	f002 0204 	and.w	r2, r2, #4
 8004346:	9203      	str	r2, [sp, #12]
 8004348:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800434a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434c:	f042 0208 	orr.w	r2, r2, #8
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004360:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004364:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004366:	f003 fc33 	bl	8007bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800436a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436c:	a905      	add	r1, sp, #20
 800436e:	4819      	ldr	r0, [pc, #100]	; (80043d4 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004370:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004374:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004376:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800437a:	230a      	movs	r3, #10
 800437c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437e:	f003 fc27 	bl	8007bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8004382:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004386:	a905      	add	r1, sp, #20
 8004388:	4813      	ldr	r0, [pc, #76]	; (80043d8 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800438a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438c:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004390:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004394:	f003 fc1c 	bl	8007bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004398:	a905      	add	r1, sp, #20
 800439a:	480e      	ldr	r0, [pc, #56]	; (80043d4 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800439c:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439e:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a2:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a6:	f003 fc13 	bl	8007bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80043aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ae:	a905      	add	r1, sp, #20
 80043b0:	480a      	ldr	r0, [pc, #40]	; (80043dc <HAL_QSPI_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80043b2:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b8:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043bc:	f003 fc08 	bl	8007bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80043c0:	b00a      	add	sp, #40	; 0x28
 80043c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c6:	bf00      	nop
 80043c8:	a0001000 	.word	0xa0001000
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40020400 	.word	0x40020400
 80043d8:	40020800 	.word	0x40020800
 80043dc:	40020c00 	.word	0x40020c00

080043e0 <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM1)
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <HAL_TIM_OC_MspInit+0x3c>)
{
 80043e2:	b507      	push	{r0, r1, r2, lr}
  if(htim_oc->Instance==TIM1)
 80043e4:	6802      	ldr	r2, [r0, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d115      	bne.n	8004416 <HAL_TIM_OC_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043ea:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80043ee:	2105      	movs	r1, #5
 80043f0:	201b      	movs	r0, #27
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80043fa:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004406:	f002 fc65 	bl	8006cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800440a:	201b      	movs	r0, #27
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800440c:	b003      	add	sp, #12
 800440e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004412:	f002 bc91 	b.w	8006d38 <HAL_NVIC_EnableIRQ>
}
 8004416:	b003      	add	sp, #12
 8004418:	f85d fb04 	ldr.w	pc, [sp], #4
 800441c:	40010000 	.word	0x40010000

08004420 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8004420:	4b2c      	ldr	r3, [pc, #176]	; (80044d4 <HAL_SDRAM_MspInit+0xb4>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004422:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8004424:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004426:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8004428:	2c00      	cmp	r4, #0
 800442a:	d150      	bne.n	80044ce <HAL_SDRAM_MspInit+0xae>
  FMC_Initialized = 1;
 800442c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004430:	2603      	movs	r6, #3
 8004432:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8004434:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004436:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800443a:	4828      	ldr	r0, [pc, #160]	; (80044dc <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004446:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004450:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004454:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004458:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800445c:	f003 fbb8 	bl	8007bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8004460:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004464:	a901      	add	r1, sp, #4
 8004466:	481e      	ldr	r0, [pc, #120]	; (80044e0 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004468:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004472:	f003 fbad 	bl	8007bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004476:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800447a:	a901      	add	r1, sp, #4
 800447c:	4819      	ldr	r0, [pc, #100]	; (80044e4 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800447e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004480:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004484:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004488:	f003 fba2 	bl	8007bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800448c:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004490:	a901      	add	r1, sp, #4
 8004492:	4815      	ldr	r0, [pc, #84]	; (80044e8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004494:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800449e:	f003 fb97 	bl	8007bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80044a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044a6:	a901      	add	r1, sp, #4
 80044a8:	4810      	ldr	r0, [pc, #64]	; (80044ec <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044aa:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b0:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044b4:	f003 fb8c 	bl	8007bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80044b8:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80044bc:	a901      	add	r1, sp, #4
 80044be:	480c      	ldr	r0, [pc, #48]	; (80044f0 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044c0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c6:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80044ca:	f003 fb81 	bl	8007bd0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80044ce:	b007      	add	sp, #28
 80044d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	2004c8f0 	.word	0x2004c8f0
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40021800 	.word	0x40021800
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	40022000 	.word	0x40022000
 80044ec:	40021400 	.word	0x40021400
 80044f0:	40021c00 	.word	0x40021c00

080044f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044f4:	b510      	push	{r4, lr}
 80044f6:	4601      	mov	r1, r0
 80044f8:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80044fa:	2200      	movs	r2, #0
 80044fc:	2036      	movs	r0, #54	; 0x36
 80044fe:	f002 fbe9 	bl	8006cd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004502:	2036      	movs	r0, #54	; 0x36
 8004504:	f002 fc18 	bl	8006d38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800450a:	a901      	add	r1, sp, #4
 800450c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800450e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004510:	4c13      	ldr	r4, [pc, #76]	; (8004560 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004512:	f042 0210 	orr.w	r2, r2, #16
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	9302      	str	r3, [sp, #8]
 8004520:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004522:	f005 ff4b 	bl	800a3bc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004526:	f005 ff39 	bl	800a39c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800452a:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800452c:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800452e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004530:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004534:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_InitTick+0x74>)
 8004538:	fbb0 f0f3 	udiv	r0, r0, r3
 800453c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800453e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8004540:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004542:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8004544:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004546:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004548:	f006 fc98 	bl	800ae7c <HAL_TIM_Base_Init>
 800454c:	b920      	cbnz	r0, 8004558 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800454e:	4620      	mov	r0, r4
 8004550:	f006 fb3c 	bl	800abcc <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8004554:	b008      	add	sp, #32
 8004556:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8004558:	2001      	movs	r0, #1
 800455a:	e7fb      	b.n	8004554 <HAL_InitTick+0x60>
 800455c:	40023800 	.word	0x40023800
 8004560:	20061314 	.word	0x20061314
 8004564:	40001000 	.word	0x40001000
 8004568:	000f4240 	.word	0x000f4240

0800456c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800456c:	4770      	bx	lr

0800456e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800456e:	e7fe      	b.n	800456e <HardFault_Handler>

08004570 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004570:	e7fe      	b.n	8004570 <MemManage_Handler>

08004572 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004572:	e7fe      	b.n	8004572 <BusFault_Handler>

08004574 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004574:	e7fe      	b.n	8004574 <UsageFault_Handler>

08004576 <DebugMon_Handler>:
 8004576:	4770      	bx	lr

08004578 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004578:	4801      	ldr	r0, [pc, #4]	; (8004580 <TIM1_CC_IRQHandler+0x8>)
 800457a:	f006 bb69 	b.w	800ac50 <HAL_TIM_IRQHandler>
 800457e:	bf00      	nop
 8004580:	200611e8 	.word	0x200611e8

08004584 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <TIM6_DAC_IRQHandler+0x8>)
 8004586:	f006 bb63 	b.w	800ac50 <HAL_TIM_IRQHandler>
 800458a:	bf00      	nop
 800458c:	20061314 	.word	0x20061314

08004590 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <DMA2_Stream0_IRQHandler+0x8>)
 8004592:	f002 bd7f 	b.w	8007094 <HAL_DMA_IRQHandler>
 8004596:	bf00      	nop
 8004598:	20060f4c 	.word	0x20060f4c

0800459c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 800459c:	4801      	ldr	r0, [pc, #4]	; (80045a4 <DMA2_Stream1_IRQHandler+0x8>)
 800459e:	f002 bd79 	b.w	8007094 <HAL_DMA_IRQHandler>
 80045a2:	bf00      	nop
 80045a4:	20060eec 	.word	0x20060eec

080045a8 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045a8:	4801      	ldr	r0, [pc, #4]	; (80045b0 <DMA2_Stream4_IRQHandler+0x8>)
 80045aa:	f002 bd73 	b.w	8007094 <HAL_DMA_IRQHandler>
 80045ae:	bf00      	nop
 80045b0:	20061188 	.word	0x20061188

080045b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80045b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 80045b6:	f002 f92d 	bl	8006814 <HAL_GetTick>
  diff = last - now;
 80045ba:	4a05      	ldr	r2, [pc, #20]	; (80045d0 <LTDC_IRQHandler+0x1c>)
 80045bc:	4905      	ldr	r1, [pc, #20]	; (80045d4 <LTDC_IRQHandler+0x20>)
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	1a1b      	subs	r3, r3, r0
 80045c2:	600b      	str	r3, [r1, #0]
  last = now;
 80045c4:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80045c6:	4804      	ldr	r0, [pc, #16]	; (80045d8 <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80045c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 80045cc:	f005 b88f 	b.w	80096ee <HAL_LTDC_IRQHandler>
 80045d0:	2004c8f8 	.word	0x2004c8f8
 80045d4:	2004c8f4 	.word	0x2004c8f4
 80045d8:	2006103c 	.word	0x2006103c

080045dc <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80045dc:	4801      	ldr	r0, [pc, #4]	; (80045e4 <DMA2D_IRQHandler+0x8>)
 80045de:	f002 be51 	b.w	8007284 <HAL_DMA2D_IRQHandler>
 80045e2:	bf00      	nop
 80045e4:	20061234 	.word	0x20061234

080045e8 <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80045e8:	4801      	ldr	r0, [pc, #4]	; (80045f0 <I2C4_EV_IRQHandler+0x8>)
 80045ea:	f003 bff9 	b.w	80085e0 <HAL_I2C_EV_IRQHandler>
 80045ee:	bf00      	nop
 80045f0:	20060fb0 	.word	0x20060fb0

080045f4 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80045f4:	4801      	ldr	r0, [pc, #4]	; (80045fc <DSI_IRQHandler+0x8>)
 80045f6:	f003 b854 	b.w	80076a2 <HAL_DSI_IRQHandler>
 80045fa:	bf00      	nop
 80045fc:	20061020 	.word	0x20061020

08004600 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8004600:	4801      	ldr	r0, [pc, #4]	; (8004608 <JPEG_IRQHandler+0x8>)
 8004602:	f004 bf1d 	b.w	8009440 <HAL_JPEG_IRQHandler>
 8004606:	bf00      	nop
 8004608:	2006112c 	.word	0x2006112c

0800460c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800460c:	2001      	movs	r0, #1
 800460e:	4770      	bx	lr

08004610 <_kill>:

int _kill(int pid, int sig)
{
 8004610:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004612:	f020 fefb 	bl	802540c <__errno>
 8004616:	2316      	movs	r3, #22
 8004618:	6003      	str	r3, [r0, #0]
	return -1;
}
 800461a:	f04f 30ff 	mov.w	r0, #4294967295
 800461e:	bd08      	pop	{r3, pc}

08004620 <_exit>:

void _exit (int status)
{
 8004620:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004622:	f020 fef3 	bl	802540c <__errno>
 8004626:	2316      	movs	r3, #22
 8004628:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800462a:	e7fe      	b.n	800462a <_exit+0xa>

0800462c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	460e      	mov	r6, r1
 8004630:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004632:	2500      	movs	r5, #0
 8004634:	42a5      	cmp	r5, r4
 8004636:	db01      	blt.n	800463c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004638:	4620      	mov	r0, r4
 800463a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800463c:	f3af 8000 	nop.w
 8004640:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004642:	3501      	adds	r5, #1
 8004644:	e7f6      	b.n	8004634 <_read+0x8>

08004646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004646:	b570      	push	{r4, r5, r6, lr}
 8004648:	460e      	mov	r6, r1
 800464a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800464c:	2500      	movs	r5, #0
 800464e:	42a5      	cmp	r5, r4
 8004650:	db01      	blt.n	8004656 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004652:	4620      	mov	r0, r4
 8004654:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8004656:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004658:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 800465a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800465e:	e7f6      	b.n	800464e <_write+0x8>

08004660 <_close>:

int _close(int file)
{
	return -1;
}
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	4770      	bx	lr

08004666 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800466a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800466c:	604b      	str	r3, [r1, #4]
}
 800466e:	4770      	bx	lr

08004670 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004670:	2001      	movs	r0, #1
 8004672:	4770      	bx	lr

08004674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004674:	2000      	movs	r0, #0
 8004676:	4770      	bx	lr

08004678 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004678:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <_sbrk+0x2c>)
{
 800467c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	b909      	cbnz	r1, 8004686 <_sbrk+0xe>
		heap_end = &end;
 8004682:	4909      	ldr	r1, [pc, #36]	; (80046a8 <_sbrk+0x30>)
 8004684:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004686:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004688:	4669      	mov	r1, sp
 800468a:	4402      	add	r2, r0
 800468c:	428a      	cmp	r2, r1
 800468e:	d906      	bls.n	800469e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8004690:	f020 febc 	bl	802540c <__errno>
 8004694:	230c      	movs	r3, #12
 8004696:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800469c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800469e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80046a0:	e7fc      	b.n	800469c <_sbrk+0x24>
 80046a2:	bf00      	nop
 80046a4:	2004c8fc 	.word	0x2004c8fc
 80046a8:	200613b8 	.word	0x200613b8

080046ac <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 0; // verdana_40_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80046ac:	4770      	bx	lr

080046ae <_ZN23ApplicationFontProviderD0Ev>:
 80046ae:	b510      	push	{r4, lr}
 80046b0:	4604      	mov	r4, r0
 80046b2:	2104      	movs	r1, #4
 80046b4:	f020 fca5 	bl	8025002 <_ZdlPvj>
 80046b8:	4620      	mov	r0, r4
 80046ba:	bd10      	pop	{r4, pc}

080046bc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80046bc:	b508      	push	{r3, lr}
 80046be:	2904      	cmp	r1, #4
 80046c0:	d814      	bhi.n	80046ec <_ZN23ApplicationFontProvider7getFontEt+0x30>
 80046c2:	e8df f001 	tbb	[pc, r1]
 80046c6:	030f      	.short	0x030f
 80046c8:	0b07      	.short	0x0b07
 80046ca:	0f          	.byte	0x0f
 80046cb:	00          	.byte	0x00
    case Typography::DEFAULT:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80046cc:	f001 fc2e 	bl	8005f2c <_ZN17TypedTextDatabase8getFontsEv>
 80046d0:	6840      	ldr	r0, [r0, #4]
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 80046d2:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80046d4:	f001 fc2a 	bl	8005f2c <_ZN17TypedTextDatabase8getFontsEv>
 80046d8:	6880      	ldr	r0, [r0, #8]
 80046da:	e7fa      	b.n	80046d2 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80046dc:	f001 fc26 	bl	8005f2c <_ZN17TypedTextDatabase8getFontsEv>
 80046e0:	68c0      	ldr	r0, [r0, #12]
 80046e2:	e7f6      	b.n	80046d2 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80046e4:	f001 fc22 	bl	8005f2c <_ZN17TypedTextDatabase8getFontsEv>
 80046e8:	6800      	ldr	r0, [r0, #0]
 80046ea:	e7f2      	b.n	80046d2 <_ZN23ApplicationFontProvider7getFontEt+0x16>
{
 80046ec:	2000      	movs	r0, #0
 80046ee:	e7f0      	b.n	80046d2 <_ZN23ApplicationFontProvider7getFontEt+0x16>

080046f0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80046f0:	4800      	ldr	r0, [pc, #0]	; (80046f4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80046f2:	4770      	bx	lr
 80046f4:	0802824c 	.word	0x0802824c

080046f8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80046f8:	203a      	movs	r0, #58	; 0x3a
 80046fa:	4770      	bx	lr

080046fc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80046fc:	b513      	push	{r0, r1, r4, lr}
 80046fe:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8004700:	b151      	cbz	r1, 8004718 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004702:	6803      	ldr	r3, [r0, #0]
 8004704:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8004706:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8004708:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800470c:	689c      	ldr	r4, [r3, #8]
 800470e:	f10d 0303 	add.w	r3, sp, #3
 8004712:	47a0      	blx	r4
        return glyph;
    }
 8004714:	b002      	add	sp, #8
 8004716:	bd10      	pop	{r4, pc}
            return 0;
 8004718:	4608      	mov	r0, r1
 800471a:	e7fb      	b.n	8004714 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

0800471c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800471c:	8940      	ldrh	r0, [r0, #10]
 800471e:	4770      	bx	lr

08004720 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8004720:	8980      	ldrh	r0, [r0, #12]
 8004722:	4770      	bx	lr

08004724 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8004724:	8880      	ldrh	r0, [r0, #4]
 8004726:	4770      	bx	lr

08004728 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8004728:	7983      	ldrb	r3, [r0, #6]
 800472a:	8880      	ldrh	r0, [r0, #4]
 800472c:	4418      	add	r0, r3
    }
 800472e:	b280      	uxth	r0, r0
 8004730:	4770      	bx	lr

08004732 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8004732:	79c0      	ldrb	r0, [r0, #7]
    }
 8004734:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004738:	4770      	bx	lr

0800473a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800473a:	79c0      	ldrb	r0, [r0, #7]
    }
 800473c:	09c0      	lsrs	r0, r0, #7
 800473e:	4770      	bx	lr

08004740 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8004740:	4770      	bx	lr

08004742 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004742:	b510      	push	{r4, lr}
 8004744:	4604      	mov	r4, r0
    }
 8004746:	2108      	movs	r1, #8
 8004748:	f020 fc5b 	bl	8025002 <_ZdlPvj>
 800474c:	4620      	mov	r0, r4
 800474e:	bd10      	pop	{r4, pc}

08004750 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8004750:	4770      	bx	lr

08004752 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8004752:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8004756:	6808      	ldr	r0, [r1, #0]
 8004758:	6849      	ldr	r1, [r1, #4]
 800475a:	c303      	stmia	r3!, {r0, r1}
    }
 800475c:	4770      	bx	lr

0800475e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800475e:	2000      	movs	r0, #0
 8004760:	4770      	bx	lr

08004762 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8004762:	8081      	strh	r1, [r0, #4]
    }
 8004764:	4770      	bx	lr

08004766 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8004766:	80c1      	strh	r1, [r0, #6]
    }
 8004768:	4770      	bx	lr

0800476a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800476a:	8101      	strh	r1, [r0, #8]
    }
 800476c:	4770      	bx	lr

0800476e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800476e:	8141      	strh	r1, [r0, #10]
    }
 8004770:	4770      	bx	lr

08004772 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8004772:	4770      	bx	lr

08004774 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 8004774:	4770      	bx	lr

08004776 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8004776:	4770      	bx	lr

08004778 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8004778:	4770      	bx	lr

0800477a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800477a:	4770      	bx	lr

0800477c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800477c:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800477e:	88c4      	ldrh	r4, [r0, #6]
 8004780:	6803      	ldr	r3, [r0, #0]
 8004782:	1b12      	subs	r2, r2, r4
 8004784:	8884      	ldrh	r4, [r0, #4]
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	1b09      	subs	r1, r1, r4
 800478a:	b212      	sxth	r2, r2
    }
 800478c:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8004790:	b209      	sxth	r1, r1
 8004792:	4718      	bx	r3

08004794 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004798:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
 800479e:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80047a0:	6813      	ldr	r3, [r2, #0]
 80047a2:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80047a4:	6010      	str	r0, [r2, #0]
    }
 80047a6:	4770      	bx	lr

080047a8 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80047a8:	4770      	bx	lr

080047aa <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80047aa:	4770      	bx	lr

080047ac <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80047ac:	6041      	str	r1, [r0, #4]
    }
 80047ae:	4770      	bx	lr

080047b0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80047b0:	4770      	bx	lr

080047b2 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80047b2:	2301      	movs	r3, #1
 80047b4:	7203      	strb	r3, [r0, #8]
    }
 80047b6:	4770      	bx	lr

080047b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80047b8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80047bc:	b11a      	cbz	r2, 80047c6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80047be:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80047c2:	b102      	cbz	r2, 80047c6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80047c4:	6018      	str	r0, [r3, #0]
        }
    }
 80047c6:	4770      	bx	lr

080047c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 80047c8:	4770      	bx	lr

080047ca <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>:
class WipeTransition : public Transition
 80047ca:	4770      	bx	lr

080047cc <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80047cc:	4770      	bx	lr

080047ce <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80047ce:	4770      	bx	lr

080047d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE8tearDownEv>:
            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
        }
    }

    virtual void tearDown()
 80047d0:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80047d2:	6840      	ldr	r0, [r0, #4]
 80047d4:	6803      	ldr	r3, [r0, #0]
 80047d6:	3110      	adds	r1, #16
 80047d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047da:	4718      	bx	r3

080047dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE4initEv>:
    }

    virtual void init()
 80047dc:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80047de:	6840      	ldr	r0, [r0, #4]
 80047e0:	6803      	ldr	r3, [r0, #0]
 80047e2:	3110      	adds	r1, #16
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	4718      	bx	r3

080047e8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 80047e8:	4770      	bx	lr

080047ea <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect4drawERKNS_4RectE>:
        }
 80047ea:	4770      	bx	lr

080047ec <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv>:
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
        : x(x), y(y), width(width), height(height)
 80047ec:	2200      	movs	r2, #0
        virtual Rect getSolidRect() const
 80047ee:	b510      	push	{r4, lr}
            return Rect(0U, 0U, rect.width, rect.height);
 80047f0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80047f4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80047f8:	8002      	strh	r2, [r0, #0]
 80047fa:	8042      	strh	r2, [r0, #2]
 80047fc:	8084      	strh	r4, [r0, #4]
 80047fe:	80c1      	strh	r1, [r0, #6]
        }
 8004800:	bd10      	pop	{r4, pc}

08004802 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8004802:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8004804:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8004806:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8004808:	68c2      	ldr	r2, [r0, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	1054      	asrs	r4, r2, #1
 800480e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8004812:	07d2      	lsls	r2, r2, #31
 8004814:	bf48      	it	mi
 8004816:	590a      	ldrmi	r2, [r1, r4]
    }
 8004818:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 800481c:	bf48      	it	mi
 800481e:	58d3      	ldrmi	r3, [r2, r3]
 8004820:	4718      	bx	r3

08004822 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8004822:	6843      	ldr	r3, [r0, #4]
 8004824:	b12b      	cbz	r3, 8004832 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8004826:	6883      	ldr	r3, [r0, #8]
 8004828:	b92b      	cbnz	r3, 8004836 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800482a:	68c0      	ldr	r0, [r0, #12]
 800482c:	f000 0001 	and.w	r0, r0, #1
 8004830:	4770      	bx	lr
 8004832:	4618      	mov	r0, r3
 8004834:	4770      	bx	lr
 8004836:	2001      	movs	r0, #1
    }
 8004838:	4770      	bx	lr

0800483a <_ZN8touchgfx12NoTransitionD0Ev>:
 800483a:	b510      	push	{r4, lr}
 800483c:	4604      	mov	r4, r0
 800483e:	210c      	movs	r1, #12
 8004840:	f020 fbdf 	bl	8025002 <_ZdlPvj>
 8004844:	4620      	mov	r0, r4
 8004846:	bd10      	pop	{r4, pc}

08004848 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004848:	b510      	push	{r4, lr}
 800484a:	4604      	mov	r4, r0
 800484c:	2110      	movs	r1, #16
 800484e:	f020 fbd8 	bl	8025002 <_ZdlPvj>
 8004852:	4620      	mov	r0, r4
 8004854:	bd10      	pop	{r4, pc}

08004856 <_ZN23FrontendApplicationBaseD0Ev>:
 8004856:	b510      	push	{r4, lr}
 8004858:	4604      	mov	r4, r0
 800485a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800485e:	f020 fbd0 	bl	8025002 <_ZdlPvj>
 8004862:	4620      	mov	r0, r4
 8004864:	bd10      	pop	{r4, pc}

08004866 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED0Ev>:
class WipeTransition : public Transition
 8004866:	b510      	push	{r4, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	2138      	movs	r1, #56	; 0x38
 800486c:	f020 fbc9 	bl	8025002 <_ZdlPvj>
 8004870:	4620      	mov	r0, r4
 8004872:	bd10      	pop	{r4, pc}

08004874 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD0Ev>:
    class FullSolidRect : public Widget
 8004874:	b510      	push	{r4, lr}
 8004876:	4604      	mov	r4, r0
 8004878:	2128      	movs	r1, #40	; 0x28
 800487a:	f020 fbc2 	bl	8025002 <_ZdlPvj>
 800487e:	4620      	mov	r0, r4
 8004880:	bd10      	pop	{r4, pc}

08004882 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8004882:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 8004884:	f00e fef4 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 8004888:	6803      	ldr	r3, [r0, #0]
    }
 800488a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	4718      	bx	r3

08004892 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004892:	b510      	push	{r4, lr}
 8004894:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004896:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800489a:	b158      	cbz	r0, 80048b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800489c:	6803      	ldr	r3, [r0, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4798      	blx	r3
 80048a2:	b138      	cbz	r0, 80048b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80048a4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80048a8:	6803      	ldr	r3, [r0, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 80048b4:	bd10      	pop	{r4, pc}
	...

080048b8 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80048c0:	b10a      	cbz	r2, 80048c6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80048c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80048c4:	b900      	cbnz	r0, 80048c8 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80048c6:	6898      	ldr	r0, [r3, #8]
    }
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20060c30 	.word	0x20060c30

080048d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d2:	4604      	mov	r4, r0
        animationCounter++;
 80048d4:	7a80      	ldrb	r0, [r0, #10]
    virtual void handleTickEvent()
 80048d6:	b089      	sub	sp, #36	; 0x24
        animationCounter++;
 80048d8:	3001      	adds	r0, #1
        if (animationCounter <= (animationSteps))
 80048da:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 80048dc:	b2c0      	uxtb	r0, r0
        if (animationCounter <= (animationSteps))
 80048de:	4298      	cmp	r0, r3
        animationCounter++;
 80048e0:	72a0      	strb	r0, [r4, #10]
        if (animationCounter <= (animationSteps))
 80048e2:	d84d      	bhi.n	8004980 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb0>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80048e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048e8:	2100      	movs	r1, #0
 80048ea:	f010 fb8d 	bl	8015008 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
            if (calculatedValue % 2)
 80048ee:	f010 0201 	ands.w	r2, r0, #1
 80048f2:	b283      	uxth	r3, r0
 80048f4:	d04a      	beq.n	800498c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xbc>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80048f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048fa:	2800      	cmp	r0, #0
 80048fc:	bfd8      	it	le
 80048fe:	460a      	movle	r2, r1
 8004900:	4413      	add	r3, r2
 8004902:	81e3      	strh	r3, [r4, #14]
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8004904:	89e0      	ldrh	r0, [r4, #14]
 8004906:	2500      	movs	r5, #0
                const uint16_t prevSolidHeight = solid.getHeight();
 8004908:	8b63      	ldrh	r3, [r4, #26]
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 800490a:	4e21      	ldr	r6, [pc, #132]	; (8004990 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xc0>)
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 800490c:	4403      	add	r3, r0
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 800490e:	4f21      	ldr	r7, [pc, #132]	; (8004994 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xc4>)
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8004910:	8831      	ldrh	r1, [r6, #0]
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 8004912:	f9b7 c000 	ldrsh.w	ip, [r7]
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8004916:	1a0a      	subs	r2, r1, r0
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 8004918:	1a5b      	subs	r3, r3, r1
                screenContainer->invalidateRect(r);
 800491a:	6860      	ldr	r0, [r4, #4]
 800491c:	a906      	add	r1, sp, #24
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 800491e:	b212      	sxth	r2, r2
 8004920:	f8ad 301e 	strh.w	r3, [sp, #30]
                screenContainer->invalidateRect(r);
 8004924:	6803      	ldr	r3, [r0, #0]
        rect.height = height;
 8004926:	8362      	strh	r2, [r4, #26]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f8ad 5018 	strh.w	r5, [sp, #24]
 800492e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8004932:	f8ad c01c 	strh.w	ip, [sp, #28]
 8004936:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8004938:	7aa3      	ldrb	r3, [r4, #10]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d124      	bne.n	8004988 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb8>
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xc8>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b30b      	cbz	r3, 8004988 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb8>
            Rect rect = solid.getRect(); // Part to copy between buffers
 8004944:	f854 0f14 	ldr.w	r0, [r4, #20]!
 8004948:	ab04      	add	r3, sp, #16
 800494a:	6861      	ldr	r1, [r4, #4]
 800494c:	c303      	stmia	r3!, {r0, r1}
        return instance;
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xcc>)
 8004950:	6818      	ldr	r0, [r3, #0]
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8004952:	6803      	ldr	r3, [r0, #0]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	4798      	blx	r3
            source.width = HAL::DISPLAY_WIDTH;
 8004958:	883b      	ldrh	r3, [r7, #0]
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800495a:	9003      	str	r0, [sp, #12]
            source.width = HAL::DISPLAY_WIDTH;
 800495c:	f8ad 301c 	strh.w	r3, [sp, #28]
            source.height = HAL::DISPLAY_HEIGHT;
 8004960:	8833      	ldrh	r3, [r6, #0]
        : x(0), y(0), width(0), height(0)
 8004962:	9506      	str	r5, [sp, #24]
 8004964:	f8ad 301e 	strh.w	r3, [sp, #30]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8004968:	f7ff ffa6 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800496c:	22ff      	movs	r2, #255	; 0xff
 800496e:	6803      	ldr	r3, [r0, #0]
 8004970:	9903      	ldr	r1, [sp, #12]
 8004972:	9200      	str	r2, [sp, #0]
 8004974:	aa06      	add	r2, sp, #24
 8004976:	9501      	str	r5, [sp, #4]
 8004978:	68dc      	ldr	r4, [r3, #12]
 800497a:	ab04      	add	r3, sp, #16
 800497c:	47a0      	blx	r4
 800497e:	e003      	b.n	8004988 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb8>
            done = true;
 8004980:	2301      	movs	r3, #1
 8004982:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	72a3      	strb	r3, [r4, #10]
    }
 8004988:	b009      	add	sp, #36	; 0x24
 800498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800498c:	81e0      	strh	r0, [r4, #14]
 800498e:	e7b9      	b.n	8004904 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x34>
 8004990:	20060c26 	.word	0x20060c26
 8004994:	20060c24 	.word	0x20060c24
 8004998:	20060c2e 	.word	0x20060c2e
 800499c:	20060c30 	.word	0x20060c30

080049a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	4604      	mov	r4, r0
 80049a4:	4617      	mov	r7, r2
 80049a6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80049a8:	f00e fecc 	bl	8013744 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
          pendingScreenTransitionCallback(0)
 80049ae:	2500      	movs	r5, #0
        instance = this;
 80049b0:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80049b2:	4629      	mov	r1, r5
      model(m)
 80049b4:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
 80049b6:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun_0(0)
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
 80049ba:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80049c6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80049c8:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 80049cc:	689b      	ldr	r3, [r3, #8]
      model(m)
 80049ce:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80049d2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80049d4:	4628      	mov	r0, r5
 80049d6:	f001 fa5d 	bl	8005e94 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80049da:	f7ff ff6d 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 80049de:	f016 fec2 	bl	801b766 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80049e2:	4620      	mov	r0, r4
 80049e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20060c9c 	.word	0x20060c9c
 80049ec:	08028b3c 	.word	0x08028b3c
 80049f0:	08028b24 	.word	0x08028b24
 80049f4:	20060c30 	.word	0x20060c30

080049f8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenWipeTransitionSouthEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <_ZN23FrontendApplicationBase36gotoScreen1ScreenWipeTransitionSouthEv+0x1c>)
 80049fa:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80049fe:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8004a02:	2300      	movs	r3, #0
 8004a04:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionSouth()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenWipeTransitionSouthImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004a08:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8004a0c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	08004bc1 	.word	0x08004bc1

08004a18 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8004a1a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8004a1e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004a28:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8004a2c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	08004d25 	.word	0x08004d25

08004a38 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004a3e:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004a40:	4699      	mov	r9, r3
 8004a42:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004a44:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004a46:	4615      	mov	r5, r2
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4798      	blx	r3
 8004a4c:	f643 1337 	movw	r3, #14647	; 0x3937
 8004a50:	4298      	cmp	r0, r3
 8004a52:	d805      	bhi.n	8004a60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x28>
 8004a54:	4b51      	ldr	r3, [pc, #324]	; (8004b9c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8004a56:	21a3      	movs	r1, #163	; 0xa3
 8004a58:	4a51      	ldr	r2, [pc, #324]	; (8004ba0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004a5a:	4852      	ldr	r0, [pc, #328]	; (8004ba4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8004a5c:	f020 fca4 	bl	80253a8 <__assert_func>
 8004a60:	6868      	ldr	r0, [r5, #4]
 8004a62:	6803      	ldr	r3, [r0, #0]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4798      	blx	r3
 8004a68:	280f      	cmp	r0, #15
 8004a6a:	d803      	bhi.n	8004a74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3c>
 8004a6c:	4b4e      	ldr	r3, [pc, #312]	; (8004ba8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8004a6e:	21a4      	movs	r1, #164	; 0xa4
 8004a70:	4a4b      	ldr	r2, [pc, #300]	; (8004ba0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8004a72:	e7f2      	b.n	8004a5a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004a74:	68e8      	ldr	r0, [r5, #12]
 8004a76:	6803      	ldr	r3, [r0, #0]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	4798      	blx	r3
 8004a7c:	2837      	cmp	r0, #55	; 0x37
 8004a7e:	d803      	bhi.n	8004a88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x50>
 8004a80:	4b4a      	ldr	r3, [pc, #296]	; (8004bac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 8004a82:	21a5      	movs	r1, #165	; 0xa5
 8004a84:	4a46      	ldr	r2, [pc, #280]	; (8004ba0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8004a86:	e7e8      	b.n	8004a5a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22>
    Application::getInstance()->clearAllTimerWidgets();
 8004a88:	f00e fdf2 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 8004a8c:	f00e fe3e 	bl	801370c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004a90:	f8d9 0000 	ldr.w	r0, [r9]
 8004a94:	b110      	cbz	r0, 8004a9c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x64>
        (*currentTrans)->tearDown();
 8004a96:	6803      	ldr	r3, [r0, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4798      	blx	r3
    if (*currentTrans)
 8004a9c:	f8d9 0000 	ldr.w	r0, [r9]
 8004aa0:	b110      	cbz	r0, 8004aa8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x70>
        (*currentTrans)->~Transition();
 8004aa2:	6803      	ldr	r3, [r0, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4798      	blx	r3
    if (*currentScreen)
 8004aa8:	6838      	ldr	r0, [r7, #0]
 8004aaa:	b110      	cbz	r0, 8004ab2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
        (*currentScreen)->tearDownScreen();
 8004aac:	6803      	ldr	r3, [r0, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	4798      	blx	r3
    if (*currentPresenter)
 8004ab2:	f8d8 0000 	ldr.w	r0, [r8]
 8004ab6:	b110      	cbz	r0, 8004abe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x86>
        (*currentPresenter)->deactivate();
 8004ab8:	6803      	ldr	r3, [r0, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4798      	blx	r3
    if (*currentScreen)
 8004abe:	6838      	ldr	r0, [r7, #0]
 8004ac0:	b110      	cbz	r0, 8004ac8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x90>
        (*currentScreen)->~Screen();
 8004ac2:	6803      	ldr	r3, [r0, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4798      	blx	r3
    if (*currentPresenter)
 8004ac8:	f8d8 0000 	ldr.w	r0, [r8]
 8004acc:	b110      	cbz	r0, 8004ad4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9c>
        (*currentPresenter)->~Presenter();
 8004ace:	6803      	ldr	r3, [r0, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004ad4:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8004ad6:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8004ad8:	f04f 0b00 	mov.w	fp, #0
 8004adc:	6803      	ldr	r3, [r0, #0]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4798      	blx	r3
          solid()
 8004ae2:	4b33      	ldr	r3, [pc, #204]	; (8004bb0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x178>)
 8004ae4:	f100 0610 	add.w	r6, r0, #16
 8004ae8:	4604      	mov	r4, r0
 8004aea:	6003      	str	r3, [r0, #0]
 8004aec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004af0:	2228      	movs	r2, #40	; 0x28
 8004af2:	4659      	mov	r1, fp
 8004af4:	8103      	strh	r3, [r0, #8]
 8004af6:	f8c0 b004 	str.w	fp, [r0, #4]
 8004afa:	f880 b00a 	strb.w	fp, [r0, #10]
 8004afe:	f8a0 b00e 	strh.w	fp, [r0, #14]
 8004b02:	4630      	mov	r0, r6
 8004b04:	f020 fce0 	bl	80254c8 <memset>
          visible(true)
 8004b08:	f44f 7380 	mov.w	r3, #256	; 0x100
        setWidth(width);
 8004b0c:	4a29      	ldr	r2, [pc, #164]	; (8004bb4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x17c>)
 8004b0e:	4630      	mov	r0, r6
          visible(true)
 8004b10:	86a3      	strh	r3, [r4, #52]	; 0x34
    class FullSolidRect : public Widget
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x180>)
        setWidth(width);
 8004b14:	f9b2 1000 	ldrsh.w	r1, [r2]
 8004b18:	6123      	str	r3, [r4, #16]
            targetValue = HAL::DISPLAY_HEIGHT;
 8004b1a:	4b28      	ldr	r3, [pc, #160]	; (8004bbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>)
 8004b1c:	f9b3 a000 	ldrsh.w	sl, [r3]
 8004b20:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8004b24:	f7ff fe21 	bl	800476a <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8004b28:	6922      	ldr	r2, [r4, #16]
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	4651      	mov	r1, sl
 8004b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b30:	4790      	blx	r2
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004b32:	68a8      	ldr	r0, [r5, #8]
 8004b34:	4659      	mov	r1, fp
 8004b36:	6803      	ldr	r3, [r0, #0]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	4798      	blx	r3
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	f001 fab7 	bl	80060b0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004b42:	6868      	ldr	r0, [r5, #4]
 8004b44:	4659      	mov	r1, fp
 8004b46:	6803      	ldr	r3, [r0, #0]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	4798      	blx	r3
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	4631      	mov	r1, r6
 8004b50:	f001 fa4a 	bl	8005fe8 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8004b54:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8004b58:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8004b5c:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8004b5e:	b1dd      	cbz	r5, 8004b98 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>
 8004b60:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8004b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    newScreen->setupScreen();
 8004b64:	4630      	mov	r0, r6
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8004b6a:	60aa      	str	r2, [r5, #8]
 8004b6c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 8004b6e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8004b70:	4798      	blx	r3
    newPresenter->activate();
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	4628      	mov	r0, r5
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f010 fa3d 	bl	8014ffc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	4620      	mov	r0, r4
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	4798      	blx	r3
    newTransition->invalidate();
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8004b92:	4628      	mov	r0, r5
 8004b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8004b98:	462b      	mov	r3, r5
 8004b9a:	e7e2      	b.n	8004b62 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 8004b9c:	080286e4 	.word	0x080286e4
 8004ba0:	08028772 	.word	0x08028772
 8004ba4:	08028889 	.word	0x08028889
 8004ba8:	080288d0 	.word	0x080288d0
 8004bac:	08028973 	.word	0x08028973
 8004bb0:	08028c08 	.word	0x08028c08
 8004bb4:	20060c24 	.word	0x20060c24
 8004bb8:	08028ba4 	.word	0x08028ba4
 8004bbc:	20060c26 	.word	0x20060c26

08004bc0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenWipeTransitionSouthImplEv>:
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004bc0:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8004bc4:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004bc6:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenWipeTransitionSouthImplEv+0x20>)
 8004bce:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8004bd2:	4804      	ldr	r0, [pc, #16]	; (8004be4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenWipeTransitionSouthImplEv+0x24>)
 8004bd4:	f7ff ff30 	bl	8004a38 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004bd8:	b003      	add	sp, #12
 8004bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bde:	bf00      	nop
 8004be0:	20060c90 	.word	0x20060c90
 8004be4:	20060c8c 	.word	0x20060c8c

08004be8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004bee:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004bf0:	4699      	mov	r9, r3
 8004bf2:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004bf4:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004bf6:	4614      	mov	r4, r2
 8004bf8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	4798      	blx	r3
 8004c00:	28c7      	cmp	r0, #199	; 0xc7
 8004c02:	d805      	bhi.n	8004c10 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x28>
 8004c04:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>)
 8004c06:	21a3      	movs	r1, #163	; 0xa3
 8004c08:	4a41      	ldr	r2, [pc, #260]	; (8004d10 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004c0a:	4842      	ldr	r0, [pc, #264]	; (8004d14 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8004c0c:	f020 fbcc 	bl	80253a8 <__assert_func>
 8004c10:	6860      	ldr	r0, [r4, #4]
 8004c12:	6803      	ldr	r3, [r0, #0]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4798      	blx	r3
 8004c18:	280f      	cmp	r0, #15
 8004c1a:	d803      	bhi.n	8004c24 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3c>
 8004c1c:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8004c1e:	21a4      	movs	r1, #164	; 0xa4
 8004c20:	4a3b      	ldr	r2, [pc, #236]	; (8004d10 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8004c22:	e7f2      	b.n	8004c0a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c24:	68e0      	ldr	r0, [r4, #12]
 8004c26:	6803      	ldr	r3, [r0, #0]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4798      	blx	r3
 8004c2c:	280b      	cmp	r0, #11
 8004c2e:	d803      	bhi.n	8004c38 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x50>
 8004c30:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8004c32:	21a5      	movs	r1, #165	; 0xa5
 8004c34:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8004c36:	e7e8      	b.n	8004c0a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22>
    Application::getInstance()->clearAllTimerWidgets();
 8004c38:	f00e fd1a 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 8004c3c:	f00e fd66 	bl	801370c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004c40:	f8d9 0000 	ldr.w	r0, [r9]
 8004c44:	b110      	cbz	r0, 8004c4c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x64>
        (*currentTrans)->tearDown();
 8004c46:	6803      	ldr	r3, [r0, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	4798      	blx	r3
    if (*currentTrans)
 8004c4c:	f8d9 0000 	ldr.w	r0, [r9]
 8004c50:	b110      	cbz	r0, 8004c58 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x70>
        (*currentTrans)->~Transition();
 8004c52:	6803      	ldr	r3, [r0, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4798      	blx	r3
    if (*currentScreen)
 8004c58:	6838      	ldr	r0, [r7, #0]
 8004c5a:	b110      	cbz	r0, 8004c62 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
        (*currentScreen)->tearDownScreen();
 8004c5c:	6803      	ldr	r3, [r0, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	4798      	blx	r3
    if (*currentPresenter)
 8004c62:	f8d8 0000 	ldr.w	r0, [r8]
 8004c66:	b110      	cbz	r0, 8004c6e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x86>
        (*currentPresenter)->deactivate();
 8004c68:	6803      	ldr	r3, [r0, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4798      	blx	r3
    if (*currentScreen)
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	b110      	cbz	r0, 8004c78 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x90>
        (*currentScreen)->~Screen();
 8004c72:	6803      	ldr	r3, [r0, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4798      	blx	r3
    if (*currentPresenter)
 8004c78:	f8d8 0000 	ldr.w	r0, [r8]
 8004c7c:	b110      	cbz	r0, 8004c84 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9c>
        (*currentPresenter)->~Presenter();
 8004c7e:	6803      	ldr	r3, [r0, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004c84:	68e0      	ldr	r0, [r4, #12]
 8004c86:	2100      	movs	r1, #0
 8004c88:	f04f 0b00 	mov.w	fp, #0
 8004c8c:	6803      	ldr	r3, [r0, #0]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	4798      	blx	r3
 8004c92:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8004c94:	4605      	mov	r5, r0
 8004c96:	f8c0 b004 	str.w	fp, [r0, #4]
 8004c9a:	6003      	str	r3, [r0, #0]
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004ca2:	68a0      	ldr	r0, [r4, #8]
 8004ca4:	6803      	ldr	r3, [r0, #0]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	4798      	blx	r3
 8004caa:	4606      	mov	r6, r0
 8004cac:	f001 fa96 	bl	80061dc <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004cb0:	6860      	ldr	r0, [r4, #4]
 8004cb2:	4659      	mov	r1, fp
 8004cb4:	6803      	ldr	r3, [r0, #0]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	4798      	blx	r3
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	f001 fa73 	bl	80061a8 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8004cc2:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8004cc6:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8004cca:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8004ccc:	b1e4      	cbz	r4, 8004d08 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x120>
 8004cce:	1d23      	adds	r3, r4, #4
 8004cd0:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	6833      	ldr	r3, [r6, #0]
 8004cd8:	f8c4 a008 	str.w	sl, [r4, #8]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	63f4      	str	r4, [r6, #60]	; 0x3c
 8004ce0:	4798      	blx	r3
    newPresenter->activate();
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004cea:	4629      	mov	r1, r5
 8004cec:	4630      	mov	r0, r6
 8004cee:	f010 f985 	bl	8014ffc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004cf2:	682b      	ldr	r3, [r5, #0]
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	4798      	blx	r3
    newTransition->invalidate();
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	4798      	blx	r3
}
 8004d02:	4620      	mov	r0, r4
 8004d04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8004d08:	4623      	mov	r3, r4
 8004d0a:	e7e1      	b.n	8004cd0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
 8004d0c:	080286e4 	.word	0x080286e4
 8004d10:	08028a16 	.word	0x08028a16
 8004d14:	08028889 	.word	0x08028889
 8004d18:	080288d0 	.word	0x080288d0
 8004d1c:	08028973 	.word	0x08028973
 8004d20:	08028b80 	.word	0x08028b80

08004d24 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004d24:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8004d28:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004d2a:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x20>)
 8004d32:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8004d36:	4804      	ldr	r0, [pc, #16]	; (8004d48 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>)
 8004d38:	f7ff ff56 	bl	8004be8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004d3c:	b003      	add	sp, #12
 8004d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d42:	bf00      	nop
 8004d44:	20060c90 	.word	0x20060c90
 8004d48:	20060c8c 	.word	0x20060c8c

08004d4c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8004d4c:	6a00      	ldr	r0, [r0, #32]
 8004d4e:	4770      	bx	lr

08004d50 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004d50:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004d52:	4770      	bx	lr

08004d54 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004d54:	4770      	bx	lr

08004d56 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004d56:	888b      	ldrh	r3, [r1, #4]
 8004d58:	6980      	ldr	r0, [r0, #24]
 8004d5a:	0adb      	lsrs	r3, r3, #11
 8004d5c:	680a      	ldr	r2, [r1, #0]
 8004d5e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8004d62:	4410      	add	r0, r2
 8004d64:	4770      	bx	lr

08004d66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004d66:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8004d68:	b1c2      	cbz	r2, 8004d9c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004d6a:	7b13      	ldrb	r3, [r2, #12]
 8004d6c:	b1b3      	cbz	r3, 8004d9c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004d6e:	7b54      	ldrb	r4, [r2, #13]
 8004d70:	7ad2      	ldrb	r2, [r2, #11]
 8004d72:	0224      	lsls	r4, r4, #8
 8004d74:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004d78:	4314      	orrs	r4, r2
 8004d7a:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004d7c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004d7e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004d82:	8813      	ldrh	r3, [r2, #0]
 8004d84:	428b      	cmp	r3, r1
 8004d86:	d102      	bne.n	8004d8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004d88:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8004d8c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004d8e:	d805      	bhi.n	8004d9c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004d90:	3801      	subs	r0, #1
 8004d92:	3204      	adds	r2, #4
 8004d94:	b280      	uxth	r0, r0
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d1f3      	bne.n	8004d82 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004d9a:	e7f7      	b.n	8004d8c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	e7f5      	b.n	8004d8c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004da0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4604      	mov	r4, r0
 8004da4:	2128      	movs	r1, #40	; 0x28
 8004da6:	f020 f92c 	bl	8025002 <_ZdlPvj>
 8004daa:	4620      	mov	r0, r4
 8004dac:	bd10      	pop	{r4, pc}
	...

08004db0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004db0:	b530      	push	{r4, r5, lr}
 8004db2:	b089      	sub	sp, #36	; 0x24
 8004db4:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004db6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8004dba:	9506      	str	r5, [sp, #24]
 8004dbc:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8004dc0:	9505      	str	r5, [sp, #20]
 8004dc2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8004dc6:	9504      	str	r5, [sp, #16]
 8004dc8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8004dcc:	9503      	str	r5, [sp, #12]
 8004dce:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8004dd2:	9502      	str	r5, [sp, #8]
 8004dd4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8004dd8:	9501      	str	r5, [sp, #4]
 8004dda:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8004dde:	9500      	str	r5, [sp, #0]
 8004de0:	f00f fcba 	bl	8014758 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8004de6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004dec:	61a3      	str	r3, [r4, #24]
 8004dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004df0:	61e3      	str	r3, [r4, #28]
 8004df2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004df4:	6223      	str	r3, [r4, #32]
 8004df6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004df8:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004dfa:	b009      	add	sp, #36	; 0x24
 8004dfc:	bd30      	pop	{r4, r5, pc}
 8004dfe:	bf00      	nop
 8004e00:	08028c2c 	.word	0x08028c2c

08004e04 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004e04:	4770      	bx	lr

08004e06 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004e06:	4770      	bx	lr

08004e08 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004e08:	4770      	bx	lr

08004e0a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004e0a:	4770      	bx	lr

08004e0c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 8004e0c:	4770      	bx	lr

08004e0e <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8004e0e:	4770      	bx	lr

08004e10 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8004e10:	4770      	bx	lr

08004e12 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004e12:	4770      	bx	lr

08004e14 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004e14:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8004e16:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004e18:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8004e1a:	68c2      	ldr	r2, [r0, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	1055      	asrs	r5, r2, #1
 8004e20:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004e24:	07d2      	lsls	r2, r2, #31
 8004e26:	bf48      	it	mi
 8004e28:	5962      	ldrmi	r2, [r4, r5]
    }
 8004e2a:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8004e2c:	bf48      	it	mi
 8004e2e:	58d3      	ldrmi	r3, [r2, r3]
 8004e30:	4718      	bx	r3

08004e32 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8004e32:	6843      	ldr	r3, [r0, #4]
 8004e34:	b12b      	cbz	r3, 8004e42 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8004e36:	6883      	ldr	r3, [r0, #8]
 8004e38:	b92b      	cbnz	r3, 8004e46 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004e3a:	68c0      	ldr	r0, [r0, #12]
 8004e3c:	f000 0001 	and.w	r0, r0, #1
 8004e40:	4770      	bx	lr
 8004e42:	4618      	mov	r0, r3
 8004e44:	4770      	bx	lr
 8004e46:	2001      	movs	r0, #1
    }
 8004e48:	4770      	bx	lr

08004e4a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	2110      	movs	r1, #16
 8004e50:	f020 f8d7 	bl	8025002 <_ZdlPvj>
 8004e54:	4620      	mov	r0, r4
 8004e56:	bd10      	pop	{r4, pc}

08004e58 <_ZN15Screen1ViewBaseD0Ev>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	f643 1138 	movw	r1, #14648	; 0x3938
 8004e60:	f020 f8cf 	bl	8025002 <_ZdlPvj>
 8004e64:	4620      	mov	r0, r4
 8004e66:	bd10      	pop	{r4, pc}

08004e68 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &close)
 8004e68:	f500 63d5 	add.w	r3, r0, #1704	; 0x6a8
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	d106      	bne.n	8004e7e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
        visible = vis;
 8004e70:	2300      	movs	r3, #0
    {
        //Interaction1
        //When close clicked hide modalWindow1
        //Hide modalWindow1
        modalWindow1.setVisible(false);
        modalWindow1.invalidate();
 8004e72:	f500 60bf 	add.w	r0, r0, #1528	; 0x5f8
 8004e76:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8004e7a:	f00f bbc3 	b.w	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>
    }
}
 8004e7e:	4770      	bx	lr

08004e80 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8004e80:	4a07      	ldr	r2, [pc, #28]	; (8004ea0 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8004e82:	6002      	str	r2, [r0, #0]
 8004e84:	2200      	movs	r2, #0
 8004e86:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004e8a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8004e8e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8004e92:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8004e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e9a:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	0802b458 	.word	0x0802b458

08004ea4 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8004ea4:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8004ea6:	b570      	push	{r4, r5, r6, lr}
 8004ea8:	4604      	mov	r4, r0
        setX(x);
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 8004eac:	4615      	mov	r5, r2
        setX(x);
 8004eae:	4798      	blx	r3
        setY(y);
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 8004eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8004ebc:	4718      	bx	r3

08004ebe <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004ebe:	b570      	push	{r4, r5, r6, lr}
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8004ec8:	f7ff ffec 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed4:	4798      	blx	r3
        setHeight(height);
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	4631      	mov	r1, r6
 8004eda:	4620      	mov	r0, r4
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 8004ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8004ee2:	4718      	bx	r3

08004ee4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	460d      	mov	r5, r1
        : Widget(), bitmap(bitmap), alpha(255)
 8004eea:	2226      	movs	r2, #38	; 0x26
 8004eec:	2100      	movs	r1, #0
 8004eee:	f020 faeb 	bl	80254c8 <memset>
class Widget : public Drawable
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7ff ffc4 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bitmap);
 8004efa:	4620      	mov	r0, r4
 8004efc:	4629      	mov	r1, r5
        : Widget(), bitmap(bitmap), alpha(255)
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	882b      	ldrh	r3, [r5, #0]
 8004f02:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004f04:	23ff      	movs	r3, #255	; 0xff
 8004f06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bitmap);
 8004f0a:	f00c fdee 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004f0e:	4620      	mov	r0, r4
 8004f10:	bd38      	pop	{r3, r4, r5, pc}
 8004f12:	bf00      	nop
 8004f14:	0802afb8 	.word	0x0802afb8

08004f18 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8004f18:	22ff      	movs	r2, #255	; 0xff
 8004f1a:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	7202      	strb	r2, [r0, #8]
 8004f20:	4604      	mov	r4, r0
        : AbstractPainter(), currentX(0), currentY(0)
 8004f22:	4a12      	ldr	r2, [pc, #72]	; (8004f6c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004f24:	4e12      	ldr	r6, [pc, #72]	; (8004f70 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 8004f26:	6002      	str	r2, [r0, #0]
 8004f28:	6832      	ldr	r2, [r6, #0]
 8004f2a:	6043      	str	r3, [r0, #4]
 8004f2c:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8004f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f34:	b109      	cbz	r1, 8004f3a <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x22>
 8004f36:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8004f38:	b900      	cbnz	r0, 8004f3c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x24>
        return instance->lcdRef;
 8004f3a:	6890      	ldr	r0, [r2, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8004f3c:	6803      	ldr	r3, [r0, #0]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	4798      	blx	r3
        if (HAL::getInstance()->getAuxiliaryLCD())
 8004f42:	6833      	ldr	r3, [r6, #0]
        bool compat = HAL::lcd().framebufferFormat() == format;
 8004f44:	fab0 f580 	clz	r5, r0
        if (HAL::getInstance()->getAuxiliaryLCD())
 8004f48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        bool compat = HAL::lcd().framebufferFormat() == format;
 8004f4a:	096d      	lsrs	r5, r5, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 8004f4c:	b128      	cbz	r0, 8004f5a <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x42>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8004f4e:	6803      	ldr	r3, [r0, #0]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	4798      	blx	r3
 8004f54:	2800      	cmp	r0, #0
 8004f56:	bf08      	it	eq
 8004f58:	2501      	moveq	r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8004f5a:	b92d      	cbnz	r5, 8004f68 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 8004f62:	4806      	ldr	r0, [pc, #24]	; (8004f7c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x64>)
 8004f64:	f020 fa20 	bl	80253a8 <__assert_func>
    }
 8004f68:	4620      	mov	r0, r4
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	0802a8a8 	.word	0x0802a8a8
 8004f70:	20060c30 	.word	0x20060c30
 8004f74:	08028c7c 	.word	0x08028c7c
 8004f78:	08028cda 	.word	0x08028cda
 8004f7c:	08028d13 	.word	0x08028d13

08004f80 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8004f80:	b510      	push	{r4, lr}
 8004f82:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8004f84:	2226      	movs	r2, #38	; 0x26
 8004f86:	2100      	movs	r1, #0
 8004f88:	f020 fa9e 	bl	80254c8 <memset>
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f7ff ff77 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <_ZN8touchgfx8TextAreaC1Ev+0x30>)
 8004f94:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8004f98:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8004f9a:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <_ZN8touchgfx8TextAreaC1Ev+0x34>)
 8004f9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fa4:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
 8004fac:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 8004fae:	bd10      	pop	{r4, pc}
 8004fb0:	0802ab9c 	.word	0x0802ab9c
 8004fb4:	080286dc 	.word	0x080286dc

08004fb8 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	4604      	mov	r4, r0
        : presenter(0)
 8004fbe:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004fc0:	f64f 78ff 	movw	r8, #65535	; 0xffff
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
        : TextArea(), wildcard(0)
 8004fc4:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 800539c <_ZN15Screen1ViewBaseC1Ev+0x3e4>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8004fc8:	f104 0798 	add.w	r7, r4, #152	; 0x98
 8004fcc:	f504 760f 	add.w	r6, r4, #572	; 0x23c
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), painterColor(0)
 8004fd0:	f504 7a78 	add.w	sl, r4, #992	; 0x3e0
 8004fd4:	f504 6bbf 	add.w	fp, r4, #1528	; 0x5f8
Screen1ViewBase::Screen1ViewBase() :
 8004fd8:	ed2d 8b10 	vpush	{d8-d15}
 8004fdc:	b093      	sub	sp, #76	; 0x4c
 8004fde:	f00f fe61 	bl	8014ca4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4be5      	ldr	r3, [pc, #916]	; (800537c <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004fea:	f842 3b40 	str.w	r3, [r2], #64
 8004fee:	4613      	mov	r3, r2
 8004ff0:	ee08 2a10 	vmov	s16, r2
 8004ff4:	2226      	movs	r2, #38	; 0x26
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f020 fa66 	bl	80254c8 <memset>
 8004ffc:	ee18 0a10 	vmov	r0, s16
 8005000:	f7ff ff3e 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 8005004:	4bde      	ldr	r3, [pc, #888]	; (8005380 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
 8005006:	a910      	add	r1, sp, #64	; 0x40
        : color(col)
 8005008:	66a5      	str	r5, [r4, #104]	; 0x68
 800500a:	6423      	str	r3, [r4, #64]	; 0x40
 800500c:	23ff      	movs	r3, #255	; 0xff
 800500e:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005012:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8005016:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800501a:	4618      	mov	r0, r3
 800501c:	ee08 3a90 	vmov	s17, r3
 8005020:	f00b fdfe 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005024:	4638      	mov	r0, r7
 8005026:	f00c fa47 	bl	80114b8 <_ZN8touchgfx5GaugeC1Ev>
 800502a:	4630      	mov	r0, r6
 800502c:	f00c fa44 	bl	80114b8 <_ZN8touchgfx5GaugeC1Ev>
 8005030:	4650      	mov	r0, sl
 8005032:	f7ff ff71 	bl	8004f18 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8005036:	4bd3      	ldr	r3, [pc, #844]	; (8005384 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
     *
     * @param  color The color.
     */
    void setColor(colortype color)
    {
        painterColor = color;
 8005038:	f8c4 53f4 	str.w	r5, [r4, #1012]	; 0x3f4
        : AbstractPainterRGB565(), painterColor(0)
 800503c:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
 8005040:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 8005044:	4618      	mov	r0, r3
 8005046:	ee0f 3a10 	vmov	s30, r3
 800504a:	f7ff ff99 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 800504e:	f504 6387 	add.w	r3, r4, #1080	; 0x438
 8005052:	f8c4 93f8 	str.w	r9, [r4, #1016]	; 0x3f8
 8005056:	4618      	mov	r0, r3
 8005058:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 800505c:	ee0f 3a90 	vmov	s31, r3
 8005060:	f7ff ff8e 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 8005064:	f204 4374 	addw	r3, r4, #1140	; 0x474
 8005068:	a910      	add	r1, sp, #64	; 0x40
 800506a:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 800506e:	4618      	mov	r0, r3
 8005070:	ee09 3a10 	vmov	s18, r3
 8005074:	f00b fdd4 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005078:	f504 6394 	add.w	r3, r4, #1184	; 0x4a0
 800507c:	a910      	add	r1, sp, #64	; 0x40
 800507e:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005082:	4618      	mov	r0, r3
 8005084:	ee09 3a90 	vmov	s19, r3
 8005088:	f00b fdca 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 800508c:	f204 43cc 	addw	r3, r4, #1228	; 0x4cc
 8005090:	a910      	add	r1, sp, #64	; 0x40
 8005092:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005096:	4618      	mov	r0, r3
 8005098:	ee0a 3a10 	vmov	s20, r3
 800509c:	f00b fdc0 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80050a0:	f504 639f 	add.w	r3, r4, #1272	; 0x4f8
 80050a4:	a910      	add	r1, sp, #64	; 0x40
 80050a6:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 80050aa:	4618      	mov	r0, r3
 80050ac:	ee0a 3a90 	vmov	s21, r3
 80050b0:	f00b fdb6 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80050b4:	f204 5324 	addw	r3, r4, #1316	; 0x524
 80050b8:	4618      	mov	r0, r3
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	f7ff ff60 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 80050c0:	f504 63ac 	add.w	r3, r4, #1376	; 0x560
 80050c4:	4618      	mov	r0, r3
 80050c6:	9303      	str	r3, [sp, #12]
 80050c8:	f7ff ff5a 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 80050cc:	f504 63b4 	add.w	r3, r4, #1440	; 0x5a0
 80050d0:	a910      	add	r1, sp, #64	; 0x40
 80050d2:	f8c4 9560 	str.w	r9, [r4, #1376]	; 0x560
 80050d6:	4618      	mov	r0, r3
 80050d8:	f8c4 559c 	str.w	r5, [r4, #1436]	; 0x59c
 80050dc:	ee0b 3a10 	vmov	s22, r3
 80050e0:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 80050e4:	f00b fd9c 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80050e8:	f204 53cc 	addw	r3, r4, #1484	; 0x5cc
 80050ec:	a910      	add	r1, sp, #64	; 0x40
 80050ee:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 80050f2:	4618      	mov	r0, r3
 80050f4:	ee0b 3a90 	vmov	s23, r3
 80050f8:	f00b fd92 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80050fc:	4658      	mov	r0, fp
 80050fe:	f009 fb91 	bl	800e824 <_ZN8touchgfx11ModalWindowC1Ev>
 8005102:	f504 63d5 	add.w	r3, r4, #1704	; 0x6a8
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8005106:	2226      	movs	r2, #38	; 0x26
 8005108:	4629      	mov	r1, r5
 800510a:	ee0c 3a10 	vmov	s24, r3
 800510e:	4618      	mov	r0, r3
 8005110:	f020 f9da 	bl	80254c8 <memset>
 8005114:	f204 7944 	addw	r9, r4, #1860	; 0x744
 8005118:	ee1c 0a10 	vmov	r0, s24
 800511c:	f7ff feb0 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
        touchable = touch;
 8005120:	f04f 0301 	mov.w	r3, #1
 8005124:	f8a4 86d6 	strh.w	r8, [r4, #1750]	; 0x6d6
 8005128:	f884 36cc 	strb.w	r3, [r4, #1740]	; 0x6cc
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800512c:	4b96      	ldr	r3, [pc, #600]	; (8005388 <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
 800512e:	f8a4 86d8 	strh.w	r8, [r4, #1752]	; 0x6d8
 8005132:	f8c4 36a8 	str.w	r3, [r4, #1704]	; 0x6a8
 8005136:	f204 63dc 	addw	r3, r4, #1756	; 0x6dc
 800513a:	f884 86da 	strb.w	r8, [r4, #1754]	; 0x6da
 800513e:	4618      	mov	r0, r3
 8005140:	f8c4 56d0 	str.w	r5, [r4, #1744]	; 0x6d0
 8005144:	f884 56d4 	strb.w	r5, [r4, #1748]	; 0x6d4
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	f7ff ff19 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 800514e:	f504 63e3 	add.w	r3, r4, #1816	; 0x718
 8005152:	a910      	add	r1, sp, #64	; 0x40
 8005154:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005158:	4618      	mov	r0, r3
 800515a:	ee0c 3a90 	vmov	s25, r3
 800515e:	f00b fd5f 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005162:	4648      	mov	r0, r9
 8005164:	f009 fa40 	bl	800e5e8 <_ZN8touchgfx12DigitalClockC1Ev>
 8005168:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 800516c:	a910      	add	r1, sp, #64	; 0x40
 800516e:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005172:	4618      	mov	r0, r3
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	f7ff feb5 	bl	8004ee4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800517a:	f204 73fc 	addw	r3, r4, #2044	; 0x7fc
 800517e:	a910      	add	r1, sp, #64	; 0x40
 8005180:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005184:	4618      	mov	r0, r3
 8005186:	9306      	str	r3, [sp, #24]
 8005188:	f7ff feac 	bl	8004ee4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800518c:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8005190:	a910      	add	r1, sp, #64	; 0x40
 8005192:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005196:	4618      	mov	r0, r3
 8005198:	9307      	str	r3, [sp, #28]
 800519a:	f7ff fea3 	bl	8004ee4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800519e:	f604 0354 	addw	r3, r4, #2132	; 0x854
 80051a2:	a910      	add	r1, sp, #64	; 0x40
 80051a4:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 80051a8:	4618      	mov	r0, r3
 80051aa:	ee0d 3a10 	vmov	s26, r3
 80051ae:	f00b fd37 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80051b2:	f504 6308 	add.w	r3, r4, #2176	; 0x880
 80051b6:	4618      	mov	r0, r3
 80051b8:	9308      	str	r3, [sp, #32]
 80051ba:	f7ff fee1 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 80051be:	f604 03bc 	addw	r3, r4, #2236	; 0x8bc
 80051c2:	a910      	add	r1, sp, #64	; 0x40
 80051c4:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 80051c8:	4618      	mov	r0, r3
 80051ca:	ee0d 3a90 	vmov	s27, r3
 80051ce:	f00b fd27 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80051d2:	f604 03e8 	addw	r3, r4, #2280	; 0x8e8
 80051d6:	4618      	mov	r0, r3
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	f7ff fed1 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 80051de:	f604 1324 	addw	r3, r4, #2340	; 0x924
 80051e2:	a910      	add	r1, sp, #64	; 0x40
 80051e4:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 80051e8:	4618      	mov	r0, r3
 80051ea:	ee0e 3a10 	vmov	s28, r3
 80051ee:	f00b fd17 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80051f2:	f504 6315 	add.w	r3, r4, #2384	; 0x950
 80051f6:	4618      	mov	r0, r3
 80051f8:	930a      	str	r3, [sp, #40]	; 0x28
 80051fa:	f7ff fec1 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 80051fe:	f604 138c 	addw	r3, r4, #2444	; 0x98c
 8005202:	a910      	add	r1, sp, #64	; 0x40
 8005204:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005208:	4618      	mov	r0, r3
 800520a:	ee0e 3a90 	vmov	s29, r3
 800520e:	f00b fd07 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005212:	f604 13b8 	addw	r3, r4, #2488	; 0x9b8
 8005216:	4618      	mov	r0, r3
 8005218:	930b      	str	r3, [sp, #44]	; 0x2c
 800521a:	f7ff feb1 	bl	8004f80 <_ZN8touchgfx8TextAreaC1Ev>
 800521e:	f604 13f4 	addw	r3, r4, #2548	; 0x9f4
 8005222:	a910      	add	r1, sp, #64	; 0x40
 8005224:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8005228:	4618      	mov	r0, r3
 800522a:	930c      	str	r3, [sp, #48]	; 0x30
 800522c:	f7ff fe5a 	bl	8004ee4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8005230:	4b56      	ldr	r3, [pc, #344]	; (800538c <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8005232:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8005236:	f604 2058 	addw	r0, r4, #2648	; 0xa58
 800523a:	f8c4 3a48 	str.w	r3, [r4, #2632]	; 0xa48
 800523e:	f04f 0812 	mov.w	r8, #18
 8005242:	4b53      	ldr	r3, [pc, #332]	; (8005390 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
 8005244:	f8c4 4a4c 	str.w	r4, [r4, #2636]	; 0xa4c
 8005248:	f8c4 3a50 	str.w	r3, [r4, #2640]	; 0xa50
 800524c:	f8c4 5a54 	str.w	r5, [r4, #2644]	; 0xa54
 8005250:	f00c fcbe 	bl	8011bd0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8005254:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005258:	462a      	mov	r2, r5
 800525a:	4629      	mov	r1, r5
 800525c:	ee18 0a10 	vmov	r0, s16
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005266:	f7ff fe2a 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 800526a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_CONTROLS_BACKGROUND_ID));
 800526e:	a910      	add	r1, sp, #64	; 0x40
 8005270:	ee18 0a90 	vmov	r0, s17
 8005274:	66a3      	str	r3, [r4, #104]	; 0x68
 8005276:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 800527a:	f00c fc36 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 800, 480);
 800527e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005282:	462a      	mov	r2, r5
 8005284:	4629      	mov	r1, r5
 8005286:	ee18 0a90 	vmov	r0, s17
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005290:	f7ff fe15 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005294:	4629      	mov	r1, r5
 8005296:	ee18 0a90 	vmov	r0, s17
 800529a:	f00b fc87 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 800529e:	f04f 0319 	mov.w	r3, #25
    gauge2.setBackground(touchgfx::Bitmap(BITMAP_GAUGE02_BACKGROUND_ID));
 80052a2:	a910      	add	r1, sp, #64	; 0x40
 80052a4:	4638      	mov	r0, r7
 80052a6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80052aa:	f008 ffea 	bl	800e282 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge2.setPosition(42, 101, 220, 224);
 80052ae:	23e0      	movs	r3, #224	; 0xe0
 80052b0:	2265      	movs	r2, #101	; 0x65
 80052b2:	212a      	movs	r1, #42	; 0x2a
 80052b4:	4638      	mov	r0, r7
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	23dc      	movs	r3, #220	; 0xdc
 80052ba:	f7ff fe00 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge2.setCenter(110, 110);
 80052be:	226e      	movs	r2, #110	; 0x6e
 80052c0:	4638      	mov	r0, r7
 80052c2:	4611      	mov	r1, r2
 80052c4:	f00c f9d1 	bl	801166a <_ZN8touchgfx5Gauge9setCenterEii>
    gauge2.setStartEndAngle(-130, 130);
 80052c8:	2282      	movs	r2, #130	; 0x82
 80052ca:	f06f 0181 	mvn.w	r1, #129	; 0x81
 80052ce:	4638      	mov	r0, r7
 80052d0:	f00c fa50 	bl	8011774 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge2.setRange(0, 100);
 80052d4:	462b      	mov	r3, r5
 80052d6:	2264      	movs	r2, #100	; 0x64
 80052d8:	4629      	mov	r1, r5
 80052da:	4638      	mov	r0, r7
 80052dc:	9500      	str	r5, [sp, #0]
 80052de:	f008 ff23 	bl	800e128 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge2.setValue(0);
 80052e2:	4629      	mov	r1, r5
 80052e4:	4638      	mov	r0, r7
 80052e6:	f00c f9ef 	bl	80116c8 <_ZN8touchgfx5Gauge8setValueEi>
    gauge2.setEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
 80052ea:	492a      	ldr	r1, [pc, #168]	; (8005394 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
 80052ec:	4638      	mov	r0, r7
 80052ee:	f008 fea2 	bl	800e036 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>
    gauge2.setNeedle(BITMAP_GAUGE02_NEEDLE_ID, 13, 50);
 80052f2:	220d      	movs	r2, #13
 80052f4:	2332      	movs	r3, #50	; 0x32
 80052f6:	211a      	movs	r1, #26
 80052f8:	4638      	mov	r0, r7
 80052fa:	f00c f9a1 	bl	8011640 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge2.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80052fe:	2101      	movs	r1, #1
 8005300:	4638      	mov	r0, r7
 8005302:	f00c f939 	bl	8011578 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge2.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8005306:	2101      	movs	r1, #1
 8005308:	4638      	mov	r0, r7
 800530a:	f00c f938 	bl	801157e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
 800530e:	2339      	movs	r3, #57	; 0x39
    gauge1.setBackground(touchgfx::Bitmap(BITMAP_VALUE_INDICATOR_WHEEL_ID));
 8005310:	a910      	add	r1, sp, #64	; 0x40
 8005312:	4630      	mov	r0, r6
 8005314:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8005318:	f008 ffb3 	bl	800e282 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setPosition(512, 101, 274, 251);
 800531c:	23fb      	movs	r3, #251	; 0xfb
 800531e:	2265      	movs	r2, #101	; 0x65
 8005320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005324:	4630      	mov	r0, r6
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	f44f 7389 	mov.w	r3, #274	; 0x112
 800532c:	f7ff fdc7 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(138, 138);
 8005330:	228a      	movs	r2, #138	; 0x8a
 8005332:	4630      	mov	r0, r6
 8005334:	4611      	mov	r1, r2
 8005336:	f00c f998 	bl	801166a <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-130, 130);
 800533a:	2282      	movs	r2, #130	; 0x82
 800533c:	f06f 0181 	mvn.w	r1, #129	; 0x81
 8005340:	4630      	mov	r0, r6
 8005342:	f00c fa17 	bl	8011774 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 100);
 8005346:	2264      	movs	r2, #100	; 0x64
 8005348:	462b      	mov	r3, r5
 800534a:	4629      	mov	r1, r5
 800534c:	4630      	mov	r0, r6
 800534e:	9500      	str	r5, [sp, #0]
 8005350:	f008 feea 	bl	800e128 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(100);
 8005354:	2164      	movs	r1, #100	; 0x64
 8005356:	4630      	mov	r0, r6
 8005358:	f00c f9b6 	bl	80116c8 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
 800535c:	490d      	ldr	r1, [pc, #52]	; (8005394 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
 800535e:	4630      	mov	r0, r6
 8005360:	f008 fe69 	bl	800e036 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>
    gauge1.setArcVisible();
 8005364:	2101      	movs	r1, #1
 8005366:	4630      	mov	r0, r6
 8005368:	f00c f90c 	bl	8011584 <_ZN8touchgfx5Gauge13setArcVisibleEb>
        painterColor = color;
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
    gauge1.getArc().setPainter(gauge1Painter);
 800536e:	4630      	mov	r0, r6
 8005370:	f8c4 33f4 	str.w	r3, [r4, #1012]	; 0x3f4
 8005374:	f00c f909 	bl	801158a <_ZN8touchgfx5Gauge6getArcEv>
 8005378:	e012      	b.n	80053a0 <_ZN15Screen1ViewBaseC1Ev+0x3e8>
 800537a:	bf00      	nop
 800537c:	08028ea4 	.word	0x08028ea4
 8005380:	0802ac44 	.word	0x0802ac44
 8005384:	0802a888 	.word	0x0802a888
 8005388:	0802ae6c 	.word	0x0802ae6c
 800538c:	08028e8c 	.word	0x08028e8c
 8005390:	08004e69 	.word	0x08004e69
 8005394:	0801506f 	.word	0x0801506f
 8005398:	ff1497c5 	.word	0xff1497c5
 800539c:	0802af10 	.word	0x0802af10
 80053a0:	6803      	ldr	r3, [r0, #0]
 80053a2:	4651      	mov	r1, sl
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80053a4:	f8df a094 	ldr.w	sl, [pc, #148]	; 800543c <_ZN15Screen1ViewBaseC1Ev+0x484>
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	4798      	blx	r3
    gauge1.getArc().setRadius(106);
 80053ac:	4630      	mov	r0, r6
 80053ae:	f00c f8ec 	bl	801158a <_ZN8touchgfx5Gauge6getArcEv>
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
    {
        this->circleRadius = CWRUtil::toQ5(r);
 80053b2:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 80053b6:	6383      	str	r3, [r0, #56]	; 0x38
    gauge1.getArc().setLineWidth(5);
 80053b8:	4630      	mov	r0, r6
 80053ba:	f00c f8e6 	bl	801158a <_ZN8touchgfx5Gauge6getArcEv>
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 80053be:	23a0      	movs	r3, #160	; 0xa0
 80053c0:	6443      	str	r3, [r0, #68]	; 0x44
    gauge1.getArc().setCapPrecision(90);
 80053c2:	4630      	mov	r0, r6
 80053c4:	f00c f8e1 	bl	801158a <_ZN8touchgfx5Gauge6getArcEv>
 80053c8:	215a      	movs	r1, #90	; 0x5a
 80053ca:	f00a fefb 	bl	80101c4 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    gauge1.setArcPosition(29, 18, 218, 201);
 80053ce:	23c9      	movs	r3, #201	; 0xc9
 80053d0:	4642      	mov	r2, r8
 80053d2:	211d      	movs	r1, #29
 80053d4:	4630      	mov	r0, r6
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	23da      	movs	r3, #218	; 0xda
    Unicode::snprintf(speedtxtBuffer, SPEEDTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_G1CJ).getText());
 80053da:	f504 6822 	add.w	r8, r4, #2592	; 0xa20
    gauge1.setArcPosition(29, 18, 218, 201);
 80053de:	f00c f8a3 	bl	8011528 <_ZN8touchgfx5Gauge14setArcPositionEssss>
    speedtxt.setPosition(585, 213, 129, 91);
 80053e2:	235b      	movs	r3, #91	; 0x5b
 80053e4:	22d5      	movs	r2, #213	; 0xd5
 80053e6:	f240 2149 	movw	r1, #585	; 0x249
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	ee1f 0a10 	vmov	r0, s30
 80053f0:	2381      	movs	r3, #129	; 0x81
 80053f2:	f7ff fd64 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <_ZN15Screen1ViewBaseC1Ev+0x46c>)
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80053f8:	f8a4 542c 	strh.w	r5, [r4, #1068]	; 0x42c
        this->color = color;
 80053fc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
 8005400:	f8da 3000 	ldr.w	r3, [sl]
 8005404:	b92b      	cbnz	r3, 8005412 <_ZN15Screen1ViewBaseC1Ev+0x45a>
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <_ZN15Screen1ViewBaseC1Ev+0x470>)
 8005408:	21ae      	movs	r1, #174	; 0xae
 800540a:	4a08      	ldr	r2, [pc, #32]	; (800542c <_ZN15Screen1ViewBaseC1Ev+0x474>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800540c:	4808      	ldr	r0, [pc, #32]	; (8005430 <_ZN15Screen1ViewBaseC1Ev+0x478>)
 800540e:	f01f ffcb 	bl	80253a8 <__assert_func>
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <_ZN15Screen1ViewBaseC1Ev+0x47c>)
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d812      	bhi.n	8005440 <_ZN15Screen1ViewBaseC1Ev+0x488>
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <_ZN15Screen1ViewBaseC1Ev+0x480>)
 800541c:	21af      	movs	r1, #175	; 0xaf
 800541e:	4a03      	ldr	r2, [pc, #12]	; (800542c <_ZN15Screen1ViewBaseC1Ev+0x474>)
 8005420:	e7f4      	b.n	800540c <_ZN15Screen1ViewBaseC1Ev+0x454>
 8005422:	bf00      	nop
 8005424:	fffffcfc 	.word	0xfffffcfc
 8005428:	08028d75 	.word	0x08028d75
 800542c:	08028db7 	.word	0x08028db7
 8005430:	08028de5 	.word	0x08028de5
 8005434:	20060ca4 	.word	0x20060ca4
 8005438:	08028e2c 	.word	0x08028e2c
 800543c:	20060ca0 	.word	0x20060ca0
        return texts->getText(typedTextId);
 8005440:	4bdd      	ldr	r3, [pc, #884]	; (80057b8 <_ZN15Screen1ViewBaseC1Ev+0x800>)
 8005442:	2101      	movs	r1, #1
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	f000 fd61 	bl	8005f0c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(speedtxtBuffer, SPEEDTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_G1CJ).getText());
 800544a:	4adc      	ldr	r2, [pc, #880]	; (80057bc <_ZN15Screen1ViewBaseC1Ev+0x804>)
 800544c:	4603      	mov	r3, r0
 800544e:	210a      	movs	r1, #10
 8005450:	4640      	mov	r0, r8
 8005452:	f011 f99f 	bl	8016794 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8005456:	4bda      	ldr	r3, [pc, #872]	; (80057c0 <_ZN15Screen1ViewBaseC1Ev+0x808>)
    speedtxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZC22));
 8005458:	a910      	add	r1, sp, #64	; 0x40
 800545a:	ee1f 0a10 	vmov	r0, s30
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
    {
        wildcard = value;
 800545e:	f8c4 8434 	str.w	r8, [r4, #1076]	; 0x434
    scalableImage2.setPosition(43, 434, 29, 28);
 8005462:	f04f 081c 	mov.w	r8, #28
 8005466:	9310      	str	r3, [sp, #64]	; 0x40
 8005468:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
    speedtxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZC22));
 800546c:	f00b ffb7 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea1.setXY(622, 184);
 8005470:	22b8      	movs	r2, #184	; 0xb8
 8005472:	f240 216e 	movw	r1, #622	; 0x26e
 8005476:	ee1f 0a90 	vmov	r0, s31
 800547a:	f7ff fd13 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 800547e:	4bd1      	ldr	r3, [pc, #836]	; (80057c4 <_ZN15Screen1ViewBaseC1Ev+0x80c>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KLEX));
 8005480:	a910      	add	r1, sp, #64	; 0x40
 8005482:	ee1f 0a90 	vmov	r0, s31
 8005486:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
 800548a:	4bcd      	ldr	r3, [pc, #820]	; (80057c0 <_ZN15Screen1ViewBaseC1Ev+0x808>)
        linespace = space;
 800548c:	f8a4 546c 	strh.w	r5, [r4, #1132]	; 0x46c
 8005490:	9310      	str	r3, [sp, #64]	; 0x40
 8005492:	2302      	movs	r3, #2
 8005494:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005498:	f00b ffa1 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800549c:	f04f 0109 	mov.w	r1, #9
    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_BLUETOOTH_ID));
 80054a0:	a810      	add	r0, sp, #64	; 0x40
 80054a2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80054a6:	4601      	mov	r1, r0
 80054a8:	ee19 0a10 	vmov	r0, s18
 80054ac:	f00c fb1d 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage2.setPosition(43, 434, 29, 28);
 80054b0:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 80054b4:	231d      	movs	r3, #29
 80054b6:	212b      	movs	r1, #43	; 0x2b
 80054b8:	ee19 0a10 	vmov	r0, s18
 80054bc:	f8cd 8000 	str.w	r8, [sp]
 80054c0:	f7ff fcfd 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80054c4:	4629      	mov	r1, r5
 80054c6:	ee19 0a10 	vmov	r0, s18
 80054ca:	f00b fb6f 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    scalableImage3.setBitmap(touchgfx::Bitmap(BITMAP_COMMENTS_ID));
 80054ce:	a810      	add	r0, sp, #64	; 0x40
 80054d0:	2311      	movs	r3, #17
 80054d2:	4601      	mov	r1, r0
 80054d4:	ee19 0a90 	vmov	r0, s19
 80054d8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80054dc:	f00c fb05 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage3.setPosition(105, 12, 34, 28);
 80054e0:	2322      	movs	r3, #34	; 0x22
 80054e2:	220c      	movs	r2, #12
 80054e4:	2169      	movs	r1, #105	; 0x69
 80054e6:	ee19 0a90 	vmov	r0, s19
 80054ea:	f8cd 8000 	str.w	r8, [sp]
 80054ee:	f7ff fce6 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage3.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80054f2:	4629      	mov	r1, r5
 80054f4:	ee19 0a90 	vmov	r0, s19
 80054f8:	f00b fb58 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80054fc:	f04f 0031 	mov.w	r0, #49	; 0x31
 8005500:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    scalableImage4.setBitmap(touchgfx::Bitmap(BITMAP_PHONES_ID));
 8005504:	a810      	add	r0, sp, #64	; 0x40
 8005506:	4601      	mov	r1, r0
 8005508:	ee1a 0a10 	vmov	r0, s20
 800550c:	f00c faed 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage4.setPosition(42, 12, 30, 28);
 8005510:	220c      	movs	r2, #12
 8005512:	231e      	movs	r3, #30
 8005514:	212a      	movs	r1, #42	; 0x2a
 8005516:	ee1a 0a10 	vmov	r0, s20
 800551a:	f8cd 8000 	str.w	r8, [sp]
 800551e:	f7ff fcce 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage4.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005522:	4629      	mov	r1, r5
 8005524:	ee1a 0a10 	vmov	r0, s20
 8005528:	f00b fb40 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    scalableImage5.setBitmap(touchgfx::Bitmap(BITMAP_SIGNAL_ID));
 800552c:	a810      	add	r0, sp, #64	; 0x40
 800552e:	2336      	movs	r3, #54	; 0x36
 8005530:	4601      	mov	r1, r0
 8005532:	ee1a 0a90 	vmov	r0, s21
 8005536:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800553a:	f00c fad6 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage5.setPosition(167, 14, 35, 26);
 800553e:	231a      	movs	r3, #26
 8005540:	220e      	movs	r2, #14
 8005542:	21a7      	movs	r1, #167	; 0xa7
 8005544:	ee1a 0a90 	vmov	r0, s21
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	2323      	movs	r3, #35	; 0x23
 800554c:	f7ff fcb7 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage5.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005550:	4629      	mov	r1, r5
 8005552:	ee1a 0a90 	vmov	r0, s21
 8005556:	f00b fb29 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    textArea2.setXY(131, 226);
 800555a:	22e2      	movs	r2, #226	; 0xe2
 800555c:	2183      	movs	r1, #131	; 0x83
 800555e:	9802      	ldr	r0, [sp, #8]
 8005560:	f7ff fca0 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 8005564:	f04f 0003 	mov.w	r0, #3
        this->color = color;
 8005568:	4b97      	ldr	r3, [pc, #604]	; (80057c8 <_ZN15Screen1ViewBaseC1Ev+0x810>)
 800556a:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_07ZY));
 800556e:	a810      	add	r0, sp, #64	; 0x40
 8005570:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
 8005574:	4b92      	ldr	r3, [pc, #584]	; (80057c0 <_ZN15Screen1ViewBaseC1Ev+0x808>)
 8005576:	4601      	mov	r1, r0
        linespace = space;
 8005578:	f8a4 5558 	strh.w	r5, [r4, #1368]	; 0x558
 800557c:	9802      	ldr	r0, [sp, #8]
 800557e:	9310      	str	r3, [sp, #64]	; 0x40
 8005580:	f00b ff2d 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    rpmtxt.setPosition(125, 245, 55, 49);
 8005584:	2031      	movs	r0, #49	; 0x31
 8005586:	2337      	movs	r3, #55	; 0x37
 8005588:	22f5      	movs	r2, #245	; 0xf5
 800558a:	217d      	movs	r1, #125	; 0x7d
 800558c:	9000      	str	r0, [sp, #0]
 800558e:	9803      	ldr	r0, [sp, #12]
 8005590:	f7ff fc95 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
        this->color = color;
 8005594:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005598:	f8da 3000 	ldr.w	r3, [sl]
 800559c:	f8c4 0590 	str.w	r0, [r4, #1424]	; 0x590
    Unicode::snprintf(rpmtxtBuffer, RPMTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_5I12).getText());
 80055a0:	f604 2034 	addw	r0, r4, #2612	; 0xa34
        linespace = space;
 80055a4:	f8a4 5594 	strh.w	r5, [r4, #1428]	; 0x594
 80055a8:	900d      	str	r0, [sp, #52]	; 0x34
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f43f af2b 	beq.w	8005406 <_ZN15Screen1ViewBaseC1Ev+0x44e>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80055b0:	4986      	ldr	r1, [pc, #536]	; (80057cc <_ZN15Screen1ViewBaseC1Ev+0x814>)
 80055b2:	880b      	ldrh	r3, [r1, #0]
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	f67f af30 	bls.w	800541a <_ZN15Screen1ViewBaseC1Ev+0x462>
        return texts->getText(typedTextId);
 80055ba:	4a7f      	ldr	r2, [pc, #508]	; (80057b8 <_ZN15Screen1ViewBaseC1Ev+0x800>)
 80055bc:	2105      	movs	r1, #5
        : typedTextId(id)
 80055be:	f04f 0a04 	mov.w	sl, #4
        return texts->getText(typedTextId);
 80055c2:	6810      	ldr	r0, [r2, #0]
 80055c4:	f000 fca2 	bl	8005f0c <_ZNK8touchgfx5Texts7getTextEt>
 80055c8:	4a7c      	ldr	r2, [pc, #496]	; (80057bc <_ZN15Screen1ViewBaseC1Ev+0x804>)
 80055ca:	4603      	mov	r3, r0
 80055cc:	210a      	movs	r1, #10
 80055ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80055d0:	f011 f8e0 	bl	8016794 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80055d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        : typedTextId(id)
 80055d6:	4b7a      	ldr	r3, [pc, #488]	; (80057c0 <_ZN15Screen1ViewBaseC1Ev+0x808>)
 80055d8:	f8c4 259c 	str.w	r2, [r4, #1436]	; 0x59c
    rpmtxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XYUH));
 80055dc:	aa10      	add	r2, sp, #64	; 0x40
 80055de:	9803      	ldr	r0, [sp, #12]
 80055e0:	4611      	mov	r1, r2
 80055e2:	9310      	str	r3, [sp, #64]	; 0x40
 80055e4:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80055e8:	f00b fef9 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    scalableImage6.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_ID));
 80055ec:	aa10      	add	r2, sp, #64	; 0x40
 80055ee:	2313      	movs	r3, #19
 80055f0:	ee1b 0a10 	vmov	r0, s22
 80055f4:	4611      	mov	r1, r2
 80055f6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80055fa:	f00c fa76 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage6.setPosition(276, 110, 220, 260);
 80055fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005602:	226e      	movs	r2, #110	; 0x6e
 8005604:	ee1b 0a10 	vmov	r0, s22
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800560e:	23dc      	movs	r3, #220	; 0xdc
 8005610:	f7ff fc55 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage6.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005614:	4629      	mov	r1, r5
 8005616:	ee1b 0a10 	vmov	r0, s22
 800561a:	f00b fac7 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    scalableImage7.setBitmap(touchgfx::Bitmap(BITMAP_SKUUTA_REMOVEBG_PREVIEW_ID));
 800561e:	aa10      	add	r2, sp, #64	; 0x40
 8005620:	2338      	movs	r3, #56	; 0x38
 8005622:	ee1b 0a90 	vmov	r0, s23
 8005626:	4611      	mov	r1, r2
 8005628:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800562c:	f00c fa5d 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage7.setPosition(698, -8, 102, 75);
 8005630:	224b      	movs	r2, #75	; 0x4b
 8005632:	2366      	movs	r3, #102	; 0x66
 8005634:	ee1b 0a90 	vmov	r0, s23
 8005638:	f240 21ba 	movw	r1, #698	; 0x2ba
 800563c:	9200      	str	r2, [sp, #0]
 800563e:	f06f 0207 	mvn.w	r2, #7
 8005642:	f7ff fc3c 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage7.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005646:	4629      	mov	r1, r5
 8005648:	ee1b 0a90 	vmov	r0, s23
 800564c:	f00b faae 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    modalWindow1.setBackground(touchgfx::BitmapId(BITMAP_BACKGROUNDSSS_ID), 223, 5);
 8005650:	a810      	add	r0, sp, #64	; 0x40
 8005652:	2305      	movs	r3, #5
 8005654:	22df      	movs	r2, #223	; 0xdf
 8005656:	4601      	mov	r1, r0
 8005658:	4658      	mov	r0, fp
 800565a:	f8ad a040 	strh.w	sl, [sp, #64]	; 0x40
 800565e:	f009 f8a1 	bl	800e7a4 <_ZN8touchgfx11ModalWindow13setBackgroundERKtss>
    modalWindow1.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005662:	4658      	mov	r0, fp
 8005664:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8005668:	f009 f889 	bl	800e77e <_ZN8touchgfx11ModalWindow13setShadeColorENS_9colortypeE>
    modalWindow1.setShadeAlpha(150);
 800566c:	2196      	movs	r1, #150	; 0x96
 800566e:	4658      	mov	r0, fp
 8005670:	f04f 0a10 	mov.w	sl, #16
 8005674:	f009 f887 	bl	800e786 <_ZN8touchgfx11ModalWindow13setShadeAlphaEh>
    modalWindow1.hide();
 8005678:	4658      	mov	r0, fp
 800567a:	f009 f876 	bl	800e76a <_ZN8touchgfx11ModalWindow4hideEv>
    close.setXY(324, 28);
 800567e:	4642      	mov	r2, r8
 8005680:	ee1c 0a10 	vmov	r0, s24
 8005684:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005688:	f7ff fc0c 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 800568c:	230f      	movs	r3, #15
    close.setBitmaps(touchgfx::Bitmap(BITMAP_CLOSE_BUTTON_ID), touchgfx::Bitmap(BITMAP_CLOSE_BUTTON_PRESSED_ID));
 800568e:	aa10      	add	r2, sp, #64	; 0x40
 8005690:	a90f      	add	r1, sp, #60	; 0x3c
 8005692:	ee1c 0a10 	vmov	r0, s24
 8005696:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 800569a:	f8ad a040 	strh.w	sl, [sp, #64]	; 0x40
 800569e:	f00c f88f 	bl	80117c0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    close.setAction(buttonCallback);
 80056a2:	f604 2348 	addw	r3, r4, #2632	; 0xa48
    modalWindow1.add(close);
 80056a6:	ee1c 1a10 	vmov	r1, s24
 80056aa:	4658      	mov	r0, fp
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80056ac:	f8c4 36d0 	str.w	r3, [r4, #1744]	; 0x6d0
 80056b0:	f009 f862 	bl	800e778 <_ZN8touchgfx11ModalWindow3addERNS_8DrawableE>
    textArea3.setXY(75, 28);
 80056b4:	4642      	mov	r2, r8
 80056b6:	9804      	ldr	r0, [sp, #16]
 80056b8:	214b      	movs	r1, #75	; 0x4b
 80056ba:	f7ff fbf3 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 80056be:	4b44      	ldr	r3, [pc, #272]	; (80057d0 <_ZN15Screen1ViewBaseC1Ev+0x818>)
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XETF));
 80056c0:	aa10      	add	r2, sp, #64	; 0x40
 80056c2:	9804      	ldr	r0, [sp, #16]
 80056c4:	f8c4 370c 	str.w	r3, [r4, #1804]	; 0x70c
    scalableImage10.setPosition(289, 195, 36, 36);
 80056c8:	f04f 0824 	mov.w	r8, #36	; 0x24
 80056cc:	4b3c      	ldr	r3, [pc, #240]	; (80057c0 <_ZN15Screen1ViewBaseC1Ev+0x808>)
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XETF));
 80056ce:	4611      	mov	r1, r2
        linespace = space;
 80056d0:	f8a4 5710 	strh.w	r5, [r4, #1808]	; 0x710
 80056d4:	9310      	str	r3, [sp, #64]	; 0x40
 80056d6:	2306      	movs	r3, #6
 80056d8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80056dc:	f00b fe7f 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    modalWindow1.add(textArea3);
 80056e0:	9904      	ldr	r1, [sp, #16]
 80056e2:	4658      	mov	r0, fp
 80056e4:	f009 f848 	bl	800e778 <_ZN8touchgfx11ModalWindow3addERNS_8DrawableE>
    scalableImage8.setBitmap(touchgfx::Bitmap(BITMAP_CAUTION_ID));
 80056e8:	aa10      	add	r2, sp, #64	; 0x40
 80056ea:	230e      	movs	r3, #14
 80056ec:	ee1c 0a90 	vmov	r0, s25
 80056f0:	4611      	mov	r1, r2
 80056f2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80056f6:	f00c f9f8 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage8.setPosition(16, 21, 47, 49);
 80056fa:	2231      	movs	r2, #49	; 0x31
 80056fc:	232f      	movs	r3, #47	; 0x2f
 80056fe:	4651      	mov	r1, sl
 8005700:	ee1c 0a90 	vmov	r0, s25
 8005704:	9200      	str	r2, [sp, #0]
 8005706:	2215      	movs	r2, #21
 8005708:	f7ff fbd9 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage8.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800570c:	4629      	mov	r1, r5
 800570e:	ee1c 0a90 	vmov	r0, s25
 8005712:	f00b fa4b 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    modalWindow1.add(scalableImage8);
 8005716:	ee1c 1a90 	vmov	r1, s25
 800571a:	4658      	mov	r0, fp
 800571c:	f009 f82c 	bl	800e778 <_ZN8touchgfx11ModalWindow3addERNS_8DrawableE>
    digitalClock1.setPosition(89, 434, 100, 25);
 8005720:	2219      	movs	r2, #25
 8005722:	2364      	movs	r3, #100	; 0x64
 8005724:	4648      	mov	r0, r9
 8005726:	9200      	str	r2, [sp, #0]
 8005728:	2159      	movs	r1, #89	; 0x59
 800572a:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 800572e:	f7ff fbc6 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(247, 242, 242));
 8005732:	4648      	mov	r0, r9
 8005734:	4927      	ldr	r1, [pc, #156]	; (80057d4 <_ZN15Screen1ViewBaseC1Ev+0x81c>)
 8005736:	f008 fe1c 	bl	800e372 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 800573a:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <_ZN15Screen1ViewBaseC1Ev+0x808>)
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EFMG));
 800573c:	aa10      	add	r2, sp, #64	; 0x40
 800573e:	4648      	mov	r0, r9
 8005740:	9310      	str	r3, [sp, #64]	; 0x40
 8005742:	2307      	movs	r3, #7
 8005744:	4611      	mov	r1, r2
 8005746:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 800574a:	f008 fe5e 	bl	800e40a <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 800574e:	4648      	mov	r0, r9
 8005750:	2101      	movs	r1, #1
 8005752:	f008 ff8f 	bl	800e674 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 8005756:	f04f 0203 	mov.w	r2, #3
    digitalClock1.setTime24Hour(10, 10, 0);
 800575a:	462b      	mov	r3, r5
 800575c:	4648      	mov	r0, r9
 800575e:	f884 2773 	strb.w	r2, [r4, #1907]	; 0x773
 8005762:	220a      	movs	r2, #10
 8005764:	4611      	mov	r1, r2
 8005766:	f008 ff88 	bl	800e67a <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    imagecar.setXY(244, 13);
 800576a:	9805      	ldr	r0, [sp, #20]
 800576c:	220d      	movs	r2, #13
 800576e:	21f4      	movs	r1, #244	; 0xf4
 8005770:	f7ff fb98 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
    imagecar.setBitmap(touchgfx::Bitmap(BITMAP_CAR02_ID));
 8005774:	aa10      	add	r2, sp, #64	; 0x40
 8005776:	230c      	movs	r3, #12
 8005778:	9805      	ldr	r0, [sp, #20]
 800577a:	4611      	mov	r1, r2
 800577c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8005780:	f00c f9b3 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    lefticon.setXY(617, 8);
 8005784:	9806      	ldr	r0, [sp, #24]
 8005786:	2208      	movs	r2, #8
 8005788:	f240 2169 	movw	r1, #617	; 0x269
 800578c:	f7ff fb8a 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
    lefticon.setBitmap(touchgfx::Bitmap(BITMAP_LEFT02_ID));
 8005790:	aa10      	add	r2, sp, #64	; 0x40
 8005792:	2327      	movs	r3, #39	; 0x27
 8005794:	9806      	ldr	r0, [sp, #24]
 8005796:	4611      	mov	r1, r2
 8005798:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800579c:	f00c f9a5 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    righticon.setXY(661, 8);
 80057a0:	9807      	ldr	r0, [sp, #28]
 80057a2:	2208      	movs	r2, #8
 80057a4:	f240 2195 	movw	r1, #661	; 0x295
 80057a8:	f7ff fb7c 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
    righticon.setBitmap(touchgfx::Bitmap(BITMAP_RIGHT02_ID));
 80057ac:	aa10      	add	r2, sp, #64	; 0x40
 80057ae:	2334      	movs	r3, #52	; 0x34
 80057b0:	9807      	ldr	r0, [sp, #28]
 80057b2:	4611      	mov	r1, r2
 80057b4:	e010      	b.n	80057d8 <_ZN15Screen1ViewBaseC1Ev+0x820>
 80057b6:	bf00      	nop
 80057b8:	20060cac 	.word	0x20060cac
 80057bc:	08028e7e 	.word	0x08028e7e
 80057c0:	080286dc 	.word	0x080286dc
 80057c4:	fff7f0f0 	.word	0xfff7f0f0
 80057c8:	ff0f0e0e 	.word	0xff0f0e0e
 80057cc:	20060ca4 	.word	0x20060ca4
 80057d0:	fff70a0a 	.word	0xfff70a0a
 80057d4:	fff7f2f2 	.word	0xfff7f2f2
 80057d8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80057dc:	f00c f985 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage9.setBitmap(touchgfx::Bitmap(BITMAP_ECO_ID));
 80057e0:	aa10      	add	r2, sp, #64	; 0x40
 80057e2:	2315      	movs	r3, #21
 80057e4:	ee1d 0a10 	vmov	r0, s26
 80057e8:	4611      	mov	r1, r2
 80057ea:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80057ee:	f00c f97c 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage9.setPosition(285, 144, 45, 31);
 80057f2:	231f      	movs	r3, #31
 80057f4:	2290      	movs	r2, #144	; 0x90
 80057f6:	ee1d 0a10 	vmov	r0, s26
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	f240 111d 	movw	r1, #285	; 0x11d
 8005800:	232d      	movs	r3, #45	; 0x2d
 8005802:	f7ff fb5c 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage9.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005806:	4629      	mov	r1, r5
 8005808:	ee1d 0a10 	vmov	r0, s26
 800580c:	f00b f9ce 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    textArea4.setXY(344, 147);
 8005810:	9808      	ldr	r0, [sp, #32]
 8005812:	2293      	movs	r2, #147	; 0x93
 8005814:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005818:	f7ff fb44 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 800581c:	4b92      	ldr	r3, [pc, #584]	; (8005a68 <_ZN15Screen1ViewBaseC1Ev+0xab0>)
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UH5L));
 800581e:	aa10      	add	r2, sp, #64	; 0x40
 8005820:	9808      	ldr	r0, [sp, #32]
 8005822:	f8c4 38b0 	str.w	r3, [r4, #2224]	; 0x8b0
 8005826:	4b91      	ldr	r3, [pc, #580]	; (8005a6c <_ZN15Screen1ViewBaseC1Ev+0xab4>)
 8005828:	4611      	mov	r1, r2
        linespace = space;
 800582a:	f8a4 58b4 	strh.w	r5, [r4, #2228]	; 0x8b4
 800582e:	9310      	str	r3, [sp, #64]	; 0x40
 8005830:	2308      	movs	r3, #8
 8005832:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005836:	f00b fdd2 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    scalableImage10.setBitmap(touchgfx::Bitmap(BITMAP_ICON04_ID));
 800583a:	aa10      	add	r2, sp, #64	; 0x40
 800583c:	2321      	movs	r3, #33	; 0x21
 800583e:	ee1d 0a90 	vmov	r0, s27
 8005842:	4611      	mov	r1, r2
 8005844:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8005848:	f00c f94f 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage10.setPosition(289, 195, 36, 36);
 800584c:	4643      	mov	r3, r8
 800584e:	22c3      	movs	r2, #195	; 0xc3
 8005850:	ee1d 0a90 	vmov	r0, s27
 8005854:	f240 1121 	movw	r1, #289	; 0x121
 8005858:	f8cd 8000 	str.w	r8, [sp]
 800585c:	f7ff fb2f 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage10.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005860:	4629      	mov	r1, r5
 8005862:	ee1d 0a90 	vmov	r0, s27
 8005866:	f00b f9a1 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    textArea5.setXY(344, 195);
 800586a:	22c3      	movs	r2, #195	; 0xc3
 800586c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800586e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005872:	f7ff fb17 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8005876:	4b7e      	ldr	r3, [pc, #504]	; (8005a70 <_ZN15Screen1ViewBaseC1Ev+0xab8>)
 8005878:	f04f 0109 	mov.w	r1, #9
    textArea5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5S5P));
 800587c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800587e:	f8c4 3918 	str.w	r3, [r4, #2328]	; 0x918
 8005882:	4b7a      	ldr	r3, [pc, #488]	; (8005a6c <_ZN15Screen1ViewBaseC1Ev+0xab4>)
        linespace = space;
 8005884:	f8a4 591c 	strh.w	r5, [r4, #2332]	; 0x91c
 8005888:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
 800588c:	a910      	add	r1, sp, #64	; 0x40
 800588e:	9310      	str	r3, [sp, #64]	; 0x40
 8005890:	f00b fda5 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005894:	232e      	movs	r3, #46	; 0x2e
    scalableImage11.setBitmap(touchgfx::Bitmap(BITMAP_MAPS_ID));
 8005896:	a910      	add	r1, sp, #64	; 0x40
 8005898:	ee1e 0a10 	vmov	r0, s28
 800589c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80058a0:	f00c f923 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage11.setPosition(287, 251, 41, 41);
 80058a4:	2329      	movs	r3, #41	; 0x29
 80058a6:	22fb      	movs	r2, #251	; 0xfb
 80058a8:	ee1e 0a10 	vmov	r0, s28
 80058ac:	f240 111f 	movw	r1, #287	; 0x11f
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	f7ff fb04 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage11.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80058b6:	4629      	mov	r1, r5
 80058b8:	ee1e 0a10 	vmov	r0, s28
 80058bc:	f00b f976 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    textArea6.setXY(344, 258);
 80058c0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80058c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058c6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80058ca:	f7ff faeb 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 80058ce:	4b69      	ldr	r3, [pc, #420]	; (8005a74 <_ZN15Screen1ViewBaseC1Ev+0xabc>)
    textArea6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_89NM));
 80058d0:	a910      	add	r1, sp, #64	; 0x40
 80058d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058d4:	f8c4 3980 	str.w	r3, [r4, #2432]	; 0x980
 80058d8:	4b64      	ldr	r3, [pc, #400]	; (8005a6c <_ZN15Screen1ViewBaseC1Ev+0xab4>)
        linespace = space;
 80058da:	f8a4 5984 	strh.w	r5, [r4, #2436]	; 0x984
 80058de:	9310      	str	r3, [sp, #64]	; 0x40
 80058e0:	230a      	movs	r3, #10
 80058e2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80058e6:	f00b fd7a 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    scalableImage12.setBitmap(touchgfx::Bitmap(BITMAP_ITUNES_ID));
 80058ea:	a910      	add	r1, sp, #64	; 0x40
 80058ec:	ee1e 0a90 	vmov	r0, s29
 80058f0:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 80058f4:	f00c f8f9 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage12.setPosition(289, 304, 36, 37);
 80058f8:	2325      	movs	r3, #37	; 0x25
 80058fa:	f44f 7298 	mov.w	r2, #304	; 0x130
 80058fe:	ee1e 0a90 	vmov	r0, s29
 8005902:	f240 1121 	movw	r1, #289	; 0x121
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	4643      	mov	r3, r8
 800590a:	f7ff fad8 	bl	8004ebe <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage12.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800590e:	4629      	mov	r1, r5
 8005910:	ee1e 0a90 	vmov	r0, s29
 8005914:	f00b f94a 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    textArea7.setXY(344, 310);
 8005918:	f44f 729b 	mov.w	r2, #310	; 0x136
 800591c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800591e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005922:	f7ff fabf 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8005926:	4b54      	ldr	r3, [pc, #336]	; (8005a78 <_ZN15Screen1ViewBaseC1Ev+0xac0>)
    textArea7.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VEWH));
 8005928:	a910      	add	r1, sp, #64	; 0x40
 800592a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800592c:	f8c4 39e8 	str.w	r3, [r4, #2536]	; 0x9e8
 8005930:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <_ZN15Screen1ViewBaseC1Ev+0xab4>)
        linespace = space;
 8005932:	f8a4 59ec 	strh.w	r5, [r4, #2540]	; 0x9ec
 8005936:	9310      	str	r3, [sp, #64]	; 0x40
 8005938:	230b      	movs	r3, #11
 800593a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 800593e:	f00b fd4e 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    alarm.setXY(714, 402);
 8005942:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8005946:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005948:	f240 21ca 	movw	r1, #714	; 0x2ca
 800594c:	f7ff faaa 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 8005950:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8005954:	1d25      	adds	r5, r4, #4
    alarm.setBitmap(touchgfx::Bitmap(BITMAP_ALARM00_ID));
 8005956:	a910      	add	r1, sp, #64	; 0x40
 8005958:	980c      	ldr	r0, [sp, #48]	; 0x30
 800595a:	f00c f8c6 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800595e:	ee18 1a10 	vmov	r1, s16
 8005962:	4628      	mov	r0, r5
 8005964:	f009 f84e 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005968:	ee18 1a90 	vmov	r1, s17
 800596c:	4628      	mov	r0, r5
 800596e:	f009 f849 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005972:	4639      	mov	r1, r7
 8005974:	4628      	mov	r0, r5
 8005976:	f009 f845 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	f009 f841 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005982:	ee1f 1a10 	vmov	r1, s30
 8005986:	4628      	mov	r0, r5
 8005988:	f009 f83c 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800598c:	ee1f 1a90 	vmov	r1, s31
 8005990:	4628      	mov	r0, r5
 8005992:	f009 f837 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005996:	ee19 1a10 	vmov	r1, s18
 800599a:	4628      	mov	r0, r5
 800599c:	f009 f832 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059a0:	ee19 1a90 	vmov	r1, s19
 80059a4:	4628      	mov	r0, r5
 80059a6:	f009 f82d 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059aa:	ee1a 1a10 	vmov	r1, s20
 80059ae:	4628      	mov	r0, r5
 80059b0:	f009 f828 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059b4:	ee1a 1a90 	vmov	r1, s21
 80059b8:	4628      	mov	r0, r5
 80059ba:	f009 f823 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059be:	9902      	ldr	r1, [sp, #8]
 80059c0:	4628      	mov	r0, r5
 80059c2:	f009 f81f 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059c6:	9903      	ldr	r1, [sp, #12]
 80059c8:	4628      	mov	r0, r5
 80059ca:	f009 f81b 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059ce:	ee1b 1a10 	vmov	r1, s22
 80059d2:	4628      	mov	r0, r5
 80059d4:	f009 f816 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059d8:	ee1b 1a90 	vmov	r1, s23
 80059dc:	4628      	mov	r0, r5
 80059de:	f009 f811 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059e2:	4659      	mov	r1, fp
 80059e4:	4628      	mov	r0, r5
 80059e6:	f009 f80d 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059ea:	4649      	mov	r1, r9
 80059ec:	4628      	mov	r0, r5
 80059ee:	f009 f809 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059f2:	9905      	ldr	r1, [sp, #20]
 80059f4:	4628      	mov	r0, r5
 80059f6:	f009 f805 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80059fa:	9906      	ldr	r1, [sp, #24]
 80059fc:	4628      	mov	r0, r5
 80059fe:	f009 f801 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a02:	9907      	ldr	r1, [sp, #28]
 8005a04:	4628      	mov	r0, r5
 8005a06:	f008 fffd 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a0a:	ee1d 1a10 	vmov	r1, s26
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f008 fff8 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a14:	9908      	ldr	r1, [sp, #32]
 8005a16:	4628      	mov	r0, r5
 8005a18:	f008 fff4 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a1c:	ee1d 1a90 	vmov	r1, s27
 8005a20:	4628      	mov	r0, r5
 8005a22:	f008 ffef 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f008 ffeb 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a2e:	ee1e 1a10 	vmov	r1, s28
 8005a32:	4628      	mov	r0, r5
 8005a34:	f008 ffe6 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f008 ffe2 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a40:	ee1e 1a90 	vmov	r1, s29
 8005a44:	4628      	mov	r0, r5
 8005a46:	f008 ffdd 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f008 ffd9 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a52:	4628      	mov	r0, r5
 8005a54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a56:	f008 ffd5 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	b013      	add	sp, #76	; 0x4c
 8005a5e:	ecbd 8b10 	vpop	{d8-d15}
 8005a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a66:	bf00      	nop
 8005a68:	fff2eded 	.word	0xfff2eded
 8005a6c:	080286dc 	.word	0x080286dc
 8005a70:	fffaf5f5 	.word	0xfffaf5f5
 8005a74:	fff2ebeb 	.word	0xfff2ebeb
 8005a78:	fffaeded 	.word	0xfffaeded

08005a7c <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8005a7c:	4770      	bx	lr

08005a7e <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
 8005a7e:	4770      	bx	lr

08005a80 <_ZN15Screen2ViewBase15afterTransitionEv>:
void Screen2ViewBase::afterTransition()
{
    //Interaction1
    //When screen transition ends delay
    //Delay for 5000 ms (300 Ticks)
    interaction1Counter = INTERACTION1_DURATION;
 8005a80:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005a84:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
}
 8005a88:	4770      	bx	lr

08005a8a <_ZN15Screen2ViewBaseD0Ev>:
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	21c8      	movs	r1, #200	; 0xc8
 8005a90:	f01f fab7 	bl	8025002 <_ZdlPvj>
 8005a94:	4620      	mov	r0, r4
 8005a96:	bd10      	pop	{r4, pc}

08005a98 <_ZN15Screen2ViewBase15handleTickEventEv>:
{
 8005a98:	b508      	push	{r3, lr}
    if(interaction1Counter > 0)
 8005a9a:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
 8005a9e:	b153      	cbz	r3, 8005ab6 <_ZN15Screen2ViewBase15handleTickEventEv+0x1e>
        interaction1Counter--;
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
        if(interaction1Counter == 0)
 8005aa8:	b92b      	cbnz	r3, 8005ab6 <_ZN15Screen2ViewBase15handleTickEventEv+0x1e>
    virtual void handleTickEvent();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005aaa:	f00d fde1 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
}
 8005aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            application().gotoScreen1ScreenWipeTransitionSouth();
 8005ab2:	f7fe bfa1 	b.w	80049f8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenWipeTransitionSouthEv>
}
 8005ab6:	bd08      	pop	{r3, pc}

08005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
        setWidth(width);
 8005ab8:	6803      	ldr	r3, [r0, #0]
    void setWidthHeight(int16_t width, int16_t height)
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	4604      	mov	r4, r0
        setWidth(width);
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    void setWidthHeight(int16_t width, int16_t height)
 8005ac0:	4615      	mov	r5, r2
        setWidth(width);
 8005ac2:	4798      	blx	r3
        setHeight(height);
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 8005acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8005ad0:	4718      	bx	r3
	...

08005ad4 <_ZN8touchgfx3BoxC1Ev>:
        : Widget(), alpha(255), color(0)
 8005ad4:	4a09      	ldr	r2, [pc, #36]	; (8005afc <_ZN8touchgfx3BoxC1Ev+0x28>)
          visible(true)
 8005ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ada:	6002      	str	r2, [r0, #0]
        : x(0), y(0), width(0), height(0)
 8005adc:	2200      	movs	r2, #0
 8005ade:	8481      	strh	r1, [r0, #36]	; 0x24
 8005ae0:	21ff      	movs	r1, #255	; 0xff
        : color(col)
 8005ae2:	6282      	str	r2, [r0, #40]	; 0x28
 8005ae4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
        : x(0), y(0), width(0), height(0)
 8005ae8:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8005aec:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8005af0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8005af4:	e9c0 2207 	strd	r2, r2, [r0, #28]
    }
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	0802ac44 	.word	0x0802ac44

08005b00 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8005b00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005b04:	4604      	mov	r4, r0
 8005b06:	2500      	movs	r5, #0
 8005b08:	f00f f8cc 	bl	8014ca4 <_ZN8touchgfx6ScreenC1Ev>
    interaction1Counter(0)
 8005b0c:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <_ZN15Screen2ViewBaseC1Ev+0xd0>)
 8005b0e:	4627      	mov	r7, r4
 8005b10:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8005b14:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005b16:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8005b1a:	f847 3b40 	str.w	r3, [r7], #64
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f7ff ffd8 	bl	8005ad4 <_ZN8touchgfx3BoxC1Ev>
 8005b24:	4640      	mov	r0, r8
 8005b26:	f7ff ffd5 	bl	8005ad4 <_ZN8touchgfx3BoxC1Ev>
 8005b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b2e:	a903      	add	r1, sp, #12
 8005b30:	4630      	mov	r0, r6
 8005b32:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005b36:	f00b f873 	bl	8010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        setXY(x, y);
 8005b3a:	462a      	mov	r2, r5
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8005b44:	f7ff f9ae 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005b48:	4638      	mov	r0, r7
 8005b4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005b4e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005b52:	f7ff ffb1 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
        this->color = color;
 8005b56:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        setXY(x, y);
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	66a3      	str	r3, [r4, #104]	; 0x68
 8005b60:	4640      	mov	r0, r8
 8005b62:	f7ff f99f 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005b66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005b70:	f7ff ffa2 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8005b74:	f04f 33ff 	mov.w	r3, #4294967295
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_SKUUTA_ID));
 8005b78:	a903      	add	r1, sp, #12
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8005b80:	23c4      	movs	r3, #196	; 0xc4
 8005b82:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 8005b86:	2337      	movs	r3, #55	; 0x37
 8005b88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005b8c:	f00b ffad 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setXY(x, y);
 8005b90:	4630      	mov	r0, r6
 8005b92:	228e      	movs	r2, #142	; 0x8e
 8005b94:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005b98:	f7ff f984 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005b9c:	22b1      	movs	r2, #177	; 0xb1
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	21b4      	movs	r1, #180	; 0xb4
 8005ba2:	f7ff ff89 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f00a ffff 	bl	8010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8005bae:	1d20      	adds	r0, r4, #4
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	9001      	str	r0, [sp, #4]
 8005bb4:	f008 ff26 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bb8:	4641      	mov	r1, r8
 8005bba:	9801      	ldr	r0, [sp, #4]
 8005bbc:	f008 ff22 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bc0:	9801      	ldr	r0, [sp, #4]
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	f008 ff1e 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005bc8:	4620      	mov	r0, r4
 8005bca:	b004      	add	sp, #16
 8005bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd0:	08028ed8 	.word	0x08028ed8

08005bd4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005bd4:	4770      	bx	lr
	...

08005bd8 <_Z23getFont_verdana_10_4bppv>:
{
 8005bd8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005bda:	4d15      	ldr	r5, [pc, #84]	; (8005c30 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8005bdc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005bde:	782c      	ldrb	r4, [r5, #0]
 8005be0:	f3bf 8f5b 	dmb	ish
 8005be4:	f014 0401 	ands.w	r4, r4, #1
 8005be8:	d11e      	bne.n	8005c28 <_Z23getFont_verdana_10_4bppv+0x50>
 8005bea:	4628      	mov	r0, r5
 8005bec:	f01f fa0b 	bl	8025006 <__cxa_guard_acquire>
 8005bf0:	b1d0      	cbz	r0, 8005c28 <_Z23getFont_verdana_10_4bppv+0x50>
 8005bf2:	233f      	movs	r3, #63	; 0x3f
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	490f      	ldr	r1, [pc, #60]	; (8005c34 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8005bf8:	9307      	str	r3, [sp, #28]
 8005bfa:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <_Z23getFont_verdana_10_4bppv+0x60>)
 8005bfc:	480f      	ldr	r0, [pc, #60]	; (8005c3c <_Z23getFont_verdana_10_4bppv+0x64>)
 8005bfe:	9306      	str	r3, [sp, #24]
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <_Z23getFont_verdana_10_4bppv+0x68>)
 8005c02:	9408      	str	r4, [sp, #32]
 8005c04:	9403      	str	r4, [sp, #12]
 8005c06:	9400      	str	r4, [sp, #0]
 8005c08:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005c12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c16:	230a      	movs	r3, #10
 8005c18:	f7ff f8ca 	bl	8004db0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f01f f9fe 	bl	802501e <__cxa_guard_release>
 8005c22:	4808      	ldr	r0, [pc, #32]	; (8005c44 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8005c24:	f01f fbde 	bl	80253e4 <atexit>
    return verdana_10_4bpp;
}
 8005c28:	4804      	ldr	r0, [pc, #16]	; (8005c3c <_Z23getFont_verdana_10_4bppv+0x64>)
 8005c2a:	b00d      	add	sp, #52	; 0x34
 8005c2c:	bd30      	pop	{r4, r5, pc}
 8005c2e:	bf00      	nop
 8005c30:	2004c900 	.word	0x2004c900
 8005c34:	90505798 	.word	0x90505798
 8005c38:	0802cd68 	.word	0x0802cd68
 8005c3c:	2004c904 	.word	0x2004c904
 8005c40:	0802cd94 	.word	0x0802cd94
 8005c44:	08005bd5 	.word	0x08005bd5

08005c48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 39, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005c48:	4770      	bx	lr
	...

08005c4c <_Z23getFont_verdana_20_4bppv>:
{
 8005c4c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 39, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005c4e:	4d15      	ldr	r5, [pc, #84]	; (8005ca4 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8005c50:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 39, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005c52:	782c      	ldrb	r4, [r5, #0]
 8005c54:	f3bf 8f5b 	dmb	ish
 8005c58:	f014 0401 	ands.w	r4, r4, #1
 8005c5c:	d11f      	bne.n	8005c9e <_Z23getFont_verdana_20_4bppv+0x52>
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f01f f9d1 	bl	8025006 <__cxa_guard_acquire>
 8005c64:	b1d8      	cbz	r0, 8005c9e <_Z23getFont_verdana_20_4bppv+0x52>
 8005c66:	233f      	movs	r3, #63	; 0x3f
 8005c68:	2227      	movs	r2, #39	; 0x27
 8005c6a:	490f      	ldr	r1, [pc, #60]	; (8005ca8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8005c6c:	9307      	str	r3, [sp, #28]
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <_Z23getFont_verdana_20_4bppv+0x60>)
 8005c70:	480f      	ldr	r0, [pc, #60]	; (8005cb0 <_Z23getFont_verdana_20_4bppv+0x64>)
 8005c72:	9306      	str	r3, [sp, #24]
 8005c74:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <_Z23getFont_verdana_20_4bppv+0x68>)
 8005c76:	9408      	str	r4, [sp, #32]
 8005c78:	9305      	str	r3, [sp, #20]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005c80:	9302      	str	r3, [sp, #8]
 8005c82:	2304      	movs	r3, #4
 8005c84:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005c88:	e9cd 3300 	strd	r3, r3, [sp]
 8005c8c:	2314      	movs	r3, #20
 8005c8e:	f7ff f88f 	bl	8004db0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005c92:	4628      	mov	r0, r5
 8005c94:	f01f f9c3 	bl	802501e <__cxa_guard_release>
 8005c98:	4807      	ldr	r0, [pc, #28]	; (8005cb8 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8005c9a:	f01f fba3 	bl	80253e4 <atexit>
    return verdana_20_4bpp;
}
 8005c9e:	4804      	ldr	r0, [pc, #16]	; (8005cb0 <_Z23getFont_verdana_20_4bppv+0x64>)
 8005ca0:	b00d      	add	sp, #52	; 0x34
 8005ca2:	bd30      	pop	{r4, r5, pc}
 8005ca4:	2004c92c 	.word	0x2004c92c
 8005ca8:	905057a8 	.word	0x905057a8
 8005cac:	0802cd6c 	.word	0x0802cd6c
 8005cb0:	2004c930 	.word	0x2004c930
 8005cb4:	0802cd98 	.word	0x0802cd98
 8005cb8:	08005c49 	.word	0x08005c49

08005cbc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 21, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005cbc:	4770      	bx	lr
	...

08005cc0 <_Z23getFont_verdana_40_4bppv>:
{
 8005cc0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 21, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005cc2:	4d16      	ldr	r5, [pc, #88]	; (8005d1c <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8005cc4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 21, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005cc6:	782c      	ldrb	r4, [r5, #0]
 8005cc8:	f3bf 8f5b 	dmb	ish
 8005ccc:	f014 0401 	ands.w	r4, r4, #1
 8005cd0:	d120      	bne.n	8005d14 <_Z23getFont_verdana_40_4bppv+0x54>
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f01f f997 	bl	8025006 <__cxa_guard_acquire>
 8005cd8:	b1e0      	cbz	r0, 8005d14 <_Z23getFont_verdana_40_4bppv+0x54>
 8005cda:	233f      	movs	r3, #63	; 0x3f
 8005cdc:	2204      	movs	r2, #4
 8005cde:	4910      	ldr	r1, [pc, #64]	; (8005d20 <_Z23getFont_verdana_40_4bppv+0x60>)
 8005ce0:	9307      	str	r3, [sp, #28]
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <_Z23getFont_verdana_40_4bppv+0x64>)
 8005ce4:	4810      	ldr	r0, [pc, #64]	; (8005d28 <_Z23getFont_verdana_40_4bppv+0x68>)
 8005ce6:	9306      	str	r3, [sp, #24]
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8005cea:	9408      	str	r4, [sp, #32]
 8005cec:	9305      	str	r3, [sp, #20]
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8005cf4:	9302      	str	r3, [sp, #8]
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005cfc:	e9cd 3200 	strd	r3, r2, [sp]
 8005d00:	2328      	movs	r3, #40	; 0x28
 8005d02:	2215      	movs	r2, #21
 8005d04:	f7ff f854 	bl	8004db0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f01f f988 	bl	802501e <__cxa_guard_release>
 8005d0e:	4808      	ldr	r0, [pc, #32]	; (8005d30 <_Z23getFont_verdana_40_4bppv+0x70>)
 8005d10:	f01f fb68 	bl	80253e4 <atexit>
    return verdana_40_4bpp;
}
 8005d14:	4804      	ldr	r0, [pc, #16]	; (8005d28 <_Z23getFont_verdana_40_4bppv+0x68>)
 8005d16:	b00d      	add	sp, #52	; 0x34
 8005d18:	bd30      	pop	{r4, r5, pc}
 8005d1a:	bf00      	nop
 8005d1c:	2004c958 	.word	0x2004c958
 8005d20:	905059cc 	.word	0x905059cc
 8005d24:	0802cd84 	.word	0x0802cd84
 8005d28:	2004c95c 	.word	0x2004c95c
 8005d2c:	0802cd9c 	.word	0x0802cd9c
 8005d30:	08005cbd 	.word	0x08005cbd

08005d34 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_60_4bpp();

touchgfx::GeneratedFont& getFont_verdana_60_4bpp()
{
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 11, 60, 1, 4, 1, 0, 0, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 8005d34:	4770      	bx	lr
	...

08005d38 <_Z23getFont_verdana_60_4bppv>:
{
 8005d38:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 11, 60, 1, 4, 1, 0, 0, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 8005d3a:	4d15      	ldr	r5, [pc, #84]	; (8005d90 <_Z23getFont_verdana_60_4bppv+0x58>)
{
 8005d3c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_60_4bpp(glyphs_verdana_60_4bpp, 11, 60, 1, 4, 1, 0, 0, unicodes_verdana_60_4bpp, kerning_verdana_60_4bpp, 63, 0, 0, 0);
 8005d3e:	782c      	ldrb	r4, [r5, #0]
 8005d40:	f3bf 8f5b 	dmb	ish
 8005d44:	f014 0401 	ands.w	r4, r4, #1
 8005d48:	d11f      	bne.n	8005d8a <_Z23getFont_verdana_60_4bppv+0x52>
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f01f f95b 	bl	8025006 <__cxa_guard_acquire>
 8005d50:	b1d8      	cbz	r0, 8005d8a <_Z23getFont_verdana_60_4bppv+0x52>
 8005d52:	233f      	movs	r3, #63	; 0x3f
 8005d54:	2204      	movs	r2, #4
 8005d56:	490f      	ldr	r1, [pc, #60]	; (8005d94 <_Z23getFont_verdana_60_4bppv+0x5c>)
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <_Z23getFont_verdana_60_4bppv+0x60>)
 8005d5c:	480f      	ldr	r0, [pc, #60]	; (8005d9c <_Z23getFont_verdana_60_4bppv+0x64>)
 8005d5e:	9306      	str	r3, [sp, #24]
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <_Z23getFont_verdana_60_4bppv+0x68>)
 8005d62:	9408      	str	r4, [sp, #32]
 8005d64:	9403      	str	r4, [sp, #12]
 8005d66:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005d70:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	220b      	movs	r2, #11
 8005d78:	233c      	movs	r3, #60	; 0x3c
 8005d7a:	f7ff f819 	bl	8004db0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f01f f94d 	bl	802501e <__cxa_guard_release>
 8005d84:	4807      	ldr	r0, [pc, #28]	; (8005da4 <_Z23getFont_verdana_60_4bppv+0x6c>)
 8005d86:	f01f fb2d 	bl	80253e4 <atexit>
    return verdana_60_4bpp;
}
 8005d8a:	4804      	ldr	r0, [pc, #16]	; (8005d9c <_Z23getFont_verdana_60_4bppv+0x64>)
 8005d8c:	b00d      	add	sp, #52	; 0x34
 8005d8e:	bd30      	pop	{r4, r5, pc}
 8005d90:	2004c984 	.word	0x2004c984
 8005d94:	90505af4 	.word	0x90505af4
 8005d98:	0802cd90 	.word	0x0802cd90
 8005d9c:	2004c988 	.word	0x2004c988
 8005da0:	0802cda0 	.word	0x0802cda0
 8005da4:	08005d35 	.word	0x08005d35

08005da8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8005da8:	2000      	movs	r0, #0
 8005daa:	4770      	bx	lr

08005dac <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8005dac:	2000      	movs	r0, #0
 8005dae:	4770      	bx	lr

08005db0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005db0:	b40e      	push	{r1, r2, r3}
 8005db2:	b503      	push	{r0, r1, lr}
 8005db4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005db6:	2100      	movs	r1, #0
{
 8005db8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8005dbc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005dbe:	f00e faff 	bl	80143c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8005dc2:	b002      	add	sp, #8
 8005dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc8:	b003      	add	sp, #12
 8005dca:	4770      	bx	lr

08005dcc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005dcc:	b40c      	push	{r2, r3}
 8005dce:	b507      	push	{r0, r1, r2, lr}
 8005dd0:	ab04      	add	r3, sp, #16
 8005dd2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8005dd6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005dd8:	f00e faf2 	bl	80143c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8005ddc:	b003      	add	sp, #12
 8005dde:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de2:	b002      	add	sp, #8
 8005de4:	4770      	bx	lr
	...

08005de8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8005de8:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8005dea:	b510      	push	{r4, lr}
 8005dec:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8005dee:	b373      	cbz	r3, 8005e4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005df0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8005df2:	b92b      	cbnz	r3, 8005e00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8005df4:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8005df6:	21c0      	movs	r1, #192	; 0xc0
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8005dfa:	4819      	ldr	r0, [pc, #100]	; (8005e60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8005dfc:	f01f fad4 	bl	80253a8 <__assert_func>
            return buffer[pos];
 8005e00:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005e02:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005e06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005e08:	b30b      	cbz	r3, 8005e4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8005e0a:	f00f ff0b 	bl	8015c24 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8005e0e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d803      	bhi.n	8005e1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8005e14:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8005e16:	21c5      	movs	r1, #197	; 0xc5
 8005e18:	4a13      	ldr	r2, [pc, #76]	; (8005e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8005e1a:	e7ee      	b.n	8005dfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8005e1c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8005e1e:	f640 103f 	movw	r0, #2367	; 0x93f
 8005e22:	1c53      	adds	r3, r2, #1
 8005e24:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	4619      	mov	r1, r3
 8005e2a:	bf88      	it	hi
 8005e2c:	f1a3 010a 	subhi.w	r1, r3, #10
 8005e30:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8005e34:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8005e36:	4281      	cmp	r1, r0
 8005e38:	d109      	bne.n	8005e4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8005e3a:	2b0a      	cmp	r3, #10
 8005e3c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8005e40:	bf28      	it	cs
 8005e42:	2300      	movcs	r3, #0
            return buffer[pos];
 8005e44:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8005e46:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8005e4a:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8005e4c:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8005e4e:	4620      	mov	r0, r4
}
 8005e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8005e54:	f00f bdca 	b.w	80159ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005e58:	08028f04 	.word	0x08028f04
 8005e5c:	08028f0d 	.word	0x08028f0d
 8005e60:	08028fb8 	.word	0x08028fb8
 8005e64:	08029002 	.word	0x08029002
 8005e68:	08029010 	.word	0x08029010

08005e6c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8005e6c:	f00f bd76 	b.w	801595c <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08005e70 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8005e70:	b510      	push	{r4, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	ac02      	add	r4, sp, #8
 8005e76:	e884 0006 	stmia.w	r4, {r1, r2}
 8005e7a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8005e7c:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005e7e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8005e80:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	9b08      	ldr	r3, [sp, #32]
 8005e8a:	f00c ff6d 	bl	8012d68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8005e8e:	b006      	add	sp, #24
 8005e90:	bd10      	pop	{r4, pc}
	...

08005e94 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8005e94:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8005e96:	bb18      	cbnz	r0, 8005ee0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8005e9a:	4813      	ldr	r0, [pc, #76]	; (8005ee8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4913      	ldr	r1, [pc, #76]	; (8005eec <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8005ea0:	b1b3      	cbz	r3, 8005ed0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005ea2:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8005ea4:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005ea6:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8005ea8:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005eaa:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	441a      	add	r2, r3
 8005eb0:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8005eb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8005eb8:	f000 f838 	bl	8005f2c <_ZN17TypedTextDatabase8getFontsEv>
 8005ebc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8005ebe:	f000 f833 	bl	8005f28 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8005ec2:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8005ec4:	601c      	str	r4, [r3, #0]
        fonts = f;
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8005ec8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8005eca:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8005ecc:	8018      	strh	r0, [r3, #0]
    }
}
 8005ece:	e007      	b.n	8005ee0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8005ed2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8005ed6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8005eda:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8005edc:	2c00      	cmp	r4, #0
 8005ede:	d1e8      	bne.n	8005eb2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8005ee0:	bd38      	pop	{r3, r4, r5, pc}
 8005ee2:	bf00      	nop
 8005ee4:	2004c9b0 	.word	0x2004c9b0
 8005ee8:	2004c9b4 	.word	0x2004c9b4
 8005eec:	2004c9b8 	.word	0x2004c9b8
 8005ef0:	2004c9bc 	.word	0x2004c9bc
 8005ef4:	20060ca0 	.word	0x20060ca0
 8005ef8:	20060ca8 	.word	0x20060ca8
 8005efc:	20060ca4 	.word	0x20060ca4
 8005f00:	90505bc0 	.word	0x90505bc0
 8005f04:	90505b90 	.word	0x90505b90
 8005f08:	90505c50 	.word	0x90505c50

08005f0c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8005f0c:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8005f14:	4b03      	ldr	r3, [pc, #12]	; (8005f24 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8005f16:	681b      	ldr	r3, [r3, #0]
}
 8005f18:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	2004c9b8 	.word	0x2004c9b8
 8005f24:	2004c9b4 	.word	0x2004c9b4

08005f28 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8005f28:	200c      	movs	r0, #12
 8005f2a:	4770      	bx	lr

08005f2c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8005f2c:	4800      	ldr	r0, [pc, #0]	; (8005f30 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8005f2e:	4770      	bx	lr
 8005f30:	2004c9c0 	.word	0x2004c9c0

08005f34 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005f34:	b510      	push	{r4, lr}
};
 8005f36:	4c07      	ldr	r4, [pc, #28]	; (8005f54 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_40_4bpp()),
 8005f38:	f7ff fec2 	bl	8005cc0 <_Z23getFont_verdana_40_4bppv>
};
 8005f3c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_60_4bpp()),
 8005f3e:	f7ff fefb 	bl	8005d38 <_Z23getFont_verdana_60_4bppv>
};
 8005f42:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8005f44:	f7ff fe48 	bl	8005bd8 <_Z23getFont_verdana_10_4bppv>
};
 8005f48:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 8005f4a:	f7ff fe7f 	bl	8005c4c <_Z23getFont_verdana_20_4bppv>
};
 8005f4e:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8005f50:	bd10      	pop	{r4, pc}
 8005f52:	bf00      	nop
 8005f54:	2004c9c0 	.word	0x2004c9c0

08005f58 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8005f58:	4770      	bx	lr

08005f5a <_ZN19FrontendApplicationD0Ev>:
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005f62:	f01f f84e 	bl	8025002 <_ZdlPvj>
 8005f66:	4620      	mov	r0, r4
 8005f68:	bd10      	pop	{r4, pc}

08005f6a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	4604      	mov	r4, r0
    {
        model.tick();
 8005f6e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8005f72:	f000 f813 	bl	8005f9c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8005f76:	4620      	mov	r0, r4
    }
 8005f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8005f7c:	f00d ba6e 	b.w	801345c <_ZN8touchgfx11Application15handleTickEventEv>

08005f80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8005f84:	f7fe fd0c 	bl	80049a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8005f8a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8005f8c:	6023      	str	r3, [r4, #0]
}
 8005f8e:	bd10      	pop	{r4, pc}
 8005f90:	080290ec 	.word	0x080290ec

08005f94 <_ZN5ModelC1Ev>:
#include <gui/model/ModelListener.hpp>
#include "stm32f7xx_hal.h"

extern volatile uint16_t adcval;

Model::Model() : modelListener(0)
 8005f94:	2200      	movs	r2, #0
 8005f96:	6002      	str	r2, [r0, #0]
{

}
 8005f98:	4770      	bx	lr
	...

08005f9c <_ZN5Model4tickEv>:

void Model::tick()
{
modelListener->updateGuage(adcval*200/4095);
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <_ZN5Model4tickEv+0x1c>)
 8005f9e:	6800      	ldr	r0, [r0, #0]
 8005fa0:	8819      	ldrh	r1, [r3, #0]
 8005fa2:	b28b      	uxth	r3, r1
 8005fa4:	21c8      	movs	r1, #200	; 0xc8
 8005fa6:	4359      	muls	r1, r3
 8005fa8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005fac:	fbb1 f1f3 	udiv	r1, r1, r3
 8005fb0:	6803      	ldr	r3, [r0, #0]
 8005fb2:	b289      	uxth	r1, r1
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	4718      	bx	r3
 8005fb8:	200612c4 	.word	0x200612c4

08005fbc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8005fbc:	4770      	bx	lr

08005fbe <_ZThn4_N16Screen1PresenterD1Ev>:
 8005fbe:	3804      	subs	r0, #4
 8005fc0:	4770      	bx	lr

08005fc2 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8005fc2:	4770      	bx	lr

08005fc4 <_ZN16Screen1PresenterD0Ev>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	2110      	movs	r1, #16
 8005fca:	f01f f81a 	bl	8025002 <_ZdlPvj>
 8005fce:	4620      	mov	r0, r4
 8005fd0:	bd10      	pop	{r4, pc}

08005fd2 <_ZThn4_N16Screen1PresenterD0Ev>:
 8005fd2:	f1a0 0004 	sub.w	r0, r0, #4
 8005fd6:	e7f5      	b.n	8005fc4 <_ZN16Screen1PresenterD0Ev>

08005fd8 <_ZN16Screen1Presenter11updateGuageEt>:
{

}
void Screen1Presenter::updateGuage(uint16_t value)
{
	view.updateGuage(value);
 8005fd8:	68c0      	ldr	r0, [r0, #12]
 8005fda:	f000 b873 	b.w	80060c4 <_ZN11Screen1View11updateGuageEt>

08005fde <_ZThn4_N16Screen1Presenter11updateGuageEt>:
    void updateGuage(uint16_t value);
 8005fde:	f1a0 0004 	sub.w	r0, r0, #4
 8005fe2:	f7ff bff9 	b.w	8005fd8 <_ZN16Screen1Presenter11updateGuageEt>
	...

08005fe8 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8005fe8:	2200      	movs	r2, #0
    : view(v)
 8005fea:	60c1      	str	r1, [r0, #12]
 8005fec:	6082      	str	r2, [r0, #8]
 8005fee:	4a04      	ldr	r2, [pc, #16]	; (8006000 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8005ff0:	b510      	push	{r4, lr}
    : view(v)
 8005ff2:	f102 0408 	add.w	r4, r2, #8
 8005ff6:	3224      	adds	r2, #36	; 0x24
 8005ff8:	6004      	str	r4, [r0, #0]
 8005ffa:	6042      	str	r2, [r0, #4]
}
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	bf00      	nop
 8006000:	08029128 	.word	0x08029128

08006004 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006004:	4770      	bx	lr

08006006 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8006006:	4770      	bx	lr

08006008 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8006008:	f7fe bf02 	b.w	8004e10 <_ZN15Screen1ViewBase11setupScreenEv>

0800600c <_ZN11Screen1ViewD0Ev>:
 800600c:	b510      	push	{r4, lr}
 800600e:	4604      	mov	r4, r0
 8006010:	f643 1138 	movw	r1, #14648	; 0x3938
 8006014:	f01e fff5 	bl	8025002 <_ZdlPvj>
 8006018:	4620      	mov	r0, r4
 800601a:	bd10      	pop	{r4, pc}

0800601c <_ZN11Screen1View17updateIconAndTextEv>:

void Screen1View::updateIconAndText()
{
 800601c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800601e:	4604      	mov	r4, r0
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8006020:	2101      	movs	r1, #1
 8006022:	4821      	ldr	r0, [pc, #132]	; (80060a8 <_ZN11Screen1View17updateIconAndTextEv+0x8c>)
 8006024:	f001 ff5a 	bl	8007edc <HAL_GPIO_ReadPin>
 8006028:	2801      	cmp	r0, #1
 800602a:	4605      	mov	r5, r0
 800602c:	d124      	bne.n	8006078 <_ZN11Screen1View17updateIconAndTextEv+0x5c>
	   {
		   HAL_Delay(50);
 800602e:	2032      	movs	r0, #50	; 0x32
 8006030:	f000 fbf6 	bl	8006820 <HAL_Delay>
		   if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8006034:	4629      	mov	r1, r5
 8006036:	481c      	ldr	r0, [pc, #112]	; (80060a8 <_ZN11Screen1View17updateIconAndTextEv+0x8c>)
 8006038:	f504 65fa 	add.w	r5, r4, #2000	; 0x7d0
 800603c:	f001 ff4e 	bl	8007edc <HAL_GPIO_ReadPin>
 8006040:	2801      	cmp	r0, #1
 8006042:	4602      	mov	r2, r0
 8006044:	f204 74fc 	addw	r4, r4, #2044	; 0x7fc
 8006048:	d118      	bne.n	800607c <_ZN11Screen1View17updateIconAndTextEv+0x60>
		   {
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800604a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800604e:	4816      	ldr	r0, [pc, #88]	; (80060a8 <_ZN11Screen1View17updateIconAndTextEv+0x8c>)
 8006050:	f001 ff4a 	bl	8007ee8 <HAL_GPIO_WritePin>
 8006054:	230d      	movs	r3, #13
			   imagecar.setBitmap(Bitmap(BITMAP_CAR03_ID));
 8006056:	a901      	add	r1, sp, #4
 8006058:	4628      	mov	r0, r5
 800605a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800605e:	f00b fd44 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006062:	2328      	movs	r3, #40	; 0x28
			   lefticon.setBitmap(Bitmap(BITMAP_LEFT03_ID));
 8006064:	a901      	add	r1, sp, #4
 8006066:	4620      	mov	r0, r4
 8006068:	f8ad 3004 	strh.w	r3, [sp, #4]
 800606c:	f00b fd3d 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

			   count++;
 8006070:	4a0e      	ldr	r2, [pc, #56]	; (80060ac <_ZN11Screen1View17updateIconAndTextEv+0x90>)
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	6013      	str	r3, [r2, #0]
//			   righticon.setBitmap(Bitmap(BITMAP_RIGHT02_ID));
//
//		   }

	   }
}
 8006078:	b003      	add	sp, #12
 800607a:	bd30      	pop	{r4, r5, pc}
			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800607c:	2200      	movs	r2, #0
 800607e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006082:	4809      	ldr	r0, [pc, #36]	; (80060a8 <_ZN11Screen1View17updateIconAndTextEv+0x8c>)
 8006084:	f001 ff30 	bl	8007ee8 <HAL_GPIO_WritePin>
 8006088:	230c      	movs	r3, #12
			   imagecar.setBitmap(Bitmap(BITMAP_CAR02_ID));
 800608a:	a901      	add	r1, sp, #4
 800608c:	4628      	mov	r0, r5
 800608e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006092:	f00b fd2a 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006096:	2327      	movs	r3, #39	; 0x27
			   lefticon.setBitmap(Bitmap(BITMAP_LEFT02_ID));
 8006098:	a901      	add	r1, sp, #4
 800609a:	4620      	mov	r0, r4
 800609c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80060a0:	f00b fd23 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
}
 80060a4:	e7e8      	b.n	8006078 <_ZN11Screen1View17updateIconAndTextEv+0x5c>
 80060a6:	bf00      	nop
 80060a8:	40020000 	.word	0x40020000
 80060ac:	2004c9d4 	.word	0x2004c9d4

080060b0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80060b0:	b510      	push	{r4, lr}
 80060b2:	4604      	mov	r4, r0
 80060b4:	f7fe ff80 	bl	8004fb8 <_ZN15Screen1ViewBaseC1Ev>
 80060b8:	4b01      	ldr	r3, [pc, #4]	; (80060c0 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80060ba:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80060bc:	6023      	str	r3, [r4, #0]
}
 80060be:	bd10      	pop	{r4, pc}
 80060c0:	08029164 	.word	0x08029164

080060c4 <_ZN11Screen1View11updateGuageEt>:

void Screen1View::updateGuage(uint16_t value)
{
 80060c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060c8:	4604      	mov	r4, r0
 80060ca:	460d      	mov	r5, r1
    gauge1.updateValue(value, 0);
 80060cc:	2200      	movs	r2, #0
 80060ce:	f500 700f 	add.w	r0, r0, #572	; 0x23c
 80060d2:	f007 ffc4 	bl	800e05e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
    gauge2.updateValue(value, 0);
 80060d6:	2200      	movs	r2, #0
 80060d8:	4629      	mov	r1, r5
 80060da:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80060de:	f007 ffbe 	bl	800e05e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>

    Unicode::snprintf(speedtxtBuffer, SPEEDTXT_SIZE, "%d", value);
 80060e2:	462b      	mov	r3, r5
 80060e4:	4a25      	ldr	r2, [pc, #148]	; (800617c <_ZN11Screen1View11updateGuageEt+0xb8>)
 80060e6:	210a      	movs	r1, #10
 80060e8:	f504 6022 	add.w	r0, r4, #2592	; 0xa20
 80060ec:	f604 18f4 	addw	r8, r4, #2548	; 0x9f4
 80060f0:	f010 fb50 	bl	8016794 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    // Invalidate text area, which will result in it being redrawn in next tick.
    speedtxt.invalidate();
 80060f4:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 80060f8:	f00e fa84 	bl	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>
    Unicode::snprintf(rpmtxtBuffer, RPMTXT_SIZE, "%d", (value/10));
 80060fc:	210a      	movs	r1, #10
 80060fe:	4a1f      	ldr	r2, [pc, #124]	; (800617c <_ZN11Screen1View11updateGuageEt+0xb8>)
 8006100:	f604 2034 	addw	r0, r4, #2612	; 0xa34
 8006104:	4e1e      	ldr	r6, [pc, #120]	; (8006180 <_ZN11Screen1View11updateGuageEt+0xbc>)
 8006106:	fbb5 f3f1 	udiv	r3, r5, r1
 800610a:	f010 fb43 	bl	8016794 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    // Invalidate text area, which will result in it being redrawn in next tick.
    rpmtxt.invalidate();
 800610e:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
 8006112:	f00e fa77 	bl	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>

    if (value>=90)
 8006116:	2d59      	cmp	r5, #89	; 0x59
 8006118:	d91f      	bls.n	800615a <_ZN11Screen1View11updateGuageEt+0x96>
    {


    	if(check==0 || check==3000)
 800611a:	6833      	ldr	r3, [r6, #0]
 800611c:	b11b      	cbz	r3, 8006126 <_ZN11Screen1View11updateGuageEt+0x62>
 800611e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006122:	4293      	cmp	r3, r2
 8006124:	d103      	bne.n	800612e <_ZN11Screen1View11updateGuageEt+0x6a>
    		modalWindow1.show();
 8006126:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 800612a:	f008 fb18 	bl	800e75e <_ZN8touchgfx11ModalWindow4showEv>
    	check++;
 800612e:	6833      	ldr	r3, [r6, #0]
 8006130:	3301      	adds	r3, #1
 8006132:	6033      	str	r3, [r6, #0]
    if (value>=70)
    {



    	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_SET);
 8006134:	2201      	movs	r2, #1
 8006136:	2108      	movs	r1, #8
 8006138:	4812      	ldr	r0, [pc, #72]	; (8006184 <_ZN11Screen1View11updateGuageEt+0xc0>)
 800613a:	f001 fed5 	bl	8007ee8 <HAL_GPIO_WritePin>
 800613e:	2301      	movs	r3, #1
 8006140:	f8ad 3004 	strh.w	r3, [sp, #4]
    }
    else
    {

    	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
    	alarm.setBitmap(Bitmap(BITMAP_ALARM00_ID));
 8006144:	a901      	add	r1, sp, #4
 8006146:	4640      	mov	r0, r8
 8006148:	f00b fccf 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }

    updateIconAndText();
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	4620      	mov	r0, r4
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	4798      	blx	r3
}
 8006154:	b002      	add	sp, #8
 8006156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	modalWindow1.hide();
 800615a:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
    	check=0;
 800615e:	2700      	movs	r7, #0
    	modalWindow1.hide();
 8006160:	f008 fb03 	bl	800e76a <_ZN8touchgfx11ModalWindow4hideEv>
    if (value>=70)
 8006164:	2d45      	cmp	r5, #69	; 0x45
    	check=0;
 8006166:	6037      	str	r7, [r6, #0]
    if (value>=70)
 8006168:	d8e4      	bhi.n	8006134 <_ZN11Screen1View11updateGuageEt+0x70>
    	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
 800616a:	463a      	mov	r2, r7
 800616c:	2108      	movs	r1, #8
 800616e:	4805      	ldr	r0, [pc, #20]	; (8006184 <_ZN11Screen1View11updateGuageEt+0xc0>)
 8006170:	f001 feba 	bl	8007ee8 <HAL_GPIO_WritePin>
 8006174:	f8ad 7004 	strh.w	r7, [sp, #4]
 8006178:	e7e4      	b.n	8006144 <_ZN11Screen1View11updateGuageEt+0x80>
 800617a:	bf00      	nop
 800617c:	08029158 	.word	0x08029158
 8006180:	2004c9d0 	.word	0x2004c9d0
 8006184:	40022400 	.word	0x40022400

08006188 <_ZN13ModelListener11updateGuageEt>:
    }
    virtual void updateGuage(uint16_t value){}
 8006188:	4770      	bx	lr

0800618a <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800618a:	4770      	bx	lr

0800618c <_ZThn4_N16Screen2PresenterD1Ev>:
 800618c:	3804      	subs	r0, #4
 800618e:	4770      	bx	lr

08006190 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8006190:	4770      	bx	lr

08006192 <_ZN16Screen2PresenterD0Ev>:
 8006192:	b510      	push	{r4, lr}
 8006194:	4604      	mov	r4, r0
 8006196:	2110      	movs	r1, #16
 8006198:	f01e ff33 	bl	8025002 <_ZdlPvj>
 800619c:	4620      	mov	r0, r4
 800619e:	bd10      	pop	{r4, pc}

080061a0 <_ZThn4_N16Screen2PresenterD0Ev>:
 80061a0:	f1a0 0004 	sub.w	r0, r0, #4
 80061a4:	e7f5      	b.n	8006192 <_ZN16Screen2PresenterD0Ev>
	...

080061a8 <_ZN16Screen2PresenterC1ER11Screen2View>:
    ModelListener() : model(0) {}
 80061a8:	2200      	movs	r2, #0
    : view(v)
 80061aa:	60c1      	str	r1, [r0, #12]
 80061ac:	6082      	str	r2, [r0, #8]
 80061ae:	4a04      	ldr	r2, [pc, #16]	; (80061c0 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 80061b0:	b510      	push	{r4, lr}
    : view(v)
 80061b2:	f102 0408 	add.w	r4, r2, #8
 80061b6:	3220      	adds	r2, #32
 80061b8:	6004      	str	r4, [r0, #0]
 80061ba:	6042      	str	r2, [r0, #4]
}
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	bf00      	nop
 80061c0:	08029194 	.word	0x08029194

080061c4 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80061c4:	4770      	bx	lr

080061c6 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 80061c6:	4770      	bx	lr

080061c8 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 80061c8:	f7ff bc59 	b.w	8005a7e <_ZN15Screen2ViewBase11setupScreenEv>

080061cc <_ZN11Screen2ViewD0Ev>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	4604      	mov	r4, r0
 80061d0:	21c8      	movs	r1, #200	; 0xc8
 80061d2:	f01e ff16 	bl	8025002 <_ZdlPvj>
 80061d6:	4620      	mov	r0, r4
 80061d8:	bd10      	pop	{r4, pc}
	...

080061dc <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80061dc:	b510      	push	{r4, lr}
 80061de:	4604      	mov	r4, r0
 80061e0:	f7ff fc8e 	bl	8005b00 <_ZN15Screen2ViewBaseC1Ev>
 80061e4:	4b01      	ldr	r3, [pc, #4]	; (80061ec <_ZN11Screen2ViewC1Ev+0x10>)
}
 80061e6:	4620      	mov	r0, r4
Screen2View::Screen2View()
 80061e8:	6023      	str	r3, [r4, #0]
}
 80061ea:	bd10      	pop	{r4, pc}
 80061ec:	080291c8 	.word	0x080291c8

080061f0 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80061f0:	4770      	bx	lr

080061f2 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80061f2:	2000      	movs	r0, #0
 80061f4:	4770      	bx	lr

080061f6 <ft6x06_ReadID>:
{
 80061f6:	b510      	push	{r4, lr}
 80061f8:	4604      	mov	r4, r0
  TS_IO_Init();
 80061fa:	f7fa fc98 	bl	8000b2e <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80061fe:	21a8      	movs	r1, #168	; 0xa8
 8006200:	b2e0      	uxtb	r0, r4
 8006202:	f7fa fcb1 	bl	8000b68 <TS_IO_Read>
}
 8006206:	b280      	uxth	r0, r0
 8006208:	bd10      	pop	{r4, pc}
	...

0800620c <ft6x06_TS_DetectTouch>:
{
 800620c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800620e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8006210:	2102      	movs	r1, #2
 8006212:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8006214:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8006218:	f7fa fca6 	bl	8000b68 <TS_IO_Read>
 800621c:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8006220:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800622c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8006234:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8006238:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800623c:	4b03      	ldr	r3, [pc, #12]	; (800624c <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 800623e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8006242:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8006244:	2200      	movs	r2, #0
 8006246:	709a      	strb	r2, [r3, #2]
}
 8006248:	b002      	add	sp, #8
 800624a:	bd10      	pop	{r4, pc}
 800624c:	2004c9da 	.word	0x2004c9da

08006250 <ft6x06_TS_GetXY>:
{
 8006250:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8006252:	4c15      	ldr	r4, [pc, #84]	; (80062a8 <ft6x06_TS_GetXY+0x58>)
{
 8006254:	4615      	mov	r5, r2
 8006256:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8006258:	78a3      	ldrb	r3, [r4, #2]
 800625a:	7862      	ldrb	r2, [r4, #1]
 800625c:	429a      	cmp	r2, r3
 800625e:	d91f      	bls.n	80062a0 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8006260:	b303      	cbz	r3, 80062a4 <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 8006262:	2b01      	cmp	r3, #1
 8006264:	bf14      	ite	ne
 8006266:	2100      	movne	r1, #0
 8006268:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800626a:	2304      	movs	r3, #4
 800626c:	b2c0      	uxtb	r0, r0
 800626e:	eb0d 0203 	add.w	r2, sp, r3
 8006272:	f7fa fc97 	bl	8000ba4 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8006276:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800627a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006284:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8006286:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800628a:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800628c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006296:	4313      	orrs	r3, r2
 8006298:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 800629a:	78a3      	ldrb	r3, [r4, #2]
 800629c:	3301      	adds	r3, #1
 800629e:	70a3      	strb	r3, [r4, #2]
}
 80062a0:	b002      	add	sp, #8
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 80062a4:	2103      	movs	r1, #3
 80062a6:	e7e0      	b.n	800626a <ft6x06_TS_GetXY+0x1a>
 80062a8:	2004c9da 	.word	0x2004c9da

080062ac <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80062ac:	2201      	movs	r2, #1
 80062ae:	21a4      	movs	r1, #164	; 0xa4
 80062b0:	b2c0      	uxtb	r0, r0
 80062b2:	f7fa bc3d 	b.w	8000b30 <TS_IO_Write>

080062b6 <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80062b6:	2200      	movs	r2, #0
 80062b8:	21a4      	movs	r1, #164	; 0xa4
 80062ba:	b2c0      	uxtb	r0, r0
 80062bc:	f7fa bc38 	b.w	8000b30 <TS_IO_Write>

080062c0 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 80062c0:	f7ff bff9 	b.w	80062b6 <ft6x06_TS_DisableIT>

080062c4 <ft6x06_TS_ClearIT>:
 80062c4:	4770      	bx	lr
	...

080062c8 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <ft6x06_Init+0x28>)
{  
 80062ca:	b410      	push	{r4}
    if(ft6x06[idx] == DeviceAddr)
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	4290      	cmp	r0, r2
 80062d0:	d00a      	beq.n	80062e8 <ft6x06_Init+0x20>
 80062d2:	7859      	ldrb	r1, [r3, #1]
 80062d4:	4288      	cmp	r0, r1
 80062d6:	d007      	beq.n	80062e8 <ft6x06_Init+0x20>
 80062d8:	b10a      	cbz	r2, 80062de <ft6x06_Init+0x16>
 80062da:	b929      	cbnz	r1, 80062e8 <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80062dc:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 80062de:	5498      	strb	r0, [r3, r2]
}
 80062e0:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 80062e4:	f7fa bc23 	b.w	8000b2e <TS_IO_Init>
}
 80062e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	2004c9d8 	.word	0x2004c9d8

080062f4 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4604      	mov	r4, r0
 80062f8:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80062fa:	2000      	movs	r0, #0
 80062fc:	49cb      	ldr	r1, [pc, #812]	; (800662c <OTM8009A_Init+0x338>)
 80062fe:	f7fa ff5b 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8006302:	49cb      	ldr	r1, [pc, #812]	; (8006630 <OTM8009A_Init+0x33c>)
 8006304:	2003      	movs	r0, #3
 8006306:	f7fa ff57 	bl	80011b8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800630a:	49ca      	ldr	r1, [pc, #808]	; (8006634 <OTM8009A_Init+0x340>)
 800630c:	2000      	movs	r0, #0
 800630e:	f7fa ff53 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8006312:	49c9      	ldr	r1, [pc, #804]	; (8006638 <OTM8009A_Init+0x344>)
 8006314:	2002      	movs	r0, #2
 8006316:	f7fa ff4f 	bl	80011b8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800631a:	49c6      	ldr	r1, [pc, #792]	; (8006634 <OTM8009A_Init+0x340>)
 800631c:	2000      	movs	r0, #0
 800631e:	f7fa ff4b 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8006322:	49c6      	ldr	r1, [pc, #792]	; (800663c <OTM8009A_Init+0x348>)
 8006324:	2000      	movs	r0, #0
 8006326:	f7fa ff47 	bl	80011b8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800632a:	200a      	movs	r0, #10
 800632c:	f7fa ff42 	bl	80011b4 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8006330:	49c3      	ldr	r1, [pc, #780]	; (8006640 <OTM8009A_Init+0x34c>)
 8006332:	2000      	movs	r0, #0
 8006334:	f7fa ff40 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8006338:	49c2      	ldr	r1, [pc, #776]	; (8006644 <OTM8009A_Init+0x350>)
 800633a:	2000      	movs	r0, #0
 800633c:	f7fa ff3c 	bl	80011b8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8006340:	200a      	movs	r0, #10
 8006342:	f7fa ff37 	bl	80011b4 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8006346:	49c0      	ldr	r1, [pc, #768]	; (8006648 <OTM8009A_Init+0x354>)
 8006348:	2000      	movs	r0, #0
 800634a:	f7fa ff35 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800634e:	49bf      	ldr	r1, [pc, #764]	; (800664c <OTM8009A_Init+0x358>)
 8006350:	2000      	movs	r0, #0
 8006352:	f7fa ff31 	bl	80011b8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8006356:	49be      	ldr	r1, [pc, #760]	; (8006650 <OTM8009A_Init+0x35c>)
 8006358:	2000      	movs	r0, #0
 800635a:	f7fa ff2d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800635e:	49bd      	ldr	r1, [pc, #756]	; (8006654 <OTM8009A_Init+0x360>)
 8006360:	2000      	movs	r0, #0
 8006362:	f7fa ff29 	bl	80011b8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8006366:	49bc      	ldr	r1, [pc, #752]	; (8006658 <OTM8009A_Init+0x364>)
 8006368:	2000      	movs	r0, #0
 800636a:	f7fa ff25 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800636e:	49bb      	ldr	r1, [pc, #748]	; (800665c <OTM8009A_Init+0x368>)
 8006370:	2000      	movs	r0, #0
 8006372:	f7fa ff21 	bl	80011b8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8006376:	49ad      	ldr	r1, [pc, #692]	; (800662c <OTM8009A_Init+0x338>)
 8006378:	2000      	movs	r0, #0
 800637a:	f7fa ff1d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800637e:	49b8      	ldr	r1, [pc, #736]	; (8006660 <OTM8009A_Init+0x36c>)
 8006380:	2000      	movs	r0, #0
 8006382:	f7fa ff19 	bl	80011b8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8006386:	49b7      	ldr	r1, [pc, #732]	; (8006664 <OTM8009A_Init+0x370>)
 8006388:	2000      	movs	r0, #0
 800638a:	f7fa ff15 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800638e:	49b6      	ldr	r1, [pc, #728]	; (8006668 <OTM8009A_Init+0x374>)
 8006390:	2000      	movs	r0, #0
 8006392:	f7fa ff11 	bl	80011b8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8006396:	49b5      	ldr	r1, [pc, #724]	; (800666c <OTM8009A_Init+0x378>)
 8006398:	2000      	movs	r0, #0
 800639a:	f7fa ff0d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800639e:	49b4      	ldr	r1, [pc, #720]	; (8006670 <OTM8009A_Init+0x37c>)
 80063a0:	2000      	movs	r0, #0
 80063a2:	f7fa ff09 	bl	80011b8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80063a6:	49b3      	ldr	r1, [pc, #716]	; (8006674 <OTM8009A_Init+0x380>)
 80063a8:	2000      	movs	r0, #0
 80063aa:	f7fa ff05 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80063ae:	49b2      	ldr	r1, [pc, #712]	; (8006678 <OTM8009A_Init+0x384>)
 80063b0:	2000      	movs	r0, #0
 80063b2:	f7fa ff01 	bl	80011b8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80063b6:	49b1      	ldr	r1, [pc, #708]	; (800667c <OTM8009A_Init+0x388>)
 80063b8:	2000      	movs	r0, #0
 80063ba:	f7fa fefd 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80063be:	49a5      	ldr	r1, [pc, #660]	; (8006654 <OTM8009A_Init+0x360>)
 80063c0:	2000      	movs	r0, #0
 80063c2:	f7fa fef9 	bl	80011b8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80063c6:	4999      	ldr	r1, [pc, #612]	; (800662c <OTM8009A_Init+0x338>)
 80063c8:	2000      	movs	r0, #0
 80063ca:	f7fa fef5 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80063ce:	49ac      	ldr	r1, [pc, #688]	; (8006680 <OTM8009A_Init+0x38c>)
 80063d0:	2002      	movs	r0, #2
 80063d2:	f7fa fef1 	bl	80011b8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80063d6:	49ab      	ldr	r1, [pc, #684]	; (8006684 <OTM8009A_Init+0x390>)
 80063d8:	2000      	movs	r0, #0
 80063da:	f7fa feed 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80063de:	49aa      	ldr	r1, [pc, #680]	; (8006688 <OTM8009A_Init+0x394>)
 80063e0:	2000      	movs	r0, #0
 80063e2:	f7fa fee9 	bl	80011b8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80063e6:	49a9      	ldr	r1, [pc, #676]	; (800668c <OTM8009A_Init+0x398>)
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7fa fee5 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80063ee:	49a8      	ldr	r1, [pc, #672]	; (8006690 <OTM8009A_Init+0x39c>)
 80063f0:	2000      	movs	r0, #0
 80063f2:	f7fa fee1 	bl	80011b8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80063f6:	49a7      	ldr	r1, [pc, #668]	; (8006694 <OTM8009A_Init+0x3a0>)
 80063f8:	2000      	movs	r0, #0
 80063fa:	f7fa fedd 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80063fe:	49a6      	ldr	r1, [pc, #664]	; (8006698 <OTM8009A_Init+0x3a4>)
 8006400:	2000      	movs	r0, #0
 8006402:	f7fa fed9 	bl	80011b8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8006406:	4997      	ldr	r1, [pc, #604]	; (8006664 <OTM8009A_Init+0x370>)
 8006408:	2000      	movs	r0, #0
 800640a:	f7fa fed5 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800640e:	49a3      	ldr	r1, [pc, #652]	; (800669c <OTM8009A_Init+0x3a8>)
 8006410:	2000      	movs	r0, #0
 8006412:	f7fa fed1 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8006416:	4995      	ldr	r1, [pc, #596]	; (800666c <OTM8009A_Init+0x378>)
 8006418:	2000      	movs	r0, #0
 800641a:	f7fa fecd 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800641e:	49a0      	ldr	r1, [pc, #640]	; (80066a0 <OTM8009A_Init+0x3ac>)
 8006420:	2000      	movs	r0, #0
 8006422:	f7fa fec9 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8006426:	499f      	ldr	r1, [pc, #636]	; (80066a4 <OTM8009A_Init+0x3b0>)
 8006428:	2000      	movs	r0, #0
 800642a:	f7fa fec5 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800642e:	499e      	ldr	r1, [pc, #632]	; (80066a8 <OTM8009A_Init+0x3b4>)
 8006430:	2002      	movs	r0, #2
 8006432:	f7fa fec1 	bl	80011b8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8006436:	497f      	ldr	r1, [pc, #508]	; (8006634 <OTM8009A_Init+0x340>)
 8006438:	2000      	movs	r0, #0
 800643a:	f7fa febd 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800643e:	499b      	ldr	r1, [pc, #620]	; (80066ac <OTM8009A_Init+0x3b8>)
 8006440:	2006      	movs	r0, #6
 8006442:	f7fa feb9 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8006446:	499a      	ldr	r1, [pc, #616]	; (80066b0 <OTM8009A_Init+0x3bc>)
 8006448:	2000      	movs	r0, #0
 800644a:	f7fa feb5 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800644e:	4999      	ldr	r1, [pc, #612]	; (80066b4 <OTM8009A_Init+0x3c0>)
 8006450:	200e      	movs	r0, #14
 8006452:	f7fa feb1 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8006456:	4998      	ldr	r1, [pc, #608]	; (80066b8 <OTM8009A_Init+0x3c4>)
 8006458:	2000      	movs	r0, #0
 800645a:	f7fa fead 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800645e:	4997      	ldr	r1, [pc, #604]	; (80066bc <OTM8009A_Init+0x3c8>)
 8006460:	200e      	movs	r0, #14
 8006462:	f7fa fea9 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8006466:	4996      	ldr	r1, [pc, #600]	; (80066c0 <OTM8009A_Init+0x3cc>)
 8006468:	2000      	movs	r0, #0
 800646a:	f7fa fea5 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800646e:	4995      	ldr	r1, [pc, #596]	; (80066c4 <OTM8009A_Init+0x3d0>)
 8006470:	200a      	movs	r0, #10
 8006472:	f7fa fea1 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8006476:	4994      	ldr	r1, [pc, #592]	; (80066c8 <OTM8009A_Init+0x3d4>)
 8006478:	2000      	movs	r0, #0
 800647a:	f7fa fe9d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800647e:	4993      	ldr	r1, [pc, #588]	; (80066cc <OTM8009A_Init+0x3d8>)
 8006480:	2000      	movs	r0, #0
 8006482:	f7fa fe99 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8006486:	496b      	ldr	r1, [pc, #428]	; (8006634 <OTM8009A_Init+0x340>)
 8006488:	2000      	movs	r0, #0
 800648a:	f7fa fe95 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800648e:	4990      	ldr	r1, [pc, #576]	; (80066d0 <OTM8009A_Init+0x3dc>)
 8006490:	200a      	movs	r0, #10
 8006492:	f7fa fe91 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8006496:	498f      	ldr	r1, [pc, #572]	; (80066d4 <OTM8009A_Init+0x3e0>)
 8006498:	2000      	movs	r0, #0
 800649a:	f7fa fe8d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800649e:	498e      	ldr	r1, [pc, #568]	; (80066d8 <OTM8009A_Init+0x3e4>)
 80064a0:	200f      	movs	r0, #15
 80064a2:	f7fa fe89 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80064a6:	4982      	ldr	r1, [pc, #520]	; (80066b0 <OTM8009A_Init+0x3bc>)
 80064a8:	2000      	movs	r0, #0
 80064aa:	f7fa fe85 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80064ae:	498b      	ldr	r1, [pc, #556]	; (80066dc <OTM8009A_Init+0x3e8>)
 80064b0:	200f      	movs	r0, #15
 80064b2:	f7fa fe81 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80064b6:	4980      	ldr	r1, [pc, #512]	; (80066b8 <OTM8009A_Init+0x3c4>)
 80064b8:	2000      	movs	r0, #0
 80064ba:	f7fa fe7d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80064be:	4988      	ldr	r1, [pc, #544]	; (80066e0 <OTM8009A_Init+0x3ec>)
 80064c0:	200a      	movs	r0, #10
 80064c2:	f7fa fe79 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80064c6:	497e      	ldr	r1, [pc, #504]	; (80066c0 <OTM8009A_Init+0x3cc>)
 80064c8:	2000      	movs	r0, #0
 80064ca:	f7fa fe75 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80064ce:	4985      	ldr	r1, [pc, #532]	; (80066e4 <OTM8009A_Init+0x3f0>)
 80064d0:	200f      	movs	r0, #15
 80064d2:	f7fa fe71 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80064d6:	497c      	ldr	r1, [pc, #496]	; (80066c8 <OTM8009A_Init+0x3d4>)
 80064d8:	2000      	movs	r0, #0
 80064da:	f7fa fe6d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80064de:	4982      	ldr	r1, [pc, #520]	; (80066e8 <OTM8009A_Init+0x3f4>)
 80064e0:	200f      	movs	r0, #15
 80064e2:	f7fa fe69 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80064e6:	4981      	ldr	r1, [pc, #516]	; (80066ec <OTM8009A_Init+0x3f8>)
 80064e8:	2000      	movs	r0, #0
 80064ea:	f7fa fe65 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80064ee:	4980      	ldr	r1, [pc, #512]	; (80066f0 <OTM8009A_Init+0x3fc>)
 80064f0:	200a      	movs	r0, #10
 80064f2:	f7fa fe61 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80064f6:	497f      	ldr	r1, [pc, #508]	; (80066f4 <OTM8009A_Init+0x400>)
 80064f8:	2000      	movs	r0, #0
 80064fa:	f7fa fe5d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80064fe:	497e      	ldr	r1, [pc, #504]	; (80066f8 <OTM8009A_Init+0x404>)
 8006500:	200a      	movs	r0, #10
 8006502:	f7fa fe59 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8006506:	494b      	ldr	r1, [pc, #300]	; (8006634 <OTM8009A_Init+0x340>)
 8006508:	2000      	movs	r0, #0
 800650a:	f7fa fe55 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800650e:	497b      	ldr	r1, [pc, #492]	; (80066fc <OTM8009A_Init+0x408>)
 8006510:	200a      	movs	r0, #10
 8006512:	f7fa fe51 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8006516:	496f      	ldr	r1, [pc, #444]	; (80066d4 <OTM8009A_Init+0x3e0>)
 8006518:	2000      	movs	r0, #0
 800651a:	f7fa fe4d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800651e:	4978      	ldr	r1, [pc, #480]	; (8006700 <OTM8009A_Init+0x40c>)
 8006520:	200f      	movs	r0, #15
 8006522:	f7fa fe49 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8006526:	4962      	ldr	r1, [pc, #392]	; (80066b0 <OTM8009A_Init+0x3bc>)
 8006528:	2000      	movs	r0, #0
 800652a:	f7fa fe45 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800652e:	4975      	ldr	r1, [pc, #468]	; (8006704 <OTM8009A_Init+0x410>)
 8006530:	200f      	movs	r0, #15
 8006532:	f7fa fe41 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8006536:	4960      	ldr	r1, [pc, #384]	; (80066b8 <OTM8009A_Init+0x3c4>)
 8006538:	2000      	movs	r0, #0
 800653a:	f7fa fe3d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800653e:	4972      	ldr	r1, [pc, #456]	; (8006708 <OTM8009A_Init+0x414>)
 8006540:	200a      	movs	r0, #10
 8006542:	f7fa fe39 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8006546:	495e      	ldr	r1, [pc, #376]	; (80066c0 <OTM8009A_Init+0x3cc>)
 8006548:	2000      	movs	r0, #0
 800654a:	f7fa fe35 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800654e:	496f      	ldr	r1, [pc, #444]	; (800670c <OTM8009A_Init+0x418>)
 8006550:	200f      	movs	r0, #15
 8006552:	f7fa fe31 	bl	80011b8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8006556:	495c      	ldr	r1, [pc, #368]	; (80066c8 <OTM8009A_Init+0x3d4>)
 8006558:	2000      	movs	r0, #0
 800655a:	f7fa fe2d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800655e:	496c      	ldr	r1, [pc, #432]	; (8006710 <OTM8009A_Init+0x41c>)
 8006560:	200f      	movs	r0, #15
 8006562:	f7fa fe29 	bl	80011b8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8006566:	493f      	ldr	r1, [pc, #252]	; (8006664 <OTM8009A_Init+0x370>)
 8006568:	2000      	movs	r0, #0
 800656a:	f7fa fe25 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800656e:	4969      	ldr	r1, [pc, #420]	; (8006714 <OTM8009A_Init+0x420>)
 8006570:	2000      	movs	r0, #0
 8006572:	f7fa fe21 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8006576:	4968      	ldr	r1, [pc, #416]	; (8006718 <OTM8009A_Init+0x424>)
 8006578:	2000      	movs	r0, #0
 800657a:	f7fa fe1d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800657e:	4967      	ldr	r1, [pc, #412]	; (800671c <OTM8009A_Init+0x428>)
 8006580:	2000      	movs	r0, #0
 8006582:	f7fa fe19 	bl	80011b8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8006586:	4966      	ldr	r1, [pc, #408]	; (8006720 <OTM8009A_Init+0x42c>)
 8006588:	2000      	movs	r0, #0
 800658a:	f7fa fe15 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800658e:	4965      	ldr	r1, [pc, #404]	; (8006724 <OTM8009A_Init+0x430>)
 8006590:	2000      	movs	r0, #0
 8006592:	f7fa fe11 	bl	80011b8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8006596:	4925      	ldr	r1, [pc, #148]	; (800662c <OTM8009A_Init+0x338>)
 8006598:	2000      	movs	r0, #0
 800659a:	f7fa fe0d 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800659e:	4962      	ldr	r1, [pc, #392]	; (8006728 <OTM8009A_Init+0x434>)
 80065a0:	2003      	movs	r0, #3
 80065a2:	f7fa fe09 	bl	80011b8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80065a6:	4921      	ldr	r1, [pc, #132]	; (800662c <OTM8009A_Init+0x338>)
 80065a8:	2000      	movs	r0, #0
 80065aa:	f7fa fe05 	bl	80011b8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80065ae:	491f      	ldr	r1, [pc, #124]	; (800662c <OTM8009A_Init+0x338>)
 80065b0:	2000      	movs	r0, #0
 80065b2:	f7fa fe01 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80065b6:	495d      	ldr	r1, [pc, #372]	; (800672c <OTM8009A_Init+0x438>)
 80065b8:	2010      	movs	r0, #16
 80065ba:	f7fa fdfd 	bl	80011b8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80065be:	491b      	ldr	r1, [pc, #108]	; (800662c <OTM8009A_Init+0x338>)
 80065c0:	2000      	movs	r0, #0
 80065c2:	f7fa fdf9 	bl	80011b8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80065c6:	495a      	ldr	r1, [pc, #360]	; (8006730 <OTM8009A_Init+0x43c>)
 80065c8:	2010      	movs	r0, #16
 80065ca:	f7fa fdf5 	bl	80011b8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80065ce:	2000      	movs	r0, #0
 80065d0:	4958      	ldr	r1, [pc, #352]	; (8006734 <OTM8009A_Init+0x440>)
 80065d2:	f7fa fdf1 	bl	80011b8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80065d6:	2078      	movs	r0, #120	; 0x78
 80065d8:	f7fa fdec 	bl	80011b4 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80065dc:	2c00      	cmp	r4, #0
 80065de:	f000 80c9 	beq.w	8006774 <OTM8009A_Init+0x480>
 80065e2:	2c02      	cmp	r4, #2
 80065e4:	d103      	bne.n	80065ee <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80065e6:	4954      	ldr	r1, [pc, #336]	; (8006738 <OTM8009A_Init+0x444>)
 80065e8:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80065ea:	f7fa fde5 	bl	80011b8 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80065ee:	2d01      	cmp	r5, #1
 80065f0:	d10b      	bne.n	800660a <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80065f2:	4952      	ldr	r1, [pc, #328]	; (800673c <OTM8009A_Init+0x448>)
 80065f4:	2000      	movs	r0, #0
 80065f6:	f7fa fddf 	bl	80011b8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80065fa:	4951      	ldr	r1, [pc, #324]	; (8006740 <OTM8009A_Init+0x44c>)
 80065fc:	2004      	movs	r0, #4
 80065fe:	f7fa fddb 	bl	80011b8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8006602:	4950      	ldr	r1, [pc, #320]	; (8006744 <OTM8009A_Init+0x450>)
 8006604:	2004      	movs	r0, #4
 8006606:	f7fa fdd7 	bl	80011b8 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800660a:	494f      	ldr	r1, [pc, #316]	; (8006748 <OTM8009A_Init+0x454>)
 800660c:	2000      	movs	r0, #0
 800660e:	f7fa fdd3 	bl	80011b8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8006612:	494e      	ldr	r1, [pc, #312]	; (800674c <OTM8009A_Init+0x458>)
 8006614:	2000      	movs	r0, #0
 8006616:	f7fa fdcf 	bl	80011b8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800661a:	494d      	ldr	r1, [pc, #308]	; (8006750 <OTM8009A_Init+0x45c>)
 800661c:	2000      	movs	r0, #0
 800661e:	f7fa fdcb 	bl	80011b8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8006622:	494c      	ldr	r1, [pc, #304]	; (8006754 <OTM8009A_Init+0x460>)
 8006624:	2000      	movs	r0, #0
 8006626:	f7fa fdc7 	bl	80011b8 <DSI_IO_WriteCmd>
 800662a:	e095      	b.n	8006758 <OTM8009A_Init+0x464>
 800662c:	080291f4 	.word	0x080291f4
 8006630:	0802925a 	.word	0x0802925a
 8006634:	0802920a 	.word	0x0802920a
 8006638:	080292e0 	.word	0x080292e0
 800663c:	08029220 	.word	0x08029220
 8006640:	08029236 	.word	0x08029236
 8006644:	0802924c 	.word	0x0802924c
 8006648:	08029252 	.word	0x08029252
 800664c:	08029254 	.word	0x08029254
 8006650:	08029256 	.word	0x08029256
 8006654:	08029258 	.word	0x08029258
 8006658:	080291f6 	.word	0x080291f6
 800665c:	080291f8 	.word	0x080291f8
 8006660:	080291fa 	.word	0x080291fa
 8006664:	080291fc 	.word	0x080291fc
 8006668:	080291fe 	.word	0x080291fe
 800666c:	08029200 	.word	0x08029200
 8006670:	08029202 	.word	0x08029202
 8006674:	08029204 	.word	0x08029204
 8006678:	08029206 	.word	0x08029206
 800667c:	08029208 	.word	0x08029208
 8006680:	0802935e 	.word	0x0802935e
 8006684:	0802920c 	.word	0x0802920c
 8006688:	0802920e 	.word	0x0802920e
 800668c:	08029210 	.word	0x08029210
 8006690:	08029212 	.word	0x08029212
 8006694:	08029214 	.word	0x08029214
 8006698:	08029216 	.word	0x08029216
 800669c:	08029218 	.word	0x08029218
 80066a0:	0802921a 	.word	0x0802921a
 80066a4:	0802921c 	.word	0x0802921c
 80066a8:	08029361 	.word	0x08029361
 80066ac:	08029364 	.word	0x08029364
 80066b0:	0802921e 	.word	0x0802921e
 80066b4:	0802936b 	.word	0x0802936b
 80066b8:	08029222 	.word	0x08029222
 80066bc:	0802937a 	.word	0x0802937a
 80066c0:	08029224 	.word	0x08029224
 80066c4:	0802925e 	.word	0x0802925e
 80066c8:	08029226 	.word	0x08029226
 80066cc:	08029244 	.word	0x08029244
 80066d0:	08029269 	.word	0x08029269
 80066d4:	08029228 	.word	0x08029228
 80066d8:	08029274 	.word	0x08029274
 80066dc:	08029284 	.word	0x08029284
 80066e0:	08029294 	.word	0x08029294
 80066e4:	0802929f 	.word	0x0802929f
 80066e8:	080292af 	.word	0x080292af
 80066ec:	0802922a 	.word	0x0802922a
 80066f0:	080292bf 	.word	0x080292bf
 80066f4:	0802922c 	.word	0x0802922c
 80066f8:	080292ca 	.word	0x080292ca
 80066fc:	080292d5 	.word	0x080292d5
 8006700:	080292e3 	.word	0x080292e3
 8006704:	080292f3 	.word	0x080292f3
 8006708:	08029303 	.word	0x08029303
 800670c:	0802930e 	.word	0x0802930e
 8006710:	0802931e 	.word	0x0802931e
 8006714:	08029246 	.word	0x08029246
 8006718:	08029248 	.word	0x08029248
 800671c:	0802924a 	.word	0x0802924a
 8006720:	0802924e 	.word	0x0802924e
 8006724:	08029250 	.word	0x08029250
 8006728:	0802932e 	.word	0x0802932e
 800672c:	0802933c 	.word	0x0802933c
 8006730:	0802934d 	.word	0x0802934d
 8006734:	0802922e 	.word	0x0802922e
 8006738:	08029230 	.word	0x08029230
 800673c:	08029234 	.word	0x08029234
 8006740:	08029332 	.word	0x08029332
 8006744:	08029337 	.word	0x08029337
 8006748:	08029238 	.word	0x08029238
 800674c:	0802923a 	.word	0x0802923a
 8006750:	0802923c 	.word	0x0802923c
 8006754:	0802923e 	.word	0x0802923e

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8006758:	4908      	ldr	r1, [pc, #32]	; (800677c <OTM8009A_Init+0x488>)
 800675a:	2000      	movs	r0, #0
 800675c:	f7fa fd2c 	bl	80011b8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8006760:	4907      	ldr	r1, [pc, #28]	; (8006780 <OTM8009A_Init+0x48c>)
 8006762:	2000      	movs	r0, #0
 8006764:	f7fa fd28 	bl	80011b8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8006768:	4906      	ldr	r1, [pc, #24]	; (8006784 <OTM8009A_Init+0x490>)
 800676a:	2000      	movs	r0, #0
 800676c:	f7fa fd24 	bl	80011b8 <DSI_IO_WriteCmd>

  return 0;
}
 8006770:	2000      	movs	r0, #0
 8006772:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8006774:	4904      	ldr	r1, [pc, #16]	; (8006788 <OTM8009A_Init+0x494>)
 8006776:	4620      	mov	r0, r4
 8006778:	e737      	b.n	80065ea <OTM8009A_Init+0x2f6>
 800677a:	bf00      	nop
 800677c:	08029240 	.word	0x08029240
 8006780:	080291f4 	.word	0x080291f4
 8006784:	08029242 	.word	0x08029242
 8006788:	08029232 	.word	0x08029232

0800678c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800678c:	490f      	ldr	r1, [pc, #60]	; (80067cc <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800678e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006790:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <SystemInit+0x44>)
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80067a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80067ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80067b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80067b4:	4a07      	ldr	r2, [pc, #28]	; (80067d4 <SystemInit+0x48>)
 80067b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067be:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80067c0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80067c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067c6:	608b      	str	r3, [r1, #8]
#endif
}
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	e000ed00 	.word	0xe000ed00
 80067d0:	40023800 	.word	0x40023800
 80067d4:	24003010 	.word	0x24003010

080067d8 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067d8:	4a07      	ldr	r2, [pc, #28]	; (80067f8 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067da:	2003      	movs	r0, #3
{
 80067dc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067de:	6813      	ldr	r3, [r2, #0]
 80067e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067e6:	f000 fa63 	bl	8006cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067ea:	2000      	movs	r0, #0
 80067ec:	f7fd fe82 	bl	80044f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067f0:	f7fd fb52 	bl	8003e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80067f4:	2000      	movs	r0, #0
 80067f6:	bd08      	pop	{r3, pc}
 80067f8:	40023c00 	.word	0x40023c00

080067fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80067fc:	4a03      	ldr	r2, [pc, #12]	; (800680c <HAL_IncTick+0x10>)
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <HAL_IncTick+0x14>)
 8006800:	6811      	ldr	r1, [r2, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	440b      	add	r3, r1
 8006806:	6013      	str	r3, [r2, #0]
}
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20061360 	.word	0x20061360
 8006810:	20000064 	.word	0x20000064

08006814 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006814:	4b01      	ldr	r3, [pc, #4]	; (800681c <HAL_GetTick+0x8>)
 8006816:	6818      	ldr	r0, [r3, #0]
}
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20061360 	.word	0x20061360

08006820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006824:	f7ff fff6 	bl	8006814 <HAL_GetTick>
 8006828:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800682a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800682c:	bf1e      	ittt	ne
 800682e:	4b04      	ldrne	r3, [pc, #16]	; (8006840 <HAL_Delay+0x20>)
 8006830:	781b      	ldrbne	r3, [r3, #0]
 8006832:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006834:	f7ff ffee 	bl	8006814 <HAL_GetTick>
 8006838:	1b43      	subs	r3, r0, r5
 800683a:	42a3      	cmp	r3, r4
 800683c:	d3fa      	bcc.n	8006834 <HAL_Delay+0x14>
  {
  }
}
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20000064 	.word	0x20000064

08006844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006844:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006846:	4604      	mov	r4, r0
 8006848:	2800      	cmp	r0, #0
 800684a:	f000 809b 	beq.w	8006984 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800684e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006850:	b925      	cbnz	r5, 800685c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006852:	f7fd fb3f 	bl	8003ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006856:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006858:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800685c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800685e:	06db      	lsls	r3, r3, #27
 8006860:	f100 808e 	bmi.w	8006980 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006866:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800686a:	f023 0302 	bic.w	r3, r3, #2
 800686e:	f043 0302 	orr.w	r3, r3, #2
 8006872:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006874:	4b44      	ldr	r3, [pc, #272]	; (8006988 <HAL_ADC_Init+0x144>)
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800687c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	6861      	ldr	r1, [r4, #4]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006886:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006888:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006898:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800689a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80068a2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068a8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80068aa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068b8:	4934      	ldr	r1, [pc, #208]	; (800698c <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068ba:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80068be:	428a      	cmp	r2, r1
 80068c0:	d052      	beq.n	8006968 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068c2:	6899      	ldr	r1, [r3, #8]
 80068c4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80068c8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80068ca:	6899      	ldr	r1, [r3, #8]
 80068cc:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80068ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80068d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068de:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80068e0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80068e2:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80068e4:	f022 0202 	bic.w	r2, r2, #2
 80068e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80068f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80068f2:	f894 2020 	ldrb.w	r2, [r4, #32]
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d03e      	beq.n	8006978 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80068fa:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80068fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80068fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006902:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006904:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800690c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006914:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8006916:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800691a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800691c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006920:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006926:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800692a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800693a:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800693e:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8006950:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8006952:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8006954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006956:	f023 0303 	bic.w	r3, r3, #3
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8006960:	2300      	movs	r3, #0
 8006962:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006966:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800696e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006976:	e7b2      	b.n	80068de <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800697e:	e7c9      	b.n	8006914 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8006980:	2001      	movs	r0, #1
 8006982:	e7ed      	b.n	8006960 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8006984:	2001      	movs	r0, #1
 8006986:	e7ee      	b.n	8006966 <HAL_ADC_Init+0x122>
 8006988:	40012300 	.word	0x40012300
 800698c:	0f000001 	.word	0x0f000001

08006990 <HAL_ADC_Start_DMA>:
{
 8006990:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 8006992:	2200      	movs	r2, #0
{
 8006994:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 8006996:	9201      	str	r2, [sp, #4]
{
 8006998:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 800699a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800699e:	2a01      	cmp	r2, #1
 80069a0:	d07d      	beq.n	8006a9e <HAL_ADC_Start_DMA+0x10e>
 80069a2:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80069a4:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 80069a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80069aa:	68b2      	ldr	r2, [r6, #8]
 80069ac:	07d4      	lsls	r4, r2, #31
 80069ae:	d50c      	bpl.n	80069ca <HAL_ADC_Start_DMA+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80069b0:	68b4      	ldr	r4, [r6, #8]
 80069b2:	f014 0401 	ands.w	r4, r4, #1
 80069b6:	d11b      	bne.n	80069f0 <HAL_ADC_Start_DMA+0x60>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80069ba:	f043 0310 	orr.w	r3, r3, #16
 80069be:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	646b      	str	r3, [r5, #68]	; 0x44
 80069c8:	e04f      	b.n	8006a6a <HAL_ADC_Start_DMA+0xda>
    __HAL_ADC_ENABLE(hadc);
 80069ca:	68b2      	ldr	r2, [r6, #8]
 80069cc:	f042 0201 	orr.w	r2, r2, #1
 80069d0:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80069d2:	4a34      	ldr	r2, [pc, #208]	; (8006aa4 <HAL_ADC_Start_DMA+0x114>)
 80069d4:	6810      	ldr	r0, [r2, #0]
 80069d6:	4a34      	ldr	r2, [pc, #208]	; (8006aa8 <HAL_ADC_Start_DMA+0x118>)
 80069d8:	fbb0 f0f2 	udiv	r0, r0, r2
 80069dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80069e0:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d0e3      	beq.n	80069b0 <HAL_ADC_Start_DMA+0x20>
      counter--;
 80069e8:	9a01      	ldr	r2, [sp, #4]
 80069ea:	3a01      	subs	r2, #1
 80069ec:	9201      	str	r2, [sp, #4]
 80069ee:	e7f8      	b.n	80069e2 <HAL_ADC_Start_DMA+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 80069f0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80069f2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80069f6:	f020 0001 	bic.w	r0, r0, #1
 80069fa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80069fe:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006a00:	6872      	ldr	r2, [r6, #4]
 8006a02:	0550      	lsls	r0, r2, #21
 8006a04:	d505      	bpl.n	8006a12 <HAL_ADC_Start_DMA+0x82>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006a06:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8006a08:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8006a0c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8006a10:	6428      	str	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a12:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a18:	d002      	beq.n	8006a20 <HAL_ADC_Start_DMA+0x90>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006a1a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8006a1c:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8006a20:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8006a22:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a24:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    __HAL_UNLOCK(hadc);   
 8006a26:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a2a:	4a20      	ldr	r2, [pc, #128]	; (8006aac <HAL_ADC_Start_DMA+0x11c>)
 8006a2c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a2e:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <HAL_ADC_Start_DMA+0x120>)
 8006a30:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a32:	4a20      	ldr	r2, [pc, #128]	; (8006ab4 <HAL_ADC_Start_DMA+0x124>)
 8006a34:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006a3a:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a3c:	6872      	ldr	r2, [r6, #4]
 8006a3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a42:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006a44:	68b2      	ldr	r2, [r6, #8]
 8006a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a4a:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a4c:	460a      	mov	r2, r1
 8006a4e:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8006a52:	f000 facf 	bl	8006ff4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006a56:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <HAL_ADC_Start_DMA+0x128>)
 8006a58:	6853      	ldr	r3, [r2, #4]
 8006a5a:	f013 0f1f 	tst.w	r3, #31
 8006a5e:	682b      	ldr	r3, [r5, #0]
 8006a60:	d106      	bne.n	8006a70 <HAL_ADC_Start_DMA+0xe0>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006a62:	6898      	ldr	r0, [r3, #8]
 8006a64:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8006a68:	d014      	beq.n	8006a94 <HAL_ADC_Start_DMA+0x104>
  return HAL_OK;
 8006a6a:	2000      	movs	r0, #0
}
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006a70:	4912      	ldr	r1, [pc, #72]	; (8006abc <HAL_ADC_Start_DMA+0x12c>)
 8006a72:	428b      	cmp	r3, r1
 8006a74:	d107      	bne.n	8006a86 <HAL_ADC_Start_DMA+0xf6>
 8006a76:	6899      	ldr	r1, [r3, #8]
 8006a78:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8006a7c:	d103      	bne.n	8006a86 <HAL_ADC_Start_DMA+0xf6>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a7e:	6899      	ldr	r1, [r3, #8]
 8006a80:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006a84:	6099      	str	r1, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006a86:	6852      	ldr	r2, [r2, #4]
 8006a88:	06d2      	lsls	r2, r2, #27
 8006a8a:	d4ee      	bmi.n	8006a6a <HAL_ADC_Start_DMA+0xda>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006a8c:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <HAL_ADC_Start_DMA+0x130>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d1eb      	bne.n	8006a6a <HAL_ADC_Start_DMA+0xda>
 8006a92:	e7e6      	b.n	8006a62 <HAL_ADC_Start_DMA+0xd2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a9a:	609a      	str	r2, [r3, #8]
 8006a9c:	e7e6      	b.n	8006a6c <HAL_ADC_Start_DMA+0xdc>
  __HAL_LOCK(hadc);
 8006a9e:	2002      	movs	r0, #2
 8006aa0:	e7e4      	b.n	8006a6c <HAL_ADC_Start_DMA+0xdc>
 8006aa2:	bf00      	nop
 8006aa4:	20000060 	.word	0x20000060
 8006aa8:	000f4240 	.word	0x000f4240
 8006aac:	08006ae9 	.word	0x08006ae9
 8006ab0:	08006ac7 	.word	0x08006ac7
 8006ab4:	08006ad3 	.word	0x08006ad3
 8006ab8:	40012300 	.word	0x40012300
 8006abc:	40012000 	.word	0x40012000
 8006ac0:	40012200 	.word	0x40012200

08006ac4 <HAL_ADC_ConvHalfCpltCallback>:
 8006ac4:	4770      	bx	lr

08006ac6 <ADC_DMAHalfConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ac6:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006ac8:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006aca:	f7ff fffb 	bl	8006ac4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ace:	bd08      	pop	{r3, pc}

08006ad0 <HAL_ADC_ErrorCallback>:
 8006ad0:	4770      	bx	lr

08006ad2 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ad2:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006ad4:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006ad6:	2340      	movs	r3, #64	; 0x40
 8006ad8:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006ada:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006adc:	f043 0304 	orr.w	r3, r3, #4
 8006ae0:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ae2:	f7ff fff5 	bl	8006ad0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ae6:	bd08      	pop	{r3, pc}

08006ae8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ae8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aec:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8006af2:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006af4:	d123      	bne.n	8006b3e <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	6891      	ldr	r1, [r2, #8]
 8006b00:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8006b04:	d117      	bne.n	8006b36 <ADC_DMAConvCplt+0x4e>
 8006b06:	6999      	ldr	r1, [r3, #24]
 8006b08:	b9a9      	cbnz	r1, 8006b36 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006b0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b0c:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8006b10:	d002      	beq.n	8006b18 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006b12:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006b14:	0548      	lsls	r0, r1, #21
 8006b16:	d40e      	bmi.n	8006b36 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006b18:	6851      	ldr	r1, [r2, #4]
 8006b1a:	f021 0120 	bic.w	r1, r1, #32
 8006b1e:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b26:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b2a:	04d1      	lsls	r1, r2, #19
 8006b2c:	d403      	bmi.n	8006b36 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fd f98e 	bl	8003e58 <HAL_ADC_ConvCpltCallback>
}
 8006b3c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b3e:	06d2      	lsls	r2, r2, #27
 8006b40:	d503      	bpl.n	8006b4a <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff ffc4 	bl	8006ad0 <HAL_ADC_ErrorCallback>
 8006b48:	e7f8      	b.n	8006b3c <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8006b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b52:	4718      	bx	r3

08006b54 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8006b54:	2300      	movs	r3, #0
{
 8006b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8006b58:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8006b5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d079      	beq.n	8006c56 <HAL_ADC_ConfigChannel+0x102>
 8006b62:	2301      	movs	r3, #1
 8006b64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006b68:	680d      	ldr	r5, [r1, #0]
 8006b6a:	6803      	ldr	r3, [r0, #0]
 8006b6c:	b2ae      	uxth	r6, r5
 8006b6e:	2d09      	cmp	r5, #9
 8006b70:	688a      	ldr	r2, [r1, #8]
 8006b72:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8006b76:	d93a      	bls.n	8006bee <HAL_ADC_ConfigChannel+0x9a>
 8006b78:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8006b7c:	d037      	beq.n	8006bee <HAL_ADC_ConfigChannel+0x9a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b7e:	3c1e      	subs	r4, #30
 8006b80:	f04f 0c07 	mov.w	ip, #7
 8006b84:	68df      	ldr	r7, [r3, #12]
 8006b86:	fa0c fc04 	lsl.w	ip, ip, r4
 8006b8a:	ea27 070c 	bic.w	r7, r7, ip
 8006b8e:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b90:	4f42      	ldr	r7, [pc, #264]	; (8006c9c <HAL_ADC_ConfigChannel+0x148>)
 8006b92:	42bd      	cmp	r5, r7
 8006b94:	d126      	bne.n	8006be4 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006b96:	68dc      	ldr	r4, [r3, #12]
 8006b98:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b9c:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8006b9e:	6849      	ldr	r1, [r1, #4]
 8006ba0:	2906      	cmp	r1, #6
 8006ba2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8006ba6:	d830      	bhi.n	8006c0a <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ba8:	3a05      	subs	r2, #5
 8006baa:	241f      	movs	r4, #31
 8006bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bae:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bb0:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006bb4:	ea21 0104 	bic.w	r1, r1, r4
 8006bb8:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006bc0:	4a37      	ldr	r2, [pc, #220]	; (8006ca0 <HAL_ADC_ConfigChannel+0x14c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d108      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x84>
 8006bc6:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8006bca:	d146      	bne.n	8006c5a <HAL_ADC_ConfigChannel+0x106>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006bcc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8006bd0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006bd4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006bde:	4618      	mov	r0, r3
}
 8006be0:	b003      	add	sp, #12
 8006be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006be4:	68df      	ldr	r7, [r3, #12]
 8006be6:	fa02 f404 	lsl.w	r4, r2, r4
 8006bea:	433c      	orrs	r4, r7
 8006bec:	e7d6      	b.n	8006b9c <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bee:	f04f 0c07 	mov.w	ip, #7
 8006bf2:	691f      	ldr	r7, [r3, #16]
 8006bf4:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006bf8:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bfc:	ea27 070c 	bic.w	r7, r7, ip
 8006c00:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c02:	691f      	ldr	r7, [r3, #16]
 8006c04:	433c      	orrs	r4, r7
 8006c06:	611c      	str	r4, [r3, #16]
 8006c08:	e7c9      	b.n	8006b9e <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8006c0a:	290c      	cmp	r1, #12
 8006c0c:	f04f 011f 	mov.w	r1, #31
 8006c10:	d80b      	bhi.n	8006c2a <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c12:	3a23      	subs	r2, #35	; 0x23
 8006c14:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006c16:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c18:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c1c:	ea24 0101 	bic.w	r1, r4, r1
 8006c20:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c24:	430a      	orrs	r2, r1
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
 8006c28:	e7ca      	b.n	8006bc0 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c2a:	3a41      	subs	r2, #65	; 0x41
 8006c2c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006c2e:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c30:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c34:	ea24 0101 	bic.w	r1, r4, r1
 8006c38:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c40:	e7be      	b.n	8006bc0 <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006c42:	4b18      	ldr	r3, [pc, #96]	; (8006ca4 <HAL_ADC_ConfigChannel+0x150>)
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006c4a:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006c52:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c54:	e7c0      	b.n	8006bd8 <HAL_ADC_ConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8006c56:	2002      	movs	r0, #2
 8006c58:	e7c2      	b.n	8006be0 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c5a:	2d12      	cmp	r5, #18
 8006c5c:	d0f1      	beq.n	8006c42 <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c5e:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <HAL_ADC_ConfigChannel+0x148>)
 8006c60:	429d      	cmp	r5, r3
 8006c62:	d001      	beq.n	8006c68 <HAL_ADC_ConfigChannel+0x114>
 8006c64:	2d11      	cmp	r5, #17
 8006c66:	d1b7      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x84>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006c68:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <HAL_ADC_ConfigChannel+0x150>)
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8006c70:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c78:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c7a:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <HAL_ADC_ConfigChannel+0x148>)
 8006c7c:	429d      	cmp	r5, r3
 8006c7e:	d1ab      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x84>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006c80:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <HAL_ADC_ConfigChannel+0x154>)
 8006c82:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <HAL_ADC_ConfigChannel+0x158>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c8a:	230a      	movs	r3, #10
 8006c8c:	4353      	muls	r3, r2
        counter--;
 8006c8e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8006c90:	9b01      	ldr	r3, [sp, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0a0      	beq.n	8006bd8 <HAL_ADC_ConfigChannel+0x84>
        counter--;
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	e7f8      	b.n	8006c8e <HAL_ADC_ConfigChannel+0x13a>
 8006c9c:	10000012 	.word	0x10000012
 8006ca0:	40012000 	.word	0x40012000
 8006ca4:	40012300 	.word	0x40012300
 8006ca8:	20000060 	.word	0x20000060
 8006cac:	000f4240 	.word	0x000f4240

08006cb0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cb0:	4907      	ldr	r1, [pc, #28]	; (8006cd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cb2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cb4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cbe:	0412      	lsls	r2, r2, #16
 8006cc0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006ccc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006cce:	4770      	bx	lr
 8006cd0:	e000ed00 	.word	0xe000ed00

08006cd4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cd4:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006cd6:	b530      	push	{r4, r5, lr}
 8006cd8:	68dc      	ldr	r4, [r3, #12]
 8006cda:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cde:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ce2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ce4:	2d04      	cmp	r5, #4
 8006ce6:	bf28      	it	cs
 8006ce8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cea:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cec:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cf0:	bf8c      	ite	hi
 8006cf2:	3c03      	subhi	r4, #3
 8006cf4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf6:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8006cfa:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cfc:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d00:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d04:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d08:	fa01 f104 	lsl.w	r1, r1, r4
 8006d0c:	ea41 0302 	orr.w	r3, r1, r2
 8006d10:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006d14:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006d16:	db06      	blt.n	8006d26 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d18:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006d1c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006d20:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006d24:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d26:	f000 000f 	and.w	r0, r0, #15
 8006d2a:	4a02      	ldr	r2, [pc, #8]	; (8006d34 <HAL_NVIC_SetPriority+0x60>)
 8006d2c:	5413      	strb	r3, [r2, r0]
 8006d2e:	e7f9      	b.n	8006d24 <HAL_NVIC_SetPriority+0x50>
 8006d30:	e000ed00 	.word	0xe000ed00
 8006d34:	e000ed14 	.word	0xe000ed14

08006d38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	db08      	blt.n	8006d4e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d3c:	0942      	lsrs	r2, r0, #5
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f000 001f 	and.w	r0, r0, #31
 8006d44:	fa03 f000 	lsl.w	r0, r3, r0
 8006d48:	4b01      	ldr	r3, [pc, #4]	; (8006d50 <HAL_NVIC_EnableIRQ+0x18>)
 8006d4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006d4e:	4770      	bx	lr
 8006d50:	e000e100 	.word	0xe000e100

08006d54 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d54:	2800      	cmp	r0, #0
 8006d56:	db0d      	blt.n	8006d74 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d58:	0943      	lsrs	r3, r0, #5
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f000 001f 	and.w	r0, r0, #31
 8006d60:	3320      	adds	r3, #32
 8006d62:	fa02 f000 	lsl.w	r0, r2, r0
 8006d66:	4a04      	ldr	r2, [pc, #16]	; (8006d78 <HAL_NVIC_DisableIRQ+0x24>)
 8006d68:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006d70:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	e000e100 	.word	0xe000e100

08006d7c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006d7c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006d80:	4a04      	ldr	r2, [pc, #16]	; (8006d94 <HAL_MPU_Disable+0x18>)
 8006d82:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d88:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4b02      	ldr	r3, [pc, #8]	; (8006d98 <HAL_MPU_Disable+0x1c>)
 8006d8e:	605a      	str	r2, [r3, #4]
}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	e000ed00 	.word	0xe000ed00
 8006d98:	e000ed90 	.word	0xe000ed90

08006d9c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006d9c:	4a06      	ldr	r2, [pc, #24]	; (8006db8 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006d9e:	f040 0001 	orr.w	r0, r0, #1
 8006da2:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <HAL_MPU_Enable+0x20>)
 8006da4:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006da6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006dae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006db2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006db6:	4770      	bx	lr
 8006db8:	e000ed00 	.word	0xe000ed00
 8006dbc:	e000ed90 	.word	0xe000ed90

08006dc0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006dc0:	7843      	ldrb	r3, [r0, #1]
 8006dc2:	4a12      	ldr	r2, [pc, #72]	; (8006e0c <HAL_MPU_ConfigRegion+0x4c>)
{
 8006dc4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8006dc6:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8006dc8:	7801      	ldrb	r1, [r0, #0]
 8006dca:	b1d9      	cbz	r1, 8006e04 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006dcc:	6843      	ldr	r3, [r0, #4]
 8006dce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006dd0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006dd2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006dd4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006dd6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006dda:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006ddc:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006dde:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006de2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006de4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006de8:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006dea:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006dee:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006df4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006df6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006dfa:	7a01      	ldrb	r1, [r0, #8]
 8006dfc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e00:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006e02:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8006e04:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8006e06:	6111      	str	r1, [r2, #16]
}
 8006e08:	e7fb      	b.n	8006e02 <HAL_MPU_ConfigRegion+0x42>
 8006e0a:	bf00      	nop
 8006e0c:	e000ed90 	.word	0xe000ed90

08006e10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006e10:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006e12:	4604      	mov	r4, r0
 8006e14:	b908      	cbnz	r0, 8006e1a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8006e16:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006e18:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006e1a:	7f43      	ldrb	r3, [r0, #29]
 8006e1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e20:	b913      	cbnz	r3, 8006e28 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006e22:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006e24:	f7fd f8a6 	bl	8003f74 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006e2c:	7923      	ldrb	r3, [r4, #4]
 8006e2e:	b9e3      	cbnz	r3, 8006e6a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <HAL_CRC_Init+0x70>)
 8006e34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	f022 0218 	bic.w	r2, r2, #24
 8006e3c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006e3e:	7962      	ldrb	r2, [r4, #5]
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	b9d2      	cbnz	r2, 8006e7a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006e44:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006e48:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006e4a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	6961      	ldr	r1, [r4, #20]
 8006e50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e54:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006e56:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006e58:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e60:	430a      	orrs	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006e64:	2301      	movs	r3, #1
 8006e66:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006e68:	e7d6      	b.n	8006e18 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006e6a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f000 f808 	bl	8006e84 <HAL_CRCEx_Polynomial_Set>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d0e2      	beq.n	8006e3e <HAL_CRC_Init+0x2e>
 8006e78:	e7cd      	b.n	8006e16 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006e7a:	6922      	ldr	r2, [r4, #16]
 8006e7c:	e7e4      	b.n	8006e48 <HAL_CRC_Init+0x38>
 8006e7e:	bf00      	nop
 8006e80:	04c11db7 	.word	0x04c11db7

08006e84 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006e84:	231f      	movs	r3, #31
{
 8006e86:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	d306      	bcc.n	8006e9a <HAL_CRCEx_Polynomial_Set+0x16>
 8006e8c:	fa21 f403 	lsr.w	r4, r1, r3
 8006e90:	07e4      	lsls	r4, r4, #31
 8006e92:	d5f9      	bpl.n	8006e88 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8006e94:	2a08      	cmp	r2, #8
 8006e96:	d014      	beq.n	8006ec2 <HAL_CRCEx_Polynomial_Set+0x3e>
 8006e98:	d802      	bhi.n	8006ea0 <HAL_CRCEx_Polynomial_Set+0x1c>
 8006e9a:	b13a      	cbz	r2, 8006eac <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8006e9c:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006e9e:	e00d      	b.n	8006ebc <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8006ea0:	2a10      	cmp	r2, #16
 8006ea2:	d00c      	beq.n	8006ebe <HAL_CRCEx_Polynomial_Set+0x3a>
 8006ea4:	2a18      	cmp	r2, #24
 8006ea6:	d1f9      	bne.n	8006e9c <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8006ea8:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8006eaa:	d8f7      	bhi.n	8006e9c <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006eac:	6800      	ldr	r0, [r0, #0]
 8006eae:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006eb0:	6883      	ldr	r3, [r0, #8]
 8006eb2:	f023 0318 	bic.w	r3, r3, #24
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	6082      	str	r2, [r0, #8]
 8006eba:	2000      	movs	r0, #0
}
 8006ebc:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8006ebe:	2b07      	cmp	r3, #7
 8006ec0:	e7f3      	b.n	8006eaa <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8006ec2:	2b0f      	cmp	r3, #15
 8006ec4:	e7f1      	b.n	8006eaa <HAL_CRCEx_Polynomial_Set+0x26>
	...

08006ec8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ec8:	6803      	ldr	r3, [r0, #0]
{
 8006eca:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ecc:	2018      	movs	r0, #24
 8006ece:	b2d9      	uxtb	r1, r3
 8006ed0:	3910      	subs	r1, #16
 8006ed2:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8006ed6:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ed8:	4c05      	ldr	r4, [pc, #20]	; (8006ef0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8006eda:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006edc:	5c20      	ldrb	r0, [r4, r0]
 8006ede:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ee0:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8006ee4:	f020 0003 	bic.w	r0, r0, #3
 8006ee8:	bf88      	it	hi
 8006eea:	3004      	addhi	r0, #4
 8006eec:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8006eee:	bd10      	pop	{r4, pc}
 8006ef0:	080293a1 	.word	0x080293a1

08006ef4 <HAL_DMA_Init>:
{
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006ef8:	f7ff fc8c 	bl	8006814 <HAL_GetTick>
 8006efc:	4605      	mov	r5, r0
  if(hdma == NULL)
 8006efe:	2c00      	cmp	r4, #0
 8006f00:	d073      	beq.n	8006fea <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f02:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8006f04:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8006f10:	6813      	ldr	r3, [r2, #0]
 8006f12:	f023 0301 	bic.w	r3, r3, #1
 8006f16:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f18:	6821      	ldr	r1, [r4, #0]
 8006f1a:	680b      	ldr	r3, [r1, #0]
 8006f1c:	07d8      	lsls	r0, r3, #31
 8006f1e:	d42f      	bmi.n	8006f80 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8006f20:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f22:	4d33      	ldr	r5, [pc, #204]	; (8006ff0 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f24:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f26:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f28:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	68e2      	ldr	r2, [r4, #12]
 8006f30:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f32:	6922      	ldr	r2, [r4, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	6962      	ldr	r2, [r4, #20]
 8006f38:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f3a:	69e2      	ldr	r2, [r4, #28]
 8006f3c:	4303      	orrs	r3, r0
 8006f3e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f40:	6a22      	ldr	r2, [r4, #32]
 8006f42:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f46:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f48:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f4c:	bf02      	ittt	eq
 8006f4e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8006f52:	4335      	orreq	r5, r6
 8006f54:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f56:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8006f58:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8006f5a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f5c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8006f60:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f64:	d133      	bne.n	8006fce <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8006f66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f68:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8006f6a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f6c:	b37d      	cbz	r5, 8006fce <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f6e:	b990      	cbnz	r0, 8006f96 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8006f70:	2a01      	cmp	r2, #1
 8006f72:	d021      	beq.n	8006fb8 <HAL_DMA_Init+0xc4>
 8006f74:	f032 0202 	bics.w	r2, r2, #2
 8006f78:	d129      	bne.n	8006fce <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f7a:	01ea      	lsls	r2, r5, #7
 8006f7c:	d527      	bpl.n	8006fce <HAL_DMA_Init+0xda>
 8006f7e:	e01e      	b.n	8006fbe <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f80:	f7ff fc48 	bl	8006814 <HAL_GetTick>
 8006f84:	1b40      	subs	r0, r0, r5
 8006f86:	2805      	cmp	r0, #5
 8006f88:	d9c6      	bls.n	8006f18 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f8a:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f8c:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f8e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8006f90:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8006f94:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f96:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006f9a:	d114      	bne.n	8006fc6 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8006f9c:	2a03      	cmp	r2, #3
 8006f9e:	d816      	bhi.n	8006fce <HAL_DMA_Init+0xda>
 8006fa0:	a001      	add	r0, pc, #4	; (adr r0, 8006fa8 <HAL_DMA_Init+0xb4>)
 8006fa2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fbf 	.word	0x08006fbf
 8006fac:	08006f7b 	.word	0x08006f7b
 8006fb0:	08006fbf 	.word	0x08006fbf
 8006fb4:	08006fb9 	.word	0x08006fb9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fb8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8006fbc:	d107      	bne.n	8006fce <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fbe:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8006fc0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fc2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8006fc4:	e7e4      	b.n	8006f90 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8006fc6:	2a02      	cmp	r2, #2
 8006fc8:	d9f9      	bls.n	8006fbe <HAL_DMA_Init+0xca>
 8006fca:	2a03      	cmp	r2, #3
 8006fcc:	d0d5      	beq.n	8006f7a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8006fce:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7ff ff79 	bl	8006ec8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006fd8:	233f      	movs	r3, #63	; 0x3f
 8006fda:	4093      	lsls	r3, r2
 8006fdc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fde:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006fe0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fe2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8006fe4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8006fe8:	e7d4      	b.n	8006f94 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8006fea:	2001      	movs	r0, #1
 8006fec:	e7d2      	b.n	8006f94 <HAL_DMA_Init+0xa0>
 8006fee:	bf00      	nop
 8006ff0:	e010803f 	.word	0xe010803f

08006ff4 <HAL_DMA_Start_IT>:
{
 8006ff4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8006ff6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ffa:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8006ffc:	2c01      	cmp	r4, #1
 8006ffe:	d034      	beq.n	800706a <HAL_DMA_Start_IT+0x76>
 8007000:	2401      	movs	r4, #1
 8007002:	2500      	movs	r5, #0
 8007004:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007008:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800700c:	2c01      	cmp	r4, #1
 800700e:	f04f 0402 	mov.w	r4, #2
 8007012:	d128      	bne.n	8007066 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007014:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007018:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800701a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800701c:	6825      	ldr	r5, [r4, #0]
 800701e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8007022:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8007024:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007026:	6883      	ldr	r3, [r0, #8]
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d119      	bne.n	8007060 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800702c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800702e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007030:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007032:	233f      	movs	r3, #63	; 0x3f
 8007034:	4093      	lsls	r3, r2
 8007036:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	f043 0316 	orr.w	r3, r3, #22
 800703e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007040:	6963      	ldr	r3, [r4, #20]
 8007042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007046:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8007048:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800704a:	b11b      	cbz	r3, 8007054 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	f043 0308 	orr.w	r3, r3, #8
 8007052:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007054:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007056:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	6023      	str	r3, [r4, #0]
}
 800705e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8007060:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8007062:	60e2      	str	r2, [r4, #12]
 8007064:	e7e4      	b.n	8007030 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8007066:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800706a:	2002      	movs	r0, #2
 800706c:	e7f7      	b.n	800705e <HAL_DMA_Start_IT+0x6a>

0800706e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800706e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8007072:	2b02      	cmp	r3, #2
 8007074:	d003      	beq.n	800707e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007076:	2380      	movs	r3, #128	; 0x80
 8007078:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800707a:	2001      	movs	r0, #1
 800707c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800707e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8007080:	2305      	movs	r3, #5
 8007082:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8007086:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007088:	6813      	ldr	r3, [r2, #0]
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	6013      	str	r3, [r2, #0]
}
 8007090:	4770      	bx	lr
	...

08007094 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8007094:	2300      	movs	r3, #0
{
 8007096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8007098:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800709a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800709c:	4b5b      	ldr	r3, [pc, #364]	; (800720c <HAL_DMA_IRQHandler+0x178>)
{
 800709e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80070a2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80070a6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070a8:	409a      	lsls	r2, r3
 80070aa:	4232      	tst	r2, r6
 80070ac:	d00c      	beq.n	80070c8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80070ae:	6801      	ldr	r1, [r0, #0]
 80070b0:	6808      	ldr	r0, [r1, #0]
 80070b2:	0740      	lsls	r0, r0, #29
 80070b4:	d508      	bpl.n	80070c8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80070b6:	6808      	ldr	r0, [r1, #0]
 80070b8:	f020 0004 	bic.w	r0, r0, #4
 80070bc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070be:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070c8:	2201      	movs	r2, #1
 80070ca:	409a      	lsls	r2, r3
 80070cc:	4232      	tst	r2, r6
 80070ce:	d008      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80070d0:	6821      	ldr	r1, [r4, #0]
 80070d2:	6949      	ldr	r1, [r1, #20]
 80070d4:	0609      	lsls	r1, r1, #24
 80070d6:	d504      	bpl.n	80070e2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80070d8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80070dc:	f042 0202 	orr.w	r2, r2, #2
 80070e0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80070e2:	2204      	movs	r2, #4
 80070e4:	409a      	lsls	r2, r3
 80070e6:	4232      	tst	r2, r6
 80070e8:	d008      	beq.n	80070fc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80070ea:	6821      	ldr	r1, [r4, #0]
 80070ec:	6809      	ldr	r1, [r1, #0]
 80070ee:	0788      	lsls	r0, r1, #30
 80070f0:	d504      	bpl.n	80070fc <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80070f2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80070f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80070f6:	f042 0204 	orr.w	r2, r2, #4
 80070fa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80070fc:	2210      	movs	r2, #16
 80070fe:	409a      	lsls	r2, r3
 8007100:	4232      	tst	r2, r6
 8007102:	d010      	beq.n	8007126 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	6819      	ldr	r1, [r3, #0]
 8007108:	0709      	lsls	r1, r1, #28
 800710a:	d50c      	bpl.n	8007126 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800710c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	0350      	lsls	r0, r2, #13
 8007112:	d537      	bpl.n	8007184 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	0319      	lsls	r1, r3, #12
 8007118:	d401      	bmi.n	800711e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800711a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800711c:	e000      	b.n	8007120 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800711e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8007120:	b10b      	cbz	r3, 8007126 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8007122:	4620      	mov	r0, r4
 8007124:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007126:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007128:	2220      	movs	r2, #32
 800712a:	408a      	lsls	r2, r1
 800712c:	4232      	tst	r2, r6
 800712e:	d03a      	beq.n	80071a6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	06c6      	lsls	r6, r0, #27
 8007136:	d536      	bpl.n	80071a6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007138:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800713a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800713e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007140:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007142:	d127      	bne.n	8007194 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007144:	f022 0216 	bic.w	r2, r2, #22
 8007148:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800714a:	695a      	ldr	r2, [r3, #20]
 800714c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007150:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007152:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007154:	b90a      	cbnz	r2, 800715a <HAL_DMA_IRQHandler+0xc6>
 8007156:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007158:	b11a      	cbz	r2, 8007162 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f022 0208 	bic.w	r2, r2, #8
 8007160:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007162:	233f      	movs	r3, #63	; 0x3f
 8007164:	408b      	lsls	r3, r1
 8007166:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8007168:	2301      	movs	r3, #1
 800716a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800716e:	2300      	movs	r3, #0
 8007170:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8007174:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8007176:	2b00      	cmp	r3, #0
 8007178:	d045      	beq.n	8007206 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800717a:	4620      	mov	r0, r4
}
 800717c:	b003      	add	sp, #12
 800717e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8007182:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	05d2      	lsls	r2, r2, #23
 8007188:	d4c7      	bmi.n	800711a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f022 0208 	bic.w	r2, r2, #8
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e7c2      	b.n	800711a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007194:	0350      	lsls	r0, r2, #13
 8007196:	d527      	bpl.n	80071e8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	0319      	lsls	r1, r3, #12
 800719c:	d431      	bmi.n	8007202 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800719e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80071a0:	b10b      	cbz	r3, 80071a6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80071a2:	4620      	mov	r0, r4
 80071a4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80071a8:	b36b      	cbz	r3, 8007206 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80071aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80071ac:	07da      	lsls	r2, r3, #31
 80071ae:	d519      	bpl.n	80071e4 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 80071b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 80071b4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80071b6:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80071ba:	2305      	movs	r3, #5
 80071bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80071c0:	6813      	ldr	r3, [r2, #0]
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	3301      	adds	r3, #1
 80071cc:	42bb      	cmp	r3, r7
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	d802      	bhi.n	80071d8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80071d2:	6813      	ldr	r3, [r2, #0]
 80071d4:	07db      	lsls	r3, r3, #31
 80071d6:	d4f7      	bmi.n	80071c8 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 80071d8:	2301      	movs	r3, #1
 80071da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80071de:	2300      	movs	r3, #0
 80071e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80071e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80071e6:	e7c6      	b.n	8007176 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80071ee:	d108      	bne.n	8007202 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80071f0:	6819      	ldr	r1, [r3, #0]
 80071f2:	f021 0110 	bic.w	r1, r1, #16
 80071f6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80071f8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80071fa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80071fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007202:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007204:	e7cc      	b.n	80071a0 <HAL_DMA_IRQHandler+0x10c>
}
 8007206:	b003      	add	sp, #12
 8007208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720a:	bf00      	nop
 800720c:	20000060 	.word	0x20000060

08007210 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8007210:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8007212:	4770      	bx	lr

08007214 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007214:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007216:	4604      	mov	r4, r0
 8007218:	b380      	cbz	r0, 800727c <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800721a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800721e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007222:	b91b      	cbnz	r3, 800722c <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007224:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007228:	f7fc feba 	bl	8003fa0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800722c:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800722e:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007230:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800723c:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800723e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007240:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007244:	f022 0207 	bic.w	r2, r2, #7
 8007248:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800724a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800724c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800724e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007250:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8007254:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007258:	430a      	orrs	r2, r1
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800725c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800725e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8007262:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007266:	0552      	lsls	r2, r2, #21
 8007268:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800726c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800726e:	430a      	orrs	r2, r1
 8007270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007272:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007274:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007276:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 800727a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800727c:	2001      	movs	r0, #1
 800727e:	e7fc      	b.n	800727a <HAL_DMA2D_Init+0x66>

08007280 <HAL_DMA2D_LineEventCallback>:
 8007280:	4770      	bx	lr

08007282 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8007282:	4770      	bx	lr

08007284 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007284:	6803      	ldr	r3, [r0, #0]
{
 8007286:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007288:	685e      	ldr	r6, [r3, #4]
{
 800728a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800728c:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800728e:	07f2      	lsls	r2, r6, #31
 8007290:	d514      	bpl.n	80072bc <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007292:	05e9      	lsls	r1, r5, #23
 8007294:	d512      	bpl.n	80072bc <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800729c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800729e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80072a0:	f042 0201 	orr.w	r2, r2, #1
 80072a4:	6542      	str	r2, [r0, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80072a6:	2201      	movs	r2, #1
 80072a8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072aa:	2304      	movs	r3, #4
 80072ac:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072b0:	2300      	movs	r3, #0
 80072b2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80072b6:	69c3      	ldr	r3, [r0, #28]
 80072b8:	b103      	cbz	r3, 80072bc <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80072ba:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80072bc:	06b2      	lsls	r2, r6, #26
 80072be:	d516      	bpl.n	80072ee <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80072c0:	04ab      	lsls	r3, r5, #18
 80072c2:	d514      	bpl.n	80072ee <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072cc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80072ce:	2220      	movs	r2, #32
 80072d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80072d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80072d4:	f043 0302 	orr.w	r3, r3, #2
 80072d8:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072da:	2304      	movs	r3, #4
 80072dc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072e0:	2300      	movs	r3, #0
 80072e2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80072e6:	69e3      	ldr	r3, [r4, #28]
 80072e8:	b10b      	cbz	r3, 80072ee <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80072ea:	4620      	mov	r0, r4
 80072ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80072ee:	0730      	lsls	r0, r6, #28
 80072f0:	d516      	bpl.n	8007320 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80072f2:	0529      	lsls	r1, r5, #20
 80072f4:	d514      	bpl.n	8007320 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007300:	2208      	movs	r2, #8
 8007302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007304:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007306:	f043 0304 	orr.w	r3, r3, #4
 800730a:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800730c:	2304      	movs	r3, #4
 800730e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007312:	2300      	movs	r3, #0
 8007314:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007318:	69e3      	ldr	r3, [r4, #28]
 800731a:	b10b      	cbz	r3, 8007320 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800731c:	4620      	mov	r0, r4
 800731e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007320:	0772      	lsls	r2, r6, #29
 8007322:	d50b      	bpl.n	800733c <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007324:	056b      	lsls	r3, r5, #21
 8007326:	d509      	bpl.n	800733c <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007328:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800732a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007332:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007334:	2204      	movs	r2, #4
 8007336:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007338:	f7ff ffa2 	bl	8007280 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800733c:	07b0      	lsls	r0, r6, #30
 800733e:	d514      	bpl.n	800736a <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007340:	05a9      	lsls	r1, r5, #22
 8007342:	d512      	bpl.n	800736a <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800734c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800734e:	2202      	movs	r2, #2
 8007350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007352:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007354:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007356:	2301      	movs	r3, #1
 8007358:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800735c:	2300      	movs	r3, #0
 800735e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8007362:	69a3      	ldr	r3, [r4, #24]
 8007364:	b10b      	cbz	r3, 800736a <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007366:	4620      	mov	r0, r4
 8007368:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800736a:	06f2      	lsls	r2, r6, #27
 800736c:	d513      	bpl.n	8007396 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800736e:	04eb      	lsls	r3, r5, #19
 8007370:	d511      	bpl.n	8007396 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007372:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007374:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800737c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800737e:	2210      	movs	r2, #16
 8007380:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007382:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007384:	6563      	str	r3, [r4, #84]	; 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007386:	2301      	movs	r3, #1
 8007388:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hdma2d);
 800738c:	2300      	movs	r3, #0
 800738e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007392:	f7ff ff76 	bl	8007282 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007396:	bd70      	pop	{r4, r5, r6, pc}

08007398 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007398:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800739a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800739e:	2b01      	cmp	r3, #1
 80073a0:	f04f 0302 	mov.w	r3, #2
 80073a4:	d031      	beq.n	800740a <HAL_DMA2D_ConfigLayer+0x72>

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80073a6:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 80073a8:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80073aa:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80073ae:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 80073b2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80073b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80073b8:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80073bc:	0513      	lsls	r3, r2, #20
 80073be:	6b62      	ldr	r2, [r4, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80073c0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80073c4:	4e1b      	ldr	r6, [pc, #108]	; (8007434 <HAL_DMA2D_ConfigLayer+0x9c>)
 80073c6:	432b      	orrs	r3, r5
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073c8:	3d09      	subs	r5, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80073ca:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073ce:	2d01      	cmp	r5, #1
 80073d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80073d2:	bf96      	itet	ls
 80073d4:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80073d8:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80073dc:	4313      	orrls	r3, r2
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80073de:	6802      	ldr	r2, [r0, #0]
 80073e0:	b9a9      	cbnz	r1, 800740e <HAL_DMA2D_ConfigLayer+0x76>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80073e2:	6a54      	ldr	r4, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073e4:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80073e6:	ea04 0406 	and.w	r4, r4, r6
 80073ea:	ea43 0304 	orr.w	r3, r3, r4
 80073ee:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80073f0:	6a03      	ldr	r3, [r0, #32]
 80073f2:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073f4:	d803      	bhi.n	80073fe <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80073f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80073f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073fc:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80073fe:	2301      	movs	r3, #1
 8007400:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007404:	2300      	movs	r3, #0
 8007406:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 800740a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800740c:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800740e:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007410:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007412:	ea04 0406 	and.w	r4, r4, r6
 8007416:	ea43 0304 	orr.w	r3, r3, r4
 800741a:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800741c:	f04f 0318 	mov.w	r3, #24
 8007420:	fb03 0101 	mla	r1, r3, r1, r0
 8007424:	6a0b      	ldr	r3, [r1, #32]
 8007426:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007428:	d8e9      	bhi.n	80073fe <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800742a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800742c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007430:	6213      	str	r3, [r2, #32]
 8007432:	e7e4      	b.n	80073fe <HAL_DMA2D_ConfigLayer+0x66>
 8007434:	00ccfff0 	.word	0x00ccfff0

08007438 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8007438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743c:	4607      	mov	r7, r0
 800743e:	460d      	mov	r5, r1
 8007440:	4614      	mov	r4, r2
 8007442:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007444:	f7ff f9e6 	bl	8006814 <HAL_GetTick>
 8007448:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800744e:	07db      	lsls	r3, r3, #31
 8007450:	d50a      	bpl.n	8007468 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007452:	ea44 2306 	orr.w	r3, r4, r6, lsl #8
 8007456:	9c06      	ldr	r4, [sp, #24]

  return HAL_OK;
 8007458:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800745a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800745e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007462:	66d4      	str	r4, [r2, #108]	; 0x6c
}
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007468:	f7ff f9d4 	bl	8006814 <HAL_GetTick>
 800746c:	eba0 0008 	sub.w	r0, r0, r8
 8007470:	2864      	cmp	r0, #100	; 0x64
 8007472:	d9ea      	bls.n	800744a <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8007474:	2003      	movs	r0, #3
 8007476:	e7f5      	b.n	8007464 <DSI_ShortWrite+0x2c>

08007478 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007478:	7c03      	ldrb	r3, [r0, #16]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d05c      	beq.n	8007538 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800747e:	2200      	movs	r2, #0
 8007480:	6803      	ldr	r3, [r0, #0]
 8007482:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007486:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800748a:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800748c:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800748e:	d507      	bpl.n	80074a0 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8007490:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007494:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8007498:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800749c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80074a0:	078a      	lsls	r2, r1, #30
 80074a2:	d505      	bpl.n	80074b0 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80074a4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80074a8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80074ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80074b0:	074a      	lsls	r2, r1, #29
 80074b2:	d505      	bpl.n	80074c0 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80074b4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074b8:	f042 0201 	orr.w	r2, r2, #1
 80074bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80074c0:	070a      	lsls	r2, r1, #28
 80074c2:	d505      	bpl.n	80074d0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80074c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074c8:	f042 0202 	orr.w	r2, r2, #2
 80074cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80074d0:	06ca      	lsls	r2, r1, #27
 80074d2:	d505      	bpl.n	80074e0 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80074d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074d8:	f042 020c 	orr.w	r2, r2, #12
 80074dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80074e0:	068a      	lsls	r2, r1, #26
 80074e2:	d505      	bpl.n	80074f0 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80074e4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074e8:	f042 0210 	orr.w	r2, r2, #16
 80074ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80074f0:	064a      	lsls	r2, r1, #25
 80074f2:	d505      	bpl.n	8007500 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80074f4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074f8:	f042 0220 	orr.w	r2, r2, #32
 80074fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007500:	060a      	lsls	r2, r1, #24
 8007502:	d505      	bpl.n	8007510 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007504:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800750c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8007510:	05ca      	lsls	r2, r1, #23
 8007512:	d505      	bpl.n	8007520 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8007514:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007518:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800751c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007520:	058a      	lsls	r2, r1, #22
 8007522:	d505      	bpl.n	8007530 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007524:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007528:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800752c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007530:	2300      	movs	r3, #0
 8007532:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007534:	4618      	mov	r0, r3
 8007536:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007538:	2002      	movs	r0, #2
}
 800753a:	4770      	bx	lr

0800753c <HAL_DSI_Init>:
{
 800753c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800753e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007540:	4604      	mov	r4, r0
 8007542:	2800      	cmp	r0, #0
 8007544:	f000 80a8 	beq.w	8007698 <HAL_DSI_Init+0x15c>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007548:	7c43      	ldrb	r3, [r0, #17]
 800754a:	b90b      	cbnz	r3, 8007550 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800754c:	f7fc fd48 	bl	8003fe0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007550:	2303      	movs	r3, #3
 8007552:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007554:	2300      	movs	r3, #0
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800755e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007562:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007566:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800756a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007572:	f7ff f94f 	bl	8006814 <HAL_GetTick>
 8007576:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007578:	6822      	ldr	r2, [r4, #0]
 800757a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800757e:	04d9      	lsls	r1, r3, #19
 8007580:	d57b      	bpl.n	800767a <HAL_DSI_Init+0x13e>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007582:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8007586:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800758a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800758e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007592:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007596:	e9d5 0300 	ldrd	r0, r3, [r5]
 800759a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800759c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80075a0:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80075a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80075a6:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80075a8:	430b      	orrs	r3, r1
 80075aa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80075ae:	2300      	movs	r3, #0
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80075be:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80075ca:	f7ff f929 	bl	8006820 <HAL_Delay>
  tickstart = HAL_GetTick();
 80075ce:	f7ff f921 	bl	8006814 <HAL_GetTick>
 80075d2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80075da:	05d2      	lsls	r2, r2, #23
 80075dc:	d556      	bpl.n	800768c <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80075de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80075e2:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80075e4:	f042 0206 	orr.w	r2, r2, #6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80075e8:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80075ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80075ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80075f2:	f022 0203 	bic.w	r2, r2, #3
 80075f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80075fa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80075fe:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007600:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800760a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800760e:	f022 0203 	bic.w	r2, r2, #3
 8007612:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007616:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800761a:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800761c:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800761e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007628:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	430a      	orrs	r2, r1
 800762e:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007630:	686a      	ldr	r2, [r5, #4]
 8007632:	2a01      	cmp	r2, #1
 8007634:	bf38      	it	cc
 8007636:	2201      	movcc	r2, #1
 8007638:	4611      	mov	r1, r2
 800763a:	4a18      	ldr	r2, [pc, #96]	; (800769c <HAL_DSI_Init+0x160>)
 800763c:	434a      	muls	r2, r1
 800763e:	68a9      	ldr	r1, [r5, #8]
 8007640:	f001 0103 	and.w	r1, r1, #3
 8007644:	408a      	lsls	r2, r1
 8007646:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800764a:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800764c:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800764e:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007652:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8007656:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800765a:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800765e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8007662:	430a      	orrs	r2, r1
 8007664:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007668:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800766c:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8007670:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007672:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8007674:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8007676:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8007678:	e006      	b.n	8007688 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800767a:	f7ff f8cb 	bl	8006814 <HAL_GetTick>
 800767e:	1b80      	subs	r0, r0, r6
 8007680:	2864      	cmp	r0, #100	; 0x64
 8007682:	f67f af79 	bls.w	8007578 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007686:	2003      	movs	r0, #3
}
 8007688:	b002      	add	sp, #8
 800768a:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800768c:	f7ff f8c2 	bl	8006814 <HAL_GetTick>
 8007690:	1b80      	subs	r0, r0, r6
 8007692:	2864      	cmp	r0, #100	; 0x64
 8007694:	d99e      	bls.n	80075d4 <HAL_DSI_Init+0x98>
 8007696:	e7f6      	b.n	8007686 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8007698:	2001      	movs	r0, #1
 800769a:	e7f5      	b.n	8007688 <HAL_DSI_Init+0x14c>
 800769c:	003d0900 	.word	0x003d0900

080076a0 <HAL_DSI_ErrorCallback>:
 80076a0:	4770      	bx	lr

080076a2 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80076a2:	6803      	ldr	r3, [r0, #0]
 80076a4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80076a8:	07d1      	lsls	r1, r2, #31
{
 80076aa:	b510      	push	{r4, lr}
 80076ac:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80076ae:	d508      	bpl.n	80076c2 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80076b0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80076b4:	07d2      	lsls	r2, r2, #31
 80076b6:	d504      	bpl.n	80076c2 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80076b8:	2201      	movs	r2, #1
 80076ba:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80076be:	f7f9 fded 	bl	800129c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80076c8:	0791      	lsls	r1, r2, #30
 80076ca:	d509      	bpl.n	80076e0 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80076cc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80076d0:	0792      	lsls	r2, r2, #30
 80076d2:	d505      	bpl.n	80076e0 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80076d4:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80076d6:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80076d8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80076dc:	f7f9 fe12 	bl	8001304 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80076e0:	69a3      	ldr	r3, [r4, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d04e      	beq.n	8007784 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80076e6:	6821      	ldr	r1, [r4, #0]
 80076e8:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80076ec:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80076f0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80076f4:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80076f6:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80076fa:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80076fc:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80076fe:	b119      	cbz	r1, 8007708 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007700:	6961      	ldr	r1, [r4, #20]
 8007702:	f041 0101 	orr.w	r1, r1, #1
 8007706:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007708:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800770c:	d003      	beq.n	8007716 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800770e:	6962      	ldr	r2, [r4, #20]
 8007710:	f042 0202 	orr.w	r2, r2, #2
 8007714:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007716:	07d8      	lsls	r0, r3, #31
 8007718:	d503      	bpl.n	8007722 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800771a:	6962      	ldr	r2, [r4, #20]
 800771c:	f042 0204 	orr.w	r2, r2, #4
 8007720:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007722:	0799      	lsls	r1, r3, #30
 8007724:	d503      	bpl.n	800772e <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007726:	6962      	ldr	r2, [r4, #20]
 8007728:	f042 0208 	orr.w	r2, r2, #8
 800772c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800772e:	f013 0f0c 	tst.w	r3, #12
 8007732:	d003      	beq.n	800773c <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007734:	6962      	ldr	r2, [r4, #20]
 8007736:	f042 0210 	orr.w	r2, r2, #16
 800773a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800773c:	06da      	lsls	r2, r3, #27
 800773e:	d503      	bpl.n	8007748 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007740:	6962      	ldr	r2, [r4, #20]
 8007742:	f042 0220 	orr.w	r2, r2, #32
 8007746:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007748:	0698      	lsls	r0, r3, #26
 800774a:	d503      	bpl.n	8007754 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800774c:	6962      	ldr	r2, [r4, #20]
 800774e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007752:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007754:	0659      	lsls	r1, r3, #25
 8007756:	d503      	bpl.n	8007760 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007758:	6962      	ldr	r2, [r4, #20]
 800775a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800775e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007760:	061a      	lsls	r2, r3, #24
 8007762:	d503      	bpl.n	800776c <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007764:	6962      	ldr	r2, [r4, #20]
 8007766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800776a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800776c:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8007770:	d003      	beq.n	800777a <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007772:	6963      	ldr	r3, [r4, #20]
 8007774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007778:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800777a:	6963      	ldr	r3, [r4, #20]
 800777c:	b113      	cbz	r3, 8007784 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff ff8e 	bl	80076a0 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007784:	bd10      	pop	{r4, pc}

08007786 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007786:	7c03      	ldrb	r3, [r0, #16]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d00b      	beq.n	80077a4 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800778c:	6803      	ldr	r3, [r0, #0]
 800778e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007790:	f022 0203 	bic.w	r2, r2, #3
 8007794:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007798:	4311      	orrs	r1, r2
 800779a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800779c:	2300      	movs	r3, #0
 800779e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80077a0:	4618      	mov	r0, r3
 80077a2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80077a4:	2002      	movs	r0, #2
}
 80077a6:	4770      	bx	lr

080077a8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80077a8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80077aa:	7c03      	ldrb	r3, [r0, #16]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d06a      	beq.n	8007886 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80077b0:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80077b2:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80077b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80077bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80077c0:	f022 0201 	bic.w	r2, r2, #1
 80077c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80077c8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	f022 0203 	bic.w	r2, r2, #3
 80077da:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	4322      	orrs	r2, r4
 80077e0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80077e2:	695a      	ldr	r2, [r3, #20]
 80077e4:	f022 0207 	bic.w	r2, r2, #7
 80077e8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80077ea:	695c      	ldr	r4, [r3, #20]
 80077ec:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 80077f0:	432a      	orrs	r2, r5
 80077f2:	694d      	ldr	r5, [r1, #20]
 80077f4:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80077f6:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80077f8:	4322      	orrs	r2, r4
 80077fa:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80077fc:	691a      	ldr	r2, [r3, #16]
 80077fe:	f022 020f 	bic.w	r2, r2, #15
 8007802:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007804:	691c      	ldr	r4, [r3, #16]
 8007806:	432c      	orrs	r4, r5
 8007808:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800780a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800780e:	f024 040e 	bic.w	r4, r4, #14
 8007812:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007816:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800781a:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800781c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8007820:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8007824:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007826:	0c12      	lsrs	r2, r2, #16
 8007828:	0412      	lsls	r2, r2, #16
 800782a:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800782c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800782e:	4322      	orrs	r2, r4
 8007830:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007832:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007836:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800783a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800783e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8007842:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8007846:	432a      	orrs	r2, r5
 8007848:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800784a:	432a      	orrs	r2, r5
 800784c:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800784e:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007850:	432a      	orrs	r2, r5
 8007852:	4322      	orrs	r2, r4
 8007854:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8007858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007860:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007862:	430a      	orrs	r2, r1
 8007864:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8007866:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007872:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007876:	f042 0202 	orr.w	r2, r2, #2
 800787a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800787e:	2300      	movs	r3, #0
 8007880:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007882:	4618      	mov	r0, r3
}
 8007884:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007886:	2002      	movs	r0, #2
 8007888:	e7fc      	b.n	8007884 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800788c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800788c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800788e:	7c03      	ldrb	r3, [r0, #16]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d02a      	beq.n	80078ea <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8007894:	6802      	ldr	r2, [r0, #0]
 8007896:	4b16      	ldr	r3, [pc, #88]	; (80078f0 <HAL_DSI_ConfigCommand+0x64>)
 8007898:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800789a:	4023      	ands	r3, r4
 800789c:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800789e:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80078a0:	e9d1 3500 	ldrd	r3, r5, [r1]
 80078a4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80078a6:	688d      	ldr	r5, [r1, #8]
 80078a8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80078aa:	68cd      	ldr	r5, [r1, #12]
 80078ac:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80078ae:	690d      	ldr	r5, [r1, #16]
 80078b0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80078b2:	694d      	ldr	r5, [r1, #20]
 80078b4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80078b6:	698d      	ldr	r5, [r1, #24]
 80078b8:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80078ba:	69cd      	ldr	r5, [r1, #28]
 80078bc:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80078be:	6a0d      	ldr	r5, [r1, #32]
 80078c0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80078c2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80078c4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80078c6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80078c8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80078ca:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80078cc:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 80078ce:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80078d0:	4323      	orrs	r3, r4
 80078d2:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80078d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80078d6:	f023 0302 	bic.w	r3, r3, #2
 80078da:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80078dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80078de:	430b      	orrs	r3, r1
 80078e0:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80078e2:	2300      	movs	r3, #0
 80078e4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80078e6:	4618      	mov	r0, r3
}
 80078e8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80078ea:	2002      	movs	r0, #2
 80078ec:	e7fc      	b.n	80078e8 <HAL_DSI_ConfigCommand+0x5c>
 80078ee:	bf00      	nop
 80078f0:	fef080ff 	.word	0xfef080ff

080078f4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078f4:	7c03      	ldrb	r3, [r0, #16]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d00b      	beq.n	8007912 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80078fa:	6803      	ldr	r3, [r0, #0]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	f022 021f 	bic.w	r2, r2, #31
 8007902:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	4311      	orrs	r1, r2
 8007908:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800790a:	2300      	movs	r3, #0
 800790c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800790e:	4618      	mov	r0, r3
 8007910:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007912:	2002      	movs	r0, #2
}
 8007914:	4770      	bx	lr

08007916 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8007916:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007918:	7c03      	ldrb	r3, [r0, #16]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d035      	beq.n	800798a <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800791e:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007920:	e9d1 2400 	ldrd	r2, r4, [r1]
 8007924:	4294      	cmp	r4, r2
 8007926:	bf38      	it	cc
 8007928:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800792a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800792e:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8007932:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8007936:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800793a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800793e:	4322      	orrs	r2, r4
 8007940:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007944:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007948:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800794c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007950:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8007954:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007958:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800795a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800795e:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007960:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007962:	432a      	orrs	r2, r5
 8007964:	4322      	orrs	r2, r4
 8007966:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800796a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800796e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007972:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007976:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800797a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800797e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007982:	2300      	movs	r3, #0
 8007984:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007986:	4618      	mov	r0, r3
}
 8007988:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800798a:	2002      	movs	r0, #2
 800798c:	e7fc      	b.n	8007988 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08007990 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8007990:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007992:	7c03      	ldrb	r3, [r0, #16]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d05c      	beq.n	8007a52 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007998:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800799a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800799c:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800799e:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80079a0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80079a4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80079ac:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80079ae:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80079b0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80079b2:	b292      	uxth	r2, r2
 80079b4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80079b6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80079b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079bc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80079be:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80079c0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80079c2:	4014      	ands	r4, r2
 80079c4:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80079c6:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80079c8:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80079ca:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80079cc:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80079ce:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80079d0:	4014      	ands	r4, r2
 80079d2:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80079d4:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80079d6:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80079d8:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80079da:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80079dc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80079e0:	4014      	ands	r4, r2
 80079e2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80079e6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80079ea:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80079ec:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80079ee:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80079f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079f6:	4014      	ands	r4, r2
 80079f8:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80079fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a00:	432c      	orrs	r4, r5
 8007a02:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8007a06:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a0a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8007a0e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007a12:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a16:	698d      	ldr	r5, [r1, #24]
 8007a18:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007a1a:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007a1c:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007a1e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007a22:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8007a26:	4014      	ands	r4, r2
 8007a28:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007a2c:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8007a30:	432c      	orrs	r4, r5
 8007a32:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007a36:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8007a3a:	4022      	ands	r2, r4
 8007a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007a40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a44:	430a      	orrs	r2, r1
 8007a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007a4e:	4618      	mov	r0, r3
}
 8007a50:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007a52:	2002      	movs	r0, #2
 8007a54:	e7fc      	b.n	8007a50 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8007a56:	bf00      	nop
 8007a58:	ffff0000 	.word	0xffff0000

08007a5c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a5c:	7c03      	ldrb	r3, [r0, #16]
{
 8007a5e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d01c      	beq.n	8007a9e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8007a64:	6802      	ldr	r2, [r0, #0]
 8007a66:	2300      	movs	r3, #0
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	6851      	ldr	r1, [r2, #4]
 8007a6c:	f041 0101 	orr.w	r1, r1, #1
 8007a70:	6051      	str	r1, [r2, #4]
 8007a72:	6851      	ldr	r1, [r2, #4]
 8007a74:	f001 0101 	and.w	r1, r1, #1
 8007a78:	9100      	str	r1, [sp, #0]
 8007a7a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8007a82:	f041 0108 	orr.w	r1, r1, #8
 8007a86:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8007a8a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a8e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007a90:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007a92:	f002 0208 	and.w	r2, r2, #8
 8007a96:	9201      	str	r2, [sp, #4]
 8007a98:	9a01      	ldr	r2, [sp, #4]
}
 8007a9a:	b002      	add	sp, #8
 8007a9c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007a9e:	2002      	movs	r0, #2
 8007aa0:	e7fb      	b.n	8007a9a <HAL_DSI_Start+0x3e>

08007aa2 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007aa2:	7c03      	ldrb	r3, [r0, #16]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d00a      	beq.n	8007abe <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007aa8:	6802      	ldr	r2, [r0, #0]
 8007aaa:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8007aae:	f043 0304 	orr.w	r3, r3, #4
 8007ab2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007aba:	4618      	mov	r0, r3
 8007abc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007abe:	2002      	movs	r0, #2
}
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007ac2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007ac4:	7c05      	ldrb	r5, [r0, #16]
{
 8007ac6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007ac8:	2d01      	cmp	r5, #1
 8007aca:	d009      	beq.n	8007ae0 <HAL_DSI_ShortWrite+0x1e>
 8007acc:	2501      	movs	r5, #1
 8007ace:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007ad0:	9d06      	ldr	r5, [sp, #24]
 8007ad2:	9500      	str	r5, [sp, #0]
 8007ad4:	f7ff fcb0 	bl	8007438 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007ad8:	2300      	movs	r3, #0
 8007ada:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007adc:	b003      	add	sp, #12
 8007ade:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007ae0:	2002      	movs	r0, #2
 8007ae2:	e7fb      	b.n	8007adc <HAL_DSI_ShortWrite+0x1a>

08007ae4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007aea:	7c03      	ldrb	r3, [r0, #16]
{
 8007aec:	4606      	mov	r6, r0
 8007aee:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007af0:	2b01      	cmp	r3, #1
{
 8007af2:	4615      	mov	r5, r2
 8007af4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8007af8:	d052      	beq.n	8007ba0 <HAL_DSI_LongWrite+0xbc>
 8007afa:	2301      	movs	r3, #1
 8007afc:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007afe:	f7fe fe89 	bl	8006814 <HAL_GetTick>
 8007b02:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007b04:	6832      	ldr	r2, [r6, #0]
 8007b06:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8007b08:	f013 0a01 	ands.w	sl, r3, #1
 8007b0c:	d01a      	beq.n	8007b44 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007b0e:	2c03      	cmp	r4, #3
 8007b10:	4621      	mov	r1, r4

  for (count = 0U; count < nbBytes; count++)
 8007b12:	f04f 0000 	mov.w	r0, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007b16:	bf28      	it	cs
 8007b18:	2103      	movcs	r1, #3
  for (count = 0U; count < nbBytes; count++)
 8007b1a:	4288      	cmp	r0, r1
 8007b1c:	d11d      	bne.n	8007b5a <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8007b1e:	1a23      	subs	r3, r4, r0
  pparams += nbBytes;
 8007b20:	4440      	add	r0, r8
  hdsi->Instance->GPDR = fifoword;
 8007b22:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007b26:	bb13      	cbnz	r3, 8007b6e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007b28:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b2a:	ea45 1187 	orr.w	r1, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8007b2e:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b30:	0225      	lsls	r5, r4, #8
 8007b32:	0224      	lsls	r4, r4, #8
 8007b34:	b2ad      	uxth	r5, r5
 8007b36:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8007b3a:	430d      	orrs	r5, r1
 8007b3c:	432c      	orrs	r4, r5
 8007b3e:	66d4      	str	r4, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8007b40:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8007b42:	e008      	b.n	8007b56 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b44:	f7fe fe66 	bl	8006814 <HAL_GetTick>
 8007b48:	eba0 000b 	sub.w	r0, r0, fp
 8007b4c:	2864      	cmp	r0, #100	; 0x64
 8007b4e:	d9d9      	bls.n	8007b04 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8007b50:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007b52:	f886 a010 	strb.w	sl, [r6, #16]
}
 8007b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8007b5a:	f818 3000 	ldrb.w	r3, [r8, r0]
 8007b5e:	3001      	adds	r0, #1
 8007b60:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8007b64:	fa03 f30c 	lsl.w	r3, r3, ip
 8007b68:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8007b6c:	e7d5      	b.n	8007b1a <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b6e:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8007b70:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b74:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 8007b76:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b78:	bf28      	it	cs
 8007b7a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b7e:	f810 8001 	ldrb.w	r8, [r0, r1]
 8007b82:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8007b86:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b88:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8007b8c:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b8e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8007b92:	d1f4      	bne.n	8007b7e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8007b94:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8007b98:	4470      	add	r0, lr
    hdsi->Instance->GPDR = fifoword;
 8007b9a:	f8c2 c070 	str.w	ip, [r2, #112]	; 0x70
    pparams += nbBytes;
 8007b9e:	e7c2      	b.n	8007b26 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8007ba0:	2002      	movs	r0, #2
 8007ba2:	e7d8      	b.n	8007b56 <HAL_DSI_LongWrite+0x72>

08007ba4 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007ba4:	7c03      	ldrb	r3, [r0, #16]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d010      	beq.n	8007bcc <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8007baa:	6803      	ldr	r3, [r0, #0]
 8007bac:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8007bb0:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8007bb4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007bb8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8007bbc:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 8007bc0:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007bc8:	4618      	mov	r0, r3
 8007bca:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007bcc:	2002      	movs	r0, #2
}
 8007bce:	4770      	bx	lr

08007bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007bd4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bd6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8007d94 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007bda:	4a6c      	ldr	r2, [pc, #432]	; (8007d8c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8007bdc:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007bde:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8007be0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007be2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8007be6:	43ac      	bics	r4, r5
 8007be8:	f040 80b6 	bne.w	8007d58 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bec:	684d      	ldr	r5, [r1, #4]
 8007bee:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007bf2:	2603      	movs	r6, #3
 8007bf4:	f005 0403 	and.w	r4, r5, #3
 8007bf8:	fa06 f608 	lsl.w	r6, r6, r8
 8007bfc:	1e67      	subs	r7, r4, #1
 8007bfe:	43f6      	mvns	r6, r6
 8007c00:	2f01      	cmp	r7, #1
 8007c02:	d834      	bhi.n	8007c6e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8007c04:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007c06:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8007c0a:	68cf      	ldr	r7, [r1, #12]
 8007c0c:	fa07 f708 	lsl.w	r7, r7, r8
 8007c10:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8007c14:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007c16:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c18:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c1c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8007c20:	409f      	lsls	r7, r3
 8007c22:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8007c26:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8007c28:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c2a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007c2c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007c30:	688f      	ldr	r7, [r1, #8]
 8007c32:	fa07 f708 	lsl.w	r7, r7, r8
 8007c36:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8007c3a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c3c:	d119      	bne.n	8007c72 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8007c3e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007c42:	f003 0b07 	and.w	fp, r3, #7
 8007c46:	f04f 0e0f 	mov.w	lr, #15
 8007c4a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8007c4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8007c52:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007c56:	fa0e fe0b 	lsl.w	lr, lr, fp
 8007c5a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007c5e:	690f      	ldr	r7, [r1, #16]
 8007c60:	fa07 f70b 	lsl.w	r7, r7, fp
 8007c64:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8007c68:	f8ca 7020 	str.w	r7, [sl, #32]
 8007c6c:	e001      	b.n	8007c72 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c6e:	2c03      	cmp	r4, #3
 8007c70:	d1da      	bne.n	8007c28 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8007c72:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007c74:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c78:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007c7c:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007c80:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8007c84:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c86:	d067      	beq.n	8007d58 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c88:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8007c8c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007c90:	f003 0703 	and.w	r7, r3, #3
 8007c94:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c98:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8007c9c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007ca0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ca2:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8007ca6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8007caa:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8007cae:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8007cb2:	9401      	str	r4, [sp, #4]
 8007cb4:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007cb6:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8007cba:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007cbe:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007cc2:	4c33      	ldr	r4, [pc, #204]	; (8007d90 <HAL_GPIO_Init+0x1c0>)
 8007cc4:	42a0      	cmp	r0, r4
 8007cc6:	d04e      	beq.n	8007d66 <HAL_GPIO_Init+0x196>
 8007cc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ccc:	42a0      	cmp	r0, r4
 8007cce:	d04c      	beq.n	8007d6a <HAL_GPIO_Init+0x19a>
 8007cd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d04a      	beq.n	8007d6e <HAL_GPIO_Init+0x19e>
 8007cd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007cdc:	42a0      	cmp	r0, r4
 8007cde:	d048      	beq.n	8007d72 <HAL_GPIO_Init+0x1a2>
 8007ce0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ce4:	42a0      	cmp	r0, r4
 8007ce6:	d046      	beq.n	8007d76 <HAL_GPIO_Init+0x1a6>
 8007ce8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007cec:	42a0      	cmp	r0, r4
 8007cee:	d044      	beq.n	8007d7a <HAL_GPIO_Init+0x1aa>
 8007cf0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007cf4:	42a0      	cmp	r0, r4
 8007cf6:	d042      	beq.n	8007d7e <HAL_GPIO_Init+0x1ae>
 8007cf8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007cfc:	42a0      	cmp	r0, r4
 8007cfe:	d040      	beq.n	8007d82 <HAL_GPIO_Init+0x1b2>
 8007d00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d04:	42a0      	cmp	r0, r4
 8007d06:	d03e      	beq.n	8007d86 <HAL_GPIO_Init+0x1b6>
 8007d08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d0c:	42a0      	cmp	r0, r4
 8007d0e:	bf0c      	ite	eq
 8007d10:	2409      	moveq	r4, #9
 8007d12:	240a      	movne	r4, #10
 8007d14:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007d16:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007d18:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8007d1c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8007d1e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8007d22:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8007d24:	bf54      	ite	pl
 8007d26:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007d28:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007d2c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8007d2e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8007d30:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8007d32:	bf54      	ite	pl
 8007d34:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007d36:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007d3a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8007d3c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8007d3e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8007d40:	bf54      	ite	pl
 8007d42:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007d44:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007d48:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8007d4a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8007d4c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8007d4e:	bf54      	ite	pl
 8007d50:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007d52:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8007d56:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d58:	3301      	adds	r3, #1
 8007d5a:	2b10      	cmp	r3, #16
 8007d5c:	f47f af3e 	bne.w	8007bdc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8007d60:	b003      	add	sp, #12
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007d66:	2400      	movs	r4, #0
 8007d68:	e7d4      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d6a:	2401      	movs	r4, #1
 8007d6c:	e7d2      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d6e:	2402      	movs	r4, #2
 8007d70:	e7d0      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d72:	2403      	movs	r4, #3
 8007d74:	e7ce      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d76:	2404      	movs	r4, #4
 8007d78:	e7cc      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d7a:	2405      	movs	r4, #5
 8007d7c:	e7ca      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d7e:	2406      	movs	r4, #6
 8007d80:	e7c8      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d82:	2407      	movs	r4, #7
 8007d84:	e7c6      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d86:	2408      	movs	r4, #8
 8007d88:	e7c4      	b.n	8007d14 <HAL_GPIO_Init+0x144>
 8007d8a:	bf00      	nop
 8007d8c:	40013c00 	.word	0x40013c00
 8007d90:	40020000 	.word	0x40020000
 8007d94:	40023800 	.word	0x40023800

08007d98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d9c:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007d9e:	4c4a      	ldr	r4, [pc, #296]	; (8007ec8 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007da0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8007ed0 <HAL_GPIO_DeInit+0x138>
 8007da4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8007ed4 <HAL_GPIO_DeInit+0x13c>
 8007da8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007ed8 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8007dac:	2301      	movs	r3, #1
 8007dae:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8007db2:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8007db6:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8007dba:	d16e      	bne.n	8007e9a <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8007dbc:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007dc0:	f002 0c03 	and.w	ip, r2, #3
 8007dc4:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007dc6:	4b41      	ldr	r3, [pc, #260]	; (8007ecc <HAL_GPIO_DeInit+0x134>)
 8007dc8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007dcc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007dd0:	4298      	cmp	r0, r3
 8007dd2:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007dd6:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8007dda:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007dde:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007de2:	d05f      	beq.n	8007ea4 <HAL_GPIO_DeInit+0x10c>
 8007de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007de8:	4298      	cmp	r0, r3
 8007dea:	d05d      	beq.n	8007ea8 <HAL_GPIO_DeInit+0x110>
 8007dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df0:	4298      	cmp	r0, r3
 8007df2:	d05b      	beq.n	8007eac <HAL_GPIO_DeInit+0x114>
 8007df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df8:	4298      	cmp	r0, r3
 8007dfa:	d059      	beq.n	8007eb0 <HAL_GPIO_DeInit+0x118>
 8007dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e00:	4298      	cmp	r0, r3
 8007e02:	d057      	beq.n	8007eb4 <HAL_GPIO_DeInit+0x11c>
 8007e04:	4548      	cmp	r0, r9
 8007e06:	d057      	beq.n	8007eb8 <HAL_GPIO_DeInit+0x120>
 8007e08:	4550      	cmp	r0, sl
 8007e0a:	d057      	beq.n	8007ebc <HAL_GPIO_DeInit+0x124>
 8007e0c:	4558      	cmp	r0, fp
 8007e0e:	d057      	beq.n	8007ec0 <HAL_GPIO_DeInit+0x128>
 8007e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e14:	4298      	cmp	r0, r3
 8007e16:	d055      	beq.n	8007ec4 <HAL_GPIO_DeInit+0x12c>
 8007e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e1c:	4298      	cmp	r0, r3
 8007e1e:	bf0c      	ite	eq
 8007e20:	2309      	moveq	r3, #9
 8007e22:	230a      	movne	r3, #10
 8007e24:	fa03 f30c 	lsl.w	r3, r3, ip
 8007e28:	4543      	cmp	r3, r8
 8007e2a:	d113      	bne.n	8007e54 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	ea23 0307 	bic.w	r3, r3, r7
 8007e32:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	ea23 0307 	bic.w	r3, r3, r7
 8007e3a:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007e3c:	68e3      	ldr	r3, [r4, #12]
 8007e3e:	ea23 0307 	bic.w	r3, r3, r7
 8007e42:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007e44:	68a3      	ldr	r3, [r4, #8]
 8007e46:	ea23 0707 	bic.w	r7, r3, r7
 8007e4a:	60a7      	str	r7, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007e4c:	68ab      	ldr	r3, [r5, #8]
 8007e4e:	ea23 0606 	bic.w	r6, r3, r6
 8007e52:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007e54:	2603      	movs	r6, #3
 8007e56:	0053      	lsls	r3, r2, #1
 8007e58:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007e5a:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007e5e:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007e62:	270f      	movs	r7, #15
 8007e64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007e68:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007e6c:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007e70:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007e72:	fa22 f506 	lsr.w	r5, r2, r6
 8007e76:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007e7a:	6a2e      	ldr	r6, [r5, #32]
 8007e7c:	ea26 0707 	bic.w	r7, r6, r7
 8007e80:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007e82:	68c5      	ldr	r5, [r0, #12]
 8007e84:	ea25 0503 	bic.w	r5, r5, r3
 8007e88:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e8a:	6845      	ldr	r5, [r0, #4]
 8007e8c:	ea25 050e 	bic.w	r5, r5, lr
 8007e90:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e92:	6885      	ldr	r5, [r0, #8]
 8007e94:	ea25 0303 	bic.w	r3, r5, r3
 8007e98:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e9a:	3201      	adds	r2, #1
 8007e9c:	2a10      	cmp	r2, #16
 8007e9e:	d185      	bne.n	8007dac <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8007ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e7bd      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e7bb      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007eac:	2302      	movs	r3, #2
 8007eae:	e7b9      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e7b7      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	e7b5      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007eb8:	2305      	movs	r3, #5
 8007eba:	e7b3      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007ebc:	2306      	movs	r3, #6
 8007ebe:	e7b1      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007ec0:	2307      	movs	r3, #7
 8007ec2:	e7af      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007ec4:	2308      	movs	r3, #8
 8007ec6:	e7ad      	b.n	8007e24 <HAL_GPIO_DeInit+0x8c>
 8007ec8:	40013c00 	.word	0x40013c00
 8007ecc:	40020000 	.word	0x40020000
 8007ed0:	40021400 	.word	0x40021400
 8007ed4:	40021800 	.word	0x40021800
 8007ed8:	40021c00 	.word	0x40021c00

08007edc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007edc:	6903      	ldr	r3, [r0, #16]
 8007ede:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007ee0:	bf14      	ite	ne
 8007ee2:	2001      	movne	r0, #1
 8007ee4:	2000      	moveq	r0, #0
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ee8:	b10a      	cbz	r2, 8007eee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007eea:	6181      	str	r1, [r0, #24]
  }
}
 8007eec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007eee:	0409      	lsls	r1, r1, #16
 8007ef0:	e7fb      	b.n	8007eea <HAL_GPIO_WritePin+0x2>

08007ef2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ef2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ef4:	ea01 0203 	and.w	r2, r1, r3
 8007ef8:	ea21 0103 	bic.w	r1, r1, r3
 8007efc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f00:	6181      	str	r1, [r0, #24]
}
 8007f02:	4770      	bx	lr

08007f04 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f04:	6803      	ldr	r3, [r0, #0]
 8007f06:	699a      	ldr	r2, [r3, #24]
 8007f08:	0791      	lsls	r1, r2, #30
 8007f0a:	d501      	bpl.n	8007f10 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	07d2      	lsls	r2, r2, #31
 8007f14:	d403      	bmi.n	8007f1e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f16:	699a      	ldr	r2, [r3, #24]
 8007f18:	f042 0201 	orr.w	r2, r2, #1
 8007f1c:	619a      	str	r2, [r3, #24]
  }
}
 8007f1e:	4770      	bx	lr

08007f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f20:	b530      	push	{r4, r5, lr}
 8007f22:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f24:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f28:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f2a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f2c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f32:	4a05      	ldr	r2, [pc, #20]	; (8007f48 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f34:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f36:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f3e:	ea20 0002 	bic.w	r0, r0, r2
 8007f42:	4303      	orrs	r3, r0
 8007f44:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f46:	bd30      	pop	{r4, r5, pc}
 8007f48:	03ff63ff 	.word	0x03ff63ff

08007f4c <I2C_IsErrorOccurred>:
{
 8007f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f50:	6803      	ldr	r3, [r0, #0]
{
 8007f52:	4604      	mov	r4, r0
 8007f54:	4688      	mov	r8, r1
 8007f56:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f58:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f5a:	f015 0510 	ands.w	r5, r5, #16
 8007f5e:	d079      	beq.n	8008054 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f60:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8007f62:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8007f64:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f68:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	0695      	lsls	r5, r2, #26
 8007f70:	d436      	bmi.n	8007fe0 <I2C_IsErrorOccurred+0x94>
 8007f72:	b10e      	cbz	r6, 8007f78 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8007f74:	2504      	movs	r5, #4
 8007f76:	e039      	b.n	8007fec <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8007f78:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007f7c:	d0f6      	beq.n	8007f6c <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f7e:	f7fe fc49 	bl	8006814 <HAL_GetTick>
 8007f82:	1bc0      	subs	r0, r0, r7
 8007f84:	4540      	cmp	r0, r8
 8007f86:	d802      	bhi.n	8007f8e <I2C_IsErrorOccurred+0x42>
 8007f88:	f1b8 0f00 	cmp.w	r8, #0
 8007f8c:	d1ed      	bne.n	8007f6a <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007f92:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f96:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007f98:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f9a:	0400      	lsls	r0, r0, #16
 8007f9c:	d50a      	bpl.n	8007fb4 <I2C_IsErrorOccurred+0x68>
 8007f9e:	0449      	lsls	r1, r1, #17
 8007fa0:	d408      	bmi.n	8007fb4 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8007fa2:	2a20      	cmp	r2, #32
 8007fa4:	d006      	beq.n	8007fb4 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fac:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007fae:	f7fe fc31 	bl	8006814 <HAL_GetTick>
 8007fb2:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	699d      	ldr	r5, [r3, #24]
 8007fb8:	f015 0520 	ands.w	r5, r5, #32
 8007fbc:	d1d5      	bne.n	8007f6a <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fbe:	f7fe fc29 	bl	8006814 <HAL_GetTick>
 8007fc2:	1bc0      	subs	r0, r0, r7
 8007fc4:	2819      	cmp	r0, #25
 8007fc6:	d9f5      	bls.n	8007fb4 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8007fca:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8007fcc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fd0:	f043 0320 	orr.w	r3, r3, #32
 8007fd4:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007fd6:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fda:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8007fde:	e7e9      	b.n	8007fb4 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8007fe0:	2e00      	cmp	r6, #0
 8007fe2:	d1c7      	bne.n	8007f74 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fe4:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8007fe6:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8007fe8:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fea:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007ff0:	05d0      	lsls	r0, r2, #23
 8007ff2:	d505      	bpl.n	8008000 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007ff8:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8007ffc:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ffe:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008000:	0551      	lsls	r1, r2, #21
 8008002:	d505      	bpl.n	8008010 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008004:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008008:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 800800c:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800800e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008010:	0592      	lsls	r2, r2, #22
 8008012:	d521      	bpl.n	8008058 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008014:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008018:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800801c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800801e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8008020:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8008022:	f7ff ff6f 	bl	8007f04 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	6853      	ldr	r3, [r2, #4]
 800802a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800802e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8008032:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8008036:	f023 0301 	bic.w	r3, r3, #1
 800803a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800803c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800803e:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8008040:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8008042:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008044:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008048:	2300      	movs	r3, #0
 800804a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800804e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008052:	e003      	b.n	800805c <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8008054:	462e      	mov	r6, r5
 8008056:	e7c9      	b.n	8007fec <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8008058:	2e00      	cmp	r6, #0
 800805a:	d1e0      	bne.n	800801e <I2C_IsErrorOccurred+0xd2>
}
 800805c:	4630      	mov	r0, r6
 800805e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008062 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008062:	b570      	push	{r4, r5, r6, lr}
 8008064:	4604      	mov	r4, r0
 8008066:	460d      	mov	r5, r1
 8008068:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	079b      	lsls	r3, r3, #30
 8008070:	d501      	bpl.n	8008076 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8008072:	2000      	movs	r0, #0
}
 8008074:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008076:	4632      	mov	r2, r6
 8008078:	4629      	mov	r1, r5
 800807a:	4620      	mov	r0, r4
 800807c:	f7ff ff66 	bl	8007f4c <I2C_IsErrorOccurred>
 8008080:	b9a0      	cbnz	r0, 80080ac <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8008082:	1c6a      	adds	r2, r5, #1
 8008084:	d0f1      	beq.n	800806a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008086:	f7fe fbc5 	bl	8006814 <HAL_GetTick>
 800808a:	1b80      	subs	r0, r0, r6
 800808c:	42a8      	cmp	r0, r5
 800808e:	d801      	bhi.n	8008094 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8008090:	2d00      	cmp	r5, #0
 8008092:	d1ea      	bne.n	800806a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008094:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008096:	f043 0320 	orr.w	r3, r3, #32
 800809a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800809c:	2320      	movs	r3, #32
 800809e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80080a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80080ac:	2001      	movs	r0, #1
 80080ae:	e7e1      	b.n	8008074 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080080b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	4604      	mov	r4, r0
 80080b4:	460d      	mov	r5, r1
 80080b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	069b      	lsls	r3, r3, #26
 80080be:	d501      	bpl.n	80080c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80080c0:	2000      	movs	r0, #0
}
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c4:	4632      	mov	r2, r6
 80080c6:	4629      	mov	r1, r5
 80080c8:	4620      	mov	r0, r4
 80080ca:	f7ff ff3f 	bl	8007f4c <I2C_IsErrorOccurred>
 80080ce:	b990      	cbnz	r0, 80080f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d0:	f7fe fba0 	bl	8006814 <HAL_GetTick>
 80080d4:	1b80      	subs	r0, r0, r6
 80080d6:	42a8      	cmp	r0, r5
 80080d8:	d801      	bhi.n	80080de <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80080da:	2d00      	cmp	r5, #0
 80080dc:	d1ec      	bne.n	80080b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80080e0:	f043 0320 	orr.w	r3, r3, #32
 80080e4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080e6:	2320      	movs	r3, #32
 80080e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80080f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80080f6:	2001      	movs	r0, #1
 80080f8:	e7e3      	b.n	80080c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080080fa <I2C_WaitOnFlagUntilTimeout>:
{
 80080fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fe:	9f06      	ldr	r7, [sp, #24]
 8008100:	4604      	mov	r4, r0
 8008102:	4688      	mov	r8, r1
 8008104:	4616      	mov	r6, r2
 8008106:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008108:	6822      	ldr	r2, [r4, #0]
 800810a:	6993      	ldr	r3, [r2, #24]
 800810c:	ea38 0303 	bics.w	r3, r8, r3
 8008110:	bf0c      	ite	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	2300      	movne	r3, #0
 8008116:	42b3      	cmp	r3, r6
 8008118:	d001      	beq.n	800811e <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800811a:	2000      	movs	r0, #0
 800811c:	e015      	b.n	800814a <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800811e:	1c6b      	adds	r3, r5, #1
 8008120:	d0f3      	beq.n	800810a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008122:	f7fe fb77 	bl	8006814 <HAL_GetTick>
 8008126:	1bc0      	subs	r0, r0, r7
 8008128:	42a8      	cmp	r0, r5
 800812a:	d801      	bhi.n	8008130 <I2C_WaitOnFlagUntilTimeout+0x36>
 800812c:	2d00      	cmp	r5, #0
 800812e:	d1eb      	bne.n	8008108 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008130:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008132:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008134:	f043 0320 	orr.w	r3, r3, #32
 8008138:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800813a:	2320      	movs	r3, #32
 800813c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008140:	2300      	movs	r3, #0
 8008142:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8008146:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800814a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008150 <I2C_RequestMemoryWrite>:
{
 8008150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008154:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008156:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <I2C_RequestMemoryWrite+0x68>)
{
 8008158:	4605      	mov	r5, r0
 800815a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	b2f2      	uxtb	r2, r6
 8008160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8008164:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008168:	f7ff feda 	bl	8007f20 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800816c:	4628      	mov	r0, r5
 800816e:	4642      	mov	r2, r8
 8008170:	4639      	mov	r1, r7
 8008172:	f7ff ff76 	bl	8008062 <I2C_WaitOnTXISFlagUntilTimeout>
 8008176:	b118      	cbz	r0, 8008180 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8008178:	2001      	movs	r0, #1
}
 800817a:	b002      	add	sp, #8
 800817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008180:	2e01      	cmp	r6, #1
 8008182:	682b      	ldr	r3, [r5, #0]
 8008184:	d10d      	bne.n	80081a2 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008186:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008188:	2200      	movs	r2, #0
 800818a:	2180      	movs	r1, #128	; 0x80
 800818c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800818e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008190:	463b      	mov	r3, r7
 8008192:	f8cd 8000 	str.w	r8, [sp]
 8008196:	f7ff ffb0 	bl	80080fa <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800819a:	3800      	subs	r0, #0
 800819c:	bf18      	it	ne
 800819e:	2001      	movne	r0, #1
 80081a0:	e7eb      	b.n	800817a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80081a2:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081a4:	4639      	mov	r1, r7
 80081a6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80081a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081aa:	4642      	mov	r2, r8
 80081ac:	f7ff ff59 	bl	8008062 <I2C_WaitOnTXISFlagUntilTimeout>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1e1      	bne.n	8008178 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	e7e6      	b.n	8008186 <I2C_RequestMemoryWrite+0x36>
 80081b8:	80002000 	.word	0x80002000

080081bc <I2C_RequestMemoryRead>:
{
 80081bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80081c0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80081c2:	4b18      	ldr	r3, [pc, #96]	; (8008224 <I2C_RequestMemoryRead+0x68>)
{
 80081c4:	4605      	mov	r5, r0
 80081c6:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	b2f2      	uxtb	r2, r6
 80081cc:	2300      	movs	r3, #0
{
 80081ce:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80081d2:	f7ff fea5 	bl	8007f20 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081d6:	4628      	mov	r0, r5
 80081d8:	4642      	mov	r2, r8
 80081da:	4639      	mov	r1, r7
 80081dc:	f7ff ff41 	bl	8008062 <I2C_WaitOnTXISFlagUntilTimeout>
 80081e0:	b118      	cbz	r0, 80081ea <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 80081e2:	2001      	movs	r0, #1
}
 80081e4:	b002      	add	sp, #8
 80081e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081ea:	2e01      	cmp	r6, #1
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	d10d      	bne.n	800820c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80081f0:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80081f2:	2200      	movs	r2, #0
 80081f4:	2140      	movs	r1, #64	; 0x40
 80081f6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80081f8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80081fa:	463b      	mov	r3, r7
 80081fc:	f8cd 8000 	str.w	r8, [sp]
 8008200:	f7ff ff7b 	bl	80080fa <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8008204:	3800      	subs	r0, #0
 8008206:	bf18      	it	ne
 8008208:	2001      	movne	r0, #1
 800820a:	e7eb      	b.n	80081e4 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800820c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800820e:	4639      	mov	r1, r7
 8008210:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008214:	4642      	mov	r2, r8
 8008216:	f7ff ff24 	bl	8008062 <I2C_WaitOnTXISFlagUntilTimeout>
 800821a:	2800      	cmp	r0, #0
 800821c:	d1e1      	bne.n	80081e2 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800821e:	682b      	ldr	r3, [r5, #0]
 8008220:	e7e6      	b.n	80081f0 <I2C_RequestMemoryRead+0x34>
 8008222:	bf00      	nop
 8008224:	80002000 	.word	0x80002000

08008228 <HAL_I2C_Init>:
{
 8008228:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800822a:	4604      	mov	r4, r0
 800822c:	2800      	cmp	r0, #0
 800822e:	d04a      	beq.n	80082c6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008230:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008234:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008238:	b91b      	cbnz	r3, 8008242 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800823a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800823e:	f7fb ff0b 	bl	8004058 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008242:	2324      	movs	r3, #36	; 0x24
 8008244:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008252:	6862      	ldr	r2, [r4, #4]
 8008254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008258:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800825a:	689a      	ldr	r2, [r3, #8]
 800825c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008260:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008262:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008266:	2901      	cmp	r1, #1
 8008268:	d124      	bne.n	80082b4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800826a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800826e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008270:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008272:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008274:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800827c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008284:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008286:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800828a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800828c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800828e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008292:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008294:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8008298:	430a      	orrs	r2, r1
 800829a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80082a4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082a6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082ac:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ae:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80082b2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082b8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082ba:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082bc:	d1d8      	bne.n	8008270 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80082be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c2:	605a      	str	r2, [r3, #4]
 80082c4:	e7d4      	b.n	8008270 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80082c6:	2001      	movs	r0, #1
 80082c8:	e7f3      	b.n	80082b2 <HAL_I2C_Init+0x8a>

080082ca <HAL_I2C_DeInit>:
{
 80082ca:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80082cc:	4604      	mov	r4, r0
 80082ce:	b198      	cbz	r0, 80082f8 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80082d0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80082d2:	2324      	movs	r3, #36	; 0x24
 80082d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80082d8:	6813      	ldr	r3, [r2, #0]
 80082da:	f023 0301 	bic.w	r3, r3, #1
 80082de:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80082e0:	f7fb ff1e 	bl	8004120 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082e4:	2000      	movs	r0, #0
 80082e6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80082e8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80082ec:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80082f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80082f8:	2001      	movs	r0, #1
 80082fa:	e7fc      	b.n	80082f6 <HAL_I2C_DeInit+0x2c>

080082fc <HAL_I2C_Mem_Write>:
{
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	b085      	sub	sp, #20
 8008302:	469b      	mov	fp, r3
 8008304:	4604      	mov	r4, r0
 8008306:	460f      	mov	r7, r1
 8008308:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800830c:	4692      	mov	sl, r2
 800830e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8008312:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008314:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008318:	2b20      	cmp	r3, #32
 800831a:	f040 80a3 	bne.w	8008464 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800831e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008320:	b10b      	cbz	r3, 8008326 <HAL_I2C_Mem_Write+0x2a>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	b933      	cbnz	r3, 8008334 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800832a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800832c:	2001      	movs	r0, #1
}
 800832e:	b005      	add	sp, #20
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008334:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008338:	2b01      	cmp	r3, #1
 800833a:	f000 8093 	beq.w	8008464 <HAL_I2C_Mem_Write+0x168>
 800833e:	2501      	movs	r5, #1
 8008340:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8008344:	f7fe fa66 	bl	8006814 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008348:	2319      	movs	r3, #25
 800834a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800834c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800834e:	462a      	mov	r2, r5
 8008350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008354:	4620      	mov	r0, r4
 8008356:	f7ff fed0 	bl	80080fa <I2C_WaitOnFlagUntilTimeout>
 800835a:	4680      	mov	r8, r0
 800835c:	2800      	cmp	r0, #0
 800835e:	d1e5      	bne.n	800832c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008360:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8008362:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008364:	4652      	mov	r2, sl
 8008366:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008368:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800836c:	2340      	movs	r3, #64	; 0x40
 800836e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8008372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008374:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008376:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008378:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800837a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800837c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8008380:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008382:	465b      	mov	r3, fp
 8008384:	f7ff fee4 	bl	8008150 <I2C_RequestMemoryWrite>
 8008388:	b110      	cbz	r0, 8008390 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800838a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800838e:	e7cd      	b.n	800832c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008390:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008392:	b29b      	uxth	r3, r3
 8008394:	2bff      	cmp	r3, #255	; 0xff
 8008396:	d955      	bls.n	8008444 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008398:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800839a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800839e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083a2:	4639      	mov	r1, r7
 80083a4:	4620      	mov	r0, r4
 80083a6:	f7ff fdbb 	bl	8007f20 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083aa:	4632      	mov	r2, r6
 80083ac:	4649      	mov	r1, r9
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7ff fe57 	bl	8008062 <I2C_WaitOnTXISFlagUntilTimeout>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1b9      	bne.n	800832c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80083c0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80083c2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80083c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80083c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80083c8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80083ca:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80083cc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80083ce:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80083d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80083d4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	b1ab      	cbz	r3, 8008406 <HAL_I2C_Mem_Write+0x10a>
 80083da:	b9a2      	cbnz	r2, 8008406 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083dc:	464b      	mov	r3, r9
 80083de:	2180      	movs	r1, #128	; 0x80
 80083e0:	4620      	mov	r0, r4
 80083e2:	9600      	str	r6, [sp, #0]
 80083e4:	f7ff fe89 	bl	80080fa <I2C_WaitOnFlagUntilTimeout>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d19f      	bne.n	800832c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2bff      	cmp	r3, #255	; 0xff
 80083f2:	d92f      	bls.n	8008454 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083f4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80083f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083fa:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083fc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80083fe:	4639      	mov	r1, r7
 8008400:	4620      	mov	r0, r4
 8008402:	f7ff fd8d 	bl	8007f20 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008406:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008408:	b29b      	uxth	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1cd      	bne.n	80083aa <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800840e:	4632      	mov	r2, r6
 8008410:	4649      	mov	r1, r9
 8008412:	4620      	mov	r0, r4
 8008414:	f7ff fe4c 	bl	80080b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008418:	2800      	cmp	r0, #0
 800841a:	d187      	bne.n	800832c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	2120      	movs	r1, #32
 8008420:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8008428:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800842c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008436:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800843a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800843e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8008442:	e774      	b.n	800832e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8008444:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800844a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800844c:	b292      	uxth	r2, r2
 800844e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	e7a6      	b.n	80083a2 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8008454:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800845a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800845c:	b292      	uxth	r2, r2
 800845e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	e7cc      	b.n	80083fe <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8008464:	2002      	movs	r0, #2
 8008466:	e762      	b.n	800832e <HAL_I2C_Mem_Write+0x32>

08008468 <HAL_I2C_Mem_Read>:
{
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	b085      	sub	sp, #20
 800846e:	469b      	mov	fp, r3
 8008470:	4604      	mov	r4, r0
 8008472:	460f      	mov	r7, r1
 8008474:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8008478:	4692      	mov	sl, r2
 800847a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800847e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008480:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008484:	2b20      	cmp	r3, #32
 8008486:	f040 80a7 	bne.w	80085d8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800848a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800848c:	b10b      	cbz	r3, 8008492 <HAL_I2C_Mem_Read+0x2a>
 800848e:	9b03      	ldr	r3, [sp, #12]
 8008490:	b933      	cbnz	r3, 80084a0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008496:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8008498:	2001      	movs	r0, #1
}
 800849a:	b005      	add	sp, #20
 800849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80084a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	f000 8097 	beq.w	80085d8 <HAL_I2C_Mem_Read+0x170>
 80084aa:	2501      	movs	r5, #1
 80084ac:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80084b0:	f7fe f9b0 	bl	8006814 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084b4:	2319      	movs	r3, #25
 80084b6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80084b8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084ba:	462a      	mov	r2, r5
 80084bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084c0:	4620      	mov	r0, r4
 80084c2:	f7ff fe1a 	bl	80080fa <I2C_WaitOnFlagUntilTimeout>
 80084c6:	4680      	mov	r8, r0
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d1e5      	bne.n	8008498 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084cc:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80084ce:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084d0:	4652      	mov	r2, sl
 80084d2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084d8:	2340      	movs	r3, #64	; 0x40
 80084da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80084de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084e0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084e2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80084e4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80084e6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084e8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80084ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084ee:	465b      	mov	r3, fp
 80084f0:	f7ff fe64 	bl	80081bc <I2C_RequestMemoryRead>
 80084f4:	b110      	cbz	r0, 80084fc <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 80084f6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80084fa:	e7cd      	b.n	8008498 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2bff      	cmp	r3, #255	; 0xff
 8008502:	4b36      	ldr	r3, [pc, #216]	; (80085dc <HAL_I2C_Mem_Read+0x174>)
 8008504:	d958      	bls.n	80085b8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008506:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800850e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008510:	4639      	mov	r1, r7
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff fd04 	bl	8007f20 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008518:	464b      	mov	r3, r9
 800851a:	2200      	movs	r2, #0
 800851c:	2104      	movs	r1, #4
 800851e:	4620      	mov	r0, r4
 8008520:	9600      	str	r6, [sp, #0]
 8008522:	f7ff fdea 	bl	80080fa <I2C_WaitOnFlagUntilTimeout>
 8008526:	2800      	cmp	r0, #0
 8008528:	d1b6      	bne.n	8008498 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800852e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008530:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008532:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8008534:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008536:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8008538:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800853a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800853c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800853e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008540:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008542:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008544:	b29b      	uxth	r3, r3
 8008546:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008548:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800854a:	b29b      	uxth	r3, r3
 800854c:	b1ab      	cbz	r3, 800857a <HAL_I2C_Mem_Read+0x112>
 800854e:	b9a2      	cbnz	r2, 800857a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008550:	464b      	mov	r3, r9
 8008552:	2180      	movs	r1, #128	; 0x80
 8008554:	4620      	mov	r0, r4
 8008556:	9600      	str	r6, [sp, #0]
 8008558:	f7ff fdcf 	bl	80080fa <I2C_WaitOnFlagUntilTimeout>
 800855c:	2800      	cmp	r0, #0
 800855e:	d19b      	bne.n	8008498 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	2bff      	cmp	r3, #255	; 0xff
 8008566:	d92f      	bls.n	80085c8 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008568:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800856a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800856e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008570:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008572:	4639      	mov	r1, r7
 8008574:	4620      	mov	r0, r4
 8008576:	f7ff fcd3 	bl	8007f20 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800857a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800857c:	b29b      	uxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1ca      	bne.n	8008518 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008582:	4632      	mov	r2, r6
 8008584:	4649      	mov	r1, r9
 8008586:	4620      	mov	r0, r4
 8008588:	f7ff fd92 	bl	80080b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800858c:	2800      	cmp	r0, #0
 800858e:	d183      	bne.n	8008498 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	2120      	movs	r1, #32
 8008594:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800859c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80085a0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80085a4:	f022 0201 	bic.w	r2, r2, #1
 80085a8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80085aa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80085ae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085b2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80085b6:	e770      	b.n	800849a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80085b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80085c0:	b292      	uxth	r2, r2
 80085c2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085c4:	b2d2      	uxtb	r2, r2
 80085c6:	e7a3      	b.n	8008510 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80085c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085ce:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80085d0:	b292      	uxth	r2, r2
 80085d2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	e7cc      	b.n	8008572 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80085d8:	2002      	movs	r0, #2
 80085da:	e75e      	b.n	800849a <HAL_I2C_Mem_Read+0x32>
 80085dc:	80002400 	.word	0x80002400

080085e0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80085e0:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80085e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80085e4:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80085e6:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80085e8:	b103      	cbz	r3, 80085ec <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80085ea:	4718      	bx	r3
}
 80085ec:	4770      	bx	lr

080085ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085ee:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	b2dc      	uxtb	r4, r3
 80085f8:	d11d      	bne.n	8008636 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d019      	beq.n	8008636 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008602:	2324      	movs	r3, #36	; 0x24
 8008604:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008608:	6803      	ldr	r3, [r0, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	f022 0201 	bic.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008618:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	4311      	orrs	r1, r2
 800861e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	f042 0201 	orr.w	r2, r2, #1
 8008626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008628:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800862a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800862e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8008632:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008634:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008636:	2002      	movs	r0, #2
 8008638:	e7fc      	b.n	8008634 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800863a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800863a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800863c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008640:	2b20      	cmp	r3, #32
 8008642:	b2dc      	uxtb	r4, r3
 8008644:	d11c      	bne.n	8008680 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008646:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800864a:	2b01      	cmp	r3, #1
 800864c:	d018      	beq.n	8008680 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800864e:	2324      	movs	r3, #36	; 0x24
 8008650:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008654:	6803      	ldr	r3, [r0, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	f022 0201 	bic.w	r2, r2, #1
 800865c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800865e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008660:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008664:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008668:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f042 0201 	orr.w	r2, r2, #1
 8008670:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008672:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008674:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008678:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800867c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800867e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008680:	2002      	movs	r0, #2
 8008682:	e7fc      	b.n	800867e <HAL_I2CEx_ConfigDigitalFilter+0x44>

08008684 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008686:	3801      	subs	r0, #1
 8008688:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800868a:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800868c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 8008690:	462f      	mov	r7, r5
 8008692:	4425      	add	r5, r4
 8008694:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008698:	d822      	bhi.n	80086e0 <JPEG_Bits_To_SizeCodes+0x5c>
 800869a:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800869c:	b954      	cbnz	r4, 80086b4 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 800869e:	3601      	adds	r6, #1
 80086a0:	2e11      	cmp	r6, #17
 80086a2:	d1f3      	bne.n	800868c <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 80086a4:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80086a6:	2601      	movs	r6, #1
  *LastK = p;
 80086a8:	601d      	str	r5, [r3, #0]
  code = 0;
 80086aa:	4623      	mov	r3, r4
  si = Huffsize[0];
 80086ac:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 80086ae:	5d08      	ldrb	r0, [r1, r4]
 80086b0:	b9a0      	cbnz	r0, 80086dc <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 80086b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 80086b4:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 80086b6:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 80086ba:	e7ef      	b.n	800869c <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 80086bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 80086c0:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 80086c2:	5d08      	ldrb	r0, [r1, r4]
 80086c4:	193b      	adds	r3, r7, r4
 80086c6:	42a8      	cmp	r0, r5
 80086c8:	d0f8      	beq.n	80086bc <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 80086ca:	2d1f      	cmp	r5, #31
 80086cc:	d808      	bhi.n	80086e0 <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80086ce:	fa06 f005 	lsl.w	r0, r6, r5
 80086d2:	4298      	cmp	r0, r3
 80086d4:	d904      	bls.n	80086e0 <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 80086d6:	005b      	lsls	r3, r3, #1
    si++;
 80086d8:	3501      	adds	r5, #1
 80086da:	e7e8      	b.n	80086ae <JPEG_Bits_To_SizeCodes+0x2a>
 80086dc:	1b1f      	subs	r7, r3, r4
 80086de:	e7f0      	b.n	80086c2 <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 80086e0:	2001      	movs	r0, #1
 80086e2:	e7e6      	b.n	80086b2 <JPEG_Bits_To_SizeCodes+0x2e>

080086e4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80086e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e6:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 80086ea:	460d      	mov	r5, r1
 80086ec:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80086ee:	aa43      	add	r2, sp, #268	; 0x10c
 80086f0:	a902      	add	r1, sp, #8
 80086f2:	ab01      	add	r3, sp, #4
 80086f4:	f7ff ffc6 	bl	8008684 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80086f8:	b930      	cbnz	r0, 8008708 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
 80086fa:	f104 0310 	add.w	r3, r4, #16
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 80086fe:	f8dd c004 	ldr.w	ip, [sp, #4]
  k = 0;
 8008702:	4604      	mov	r4, r0
  while (k < lastK)
 8008704:	45a4      	cmp	ip, r4
 8008706:	d102      	bne.n	800870e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008708:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 800870c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800870e:	f813 6b01 	ldrb.w	r6, [r3], #1
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008712:	2e0b      	cmp	r6, #11
 8008714:	d80a      	bhi.n	800872c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x48>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008716:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800871a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800871e:	f8ce 700c 	str.w	r7, [lr, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008722:	5d0f      	ldrb	r7, [r1, r4]
      k++;
 8008724:	3401      	adds	r4, #1
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008726:	3f01      	subs	r7, #1
 8008728:	55af      	strb	r7, [r5, r6]
      k++;
 800872a:	e7eb      	b.n	8008704 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x20>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800872c:	2001      	movs	r0, #1
 800872e:	e7eb      	b.n	8008708 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>

08008730 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008730:	4603      	mov	r3, r0
 8008732:	4608      	mov	r0, r1
 8008734:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008736:	681c      	ldr	r4, [r3, #0]
{
 8008738:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800873a:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 800873e:	429a      	cmp	r2, r3
 8008740:	d125      	bne.n	800878e <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008742:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8008746:	a901      	add	r1, sp, #4
 8008748:	f7ff ffcc 	bl	80086e4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800874c:	b9e8      	cbnz	r0, 800878a <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800874e:	aa01      	add	r2, sp, #4
 8008750:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8008754:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8008758:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800875a:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800875c:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800875e:	7ad3      	ldrb	r3, [r2, #11]
 8008760:	3d08      	subs	r5, #8
 8008762:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
 8008766:	3a02      	subs	r2, #2
 8008768:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800876a:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800876e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008772:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008774:	7b13      	ldrb	r3, [r2, #12]
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800877c:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800877e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008782:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008786:	42b4      	cmp	r4, r6
 8008788:	d1e9      	bne.n	800875e <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800878a:	b011      	add	sp, #68	; 0x44
 800878c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800878e:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 8008792:	429a      	cmp	r2, r3
 8008794:	d102      	bne.n	800879c <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008796:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 800879a:	e7d4      	b.n	8008746 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800879c:	2001      	movs	r0, #1
 800879e:	e7f4      	b.n	800878a <JPEG_Set_HuffDC_Mem+0x5a>

080087a0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80087a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80087a4:	6804      	ldr	r4, [r0, #0]
{
 80087a6:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 80087aa:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80087ac:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d116      	bne.n	80087e2 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80087b4:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80087b8:	466b      	mov	r3, sp
 80087ba:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 80087be:	a901      	add	r1, sp, #4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f7ff ff5f 	bl	8008684 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d15d      	bne.n	8008886 <JPEG_Set_HuffAC_Mem+0xe6>
 80087ca:	9b00      	ldr	r3, [sp, #0]
 80087cc:	f105 0c10 	add.w	ip, r5, #16
 80087d0:	f20d 4734 	addw	r7, sp, #1076	; 0x434
 80087d4:	ae01      	add	r6, sp, #4
 80087d6:	3310      	adds	r3, #16
      l = (msb * 10UL) + lsb - 1UL;
 80087d8:	f04f 0e0a 	mov.w	lr, #10
 80087dc:	18e9      	adds	r1, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80087de:	ad42      	add	r5, sp, #264	; 0x108
 80087e0:	e020      	b.n	8008824 <JPEG_Set_HuffAC_Mem+0x84>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80087e2:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d10f      	bne.n	800880a <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80087ea:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 80087ee:	e7e3      	b.n	80087b8 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80087f0:	f81c 3b01 	ldrb.w	r3, [ip], #1
    if (l == 0UL)
 80087f4:	b15b      	cbz	r3, 800880e <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80087f6:	2bf0      	cmp	r3, #240	; 0xf0
 80087f8:	d049      	beq.n	800888e <JPEG_Set_HuffAC_Mem+0xee>
      msb = (l & 0xF0UL) >> 4;
 80087fa:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80087fc:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8008800:	3b01      	subs	r3, #1
 8008802:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008806:	2ba1      	cmp	r3, #161	; 0xa1
 8008808:	d902      	bls.n	8008810 <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800880a:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 800880c:	e03b      	b.n	8008886 <JPEG_Set_HuffAC_Mem+0xe6>
      l = 160; /*l = 0x00 EOB code*/
 800880e:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008810:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8008814:	f857 8b04 	ldr.w	r8, [r7], #4
 8008818:	f8c2 80a4 	str.w	r8, [r2, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800881c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8008820:	3a01      	subs	r2, #1
 8008822:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 8008824:	4561      	cmp	r1, ip
 8008826:	d1e3      	bne.n	80087f0 <JPEG_Set_HuffAC_Mem+0x50>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8008828:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800882c:	a942      	add	r1, sp, #264	; 0x108
 800882e:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 8008832:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8008834:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800883a:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 800883e:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 8008842:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8008844:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8008848:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800884a:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800884e:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8008850:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8008854:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008856:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
 800885a:	3d08      	subs	r5, #8
 800885c:	f895 2330 	ldrb.w	r2, [r5, #816]	; 0x330
 8008860:	3902      	subs	r1, #2
 8008862:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008864:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008868:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800886c:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800886e:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008878:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800887a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800887e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008882:	42b4      	cmp	r4, r6
 8008884:	d1e7      	bne.n	8008856 <JPEG_Set_HuffAC_Mem+0xb6>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008886:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 800888a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 800888e:	23a1      	movs	r3, #161	; 0xa1
 8008890:	e7be      	b.n	8008810 <JPEG_Set_HuffAC_Mem+0x70>

08008892 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8008892:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008894:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008898:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800889a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800889c:	6803      	ldr	r3, [r0, #0]
 800889e:	f002 0203 	and.w	r2, r2, #3
 80088a2:	2a02      	cmp	r2, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	bf0c      	ite	eq
 80088a8:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80088ac:	f022 0208 	bicne.w	r2, r2, #8
 80088b0:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	f022 0201 	bic.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80088ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088bc:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80088c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c4:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80088c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80088ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088d0:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80088d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80088da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088dc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80088e0:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	f042 0201 	orr.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80088ea:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80088ec:	f002 020c 	and.w	r2, r2, #12
 80088f0:	2a08      	cmp	r2, #8
 80088f2:	d104      	bne.n	80088fe <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80088f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088f6:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80088fc:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80088fe:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008900:	f002 020c 	and.w	r2, r2, #12
 8008904:	2a0c      	cmp	r2, #12
 8008906:	d1f9      	bne.n	80088fc <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800890a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800890e:	e7f4      	b.n	80088fa <JPEG_Init_Process+0x68>

08008910 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8008912:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8008914:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8008916:	2b03      	cmp	r3, #3
 8008918:	d927      	bls.n	800896a <JPEG_DMA_StartProcess+0x5a>
 800891a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800891c:	2903      	cmp	r1, #3
 800891e:	d924      	bls.n	800896a <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8008920:	6d42      	ldr	r2, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008922:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8008926:	4d1a      	ldr	r5, [pc, #104]	; (8008990 <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8008928:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800892c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8008930:	4e18      	ldr	r6, [pc, #96]	; (8008994 <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8008932:	4f19      	ldr	r7, [pc, #100]	; (8008998 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8008934:	6542      	str	r2, [r0, #84]	; 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8008936:	6802      	ldr	r2, [r0, #0]
 8008938:	6b10      	ldr	r0, [r2, #48]	; 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800893a:	3240      	adds	r2, #64	; 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800893c:	f420 50c0 	bic.w	r0, r0, #6144	; 0x1800
 8008940:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8008944:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008946:	63c5      	str	r5, [r0, #60]	; 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8008948:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800894a:	64c6      	str	r6, [r0, #76]	; 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 800894c:	64ee      	str	r6, [r5, #76]	; 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800894e:	4e13      	ldr	r6, [pc, #76]	; (800899c <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8008950:	63ef      	str	r7, [r5, #60]	; 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8008952:	652e      	str	r6, [r5, #80]	; 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008954:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008956:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8008958:	62e1      	str	r1, [r4, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800895a:	69a1      	ldr	r1, [r4, #24]
 800895c:	f7fe fb4a 	bl	8006ff4 <HAL_DMA_Start_IT>
 8008960:	b128      	cbz	r0, 800896e <JPEG_DMA_StartProcess+0x5e>

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008962:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008964:	f043 0304 	orr.w	r3, r3, #4
 8008968:	6523      	str	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 800896a:	2001      	movs	r0, #1
 800896c:	e00e      	b.n	800898c <JPEG_DMA_StartProcess+0x7c>
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800896e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008970:	6821      	ldr	r1, [r4, #0]
 8008972:	089b      	lsrs	r3, r3, #2
 8008974:	69e2      	ldr	r2, [r4, #28]
 8008976:	3144      	adds	r1, #68	; 0x44
 8008978:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800897a:	f7fe fb3b 	bl	8006ff4 <HAL_DMA_Start_IT>
 800897e:	2800      	cmp	r0, #0
 8008980:	d1ef      	bne.n	8008962 <JPEG_DMA_StartProcess+0x52>
    return HAL_ERROR;
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008986:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800898a:	6313      	str	r3, [r2, #48]	; 0x30

  return HAL_OK;
}
 800898c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800898e:	bf00      	nop
 8008990:	08008efd 	.word	0x08008efd
 8008994:	08008de1 	.word	0x08008de1
 8008998:	080093b1 	.word	0x080093b1
 800899c:	080093a1 	.word	0x080093a1

080089a0 <HAL_JPEG_Init>:
{
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 80089a2:	4604      	mov	r4, r0
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f000 811f 	beq.w	8008be8 <HAL_JPEG_Init+0x248>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80089aa:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80089ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80089b2:	b91b      	cbnz	r3, 80089bc <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 80089b4:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 80089b8:	f7fb fbd4 	bl	8004164 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 80089bc:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80089be:	2302      	movs	r3, #2
 80089c0:	498a      	ldr	r1, [pc, #552]	; (8008bec <HAL_JPEG_Init+0x24c>)
 80089c2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 80089c6:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 80089ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80089cc:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80089d6:	6813      	ldr	r3, [r2, #0]
 80089d8:	f023 0301 	bic.w	r3, r3, #1
 80089dc:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80089de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80089e0:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80089e4:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80089e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80089e8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80089ec:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80089ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80089f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80089f4:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80089f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80089f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089fc:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80089fe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008a00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a04:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008a06:	4b7a      	ldr	r3, [pc, #488]	; (8008bf0 <HAL_JPEG_Init+0x250>)
 8008a08:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8008a0a:	4b7a      	ldr	r3, [pc, #488]	; (8008bf4 <HAL_JPEG_Init+0x254>)
 8008a0c:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8008a0e:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8008a10:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008a14:	7b8b      	ldrb	r3, [r1, #14]
 8008a16:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a18:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008a1a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a1c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008a20:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008a22:	4333      	orrs	r3, r6
 8008a24:	7c4e      	ldrb	r6, [r1, #17]
 8008a26:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a2a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8008a2e:	42a8      	cmp	r0, r5
 8008a30:	d1f0      	bne.n	8008a14 <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008a32:	4b71      	ldr	r3, [pc, #452]	; (8008bf8 <HAL_JPEG_Init+0x258>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008a34:	f502 7662 	add.w	r6, r2, #904	; 0x388
 8008a38:	4970      	ldr	r1, [pc, #448]	; (8008bfc <HAL_JPEG_Init+0x25c>)
 8008a3a:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008a3e:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 8008a42:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008a46:	460d      	mov	r5, r1
 8008a48:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008a4a:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 8008a4e:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8008a52:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008a56:	7bab      	ldrb	r3, [r5, #14]
 8008a58:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a5a:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008a5e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a60:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8008a64:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008a68:	ea43 030c 	orr.w	r3, r3, ip
 8008a6c:	f895 c011 	ldrb.w	ip, [r5, #17]
 8008a70:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008a74:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8008a78:	42be      	cmp	r6, r7
 8008a7a:	d1ec      	bne.n	8008a56 <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 8008a7c:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8008a80:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 8008a84:	0c1b      	lsrs	r3, r3, #16
 8008a86:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8008a88:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 8008a8c:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 8008a90:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008a94:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
 8008a98:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008a9a:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008a9e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008aa0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8008aa4:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8008aa8:	4333      	orrs	r3, r6
 8008aaa:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 8008aae:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008ab2:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 8008ab6:	4285      	cmp	r5, r0
 8008ab8:	d1ec      	bne.n	8008a94 <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 8008aba:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8008abe:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  value = *address & 0xFFFF0000U;
 8008ac2:	484f      	ldr	r0, [pc, #316]	; (8008c00 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFU;
 8008ac4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8008ac6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 8008aca:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 8008ace:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 8008ad2:	4003      	ands	r3, r0
  *address = value;
 8008ad4:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008ad8:	2301      	movs	r3, #1
 8008ada:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 8008ade:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8008ae2:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8008ae6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  value = *address & 0x0000FFFFUL;
 8008aea:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008aee:	4b45      	ldr	r3, [pc, #276]	; (8008c04 <HAL_JPEG_Init+0x264>)
  value = *address & 0x0000FFFFUL;
 8008af0:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008af2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  *address = value;
 8008af6:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 8008afa:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8008afe:	4001      	ands	r1, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8008b00:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 8008b04:	f041 010a 	orr.w	r1, r1, #10
  *address = value;
 8008b08:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008b0c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 8008b10:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8008b14:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
 8008b18:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8008b1c:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8008b1e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  *address = value;
 8008b22:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
 8008b26:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8008b2a:	4937      	ldr	r1, [pc, #220]	; (8008c08 <HAL_JPEG_Init+0x268>)
 8008b2c:	4003      	ands	r3, r0
  address = (hjpeg->Instance->DHTMEM + 102);
 8008b2e:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8008b32:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8008b36:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8008b3a:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008b3e:	4b33      	ldr	r3, [pc, #204]	; (8008c0c <HAL_JPEG_Init+0x26c>)
 8008b40:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 8008b44:	4b32      	ldr	r3, [pc, #200]	; (8008c10 <HAL_JPEG_Init+0x270>)
 8008b46:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 8008b4a:	4b32      	ldr	r3, [pc, #200]	; (8008c14 <HAL_JPEG_Init+0x274>)
 8008b4c:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 8008b50:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8008b54:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8008b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 8008b5a:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008b5e:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
 8008b62:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008b64:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008b68:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008b6a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8008b6e:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008b72:	4333      	orrs	r3, r6
 8008b74:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 8008b78:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008b7c:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8008b80:	42a8      	cmp	r0, r5
 8008b82:	d1ec      	bne.n	8008b5e <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008b84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b88:	491c      	ldr	r1, [pc, #112]	; (8008bfc <HAL_JPEG_Init+0x25c>)
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7ff fe08 	bl	80087a0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008b90:	b110      	cbz	r0, 8008b98 <HAL_JPEG_Init+0x1f8>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8008b92:	2001      	movs	r0, #1
 8008b94:	6520      	str	r0, [r4, #80]	; 0x50
}
 8008b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 8008b98:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	491a      	ldr	r1, [pc, #104]	; (8008c08 <HAL_JPEG_Init+0x268>)
 8008b9e:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 8008ba2:	f7ff fdfd 	bl	80087a0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d1f3      	bne.n	8008b92 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC0);
 8008baa:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008bac:	4620      	mov	r0, r4
 8008bae:	490f      	ldr	r1, [pc, #60]	; (8008bec <HAL_JPEG_Init+0x24c>)
 8008bb0:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8008bb4:	f7ff fdbc 	bl	8008730 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1ea      	bne.n	8008b92 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC1);
 8008bbc:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	4915      	ldr	r1, [pc, #84]	; (8008c18 <HAL_JPEG_Init+0x278>)
 8008bc2:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8008bc6:	f7ff fdb3 	bl	8008730 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d1e1      	bne.n	8008b92 <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8008bce:	6822      	ldr	r2, [r4, #0]
 8008bd0:	6853      	ldr	r3, [r2, #4]
 8008bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bd6:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008bd8:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8008bda:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 8008bdc:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008bde:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008be2:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 8008be4:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 8008be6:	e7d6      	b.n	8008b96 <HAL_JPEG_Init+0x1f6>
    return HAL_ERROR;
 8008be8:	2001      	movs	r0, #1
 8008bea:	e7d4      	b.n	8008b96 <HAL_JPEG_Init+0x1f6>
 8008bec:	08029569 	.word	0x08029569
 8008bf0:	08029585 	.word	0x08029585
 8008bf4:	0802950d 	.word	0x0802950d
 8008bf8:	0b0a0908 	.word	0x0b0a0908
 8008bfc:	0802945b 	.word	0x0802945b
 8008c00:	ffff0000 	.word	0xffff0000
 8008c04:	09080706 	.word	0x09080706
 8008c08:	080293a9 	.word	0x080293a9
 8008c0c:	01000404 	.word	0x01000404
 8008c10:	05070403 	.word	0x05070403
 8008c14:	04040201 	.word	0x04040201
 8008c18:	0802954d 	.word	0x0802954d

08008c1c <HAL_JPEG_GetInfo>:
{
 8008c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d06a      	beq.n	8008cfa <HAL_JPEG_GetInfo+0xde>
 8008c24:	2900      	cmp	r1, #0
 8008c26:	d068      	beq.n	8008cfa <HAL_JPEG_GetInfo+0xde>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008c28:	6804      	ldr	r4, [r0, #0]
 8008c2a:	6863      	ldr	r3, [r4, #4]
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d13b      	bne.n	8008cac <HAL_JPEG_GetInfo+0x90>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008c34:	2310      	movs	r3, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8008c36:	600b      	str	r3, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008c38:	6863      	ldr	r3, [r4, #4]
 8008c3a:	0c1b      	lsrs	r3, r3, #16
 8008c3c:	608b      	str	r3, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008c3e:	68e3      	ldr	r3, [r4, #12]
 8008c40:	0c1b      	lsrs	r3, r3, #16
 8008c42:	60cb      	str	r3, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008c44:	680b      	ldr	r3, [r1, #0]
 8008c46:	f023 0320 	bic.w	r3, r3, #32
 8008c4a:	2b10      	cmp	r3, #16
 8008c4c:	d13b      	bne.n	8008cc6 <HAL_JPEG_GetInfo+0xaa>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008c4e:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008c50:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008c52:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008c56:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008c58:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008c5a:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008c5c:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008c60:	d12f      	bne.n	8008cc2 <HAL_JPEG_GetInfo+0xa6>
 8008c62:	4313      	orrs	r3, r2
 8008c64:	071a      	lsls	r2, r3, #28
 8008c66:	d12e      	bne.n	8008cc6 <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8008c68:	2302      	movs	r3, #2
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8008c6a:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	3450      	adds	r4, #80	; 0x50
 8008c70:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8008d00 <HAL_JPEG_GetInfo+0xe4>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8008c74:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008c76:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8008c7a:	f241 3888 	movw	r8, #5000	; 0x1388
    quantRow = *tableAddress;
 8008c7e:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8008c82:	eb0c 0705 	add.w	r7, ip, r5
    quantRow = *tableAddress;
 8008c86:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8008c88:	fa29 f206 	lsr.w	r2, r9, r6
 8008c8c:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8008c8e:	2a01      	cmp	r2, #1
 8008c90:	d120      	bne.n	8008cd4 <HAL_JPEG_GetInfo+0xb8>
        quality += 100UL;
 8008c92:	3364      	adds	r3, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 8008c94:	3608      	adds	r6, #8
 8008c96:	3701      	adds	r7, #1
 8008c98:	2e20      	cmp	r6, #32
 8008c9a:	d1f5      	bne.n	8008c88 <HAL_JPEG_GetInfo+0x6c>
        }
      }
    }

    i += 4UL;
 8008c9c:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8008c9e:	2d40      	cmp	r5, #64	; 0x40
 8008ca0:	d1ed      	bne.n	8008c7e <HAL_JPEG_GetInfo+0x62>
    tableAddress ++;
  }

  return (quality / 64UL);
 8008ca2:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8008ca4:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008ca6:	610b      	str	r3, [r1, #16]
}
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8008cac:	6863      	ldr	r3, [r4, #4]
 8008cae:	f013 0303 	ands.w	r3, r3, #3
 8008cb2:	d0c0      	beq.n	8008c36 <HAL_JPEG_GetInfo+0x1a>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008cb4:	6863      	ldr	r3, [r4, #4]
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d11d      	bne.n	8008cfa <HAL_JPEG_GetInfo+0xde>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8008cbe:	2330      	movs	r3, #48	; 0x30
 8008cc0:	e7b9      	b.n	8008c36 <HAL_JPEG_GetInfo+0x1a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008cc2:	2d03      	cmp	r5, #3
 8008cc4:	d001      	beq.n	8008cca <HAL_JPEG_GetInfo+0xae>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e7cf      	b.n	8008c6a <HAL_JPEG_GetInfo+0x4e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	071b      	lsls	r3, r3, #28
 8008cce:	d1fa      	bne.n	8008cc6 <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e7ca      	b.n	8008c6a <HAL_JPEG_GetInfo+0x4e>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008cd4:	fb0e fb02 	mul.w	fp, lr, r2
 8008cd8:	f897 a000 	ldrb.w	sl, [r7]
 8008cdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008cde:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8008ce2:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8008ce6:	2a64      	cmp	r2, #100	; 0x64
          quality += 5000UL / scale;
 8008ce8:	bf8b      	itete	hi
 8008cea:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8008cee:	f1c2 02c8 	rsbls	r2, r2, #200	; 0xc8
          quality += 5000UL / scale;
 8008cf2:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8008cf4:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8008cf8:	e7cc      	b.n	8008c94 <HAL_JPEG_GetInfo+0x78>
    return HAL_ERROR;
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	e7d4      	b.n	8008ca8 <HAL_JPEG_GetInfo+0x8c>
 8008cfe:	bf00      	nop
 8008d00:	080295c5 	.word	0x080295c5

08008d04 <HAL_JPEG_Decode_DMA>:
{
 8008d04:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8008d06:	4604      	mov	r4, r0
 8008d08:	b348      	cbz	r0, 8008d5e <HAL_JPEG_Decode_DMA+0x5a>
 8008d0a:	b341      	cbz	r1, 8008d5e <HAL_JPEG_Decode_DMA+0x5a>
 8008d0c:	b33b      	cbz	r3, 8008d5e <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8008d0e:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 8008d12:	2d01      	cmp	r5, #1
 8008d14:	d028      	beq.n	8008d68 <HAL_JPEG_Decode_DMA+0x64>
 8008d16:	2501      	movs	r5, #1
 8008d18:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008d1c:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
 8008d20:	2d01      	cmp	r5, #1
 8008d22:	d11e      	bne.n	8008d62 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008d24:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8008d26:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008d28:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008d2c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8008d2e:	f025 050f 	bic.w	r5, r5, #15
 8008d32:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008d34:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8008d36:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8008d3a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008d3e:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
 8008d40:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8008d42:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8008d44:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8008d46:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegOutCount = 0;
 8008d48:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 8008d4a:	f7ff fda2 	bl	8008892 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8008d4e:	f7ff fddf 	bl	8008910 <JPEG_DMA_StartProcess>
 8008d52:	b128      	cbz	r0, 8008d60 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008d54:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8008d56:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008d5a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 8008d5e:	2001      	movs	r0, #1
}
 8008d60:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hjpeg);
 8008d62:	2300      	movs	r3, #0
 8008d64:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  __HAL_LOCK(hjpeg);
 8008d68:	2002      	movs	r0, #2
 8008d6a:	e7f9      	b.n	8008d60 <HAL_JPEG_Decode_DMA+0x5c>

08008d6c <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008d6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008d6e:	f003 030c 	and.w	r3, r3, #12
 8008d72:	2b0c      	cmp	r3, #12
 8008d74:	d117      	bne.n	8008da6 <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008d76:	f011 0301 	ands.w	r3, r1, #1
 8008d7a:	d005      	beq.n	8008d88 <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008d7c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d82:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8008d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008d88:	0789      	lsls	r1, r1, #30
 8008d8a:	d505      	bpl.n	8008d98 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008d8c:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8008d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d96:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008d98:	6801      	ldr	r1, [r0, #0]
 8008d9a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8008d9c:	ea22 0303 	bic.w	r3, r2, r3
 8008da0:	630b      	str	r3, [r1, #48]	; 0x30
}
 8008da2:	2000      	movs	r0, #0
 8008da4:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008da6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008da8:	f003 030c 	and.w	r3, r3, #12
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d1f8      	bne.n	8008da2 <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008db0:	f011 0301 	ands.w	r3, r1, #1
 8008db4:	d004      	beq.n	8008dc0 <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008db6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008dbc:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008dbe:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008dc0:	078a      	lsls	r2, r1, #30
 8008dc2:	d5e9      	bpl.n	8008d98 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008dc4:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008dc6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008dca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dce:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008dd0:	e7e2      	b.n	8008d98 <HAL_JPEG_Pause+0x2c>

08008dd2 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008dd2:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8008dd4:	6282      	str	r2, [r0, #40]	; 0x28
}
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008dd8:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008dda:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 8008ddc:	4770      	bx	lr

08008dde <HAL_JPEG_EncodeCpltCallback>:
 8008dde:	4770      	bx	lr

08008de0 <JPEG_DMAErrorCallback>:
{
 8008de0:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008de2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008de4:	f7fe fa14 	bl	8007210 <HAL_DMA_GetError>
 8008de8:	2802      	cmp	r0, #2
 8008dea:	d016      	beq.n	8008e1a <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008dec:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 8008dee:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	f022 0201 	bic.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dfa:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8008dfe:	631a      	str	r2, [r3, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8008e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e02:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8008e06:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008e0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008e10:	f043 0304 	orr.w	r3, r3, #4
 8008e14:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 8008e16:	f7f8 fe41 	bl	8001a9c <HAL_JPEG_ErrorCallback>
}
 8008e1a:	bd10      	pop	{r4, pc}

08008e1c <JPEG_ReadInputData>:
{
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008e1e:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8008e20:	4604      	mov	r4, r0
 8008e22:	460e      	mov	r6, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008e24:	bb35      	cbnz	r5, 8008e74 <JPEG_ReadInputData+0x58>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8008e26:	2101      	movs	r1, #1
 8008e28:	f7ff ffa0 	bl	8008d6c <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008e2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008e2e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8008e32:	d11e      	bne.n	8008e72 <JPEG_ReadInputData+0x56>
 8008e34:	b1ed      	cbz	r5, 8008e72 <JPEG_ReadInputData+0x56>
    if (nb_words >= nbRequestWords)
 8008e36:	ebb6 0f95 	cmp.w	r6, r5, lsr #2
    nb_words = nb_bytes / 4UL;
 8008e3a:	ea4f 0795 	mov.w	r7, r5, lsr #2
    if (nb_words >= nbRequestWords)
 8008e3e:	d830      	bhi.n	8008ea2 <JPEG_ReadInputData+0x86>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008e40:	69a5      	ldr	r5, [r4, #24]
 8008e42:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 8008e44:	6a20      	ldr	r0, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008e46:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008e48:	1829      	adds	r1, r5, r0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008e4a:	5c28      	ldrb	r0, [r5, r0]
      for (index = 0; index < nbRequestWords; index++)
 8008e4c:	429e      	cmp	r6, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008e4e:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008e50:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008e54:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008e58:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008e5a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008e5e:	ea42 0200 	orr.w	r2, r2, r0
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008e62:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008e66:	643a      	str	r2, [r7, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 8008e68:	6a22      	ldr	r2, [r4, #32]
 8008e6a:	f102 0204 	add.w	r2, r2, #4
 8008e6e:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008e70:	d1e8      	bne.n	8008e44 <JPEG_ReadInputData+0x28>
}
 8008e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008e74:	6a03      	ldr	r3, [r0, #32]
 8008e76:	429d      	cmp	r5, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008e78:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008e7a:	d901      	bls.n	8008e80 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008e7c:	1aed      	subs	r5, r5, r3
 8008e7e:	e7d5      	b.n	8008e2c <JPEG_ReadInputData+0x10>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8008e80:	429d      	cmp	r5, r3
 8008e82:	d10c      	bne.n	8008e9e <JPEG_ReadInputData+0x82>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008e84:	6a01      	ldr	r1, [r0, #32]
 8008e86:	f7f8 fdb5 	bl	80019f4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8008e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e8c:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008e8e:	bf84      	itt	hi
 8008e90:	f023 0303 	bichi.w	r3, r3, #3
 8008e94:	62a3      	strhi	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 8008e96:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8008e98:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 8008e9a:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8008e9c:	e7c6      	b.n	8008e2c <JPEG_ReadInputData+0x10>
  uint32_t nb_bytes = 0;
 8008e9e:	2500      	movs	r5, #0
 8008ea0:	e7c4      	b.n	8008e2c <JPEG_ReadInputData+0x10>
      if (nb_words > 0UL)
 8008ea2:	2d03      	cmp	r5, #3
 8008ea4:	d826      	bhi.n	8008ef4 <JPEG_ReadInputData+0xd8>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008ea6:	69a6      	ldr	r6, [r4, #24]
        for (index = 0; index < nb_bytes; index++)
 8008ea8:	461a      	mov	r2, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008eaa:	6a21      	ldr	r1, [r4, #32]
 8008eac:	00d0      	lsls	r0, r2, #3
        for (index = 0; index < nb_bytes; index++)
 8008eae:	3201      	adds	r2, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008eb0:	5c71      	ldrb	r1, [r6, r1]
        for (index = 0; index < nb_bytes; index++)
 8008eb2:	4295      	cmp	r5, r2
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008eb4:	fa01 f100 	lsl.w	r1, r1, r0
 8008eb8:	ea43 0301 	orr.w	r3, r3, r1
          hjpeg->JpegInCount++;
 8008ebc:	6a21      	ldr	r1, [r4, #32]
 8008ebe:	f101 0101 	add.w	r1, r1, #1
 8008ec2:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008ec4:	d1f1      	bne.n	8008eaa <JPEG_ReadInputData+0x8e>
        hjpeg->Instance->DIR = dataword;
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008eca:	e7d2      	b.n	8008e72 <JPEG_ReadInputData+0x56>
          input_count = hjpeg->JpegInCount;
 8008ecc:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008ece:	3301      	adds	r3, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008ed0:	69a6      	ldr	r6, [r4, #24]
 8008ed2:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ed4:	1970      	adds	r0, r6, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008ed6:	5d75      	ldrb	r5, [r6, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008ed8:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008eda:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008ede:	0412      	lsls	r2, r2, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008ee0:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ee2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008ee6:	432a      	orrs	r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008ee8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008eec:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 8008eee:	6a22      	ldr	r2, [r4, #32]
 8008ef0:	3204      	adds	r2, #4
 8008ef2:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008ef4:	42bb      	cmp	r3, r7
 8008ef6:	d1e9      	bne.n	8008ecc <JPEG_ReadInputData+0xb0>
 8008ef8:	e7bb      	b.n	8008e72 <JPEG_ReadInputData+0x56>
	...

08008efc <JPEG_DMAInCpltCallback>:
{
 8008efc:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008efe:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f04:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8008f08:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8008f0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008f0c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8008f10:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008f14:	0412      	lsls	r2, r2, #16
 8008f16:	0c12      	lsrs	r2, r2, #16
 8008f18:	2a0c      	cmp	r2, #12
 8008f1a:	d12c      	bne.n	8008f76 <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8008f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f22:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8008f24:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008f26:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <JPEG_DMAInCpltCallback+0x9c>)
 8008f2c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 8008f30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008f36:	6a21      	ldr	r1, [r4, #32]
 8008f38:	f7f8 fd5c 	bl	80019f4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 8008f3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d91a      	bls.n	8008f78 <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008f42:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 8008f46:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008f48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008f4a:	04db      	lsls	r3, r3, #19
 8008f4c:	d41d      	bmi.n	8008f8a <JPEG_DMAInCpltCallback+0x8e>
 8008f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f50:	b1db      	cbz	r3, 8008f8a <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	089b      	lsrs	r3, r3, #2
 8008f56:	69a1      	ldr	r1, [r4, #24]
 8008f58:	3240      	adds	r2, #64	; 0x40
 8008f5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f5c:	f7fe f84a 	bl	8006ff4 <HAL_DMA_Start_IT>
 8008f60:	b170      	cbz	r0, 8008f80 <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008f62:	6d23      	ldr	r3, [r4, #80]	; 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8008f64:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008f66:	f043 0304 	orr.w	r3, r3, #4
 8008f6a:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008f6c:	2306      	movs	r3, #6
 8008f6e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008f72:	f7f8 fd93 	bl	8001a9c <HAL_JPEG_ErrorCallback>
}
 8008f76:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d0e5      	beq.n	8008f48 <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	e7e2      	b.n	8008f46 <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f88:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008f8a:	6822      	ldr	r2, [r4, #0]
 8008f8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008f8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f92:	6313      	str	r3, [r2, #48]	; 0x30
 8008f94:	e7ef      	b.n	8008f76 <JPEG_DMAInCpltCallback+0x7a>
 8008f96:	bf00      	nop
 8008f98:	0003fffc 	.word	0x0003fffc

08008f9c <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008f9c:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 8008f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008fa0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008fa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8008fa6:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d32a      	bcc.n	8009002 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008fac:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008fae:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8008fb0:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008fb2:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8008fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nbOutputWords; index++)
 8008fb6:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008fb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008fba:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008fbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008fbe:	69e0      	ldr	r0, [r4, #28]
 8008fc0:	4428      	add	r0, r5
 8008fc2:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008fc6:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008fc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008fca:	69e0      	ldr	r0, [r4, #28]
 8008fcc:	4428      	add	r0, r5
 8008fce:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008fd2:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008fd6:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008fd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008fda:	69e0      	ldr	r0, [r4, #28]
 8008fdc:	4428      	add	r0, r5
 8008fde:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8008fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe2:	f103 0304 	add.w	r3, r3, #4
 8008fe6:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8008fe8:	d1e1      	bne.n	8008fae <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d106      	bne.n	8009000 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008ff2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008ff4:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f7f8 fd1a 	bl	8001a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009002:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009004:	4293      	cmp	r3, r2
 8009006:	d9fb      	bls.n	8009000 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009008:	6a42      	ldr	r2, [r0, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800900a:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8009010:	4290      	cmp	r0, r2
 8009012:	69e1      	ldr	r1, [r4, #28]
 8009014:	d105      	bne.n	8009022 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009016:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800901a:	429f      	cmp	r7, r3
 800901c:	d119      	bne.n	8009052 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800901e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009020:	e7e9      	b.n	8008ff6 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8009022:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8009024:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8009026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009028:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800902a:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800902c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800902e:	69e1      	ldr	r1, [r4, #28]
 8009030:	4429      	add	r1, r5
 8009032:	0a1d      	lsrs	r5, r3, #8
 8009034:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009036:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009038:	69e1      	ldr	r1, [r4, #28]
 800903a:	4429      	add	r1, r5
 800903c:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800903e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009040:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009042:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009044:	69e1      	ldr	r1, [r4, #28]
 8009046:	4429      	add	r1, r5
 8009048:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800904a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800904c:	3304      	adds	r3, #4
 800904e:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 8009050:	e7de      	b.n	8009010 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009052:	6a65      	ldr	r5, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8009054:	2000      	movs	r0, #0
      dataword = hjpeg->Instance->DOR;
 8009056:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009058:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 800905c:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
 800905e:	4560      	cmp	r0, ip
 8009060:	69e1      	ldr	r1, [r4, #28]
 8009062:	d114      	bne.n	800908e <JPEG_StoreOutputData+0xf2>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009064:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009066:	4620      	mov	r0, r4
 8009068:	f7f8 fce2 	bl	8001a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	6263      	str	r3, [r4, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 8009070:	1d2b      	adds	r3, r5, #4
 8009072:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8009074:	2b03      	cmp	r3, #3
 8009076:	d8c3      	bhi.n	8009000 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009078:	00da      	lsls	r2, r3, #3
 800907a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800907c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800907e:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009080:	fa26 f202 	lsr.w	r2, r6, r2
 8009084:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8009086:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009088:	3201      	adds	r2, #1
 800908a:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800908c:	e7f2      	b.n	8009074 <JPEG_StoreOutputData+0xd8>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800908e:	f000 0203 	and.w	r2, r0, #3
 8009092:	6a63      	ldr	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8009094:	3001      	adds	r0, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009096:	00d2      	lsls	r2, r2, #3
 8009098:	fa26 f202 	lsr.w	r2, r6, r2
 800909c:	54ca      	strb	r2, [r1, r3]
        hjpeg->JpegOutCount++;
 800909e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a0:	3301      	adds	r3, #1
 80090a2:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 80090a4:	e7db      	b.n	800905e <JPEG_StoreOutputData+0xc2>

080090a6 <JPEG_Process>:
{
 80090a6:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80090a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 80090aa:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80090ac:	f003 0303 	and.w	r3, r3, #3
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d114      	bne.n	80090de <JPEG_Process+0x38>
 80090b4:	6803      	ldr	r3, [r0, #0]
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80090b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b8:	065a      	lsls	r2, r3, #25
 80090ba:	d510      	bpl.n	80090de <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80090bc:	1d01      	adds	r1, r0, #4
 80090be:	f7ff fdad 	bl	8008c1c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80090c2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80090c4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80090c6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80090c8:	f7f8 fc46 	bl	8001958 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d4:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80090d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090dc:	639a      	str	r2, [r3, #56]	; 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80090de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80090e0:	04db      	lsls	r3, r3, #19
 80090e2:	d407      	bmi.n	80090f4 <JPEG_Process+0x4e>
 80090e4:	6823      	ldr	r3, [r4, #0]
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80090e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090e8:	0795      	lsls	r5, r2, #30
 80090ea:	d543      	bpl.n	8009174 <JPEG_Process+0xce>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80090ec:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 80090ee:	4620      	mov	r0, r4
 80090f0:	f7ff fe94 	bl	8008e1c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80090f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80090f6:	0499      	lsls	r1, r3, #18
 80090f8:	d407      	bmi.n	800910a <JPEG_Process+0x64>
 80090fa:	6823      	ldr	r3, [r4, #0]
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80090fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090fe:	0712      	lsls	r2, r2, #28
 8009100:	d53d      	bpl.n	800917e <JPEG_Process+0xd8>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009102:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 8009104:	4620      	mov	r0, r4
 8009106:	f7ff ff49 	bl	8008f9c <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800910e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8009112:	2a20      	cmp	r2, #32
 8009114:	d13b      	bne.n	800918e <JPEG_Process+0xe8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	f022 0201 	bic.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800911e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009120:	f002 020c 	and.w	r2, r2, #12
 8009124:	2a08      	cmp	r2, #8
 8009126:	d103      	bne.n	8009130 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800912a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800912e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009132:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009136:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8009138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800913a:	b133      	cbz	r3, 800914a <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800913c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800913e:	4620      	mov	r0, r4
 8009140:	69e1      	ldr	r1, [r4, #28]
 8009142:	f7f8 fc75 	bl	8001a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800914a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800914c:	2501      	movs	r5, #1
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800914e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009150:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009152:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009156:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800915a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800915c:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800915e:	f04f 0200 	mov.w	r2, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009162:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);
 8009166:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800916a:	d10d      	bne.n	8009188 <JPEG_Process+0xe2>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800916c:	f7f8 fc9e 	bl	8001aac <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8009170:	4628      	mov	r0, r5
}
 8009172:	bd38      	pop	{r3, r4, r5, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009176:	0758      	lsls	r0, r3, #29
 8009178:	d5bc      	bpl.n	80090f4 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800917a:	2101      	movs	r1, #1
 800917c:	e7b7      	b.n	80090ee <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800917e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009180:	06db      	lsls	r3, r3, #27
 8009182:	d5c2      	bpl.n	800910a <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8009184:	2101      	movs	r1, #1
 8009186:	e7bd      	b.n	8009104 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009188:	f7ff fe29 	bl	8008dde <HAL_JPEG_EncodeCpltCallback>
 800918c:	e7f0      	b.n	8009170 <JPEG_Process+0xca>
  return JPEG_PROCESS_ONGOING;
 800918e:	2000      	movs	r0, #0
 8009190:	e7ef      	b.n	8009172 <JPEG_Process+0xcc>

08009192 <JPEG_DMA_PollResidualData>:
{
 8009192:	b570      	push	{r4, r5, r6, lr}
 8009194:	4604      	mov	r4, r0
 8009196:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009198:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800919a:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 800919e:	d123      	bne.n	80091e8 <JPEG_DMA_PollResidualData+0x56>
 80091a0:	6823      	ldr	r3, [r4, #0]
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80091a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091a4:	06d0      	lsls	r0, r2, #27
 80091a6:	d51f      	bpl.n	80091e8 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 80091a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80091aa:	69e1      	ldr	r1, [r4, #28]
 80091ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80091ae:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80091b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091b2:	69e2      	ldr	r2, [r4, #28]
 80091b4:	440a      	add	r2, r1
 80091b6:	0a19      	lsrs	r1, r3, #8
 80091b8:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80091ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091bc:	69e2      	ldr	r2, [r4, #28]
 80091be:	440a      	add	r2, r1
 80091c0:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80091c2:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80091c4:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80091c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091c8:	69e2      	ldr	r2, [r4, #28]
 80091ca:	440a      	add	r2, r1
 80091cc:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 80091ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d0:	3304      	adds	r3, #4
 80091d2:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80091d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80091d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80091d8:	429a      	cmp	r2, r3
 80091da:	d105      	bne.n	80091e8 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80091dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80091de:	4620      	mov	r0, r4
 80091e0:	69e1      	ldr	r1, [r4, #28]
 80091e2:	f7f8 fc25 	bl	8001a30 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 80091e6:	6265      	str	r5, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80091e8:	3e01      	subs	r6, #1
 80091ea:	d1d5      	bne.n	8009198 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80091ec:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 80091ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80091f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091f2:	06c9      	lsls	r1, r1, #27
 80091f4:	d501      	bpl.n	80091fa <JPEG_DMA_PollResidualData+0x68>
 80091f6:	0492      	lsls	r2, r2, #18
 80091f8:	d420      	bmi.n	800923c <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	f022 0201 	bic.w	r2, r2, #1
 8009200:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8009202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009204:	b133      	cbz	r3, 8009214 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009206:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009208:	4620      	mov	r0, r4
 800920a:	69e1      	ldr	r1, [r4, #28]
 800920c:	f7f8 fc10 	bl	8001a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009210:	2300      	movs	r3, #0
 8009212:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 8009214:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009216:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009218:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800921a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800921e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009222:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009224:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8009226:	f04f 0200 	mov.w	r2, #0
 800922a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800922e:	f04f 0201 	mov.w	r2, #1
 8009232:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009236:	d102      	bne.n	800923e <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009238:	f7f8 fc38 	bl	8001aac <HAL_JPEG_DecodeCpltCallback>
}
 800923c:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800923e:	f7ff fdce 	bl	8008dde <HAL_JPEG_EncodeCpltCallback>
}
 8009242:	e7fb      	b.n	800923c <JPEG_DMA_PollResidualData+0xaa>

08009244 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009244:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009246:	f413 5f40 	tst.w	r3, #12288	; 0x3000
{
 800924a:	b570      	push	{r4, r5, r6, lr}
 800924c:	4604      	mov	r4, r0
 800924e:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009250:	d034      	beq.n	80092bc <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009252:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009254:	f003 030c 	and.w	r3, r3, #12
 8009258:	2b0c      	cmp	r3, #12
 800925a:	d13e      	bne.n	80092da <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800925c:	f011 0601 	ands.w	r6, r1, #1
 8009260:	d00a      	beq.n	8009278 <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009262:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009268:	6543      	str	r3, [r0, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800926a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800926c:	f023 0303 	bic.w	r3, r3, #3
 8009270:	6283      	str	r3, [r0, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
 8009272:	b99b      	cbnz	r3, 800929c <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 8009274:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009278:	07a8      	lsls	r0, r5, #30
 800927a:	d509      	bpl.n	8009290 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800927c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800927e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009282:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009284:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009286:	0419      	lsls	r1, r3, #16
 8009288:	d51a      	bpl.n	80092c0 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800928a:	4620      	mov	r0, r4
 800928c:	f7ff ff81 	bl	8009192 <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 8009290:	6822      	ldr	r2, [r4, #0]
 8009292:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009294:	431e      	orrs	r6, r3
 8009296:	6316      	str	r6, [r2, #48]	; 0x30
  return HAL_OK;
 8009298:	2000      	movs	r0, #0
 800929a:	e010      	b.n	80092be <HAL_JPEG_Resume+0x7a>
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800929c:	6802      	ldr	r2, [r0, #0]
 800929e:	089b      	lsrs	r3, r3, #2
 80092a0:	6981      	ldr	r1, [r0, #24]
 80092a2:	3240      	adds	r2, #64	; 0x40
 80092a4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80092a6:	f7fd fea5 	bl	8006ff4 <HAL_DMA_Start_IT>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d0e2      	beq.n	8009274 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80092ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80092b0:	f043 0304 	orr.w	r3, r3, #4
 80092b4:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80092b6:	2306      	movs	r3, #6
 80092b8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 80092bc:	2001      	movs	r0, #1
}
 80092be:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80092c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80092c2:	6821      	ldr	r1, [r4, #0]
 80092c4:	089b      	lsrs	r3, r3, #2
 80092c6:	69e2      	ldr	r2, [r4, #28]
 80092c8:	3144      	adds	r1, #68	; 0x44
 80092ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80092cc:	f7fd fe92 	bl	8006ff4 <HAL_DMA_Start_IT>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1ec      	bne.n	80092ae <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 80092d4:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 80092d8:	e7da      	b.n	8009290 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80092da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80092dc:	f003 030c 	and.w	r3, r3, #12
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d1d9      	bne.n	8009298 <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80092e4:	f011 0301 	ands.w	r3, r1, #1
 80092e8:	d004      	beq.n	80092f4 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80092ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80092ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092f0:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80092f2:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80092f4:	07aa      	lsls	r2, r5, #30
 80092f6:	d505      	bpl.n	8009304 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80092f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80092fa:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80092fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009302:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8009304:	6821      	ldr	r1, [r4, #0]
 8009306:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8009308:	4313      	orrs	r3, r2
 800930a:	630b      	str	r3, [r1, #48]	; 0x30
 800930c:	e7c4      	b.n	8009298 <HAL_JPEG_Resume+0x54>
	...

08009310 <JPEG_DMA_EndProcess>:
{
 8009310:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8009312:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8009314:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8009316:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6859      	ldr	r1, [r3, #4]
 800931c:	4b1f      	ldr	r3, [pc, #124]	; (800939c <JPEG_DMA_EndProcess+0x8c>)
 800931e:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009326:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009328:	429a      	cmp	r2, r3
 800932a:	d105      	bne.n	8009338 <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800932c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800932e:	69c1      	ldr	r1, [r0, #28]
 8009330:	f7f8 fb7e 	bl	8001a30 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	6263      	str	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800933c:	f015 0510 	ands.w	r5, r5, #16
 8009340:	d124      	bne.n	800938c <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 8009342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009344:	b12b      	cbz	r3, 8009352 <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009346:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009348:	4620      	mov	r0, r4
 800934a:	69e1      	ldr	r1, [r4, #28]
 800934c:	f7f8 fb70 	bl	8001a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009350:	6265      	str	r5, [r4, #36]	; 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009352:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009354:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009356:	6813      	ldr	r3, [r2, #0]
 8009358:	f023 0301 	bic.w	r3, r3, #1
 800935c:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800935e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009360:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009362:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009366:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800936a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800936c:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800936e:	f04f 0200 	mov.w	r2, #0
 8009372:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009376:	f04f 0201 	mov.w	r2, #1
 800937a:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800937e:	d102      	bne.n	8009386 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009380:	f7f8 fb94 	bl	8001aac <HAL_JPEG_DecodeCpltCallback>
}
 8009384:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009386:	f7ff fd2a 	bl	8008dde <HAL_JPEG_EncodeCpltCallback>
 800938a:	e7fb      	b.n	8009384 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800938c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800938e:	049b      	lsls	r3, r3, #18
 8009390:	d4f8      	bmi.n	8009384 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 8009392:	4620      	mov	r0, r4
}
 8009394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8009398:	f7ff befb 	b.w	8009192 <JPEG_DMA_PollResidualData>
 800939c:	0003fffc 	.word	0x0003fffc

080093a0 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093a0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80093a2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80093a4:	041b      	lsls	r3, r3, #16
 80093a6:	d501      	bpl.n	80093ac <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 80093a8:	f7ff bfb2 	b.w	8009310 <JPEG_DMA_EndProcess>
}
 80093ac:	4770      	bx	lr
	...

080093b0 <JPEG_DMAOutCpltCallback>:
{
 80093b0:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093b2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093b8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80093bc:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80093be:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80093c0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80093c4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80093c8:	0412      	lsls	r2, r2, #16
 80093ca:	0c12      	lsrs	r2, r2, #16
 80093cc:	2a0c      	cmp	r2, #12
 80093ce:	d129      	bne.n	8009424 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80093d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d2:	0692      	lsls	r2, r2, #26
 80093d4:	d42c      	bmi.n	8009430 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 80093d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80093d8:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 80093da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093de:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80093e0:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80093e2:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	4b15      	ldr	r3, [pc, #84]	; (800943c <JPEG_DMAOutCpltCallback+0x8c>)
 80093e8:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 80093ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80093f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80093f4:	f7f8 fb1c 	bl	8001a30 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80093f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80093fa:	049b      	lsls	r3, r3, #18
 80093fc:	d418      	bmi.n	8009430 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80093fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009400:	6821      	ldr	r1, [r4, #0]
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	69e2      	ldr	r2, [r4, #28]
 8009406:	3144      	adds	r1, #68	; 0x44
 8009408:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800940a:	f7fd fdf3 	bl	8006ff4 <HAL_DMA_Start_IT>
 800940e:	b150      	cbz	r0, 8009426 <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009410:	6d23      	ldr	r3, [r4, #80]	; 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8009412:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009414:	f043 0304 	orr.w	r3, r3, #4
 8009418:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800941a:	2306      	movs	r3, #6
 800941c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009420:	f7f8 fb3c 	bl	8001a9c <HAL_JPEG_ErrorCallback>
}
 8009424:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8009426:	6822      	ldr	r2, [r4, #0]
 8009428:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800942a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800942e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009430:	6822      	ldr	r2, [r4, #0]
 8009432:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009434:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009438:	6313      	str	r3, [r2, #48]	; 0x30
 800943a:	e7f3      	b.n	8009424 <JPEG_DMAOutCpltCallback+0x74>
 800943c:	0003fffc 	.word	0x0003fffc

08009440 <HAL_JPEG_IRQHandler>:
{
 8009440:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8009442:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
{
 8009446:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8009448:	3b03      	subs	r3, #3
 800944a:	2b01      	cmp	r3, #1
 800944c:	d854      	bhi.n	80094f8 <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800944e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009450:	f003 030c 	and.w	r3, r3, #12
 8009454:	2b08      	cmp	r3, #8
 8009456:	d103      	bne.n	8009460 <HAL_JPEG_IRQHandler+0x20>
}
 8009458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800945c:	f7ff be23 	b.w	80090a6 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009460:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009462:	f003 030c 	and.w	r3, r3, #12
 8009466:	2b0c      	cmp	r3, #12
 8009468:	d146      	bne.n	80094f8 <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800946a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	2b02      	cmp	r3, #2
 8009472:	d114      	bne.n	800949e <HAL_JPEG_IRQHandler+0x5e>
 8009474:	6803      	ldr	r3, [r0, #0]
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	0659      	lsls	r1, r3, #25
 800947a:	d510      	bpl.n	800949e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800947c:	1d01      	adds	r1, r0, #4
 800947e:	f7ff fbcd 	bl	8008c1c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009482:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009484:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009486:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009488:	f7f8 fa66 	bl	8001958 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009494:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800949c:	639a      	str	r2, [r3, #56]	; 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094a2:	0692      	lsls	r2, r2, #26
 80094a4:	d528      	bpl.n	80094f8 <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 80094a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80094a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 80094aa:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80094ae:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80094b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80094b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094b6:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	f022 0201 	bic.w	r2, r2, #1
 80094be:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80094c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094c2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80094c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80094c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80094d0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d101      	bne.n	80094dc <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 80094d8:	f7fd fdc9 	bl	800706e <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 80094dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80094de:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d103      	bne.n	80094ee <HAL_JPEG_IRQHandler+0xae>
}
 80094e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 80094ea:	f7fd bdc0 	b.w	800706e <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 80094ee:	4620      	mov	r0, r4
}
 80094f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 80094f4:	f7ff bf0c 	b.w	8009310 <JPEG_DMA_EndProcess>
}
 80094f8:	bd10      	pop	{r4, pc}

080094fa <HAL_JPEG_GetState>:
  return hjpeg->State;
 80094fa:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
}
 80094fe:	4770      	bx	lr

08009500 <HAL_JPEG_GetError>:
  return hjpeg->ErrorCode;
 8009500:	6d00      	ldr	r0, [r0, #80]	; 0x50
}
 8009502:	4770      	bx	lr

08009504 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009504:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009506:	f8d1 c000 	ldr.w	ip, [r1]
{
 800950a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800950e:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009510:	6804      	ldr	r4, [r0, #0]
 8009512:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009514:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009518:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800951a:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800951c:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009520:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009524:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009526:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800952a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800952e:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009530:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009532:	68e0      	ldr	r0, [r4, #12]
 8009534:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8009538:	4430      	add	r0, r6
 800953a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800953e:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009540:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009542:	68e0      	ldr	r0, [r4, #12]
 8009544:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8009548:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800954a:	6898      	ldr	r0, [r3, #8]
 800954c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8009550:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009552:	6888      	ldr	r0, [r1, #8]
 8009554:	68e6      	ldr	r6, [r4, #12]
 8009556:	3001      	adds	r0, #1
 8009558:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800955c:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800955e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009560:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8009564:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009566:	6918      	ldr	r0, [r3, #16]
 8009568:	f020 0007 	bic.w	r0, r0, #7
 800956c:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800956e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009570:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009572:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009576:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800957a:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800957e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8009582:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8009586:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800958a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800958e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009590:	6958      	ldr	r0, [r3, #20]
 8009592:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8009596:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009598:	6948      	ldr	r0, [r1, #20]
 800959a:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800959c:	69d8      	ldr	r0, [r3, #28]
 800959e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80095a2:	f020 0007 	bic.w	r0, r0, #7
 80095a6:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80095a8:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 80095ac:	4305      	orrs	r5, r0
 80095ae:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80095b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80095b2:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80095b4:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80095b8:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80095ba:	b31e      	cbz	r6, 8009604 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80095bc:	2e01      	cmp	r6, #1
 80095be:	d023      	beq.n	8009608 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80095c0:	1eb0      	subs	r0, r6, #2
 80095c2:	2802      	cmp	r0, #2
 80095c4:	d922      	bls.n	800960c <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80095c6:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80095c8:	bf0c      	ite	eq
 80095ca:	2002      	moveq	r0, #2
 80095cc:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80095ce:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80095d0:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80095d4:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80095d8:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80095da:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80095dc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80095de:	4345      	muls	r5, r0
 80095e0:	4378      	muls	r0, r7
 80095e2:	3003      	adds	r0, #3
 80095e4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80095e8:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80095ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095ec:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80095f0:	f020 0007 	bic.w	r0, r0, #7
 80095f4:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80095f6:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80095f8:	58a3      	ldr	r3, [r4, r2]
 80095fa:	f043 0301 	orr.w	r3, r3, #1
 80095fe:	50a3      	str	r3, [r4, r2]
}
 8009600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8009604:	2004      	movs	r0, #4
 8009606:	e7e2      	b.n	80095ce <LTDC_SetConfig+0xca>
    tmp = 3U;
 8009608:	2003      	movs	r0, #3
 800960a:	e7e0      	b.n	80095ce <LTDC_SetConfig+0xca>
    tmp = 2U;
 800960c:	2002      	movs	r0, #2
 800960e:	e7de      	b.n	80095ce <LTDC_SetConfig+0xca>

08009610 <HAL_LTDC_Init>:
{
 8009610:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8009612:	4604      	mov	r4, r0
 8009614:	2800      	cmp	r0, #0
 8009616:	d063      	beq.n	80096e0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009618:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800961c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009620:	b91b      	cbnz	r3, 800962a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8009622:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009626:	f7fa fe15 	bl	8004254 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800962a:	2302      	movs	r3, #2
 800962c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	699a      	ldr	r2, [r3, #24]
 8009634:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009638:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800963a:	6999      	ldr	r1, [r3, #24]
 800963c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009640:	4302      	orrs	r2, r0
 8009642:	68e0      	ldr	r0, [r4, #12]
 8009644:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009646:	6920      	ldr	r0, [r4, #16]
 8009648:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800964a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800964c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800964e:	4925      	ldr	r1, [pc, #148]	; (80096e4 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009650:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	400a      	ands	r2, r1
 8009656:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800965e:	69a0      	ldr	r0, [r4, #24]
 8009660:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009662:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009664:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009666:	68da      	ldr	r2, [r3, #12]
 8009668:	400a      	ands	r2, r1
 800966a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009672:	6a20      	ldr	r0, [r4, #32]
 8009674:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009676:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009678:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800967a:	691a      	ldr	r2, [r3, #16]
 800967c:	400a      	ands	r2, r1
 800967e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009680:	691a      	ldr	r2, [r3, #16]
 8009682:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009686:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009688:	4302      	orrs	r2, r0
 800968a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800968c:	695a      	ldr	r2, [r3, #20]
 800968e:	4011      	ands	r1, r2
 8009690:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009692:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009694:	695a      	ldr	r2, [r3, #20]
 8009696:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800969a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800969c:	430a      	orrs	r2, r1
 800969e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80096a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80096a2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80096a6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80096aa:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80096ae:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80096b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80096b2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80096b6:	430a      	orrs	r2, r1
 80096b8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80096bc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80096c0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80096c2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80096c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096c6:	f042 0206 	orr.w	r2, r2, #6
 80096ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80096cc:	699a      	ldr	r2, [r3, #24]
 80096ce:	f042 0201 	orr.w	r2, r2, #1
 80096d2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80096d4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80096d6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80096da:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80096de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80096e0:	2001      	movs	r0, #1
 80096e2:	e7fc      	b.n	80096de <HAL_LTDC_Init+0xce>
 80096e4:	f000f800 	.word	0xf000f800

080096e8 <HAL_LTDC_ErrorCallback>:
 80096e8:	4770      	bx	lr

080096ea <HAL_LTDC_LineEventCallback>:
 80096ea:	4770      	bx	lr

080096ec <HAL_LTDC_ReloadEventCallback>:
 80096ec:	4770      	bx	lr

080096ee <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80096ee:	6803      	ldr	r3, [r0, #0]
{
 80096f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80096f2:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 80096f4:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80096f6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80096f8:	0772      	lsls	r2, r6, #29
 80096fa:	d514      	bpl.n	8009726 <HAL_LTDC_IRQHandler+0x38>
 80096fc:	0769      	lsls	r1, r5, #29
 80096fe:	d512      	bpl.n	8009726 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009702:	f022 0204 	bic.w	r2, r2, #4
 8009706:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009708:	2204      	movs	r2, #4
 800970a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800970c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8009710:	f043 0301 	orr.w	r3, r3, #1
 8009714:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8009718:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800971a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800971e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009722:	f7ff ffe1 	bl	80096e8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009726:	07b2      	lsls	r2, r6, #30
 8009728:	d516      	bpl.n	8009758 <HAL_LTDC_IRQHandler+0x6a>
 800972a:	07ab      	lsls	r3, r5, #30
 800972c:	d514      	bpl.n	8009758 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800972e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8009730:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009734:	f022 0202 	bic.w	r2, r2, #2
 8009738:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800973a:	2202      	movs	r2, #2
 800973c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800973e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009748:	2304      	movs	r3, #4
 800974a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800974e:	2300      	movs	r3, #0
 8009750:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009754:	f7ff ffc8 	bl	80096e8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009758:	07f0      	lsls	r0, r6, #31
 800975a:	d510      	bpl.n	800977e <HAL_LTDC_IRQHandler+0x90>
 800975c:	07e9      	lsls	r1, r5, #31
 800975e:	d50e      	bpl.n	800977e <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009760:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009762:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800976c:	2201      	movs	r2, #1
 800976e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8009770:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8009772:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8009776:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800977a:	f7ff ffb6 	bl	80096ea <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800977e:	0732      	lsls	r2, r6, #28
 8009780:	d511      	bpl.n	80097a6 <HAL_LTDC_IRQHandler+0xb8>
 8009782:	072b      	lsls	r3, r5, #28
 8009784:	d50f      	bpl.n	80097a6 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009786:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009788:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800978a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800978c:	f022 0208 	bic.w	r2, r2, #8
 8009790:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009792:	2208      	movs	r2, #8
 8009794:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8009796:	2301      	movs	r3, #1
 8009798:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800979c:	2300      	movs	r3, #0
 800979e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80097a2:	f7ff ffa3 	bl	80096ec <HAL_LTDC_ReloadEventCallback>
}
 80097a6:	bd70      	pop	{r4, r5, r6, pc}

080097a8 <HAL_LTDC_ConfigLayer>:
{
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80097ac:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80097b0:	4606      	mov	r6, r0
 80097b2:	460f      	mov	r7, r1
 80097b4:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	f04f 0002 	mov.w	r0, #2
 80097bc:	d01f      	beq.n	80097fe <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097be:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80097c0:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097c4:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80097c6:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097ca:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80097ce:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097d2:	3438      	adds	r4, #56	; 0x38
 80097d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097e0:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80097e2:	4630      	mov	r0, r6
 80097e4:	4662      	mov	r2, ip
 80097e6:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80097e8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80097ea:	f7ff fe8b 	bl	8009504 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80097ee:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80097f0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80097f2:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80097f6:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80097fa:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80097fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009804 <HAL_LTDC_SetPitch>:
{
 8009804:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8009806:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800980a:	2b01      	cmp	r3, #1
 800980c:	f04f 0302 	mov.w	r3, #2
 8009810:	d02c      	beq.n	800986c <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009812:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009814:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009818:	fb04 0402 	mla	r4, r4, r2, r0
 800981c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800981e:	b33c      	cbz	r4, 8009870 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009820:	2c01      	cmp	r4, #1
 8009822:	d027      	beq.n	8009874 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009824:	1ea5      	subs	r5, r4, #2
 8009826:	429d      	cmp	r5, r3
 8009828:	d902      	bls.n	8009830 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 800982a:	2c07      	cmp	r4, #7
 800982c:	bf18      	it	ne
 800982e:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009830:	01d2      	lsls	r2, r2, #7
 8009832:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8009834:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009836:	3284      	adds	r2, #132	; 0x84
 8009838:	4422      	add	r2, r4
 800983a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800983c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8009840:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8009844:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009846:	4c0c      	ldr	r4, [pc, #48]	; (8009878 <HAL_LTDC_SetPitch+0x74>)
 8009848:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800984a:	f045 0501 	orr.w	r5, r5, #1
 800984e:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8009850:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8009852:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8009856:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800985a:	f043 0301 	orr.w	r3, r3, #1
 800985e:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8009860:	2301      	movs	r3, #1
 8009862:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8009866:	2300      	movs	r3, #0
 8009868:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 800986c:	4618      	mov	r0, r3
 800986e:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8009870:	2304      	movs	r3, #4
 8009872:	e7dd      	b.n	8009830 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8009874:	2303      	movs	r3, #3
 8009876:	e7db      	b.n	8009830 <HAL_LTDC_SetPitch+0x2c>
 8009878:	40016800 	.word	0x40016800

0800987c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800987c:	4b19      	ldr	r3, [pc, #100]	; (80098e4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800987e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8009880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009882:	4c19      	ldr	r4, [pc, #100]	; (80098e8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8009884:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009888:	641a      	str	r2, [r3, #64]	; 0x40
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800989a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800989c:	f7fc ffba 	bl	8006814 <HAL_GetTick>
 80098a0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	03da      	lsls	r2, r3, #15
 80098a6:	d50c      	bpl.n	80098c2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80098a8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80098aa:	4d0f      	ldr	r5, [pc, #60]	; (80098e8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80098ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098b0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80098b2:	f7fc ffaf 	bl	8006814 <HAL_GetTick>
 80098b6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80098b8:	686b      	ldr	r3, [r5, #4]
 80098ba:	039b      	lsls	r3, r3, #14
 80098bc:	d50a      	bpl.n	80098d4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80098be:	2000      	movs	r0, #0
 80098c0:	e006      	b.n	80098d0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80098c2:	f7fc ffa7 	bl	8006814 <HAL_GetTick>
 80098c6:	1b40      	subs	r0, r0, r5
 80098c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80098cc:	d9e9      	bls.n	80098a2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80098ce:	2003      	movs	r0, #3
}
 80098d0:	b003      	add	sp, #12
 80098d2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80098d4:	f7fc ff9e 	bl	8006814 <HAL_GetTick>
 80098d8:	1b00      	subs	r0, r0, r4
 80098da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80098de:	d9eb      	bls.n	80098b8 <HAL_PWREx_EnableOverDrive+0x3c>
 80098e0:	e7f5      	b.n	80098ce <HAL_PWREx_EnableOverDrive+0x52>
 80098e2:	bf00      	nop
 80098e4:	40023800 	.word	0x40023800
 80098e8:	40007000 	.word	0x40007000

080098ec <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80098ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80098f0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80098f2:	b136      	cbz	r6, 8009902 <QSPI_Config+0x16>
 80098f4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80098f8:	d003      	beq.n	8009902 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80098fa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80098fc:	6804      	ldr	r4, [r0, #0]
 80098fe:	3b01      	subs	r3, #1
 8009900:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009902:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8009906:	e9d1 7c07 	ldrd	r7, ip, [r1, #28]
 800990a:	f1ba 0f00 	cmp.w	sl, #0
 800990e:	d04e      	beq.n	80099ae <QSPI_Config+0xc2>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009910:	694b      	ldr	r3, [r1, #20]
 8009912:	ea46 0a0a 	orr.w	sl, r6, sl
 8009916:	6805      	ldr	r5, [r0, #0]
 8009918:	f8d1 8000 	ldr.w	r8, [r1]
 800991c:	ea4f 4e83 	mov.w	lr, r3, lsl #18
 8009920:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8009922:	ea4a 0a02 	orr.w	sl, sl, r2
 8009926:	e9d1 490b 	ldrd	r4, r9, [r1, #44]	; 0x2c
 800992a:	f1bc 0f00 	cmp.w	ip, #0
 800992e:	d026      	beq.n	800997e <QSPI_Config+0x92>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009930:	688b      	ldr	r3, [r1, #8]
 8009932:	ea4c 0c0a 	orr.w	ip, ip, sl
 8009936:	690e      	ldr	r6, [r1, #16]
 8009938:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800993a:	b1a7      	cbz	r7, 8009966 <QSPI_Config+0x7a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800993c:	ea48 0307 	orr.w	r3, r8, r7
 8009940:	4323      	orrs	r3, r4
 8009942:	ea43 0309 	orr.w	r3, r3, r9
 8009946:	4303      	orrs	r3, r0
 8009948:	68c8      	ldr	r0, [r1, #12]
 800994a:	4333      	orrs	r3, r6
 800994c:	4303      	orrs	r3, r0
 800994e:	ea43 030e 	orr.w	r3, r3, lr
 8009952:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009956:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800995a:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800995c:	d001      	beq.n	8009962 <QSPI_Config+0x76>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800995e:	684b      	ldr	r3, [r1, #4]
 8009960:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8009962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009966:	ea48 0304 	orr.w	r3, r8, r4
 800996a:	ea43 0309 	orr.w	r3, r3, r9
 800996e:	4303      	orrs	r3, r0
 8009970:	4333      	orrs	r3, r6
 8009972:	ea43 030e 	orr.w	r3, r3, lr
 8009976:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800997a:	616b      	str	r3, [r5, #20]
 800997c:	e7f1      	b.n	8009962 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800997e:	b167      	cbz	r7, 800999a <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009980:	ea48 0307 	orr.w	r3, r8, r7
 8009984:	4323      	orrs	r3, r4
 8009986:	ea43 0309 	orr.w	r3, r3, r9
 800998a:	4303      	orrs	r3, r0
 800998c:	68c8      	ldr	r0, [r1, #12]
 800998e:	4303      	orrs	r3, r0
 8009990:	ea43 030e 	orr.w	r3, r3, lr
 8009994:	ea43 030a 	orr.w	r3, r3, sl
 8009998:	e7dd      	b.n	8009956 <QSPI_Config+0x6a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800999a:	ea48 0304 	orr.w	r3, r8, r4
 800999e:	ea43 0309 	orr.w	r3, r3, r9
 80099a2:	4303      	orrs	r3, r0
 80099a4:	ea43 030e 	orr.w	r3, r3, lr
 80099a8:	ea43 030a 	orr.w	r3, r3, sl
 80099ac:	e7e5      	b.n	800997a <QSPI_Config+0x8e>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80099ae:	f1bc 0f00 	cmp.w	ip, #0
 80099b2:	d02c      	beq.n	8009a0e <QSPI_Config+0x122>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80099b4:	6804      	ldr	r4, [r0, #0]
 80099b6:	688b      	ldr	r3, [r1, #8]
 80099b8:	6908      	ldr	r0, [r1, #16]
 80099ba:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80099bc:	ea46 030c 	orr.w	r3, r6, ip
 80099c0:	694e      	ldr	r6, [r1, #20]
 80099c2:	ea43 0502 	orr.w	r5, r3, r2
 80099c6:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80099ca:	04b6      	lsls	r6, r6, #18
 80099cc:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
 80099d0:	b1a7      	cbz	r7, 80099fc <QSPI_Config+0x110>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80099d2:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80099d4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80099d8:	ea40 0008 	orr.w	r0, r0, r8
 80099dc:	ea43 0300 	orr.w	r3, r3, r0
 80099e0:	68c8      	ldr	r0, [r1, #12]
 80099e2:	ea43 030c 	orr.w	r3, r3, ip
 80099e6:	ea43 0300 	orr.w	r3, r3, r0
 80099ea:	ea43 0306 	orr.w	r3, r3, r6
 80099ee:	ea43 0305 	orr.w	r3, r3, r5
 80099f2:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80099f4:	d0b5      	beq.n	8009962 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80099f6:	684b      	ldr	r3, [r1, #4]
 80099f8:	61a3      	str	r3, [r4, #24]
 80099fa:	e7b2      	b.n	8009962 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80099fc:	ea40 0008 	orr.w	r0, r0, r8
 8009a00:	4303      	orrs	r3, r0
 8009a02:	ea43 030c 	orr.w	r3, r3, ip
 8009a06:	4333      	orrs	r3, r6
 8009a08:	432b      	orrs	r3, r5
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	e7a9      	b.n	8009962 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009a0e:	b1d7      	cbz	r7, 8009a46 <QSPI_Config+0x15a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009a10:	ea46 0307 	orr.w	r3, r6, r7
 8009a14:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8009a16:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009a18:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009a1c:	ea43 0302 	orr.w	r3, r3, r2
 8009a20:	ea43 0304 	orr.w	r3, r3, r4
 8009a24:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8009a26:	ea43 0304 	orr.w	r3, r3, r4
 8009a2a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009a2c:	ea43 0304 	orr.w	r3, r3, r4
 8009a30:	68cc      	ldr	r4, [r1, #12]
 8009a32:	ea43 0304 	orr.w	r3, r3, r4
 8009a36:	694c      	ldr	r4, [r1, #20]
 8009a38:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009a3c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009a3e:	d090      	beq.n	8009962 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009a40:	684b      	ldr	r3, [r1, #4]
 8009a42:	6183      	str	r3, [r0, #24]
 8009a44:	e78d      	b.n	8009962 <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009a46:	2e00      	cmp	r6, #0
 8009a48:	d08b      	beq.n	8009962 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009a4a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8009a4c:	6800      	ldr	r0, [r0, #0]
 8009a4e:	4333      	orrs	r3, r6
 8009a50:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8009a52:	431a      	orrs	r2, r3
 8009a54:	694b      	ldr	r3, [r1, #20]
 8009a56:	4332      	orrs	r2, r6
 8009a58:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8009a5a:	4332      	orrs	r2, r6
 8009a5c:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8009a60:	6142      	str	r2, [r0, #20]
}
 8009a62:	e77e      	b.n	8009962 <QSPI_Config+0x76>

08009a64 <QSPI_WaitFlagStateUntilTimeout>:
{
 8009a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	460e      	mov	r6, r1
 8009a70:	4615      	mov	r5, r2
 8009a72:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009a74:	6822      	ldr	r2, [r4, #0]
 8009a76:	6893      	ldr	r3, [r2, #8]
 8009a78:	4233      	tst	r3, r6
 8009a7a:	bf14      	ite	ne
 8009a7c:	2301      	movne	r3, #1
 8009a7e:	2300      	moveq	r3, #0
 8009a80:	42ab      	cmp	r3, r5
 8009a82:	d101      	bne.n	8009a88 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009a84:	2000      	movs	r0, #0
 8009a86:	e012      	b.n	8009aae <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8009a88:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009a8c:	d0f3      	beq.n	8009a76 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a8e:	f7fc fec1 	bl	8006814 <HAL_GetTick>
 8009a92:	1bc0      	subs	r0, r0, r7
 8009a94:	4540      	cmp	r0, r8
 8009a96:	d802      	bhi.n	8009a9e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8009a98:	f1b8 0f00 	cmp.w	r8, #0
 8009a9c:	d1ea      	bne.n	8009a74 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009a9e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009aa0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009aa2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009aa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009aa8:	f043 0301 	orr.w	r3, r3, #1
 8009aac:	6463      	str	r3, [r4, #68]	; 0x44
}
 8009aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009ab4 <HAL_QSPI_Init>:
{
 8009ab4:	b530      	push	{r4, r5, lr}
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8009aba:	f7fc feab 	bl	8006814 <HAL_GetTick>
 8009abe:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8009ac0:	2c00      	cmp	r4, #0
 8009ac2:	d047      	beq.n	8009b54 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009ac4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009ac8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8009acc:	b94a      	cbnz	r2, 8009ae2 <HAL_QSPI_Init+0x2e>
 8009ace:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8009ad0:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8009ad2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8009ad6:	f7fa fbf5 	bl	80042c4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009ae2:	6820      	ldr	r0, [r4, #0]
 8009ae4:	68a1      	ldr	r1, [r4, #8]
 8009ae6:	6802      	ldr	r2, [r0, #0]
 8009ae8:	3901      	subs	r1, #1
 8009aea:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8009aee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009af2:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009af4:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009af6:	4620      	mov	r0, r4
 8009af8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009afa:	9200      	str	r2, [sp, #0]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f7ff ffb1 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8009b02:	bb10      	cbnz	r0, 8009b4a <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009b04:	6822      	ldr	r2, [r4, #0]
 8009b06:	69e5      	ldr	r5, [r4, #28]
 8009b08:	68e3      	ldr	r3, [r4, #12]
 8009b0a:	6811      	ldr	r1, [r2, #0]
 8009b0c:	432b      	orrs	r3, r5
 8009b0e:	6a25      	ldr	r5, [r4, #32]
 8009b10:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8009b14:	432b      	orrs	r3, r5
 8009b16:	6865      	ldr	r5, [r4, #4]
 8009b18:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8009b1c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009b20:	430b      	orrs	r3, r1
 8009b22:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009b24:	6855      	ldr	r5, [r2, #4]
 8009b26:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009b2a:	430b      	orrs	r3, r1
 8009b2c:	6921      	ldr	r1, [r4, #16]
 8009b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009b32:	4909      	ldr	r1, [pc, #36]	; (8009b58 <HAL_QSPI_Init+0xa4>)
 8009b34:	4029      	ands	r1, r5
 8009b36:	430b      	orrs	r3, r1
 8009b38:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009b3a:	6813      	ldr	r3, [r2, #0]
 8009b3c:	f043 0301 	orr.w	r3, r3, #1
 8009b40:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8009b42:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009b44:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8009b46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009b50:	b005      	add	sp, #20
 8009b52:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8009b54:	2001      	movs	r0, #1
 8009b56:	e7fb      	b.n	8009b50 <HAL_QSPI_Init+0x9c>
 8009b58:	ffe0f8fe 	.word	0xffe0f8fe

08009b5c <HAL_QSPI_Command>:
{
 8009b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b60:	4604      	mov	r4, r0
 8009b62:	b085      	sub	sp, #20
 8009b64:	4617      	mov	r7, r2
 8009b66:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8009b68:	f7fc fe54 	bl	8006814 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009b6c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009b70:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009b72:	2a01      	cmp	r2, #1
 8009b74:	d033      	beq.n	8009bde <HAL_QSPI_Command+0x82>
 8009b76:	2201      	movs	r2, #1
 8009b78:	2602      	movs	r6, #2
 8009b7a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009b7e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009b82:	2a01      	cmp	r2, #1
 8009b84:	fa5f f882 	uxtb.w	r8, r2
 8009b88:	d127      	bne.n	8009bda <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009b8a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009b8c:	9003      	str	r0, [sp, #12]
 8009b8e:	2120      	movs	r1, #32
 8009b90:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009b92:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009b94:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009b96:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009b9a:	f7ff ff63 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	b9a0      	cbnz	r0, 8009bcc <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f7ff fea0 	bl	80098ec <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009bac:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	b94a      	cbnz	r2, 8009bc8 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009bb4:	4642      	mov	r2, r8
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4620      	mov	r0, r4
 8009bba:	9700      	str	r7, [sp, #0]
 8009bbc:	f7ff ff52 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	b918      	cbnz	r0, 8009bcc <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009bc8:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	b005      	add	sp, #20
 8009bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8009bda:	4635      	mov	r5, r6
 8009bdc:	e7f6      	b.n	8009bcc <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8009bde:	2502      	movs	r5, #2
 8009be0:	e7f7      	b.n	8009bd2 <HAL_QSPI_Command+0x76>

08009be2 <HAL_QSPI_Transmit>:
{
 8009be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be4:	4604      	mov	r4, r0
 8009be6:	b085      	sub	sp, #20
 8009be8:	4616      	mov	r6, r2
 8009bea:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009bec:	f7fc fe12 	bl	8006814 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009bf0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009bf4:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009bf6:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009bf8:	2a01      	cmp	r2, #1
 8009bfa:	d049      	beq.n	8009c90 <HAL_QSPI_Transmit+0xae>
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009c02:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009c06:	2a01      	cmp	r2, #1
 8009c08:	b2d0      	uxtb	r0, r2
 8009c0a:	d13f      	bne.n	8009c8c <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8009c10:	2f00      	cmp	r7, #0
 8009c12:	d036      	beq.n	8009c82 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009c14:	2212      	movs	r2, #18
 8009c16:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009c1a:	692a      	ldr	r2, [r5, #16]
 8009c1c:	3201      	adds	r2, #1
 8009c1e:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009c20:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8009c22:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009c24:	3201      	adds	r2, #1
 8009c26:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009c28:	696a      	ldr	r2, [r5, #20]
 8009c2a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009c2e:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009c30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009c32:	b98a      	cbnz	r2, 8009c58 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009c34:	2201      	movs	r2, #1
 8009c36:	2102      	movs	r1, #2
 8009c38:	4620      	mov	r0, r4
 8009c3a:	9600      	str	r6, [sp, #0]
 8009c3c:	f7ff ff12 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009c40:	b910      	cbnz	r0, 8009c48 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	2202      	movs	r2, #2
 8009c46:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009c54:	b005      	add	sp, #20
 8009c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009c58:	2201      	movs	r2, #1
 8009c5a:	2104      	movs	r1, #4
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	9600      	str	r6, [sp, #0]
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	f7ff feff 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d1ee      	bne.n	8009c48 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009c6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8009c6c:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009c6e:	7812      	ldrb	r2, [r2, #0]
 8009c70:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8009c74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009c76:	3201      	adds	r2, #1
 8009c78:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8009c7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009c7c:	3a01      	subs	r2, #1
 8009c7e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009c80:	e7d6      	b.n	8009c30 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009c82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c84:	f043 0308 	orr.w	r3, r3, #8
 8009c88:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8009c8a:	e7e0      	b.n	8009c4e <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8009c8c:	2002      	movs	r0, #2
 8009c8e:	e7de      	b.n	8009c4e <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8009c90:	2002      	movs	r0, #2
 8009c92:	e7df      	b.n	8009c54 <HAL_QSPI_Transmit+0x72>

08009c94 <HAL_QSPI_Receive>:
{
 8009c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c96:	4604      	mov	r4, r0
 8009c98:	b085      	sub	sp, #20
 8009c9a:	4616      	mov	r6, r2
 8009c9c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009c9e:	f7fc fdb9 	bl	8006814 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009ca2:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009ca4:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009ca6:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8009caa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8009cae:	2a01      	cmp	r2, #1
 8009cb0:	d04d      	beq.n	8009d4e <HAL_QSPI_Receive+0xba>
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009cb8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009cbc:	2a01      	cmp	r2, #1
 8009cbe:	b2d0      	uxtb	r0, r2
 8009cc0:	d143      	bne.n	8009d4a <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8009cc6:	2f00      	cmp	r7, #0
 8009cc8:	d03a      	beq.n	8009d40 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009cca:	2222      	movs	r2, #34	; 0x22
 8009ccc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009cd0:	692a      	ldr	r2, [r5, #16]
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009cd6:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009cd8:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009cda:	3201      	adds	r2, #1
 8009cdc:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009cde:	6969      	ldr	r1, [r5, #20]
 8009ce0:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8009ce4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8009ce8:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009cea:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8009cee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009cf0:	b98a      	cbnz	r2, 8009d16 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	2102      	movs	r1, #2
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	9600      	str	r6, [sp, #0]
 8009cfa:	f7ff feb3 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8009cfe:	b910      	cbnz	r0, 8009d06 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	2202      	movs	r2, #2
 8009d04:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009d06:	2301      	movs	r3, #1
 8009d08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009d12:	b005      	add	sp, #20
 8009d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8009d16:	2201      	movs	r2, #1
 8009d18:	2106      	movs	r1, #6
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	9600      	str	r6, [sp, #0]
 8009d1e:	9303      	str	r3, [sp, #12]
 8009d20:	f7ff fea0 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d1ee      	bne.n	8009d06 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009d28:	f895 1020 	ldrb.w	r1, [r5, #32]
 8009d2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8009d2e:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009d30:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8009d32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009d34:	3201      	adds	r2, #1
 8009d36:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8009d38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009d3a:	3a01      	subs	r2, #1
 8009d3c:	63a2      	str	r2, [r4, #56]	; 0x38
 8009d3e:	e7d6      	b.n	8009cee <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009d40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009d42:	f043 0308 	orr.w	r3, r3, #8
 8009d46:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8009d48:	e7e0      	b.n	8009d0c <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8009d4a:	2002      	movs	r0, #2
 8009d4c:	e7de      	b.n	8009d0c <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8009d4e:	2002      	movs	r0, #2
 8009d50:	e7df      	b.n	8009d12 <HAL_QSPI_Receive+0x7e>

08009d52 <HAL_QSPI_AutoPolling>:
{
 8009d52:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009d56:	4604      	mov	r4, r0
 8009d58:	4615      	mov	r5, r2
 8009d5a:	461e      	mov	r6, r3
 8009d5c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8009d5e:	f7fc fd59 	bl	8006814 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009d62:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009d66:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009d68:	2a01      	cmp	r2, #1
 8009d6a:	d040      	beq.n	8009dee <HAL_QSPI_AutoPolling+0x9c>
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009d72:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009d76:	2a01      	cmp	r2, #1
 8009d78:	b2d7      	uxtb	r7, r2
 8009d7a:	d136      	bne.n	8009dea <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009d7c:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009d7e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009d80:	9003      	str	r0, [sp, #12]
 8009d82:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009d84:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009d86:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009d88:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009d8c:	2120      	movs	r1, #32
 8009d8e:	f7ff fe69 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009d92:	bb20      	cbnz	r0, 8009dde <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009d94:	6821      	ldr	r1, [r4, #0]
 8009d96:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009d98:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009d9a:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009d9c:	686a      	ldr	r2, [r5, #4]
 8009d9e:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009da0:	68aa      	ldr	r2, [r5, #8]
 8009da2:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009da4:	680a      	ldr	r2, [r1, #0]
 8009da6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8009daa:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009dac:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009dae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009db2:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009db4:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8009db6:	68ea      	ldr	r2, [r5, #12]
 8009db8:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009dc0:	f7ff fd94 	bl	80098ec <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	463a      	mov	r2, r7
 8009dc8:	2108      	movs	r1, #8
 8009dca:	4620      	mov	r0, r4
 8009dcc:	9600      	str	r6, [sp, #0]
 8009dce:	f7ff fe49 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009dd2:	b920      	cbnz	r0, 8009dde <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	2208      	movs	r2, #8
 8009dd8:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009dda:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009dde:	2300      	movs	r3, #0
 8009de0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009de4:	b004      	add	sp, #16
 8009de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8009dea:	2002      	movs	r0, #2
 8009dec:	e7f7      	b.n	8009dde <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8009dee:	2002      	movs	r0, #2
 8009df0:	e7f8      	b.n	8009de4 <HAL_QSPI_AutoPolling+0x92>

08009df2 <HAL_QSPI_MemoryMapped>:
{
 8009df2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009df4:	4604      	mov	r4, r0
 8009df6:	4616      	mov	r6, r2
 8009df8:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009dfa:	f7fc fd0b 	bl	8006814 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009dfe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009e02:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009e04:	2a01      	cmp	r2, #1
 8009e06:	d033      	beq.n	8009e70 <HAL_QSPI_MemoryMapped+0x7e>
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009e0e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009e12:	2a01      	cmp	r2, #1
 8009e14:	d12a      	bne.n	8009e6c <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009e16:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009e18:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009e1a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009e1c:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009e1e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009e22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009e24:	9100      	str	r1, [sp, #0]
 8009e26:	2120      	movs	r1, #32
 8009e28:	f7ff fe1c 	bl	8009a64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	b9b8      	cbnz	r0, 8009e60 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	6872      	ldr	r2, [r6, #4]
 8009e34:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009e36:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009e38:	f020 0008 	bic.w	r0, r0, #8
 8009e3c:	ea40 0002 	orr.w	r0, r0, r2
 8009e40:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009e42:	d107      	bne.n	8009e54 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8009e44:	6832      	ldr	r2, [r6, #0]
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8009e48:	2210      	movs	r2, #16
 8009e4a:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009e52:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8009e54:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8009e58:	4639      	mov	r1, r7
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f7ff fd46 	bl	80098ec <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8009e60:	2300      	movs	r3, #0
 8009e62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009e66:	4628      	mov	r0, r5
 8009e68:	b003      	add	sp, #12
 8009e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009e6c:	2502      	movs	r5, #2
 8009e6e:	e7f7      	b.n	8009e60 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8009e70:	2502      	movs	r5, #2
 8009e72:	e7f8      	b.n	8009e66 <HAL_QSPI_MemoryMapped+0x74>

08009e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e78:	4604      	mov	r4, r0
 8009e7a:	b340      	cbz	r0, 8009ece <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e7c:	6803      	ldr	r3, [r0, #0]
 8009e7e:	07d8      	lsls	r0, r3, #31
 8009e80:	d410      	bmi.n	8009ea4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	0799      	lsls	r1, r3, #30
 8009e86:	d464      	bmi.n	8009f52 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	0719      	lsls	r1, r3, #28
 8009e8c:	f100 80aa 	bmi.w	8009fe4 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	075a      	lsls	r2, r3, #29
 8009e94:	f100 80cb 	bmi.w	800a02e <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e98:	69a2      	ldr	r2, [r4, #24]
 8009e9a:	2a00      	cmp	r2, #0
 8009e9c:	f040 8134 	bne.w	800a108 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	e02b      	b.n	8009efc <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ea4:	4b96      	ldr	r3, [pc, #600]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	f002 020c 	and.w	r2, r2, #12
 8009eac:	2a04      	cmp	r2, #4
 8009eae:	d007      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	f002 020c 	and.w	r2, r2, #12
 8009eb6:	2a08      	cmp	r2, #8
 8009eb8:	d10b      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x5e>
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	0252      	lsls	r2, r2, #9
 8009ebe:	d508      	bpl.n	8009ed2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ec0:	4b8f      	ldr	r3, [pc, #572]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	039b      	lsls	r3, r3, #14
 8009ec6:	d5dc      	bpl.n	8009e82 <HAL_RCC_OscConfig+0xe>
 8009ec8:	6863      	ldr	r3, [r4, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1d9      	bne.n	8009e82 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8009ece:	2001      	movs	r0, #1
 8009ed0:	e014      	b.n	8009efc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ed2:	6862      	ldr	r2, [r4, #4]
 8009ed4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009ed8:	d113      	bne.n	8009f02 <HAL_RCC_OscConfig+0x8e>
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009ee0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009ee2:	f7fc fc97 	bl	8006814 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ee6:	4e86      	ldr	r6, [pc, #536]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8009ee8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eea:	6833      	ldr	r3, [r6, #0]
 8009eec:	039f      	lsls	r7, r3, #14
 8009eee:	d4c8      	bmi.n	8009e82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ef0:	f7fc fc90 	bl	8006814 <HAL_GetTick>
 8009ef4:	1b40      	subs	r0, r0, r5
 8009ef6:	2864      	cmp	r0, #100	; 0x64
 8009ef8:	d9f7      	bls.n	8009eea <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8009efa:	2003      	movs	r0, #3
}
 8009efc:	b002      	add	sp, #8
 8009efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f02:	4d7f      	ldr	r5, [pc, #508]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b992      	cbnz	r2, 8009f2e <HAL_RCC_OscConfig+0xba>
 8009f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f0c:	602b      	str	r3, [r5, #0]
 8009f0e:	682b      	ldr	r3, [r5, #0]
 8009f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009f16:	f7fc fc7d 	bl	8006814 <HAL_GetTick>
 8009f1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	0398      	lsls	r0, r3, #14
 8009f20:	d5af      	bpl.n	8009e82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f22:	f7fc fc77 	bl	8006814 <HAL_GetTick>
 8009f26:	1b80      	subs	r0, r0, r6
 8009f28:	2864      	cmp	r0, #100	; 0x64
 8009f2a:	d9f7      	bls.n	8009f1c <HAL_RCC_OscConfig+0xa8>
 8009f2c:	e7e5      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f2e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8009f32:	d107      	bne.n	8009f44 <HAL_RCC_OscConfig+0xd0>
 8009f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	682b      	ldr	r3, [r5, #0]
 8009f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	e7ce      	b.n	8009ee2 <HAL_RCC_OscConfig+0x6e>
 8009f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f48:	602b      	str	r3, [r5, #0]
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f50:	e7f6      	b.n	8009f40 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f52:	4b6b      	ldr	r3, [pc, #428]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 8009f54:	689a      	ldr	r2, [r3, #8]
 8009f56:	f012 0f0c 	tst.w	r2, #12
 8009f5a:	d007      	beq.n	8009f6c <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	f002 020c 	and.w	r2, r2, #12
 8009f62:	2a08      	cmp	r2, #8
 8009f64:	d111      	bne.n	8009f8a <HAL_RCC_OscConfig+0x116>
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	0251      	lsls	r1, r2, #9
 8009f6a:	d40e      	bmi.n	8009f8a <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f6c:	4b64      	ldr	r3, [pc, #400]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	0792      	lsls	r2, r2, #30
 8009f72:	d502      	bpl.n	8009f7a <HAL_RCC_OscConfig+0x106>
 8009f74:	68e2      	ldr	r2, [r4, #12]
 8009f76:	2a01      	cmp	r2, #1
 8009f78:	d1a9      	bne.n	8009ece <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	6921      	ldr	r1, [r4, #16]
 8009f7e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009f82:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8009f86:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f88:	e77e      	b.n	8009e88 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f8a:	68e2      	ldr	r2, [r4, #12]
 8009f8c:	b1c2      	cbz	r2, 8009fc0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8009f8e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f90:	4d5b      	ldr	r5, [pc, #364]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8009f92:	f042 0201 	orr.w	r2, r2, #1
 8009f96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009f98:	f7fc fc3c 	bl	8006814 <HAL_GetTick>
 8009f9c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	079f      	lsls	r7, r3, #30
 8009fa2:	d507      	bpl.n	8009fb4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	6922      	ldr	r2, [r4, #16]
 8009fa8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009fac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	e769      	b.n	8009e88 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fb4:	f7fc fc2e 	bl	8006814 <HAL_GetTick>
 8009fb8:	1b80      	subs	r0, r0, r6
 8009fba:	2802      	cmp	r0, #2
 8009fbc:	d9ef      	bls.n	8009f9e <HAL_RCC_OscConfig+0x12a>
 8009fbe:	e79c      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8009fc0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fc2:	4e4f      	ldr	r6, [pc, #316]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8009fc4:	f022 0201 	bic.w	r2, r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009fca:	f7fc fc23 	bl	8006814 <HAL_GetTick>
 8009fce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	0798      	lsls	r0, r3, #30
 8009fd4:	f57f af58 	bpl.w	8009e88 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fd8:	f7fc fc1c 	bl	8006814 <HAL_GetTick>
 8009fdc:	1b40      	subs	r0, r0, r5
 8009fde:	2802      	cmp	r0, #2
 8009fe0:	d9f6      	bls.n	8009fd0 <HAL_RCC_OscConfig+0x15c>
 8009fe2:	e78a      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009fe4:	6963      	ldr	r3, [r4, #20]
 8009fe6:	4d46      	ldr	r5, [pc, #280]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 8009fe8:	b183      	cbz	r3, 800a00c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8009fea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009fec:	f043 0301 	orr.w	r3, r3, #1
 8009ff0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009ff2:	f7fc fc0f 	bl	8006814 <HAL_GetTick>
 8009ff6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ff8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009ffa:	079b      	lsls	r3, r3, #30
 8009ffc:	f53f af48 	bmi.w	8009e90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a000:	f7fc fc08 	bl	8006814 <HAL_GetTick>
 800a004:	1b80      	subs	r0, r0, r6
 800a006:	2802      	cmp	r0, #2
 800a008:	d9f6      	bls.n	8009ff8 <HAL_RCC_OscConfig+0x184>
 800a00a:	e776      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800a00c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a00e:	f023 0301 	bic.w	r3, r3, #1
 800a012:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a014:	f7fc fbfe 	bl	8006814 <HAL_GetTick>
 800a018:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a01a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a01c:	079f      	lsls	r7, r3, #30
 800a01e:	f57f af37 	bpl.w	8009e90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a022:	f7fc fbf7 	bl	8006814 <HAL_GetTick>
 800a026:	1b80      	subs	r0, r0, r6
 800a028:	2802      	cmp	r0, #2
 800a02a:	d9f6      	bls.n	800a01a <HAL_RCC_OscConfig+0x1a6>
 800a02c:	e765      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a02e:	4b34      	ldr	r3, [pc, #208]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 800a030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a032:	00d0      	lsls	r0, r2, #3
 800a034:	d427      	bmi.n	800a086 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800a038:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a03a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a03e:	641a      	str	r2, [r3, #64]	; 0x40
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a04a:	4d2e      	ldr	r5, [pc, #184]	; (800a104 <HAL_RCC_OscConfig+0x290>)
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	05d9      	lsls	r1, r3, #23
 800a050:	d51b      	bpl.n	800a08a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a052:	68a3      	ldr	r3, [r4, #8]
 800a054:	4d2a      	ldr	r5, [pc, #168]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 800a056:	2b01      	cmp	r3, #1
 800a058:	d127      	bne.n	800a0aa <HAL_RCC_OscConfig+0x236>
 800a05a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a05c:	f043 0301 	orr.w	r3, r3, #1
 800a060:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a062:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a066:	f7fc fbd5 	bl	8006814 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a06a:	4e25      	ldr	r6, [pc, #148]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800a06c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a06e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a070:	079b      	lsls	r3, r3, #30
 800a072:	d53f      	bpl.n	800a0f4 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 800a074:	2f00      	cmp	r7, #0
 800a076:	f43f af0f 	beq.w	8009e98 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a07a:	4a21      	ldr	r2, [pc, #132]	; (800a100 <HAL_RCC_OscConfig+0x28c>)
 800a07c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a07e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a082:	6413      	str	r3, [r2, #64]	; 0x40
 800a084:	e708      	b.n	8009e98 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800a086:	2700      	movs	r7, #0
 800a088:	e7df      	b.n	800a04a <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a090:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a092:	f7fc fbbf 	bl	8006814 <HAL_GetTick>
 800a096:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	05da      	lsls	r2, r3, #23
 800a09c:	d4d9      	bmi.n	800a052 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a09e:	f7fc fbb9 	bl	8006814 <HAL_GetTick>
 800a0a2:	1b80      	subs	r0, r0, r6
 800a0a4:	2864      	cmp	r0, #100	; 0x64
 800a0a6:	d9f7      	bls.n	800a098 <HAL_RCC_OscConfig+0x224>
 800a0a8:	e727      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0aa:	b9ab      	cbnz	r3, 800a0d8 <HAL_RCC_OscConfig+0x264>
 800a0ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0ae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0b2:	f023 0301 	bic.w	r3, r3, #1
 800a0b6:	672b      	str	r3, [r5, #112]	; 0x70
 800a0b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a0ba:	f023 0304 	bic.w	r3, r3, #4
 800a0be:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a0c0:	f7fc fba8 	bl	8006814 <HAL_GetTick>
 800a0c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a0c8:	0798      	lsls	r0, r3, #30
 800a0ca:	d5d3      	bpl.n	800a074 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0cc:	f7fc fba2 	bl	8006814 <HAL_GetTick>
 800a0d0:	1b80      	subs	r0, r0, r6
 800a0d2:	4540      	cmp	r0, r8
 800a0d4:	d9f7      	bls.n	800a0c6 <HAL_RCC_OscConfig+0x252>
 800a0d6:	e710      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0d8:	2b05      	cmp	r3, #5
 800a0da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a0dc:	d103      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x272>
 800a0de:	f043 0304 	orr.w	r3, r3, #4
 800a0e2:	672b      	str	r3, [r5, #112]	; 0x70
 800a0e4:	e7b9      	b.n	800a05a <HAL_RCC_OscConfig+0x1e6>
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	672b      	str	r3, [r5, #112]	; 0x70
 800a0ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a0ee:	f023 0304 	bic.w	r3, r3, #4
 800a0f2:	e7b5      	b.n	800a060 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0f4:	f7fc fb8e 	bl	8006814 <HAL_GetTick>
 800a0f8:	1b40      	subs	r0, r0, r5
 800a0fa:	4540      	cmp	r0, r8
 800a0fc:	d9b7      	bls.n	800a06e <HAL_RCC_OscConfig+0x1fa>
 800a0fe:	e6fc      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
 800a100:	40023800 	.word	0x40023800
 800a104:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a108:	4d3c      	ldr	r5, [pc, #240]	; (800a1fc <HAL_RCC_OscConfig+0x388>)
 800a10a:	68ab      	ldr	r3, [r5, #8]
 800a10c:	f003 030c 	and.w	r3, r3, #12
 800a110:	2b08      	cmp	r3, #8
 800a112:	d042      	beq.n	800a19a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800a114:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a116:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800a118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a11c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a11e:	d12f      	bne.n	800a180 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 800a120:	f7fc fb78 	bl	8006814 <HAL_GetTick>
 800a124:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a126:	682b      	ldr	r3, [r5, #0]
 800a128:	0199      	lsls	r1, r3, #6
 800a12a:	d423      	bmi.n	800a174 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a12c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800a130:	4313      	orrs	r3, r2
 800a132:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a134:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800a138:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a13a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a13e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a140:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800a144:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a146:	0852      	lsrs	r2, r2, #1
 800a148:	3a01      	subs	r2, #1
 800a14a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a14e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a156:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a158:	f7fc fb5c 	bl	8006814 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a15c:	4d27      	ldr	r5, [pc, #156]	; (800a1fc <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 800a15e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	019a      	lsls	r2, r3, #6
 800a164:	f53f ae9c 	bmi.w	8009ea0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a168:	f7fc fb54 	bl	8006814 <HAL_GetTick>
 800a16c:	1b00      	subs	r0, r0, r4
 800a16e:	2802      	cmp	r0, #2
 800a170:	d9f6      	bls.n	800a160 <HAL_RCC_OscConfig+0x2ec>
 800a172:	e6c2      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a174:	f7fc fb4e 	bl	8006814 <HAL_GetTick>
 800a178:	1b80      	subs	r0, r0, r6
 800a17a:	2802      	cmp	r0, #2
 800a17c:	d9d3      	bls.n	800a126 <HAL_RCC_OscConfig+0x2b2>
 800a17e:	e6bc      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800a180:	f7fc fb48 	bl	8006814 <HAL_GetTick>
 800a184:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a186:	682b      	ldr	r3, [r5, #0]
 800a188:	019b      	lsls	r3, r3, #6
 800a18a:	f57f ae89 	bpl.w	8009ea0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a18e:	f7fc fb41 	bl	8006814 <HAL_GetTick>
 800a192:	1b00      	subs	r0, r0, r4
 800a194:	2802      	cmp	r0, #2
 800a196:	d9f6      	bls.n	800a186 <HAL_RCC_OscConfig+0x312>
 800a198:	e6af      	b.n	8009efa <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a19a:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800a19c:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a19e:	f43f ae96 	beq.w	8009ece <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1a6:	69e1      	ldr	r1, [r4, #28]
 800a1a8:	428a      	cmp	r2, r1
 800a1aa:	f47f ae90 	bne.w	8009ece <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1b2:	6a21      	ldr	r1, [r4, #32]
 800a1b4:	428a      	cmp	r2, r1
 800a1b6:	f47f ae8a 	bne.w	8009ece <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1ba:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a1be:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1c0:	401a      	ands	r2, r3
 800a1c2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800a1c6:	f47f ae82 	bne.w	8009ece <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a1ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a1cc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800a1d0:	0852      	lsrs	r2, r2, #1
 800a1d2:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a1d4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800a1d8:	f47f ae79 	bne.w	8009ece <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a1dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a1e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a1e2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800a1e6:	f47f ae72 	bne.w	8009ece <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a1ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a1ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a1f0:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800a1f4:	f43f ae54 	beq.w	8009ea0 <HAL_RCC_OscConfig+0x2c>
 800a1f8:	e669      	b.n	8009ece <HAL_RCC_OscConfig+0x5a>
 800a1fa:	bf00      	nop
 800a1fc:	40023800 	.word	0x40023800

0800a200 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a200:	4913      	ldr	r1, [pc, #76]	; (800a250 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800a202:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a204:	688b      	ldr	r3, [r1, #8]
 800a206:	f003 030c 	and.w	r3, r3, #12
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d01b      	beq.n	800a246 <HAL_RCC_GetSysClockFreq+0x46>
 800a20e:	2b08      	cmp	r3, #8
 800a210:	d11b      	bne.n	800a24a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a212:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a214:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a216:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a218:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a21c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a220:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800a224:	bf1a      	itte	ne
 800a226:	480b      	ldrne	r0, [pc, #44]	; (800a254 <HAL_RCC_GetSysClockFreq+0x54>)
 800a228:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a22a:	480b      	ldreq	r0, [pc, #44]	; (800a258 <HAL_RCC_GetSysClockFreq+0x58>)
 800a22c:	fba1 0100 	umull	r0, r1, r1, r0
 800a230:	f7f6 fa12 	bl	8000658 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a234:	4b06      	ldr	r3, [pc, #24]	; (800a250 <HAL_RCC_GetSysClockFreq+0x50>)
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800a23c:	3301      	adds	r3, #1
 800a23e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800a240:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800a244:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a246:	4803      	ldr	r0, [pc, #12]	; (800a254 <HAL_RCC_GetSysClockFreq+0x54>)
 800a248:	e7fc      	b.n	800a244 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800a24a:	4803      	ldr	r0, [pc, #12]	; (800a258 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800a24c:	e7fa      	b.n	800a244 <HAL_RCC_GetSysClockFreq+0x44>
 800a24e:	bf00      	nop
 800a250:	40023800 	.word	0x40023800
 800a254:	017d7840 	.word	0x017d7840
 800a258:	00f42400 	.word	0x00f42400

0800a25c <HAL_RCC_ClockConfig>:
{
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a262:	4604      	mov	r4, r0
 800a264:	b910      	cbnz	r0, 800a26c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a266:	2001      	movs	r0, #1
}
 800a268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a26c:	4a46      	ldr	r2, [pc, #280]	; (800a388 <HAL_RCC_ClockConfig+0x12c>)
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	f003 030f 	and.w	r3, r3, #15
 800a274:	428b      	cmp	r3, r1
 800a276:	d328      	bcc.n	800a2ca <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a278:	6822      	ldr	r2, [r4, #0]
 800a27a:	0797      	lsls	r7, r2, #30
 800a27c:	d430      	bmi.n	800a2e0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a27e:	07d0      	lsls	r0, r2, #31
 800a280:	d444      	bmi.n	800a30c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a282:	4a41      	ldr	r2, [pc, #260]	; (800a388 <HAL_RCC_ClockConfig+0x12c>)
 800a284:	6813      	ldr	r3, [r2, #0]
 800a286:	f003 030f 	and.w	r3, r3, #15
 800a28a:	42ab      	cmp	r3, r5
 800a28c:	d867      	bhi.n	800a35e <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a28e:	6822      	ldr	r2, [r4, #0]
 800a290:	0751      	lsls	r1, r2, #29
 800a292:	d470      	bmi.n	800a376 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a294:	0713      	lsls	r3, r2, #28
 800a296:	d507      	bpl.n	800a2a8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a298:	4a3c      	ldr	r2, [pc, #240]	; (800a38c <HAL_RCC_ClockConfig+0x130>)
 800a29a:	6921      	ldr	r1, [r4, #16]
 800a29c:	6893      	ldr	r3, [r2, #8]
 800a29e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a2a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a2a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a2a8:	f7ff ffaa 	bl	800a200 <HAL_RCC_GetSysClockFreq>
 800a2ac:	4b37      	ldr	r3, [pc, #220]	; (800a38c <HAL_RCC_ClockConfig+0x130>)
 800a2ae:	4a38      	ldr	r2, [pc, #224]	; (800a390 <HAL_RCC_ClockConfig+0x134>)
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a2b6:	5cd3      	ldrb	r3, [r2, r3]
 800a2b8:	40d8      	lsrs	r0, r3
 800a2ba:	4b36      	ldr	r3, [pc, #216]	; (800a394 <HAL_RCC_ClockConfig+0x138>)
 800a2bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800a2be:	4b36      	ldr	r3, [pc, #216]	; (800a398 <HAL_RCC_ClockConfig+0x13c>)
 800a2c0:	6818      	ldr	r0, [r3, #0]
 800a2c2:	f7fa f917 	bl	80044f4 <HAL_InitTick>
  return HAL_OK;
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	e7ce      	b.n	800a268 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ca:	6813      	ldr	r3, [r2, #0]
 800a2cc:	f023 030f 	bic.w	r3, r3, #15
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2d4:	6813      	ldr	r3, [r2, #0]
 800a2d6:	f003 030f 	and.w	r3, r3, #15
 800a2da:	428b      	cmp	r3, r1
 800a2dc:	d1c3      	bne.n	800a266 <HAL_RCC_ClockConfig+0xa>
 800a2de:	e7cb      	b.n	800a278 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2e0:	f012 0f04 	tst.w	r2, #4
 800a2e4:	4b29      	ldr	r3, [pc, #164]	; (800a38c <HAL_RCC_ClockConfig+0x130>)
 800a2e6:	d003      	beq.n	800a2f0 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2e8:	6899      	ldr	r1, [r3, #8]
 800a2ea:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800a2ee:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2f0:	0716      	lsls	r6, r2, #28
 800a2f2:	d503      	bpl.n	800a2fc <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a2f4:	6899      	ldr	r1, [r3, #8]
 800a2f6:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800a2fa:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2fc:	4923      	ldr	r1, [pc, #140]	; (800a38c <HAL_RCC_ClockConfig+0x130>)
 800a2fe:	68a0      	ldr	r0, [r4, #8]
 800a300:	688b      	ldr	r3, [r1, #8]
 800a302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a306:	4303      	orrs	r3, r0
 800a308:	608b      	str	r3, [r1, #8]
 800a30a:	e7b8      	b.n	800a27e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a30c:	6861      	ldr	r1, [r4, #4]
 800a30e:	4b1f      	ldr	r3, [pc, #124]	; (800a38c <HAL_RCC_ClockConfig+0x130>)
 800a310:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a312:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a314:	d11b      	bne.n	800a34e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a316:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a31a:	d0a4      	beq.n	800a266 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a31c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a31e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a322:	4f1a      	ldr	r7, [pc, #104]	; (800a38c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a324:	f022 0203 	bic.w	r2, r2, #3
 800a328:	430a      	orrs	r2, r1
 800a32a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800a32c:	f7fc fa72 	bl	8006814 <HAL_GetTick>
 800a330:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	6862      	ldr	r2, [r4, #4]
 800a336:	f003 030c 	and.w	r3, r3, #12
 800a33a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a33e:	d0a0      	beq.n	800a282 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a340:	f7fc fa68 	bl	8006814 <HAL_GetTick>
 800a344:	1b80      	subs	r0, r0, r6
 800a346:	4540      	cmp	r0, r8
 800a348:	d9f3      	bls.n	800a332 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800a34a:	2003      	movs	r0, #3
 800a34c:	e78c      	b.n	800a268 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a34e:	2902      	cmp	r1, #2
 800a350:	d102      	bne.n	800a358 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a352:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800a356:	e7e0      	b.n	800a31a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a358:	f012 0f02 	tst.w	r2, #2
 800a35c:	e7dd      	b.n	800a31a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a35e:	6813      	ldr	r3, [r2, #0]
 800a360:	f023 030f 	bic.w	r3, r3, #15
 800a364:	432b      	orrs	r3, r5
 800a366:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a368:	6813      	ldr	r3, [r2, #0]
 800a36a:	f003 030f 	and.w	r3, r3, #15
 800a36e:	42ab      	cmp	r3, r5
 800a370:	f47f af79 	bne.w	800a266 <HAL_RCC_ClockConfig+0xa>
 800a374:	e78b      	b.n	800a28e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a376:	4905      	ldr	r1, [pc, #20]	; (800a38c <HAL_RCC_ClockConfig+0x130>)
 800a378:	68e0      	ldr	r0, [r4, #12]
 800a37a:	688b      	ldr	r3, [r1, #8]
 800a37c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a380:	4303      	orrs	r3, r0
 800a382:	608b      	str	r3, [r1, #8]
 800a384:	e786      	b.n	800a294 <HAL_RCC_ClockConfig+0x38>
 800a386:	bf00      	nop
 800a388:	40023c00 	.word	0x40023c00
 800a38c:	40023800 	.word	0x40023800
 800a390:	08029389 	.word	0x08029389
 800a394:	20000060 	.word	0x20000060
 800a398:	20000068 	.word	0x20000068

0800a39c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a39c:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800a39e:	4a05      	ldr	r2, [pc, #20]	; (800a3b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800a3a6:	5cd3      	ldrb	r3, [r2, r3]
 800a3a8:	4a03      	ldr	r2, [pc, #12]	; (800a3b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a3aa:	6810      	ldr	r0, [r2, #0]
}
 800a3ac:	40d8      	lsrs	r0, r3
 800a3ae:	4770      	bx	lr
 800a3b0:	40023800 	.word	0x40023800
 800a3b4:	08029399 	.word	0x08029399
 800a3b8:	20000060 	.word	0x20000060

0800a3bc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a3bc:	230f      	movs	r3, #15
 800a3be:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a3c0:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <HAL_RCC_GetClockConfig+0x34>)
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	f002 0203 	and.w	r2, r2, #3
 800a3c8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800a3d0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800a3d8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	08db      	lsrs	r3, r3, #3
 800a3de:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800a3e2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a3e4:	4b03      	ldr	r3, [pc, #12]	; (800a3f4 <HAL_RCC_GetClockConfig+0x38>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	600b      	str	r3, [r1, #0]
}
 800a3ee:	4770      	bx	lr
 800a3f0:	40023800 	.word	0x40023800
 800a3f4:	40023c00 	.word	0x40023c00

0800a3f8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a3f8:	6803      	ldr	r3, [r0, #0]
{
 800a3fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a3fe:	f013 0601 	ands.w	r6, r3, #1
{
 800a402:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a404:	d00b      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a406:	4aba      	ldr	r2, [pc, #744]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a408:	6891      	ldr	r1, [r2, #8]
 800a40a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800a40e:	6091      	str	r1, [r2, #8]
 800a410:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800a412:	6891      	ldr	r1, [r2, #8]
 800a414:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a416:	fab6 f686 	clz	r6, r6
 800a41a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a41c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a41e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800a422:	d012      	beq.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a424:	49b2      	ldr	r1, [pc, #712]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a426:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800a428:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a42c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a430:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800a434:	bf08      	it	eq
 800a436:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a438:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a43c:	bf16      	itet	ne
 800a43e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800a442:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a444:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a446:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a44a:	02d8      	lsls	r0, r3, #11
 800a44c:	d510      	bpl.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a44e:	48a8      	ldr	r0, [pc, #672]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a450:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a452:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a456:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a45a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a45e:	ea42 0201 	orr.w	r2, r2, r1
 800a462:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a466:	f000 81a8 	beq.w	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800a46a:	2900      	cmp	r1, #0
 800a46c:	bf08      	it	eq
 800a46e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800a470:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800a474:	bf18      	it	ne
 800a476:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a478:	0699      	lsls	r1, r3, #26
 800a47a:	d531      	bpl.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a47c:	4b9c      	ldr	r3, [pc, #624]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a47e:	4f9d      	ldr	r7, [pc, #628]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800a480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a482:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a486:	641a      	str	r2, [r3, #64]	; 0x40
 800a488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a498:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a49a:	f7fc f9bb 	bl	8006814 <HAL_GetTick>
 800a49e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	05da      	lsls	r2, r3, #23
 800a4a4:	f140 818b 	bpl.w	800a7be <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a4a8:	4f91      	ldr	r7, [pc, #580]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a4aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a4ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a4b0:	f040 8190 	bne.w	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a4b6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a4ba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a4be:	4a8c      	ldr	r2, [pc, #560]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a4c0:	f040 81ae 	bne.w	800a820 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a4c4:	6891      	ldr	r1, [r2, #8]
 800a4c6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800a4ca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800a4ce:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800a4d2:	4301      	orrs	r1, r0
 800a4d4:	6091      	str	r1, [r2, #8]
 800a4d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4da:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a4dc:	430b      	orrs	r3, r1
 800a4de:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	06d9      	lsls	r1, r3, #27
 800a4e4:	d50c      	bpl.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4e6:	4a82      	ldr	r2, [pc, #520]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a4e8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800a4ec:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800a4f0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800a4f4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800a4f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a4fa:	4301      	orrs	r1, r0
 800a4fc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a500:	045a      	lsls	r2, r3, #17
 800a502:	d508      	bpl.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a504:	497a      	ldr	r1, [pc, #488]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a506:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a508:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a50c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a510:	4302      	orrs	r2, r0
 800a512:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a516:	041f      	lsls	r7, r3, #16
 800a518:	d508      	bpl.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a51a:	4975      	ldr	r1, [pc, #468]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a51c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a51e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a522:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a526:	4302      	orrs	r2, r0
 800a528:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a52c:	03d8      	lsls	r0, r3, #15
 800a52e:	d508      	bpl.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a530:	496f      	ldr	r1, [pc, #444]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a532:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a534:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a538:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a53c:	4302      	orrs	r2, r0
 800a53e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a542:	0399      	lsls	r1, r3, #14
 800a544:	d508      	bpl.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a546:	496a      	ldr	r1, [pc, #424]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a548:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a54a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a54e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a552:	4302      	orrs	r2, r0
 800a554:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a558:	065a      	lsls	r2, r3, #25
 800a55a:	d508      	bpl.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a55c:	4964      	ldr	r1, [pc, #400]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a55e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a560:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a564:	f022 0203 	bic.w	r2, r2, #3
 800a568:	4302      	orrs	r2, r0
 800a56a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a56e:	061f      	lsls	r7, r3, #24
 800a570:	d508      	bpl.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a572:	495f      	ldr	r1, [pc, #380]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a574:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a576:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a57a:	f022 020c 	bic.w	r2, r2, #12
 800a57e:	4302      	orrs	r2, r0
 800a580:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a584:	05d8      	lsls	r0, r3, #23
 800a586:	d508      	bpl.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a588:	4959      	ldr	r1, [pc, #356]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a58a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a58c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a590:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a594:	4302      	orrs	r2, r0
 800a596:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a59a:	0599      	lsls	r1, r3, #22
 800a59c:	d508      	bpl.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a59e:	4954      	ldr	r1, [pc, #336]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a5a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a5a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a5a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a5aa:	4302      	orrs	r2, r0
 800a5ac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a5b0:	055a      	lsls	r2, r3, #21
 800a5b2:	d508      	bpl.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a5b4:	494e      	ldr	r1, [pc, #312]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a5b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a5bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a5c0:	4302      	orrs	r2, r0
 800a5c2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a5c6:	051f      	lsls	r7, r3, #20
 800a5c8:	d508      	bpl.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a5ca:	4949      	ldr	r1, [pc, #292]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a5d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a5d6:	4302      	orrs	r2, r0
 800a5d8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a5dc:	04d8      	lsls	r0, r3, #19
 800a5de:	d508      	bpl.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a5e0:	4943      	ldr	r1, [pc, #268]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a5e2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a5e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a5e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a5ec:	4302      	orrs	r2, r0
 800a5ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a5f2:	0499      	lsls	r1, r3, #18
 800a5f4:	d508      	bpl.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a5f6:	493e      	ldr	r1, [pc, #248]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a5f8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a5fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a5fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a602:	4302      	orrs	r2, r0
 800a604:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a608:	025a      	lsls	r2, r3, #9
 800a60a:	d508      	bpl.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a60c:	4938      	ldr	r1, [pc, #224]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a60e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a610:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a614:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800a618:	4302      	orrs	r2, r0
 800a61a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a61e:	029f      	lsls	r7, r3, #10
 800a620:	d50c      	bpl.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a622:	4833      	ldr	r0, [pc, #204]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a624:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a626:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800a62a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a62e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800a632:	bf08      	it	eq
 800a634:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a636:	430a      	orrs	r2, r1
 800a638:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800a63c:	f013 0f08 	tst.w	r3, #8
 800a640:	bf18      	it	ne
 800a642:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a644:	0358      	lsls	r0, r3, #13
 800a646:	d508      	bpl.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a648:	4929      	ldr	r1, [pc, #164]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a64a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a64c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a654:	4302      	orrs	r2, r0
 800a656:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a65a:	0219      	lsls	r1, r3, #8
 800a65c:	d509      	bpl.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a65e:	4924      	ldr	r1, [pc, #144]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a660:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a664:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a668:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a66c:	4302      	orrs	r2, r0
 800a66e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	d509      	bpl.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a676:	491e      	ldr	r1, [pc, #120]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a678:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a67c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a680:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a684:	4302      	orrs	r2, r0
 800a686:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a68a:	011f      	lsls	r7, r3, #4
 800a68c:	d509      	bpl.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a68e:	4918      	ldr	r1, [pc, #96]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a690:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800a694:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800a698:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800a69c:	4302      	orrs	r2, r0
 800a69e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a6a2:	00d8      	lsls	r0, r3, #3
 800a6a4:	d509      	bpl.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a6a6:	4912      	ldr	r1, [pc, #72]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a6a8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a6ac:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800a6b0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800a6b4:	4302      	orrs	r2, r0
 800a6b6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a6ba:	2e01      	cmp	r6, #1
 800a6bc:	f000 80b4 	beq.w	800a828 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a6c0:	0199      	lsls	r1, r3, #6
 800a6c2:	f100 80b1 	bmi.w	800a828 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a6c6:	2d01      	cmp	r5, #1
 800a6c8:	d175      	bne.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a6ca:	4d09      	ldr	r5, [pc, #36]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	462e      	mov	r6, r5
 800a6d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6d4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6d6:	f7fc f89d 	bl	8006814 <HAL_GetTick>
 800a6da:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	f100 8126 	bmi.w	800a930 <HAL_RCCEx_PeriphCLKConfig+0x538>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	0315      	lsls	r5, r2, #12
 800a6e8:	d506      	bpl.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a6ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6ec:	b143      	cbz	r3, 800a700 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a6ee:	e003      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a6f0:	40023800 	.word	0x40023800
 800a6f4:	40007000 	.word	0x40007000
 800a6f8:	02d0      	lsls	r0, r2, #11
 800a6fa:	d51c      	bpl.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x33e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a6fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6fe:	b9d3      	cbnz	r3, 800a736 <HAL_RCCEx_PeriphCLKConfig+0x33e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a700:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a704:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a70c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800a710:	430b      	orrs	r3, r1
 800a712:	6961      	ldr	r1, [r4, #20]
 800a714:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800a718:	69a1      	ldr	r1, [r4, #24]
 800a71a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a71e:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a722:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800a726:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a728:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a72c:	3901      	subs	r1, #1
 800a72e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a732:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a736:	0291      	lsls	r1, r2, #10
 800a738:	d515      	bpl.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a73a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a73c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a740:	d111      	bne.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a742:	4982      	ldr	r1, [pc, #520]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800a744:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a748:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a74c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800a750:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800a754:	4303      	orrs	r3, r0
 800a756:	6960      	ldr	r0, [r4, #20]
 800a758:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a75c:	6a20      	ldr	r0, [r4, #32]
 800a75e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a766:	0712      	lsls	r2, r2, #28
 800a768:	d519      	bpl.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a76a:	4a78      	ldr	r2, [pc, #480]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800a76c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a770:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a774:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800a778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a77c:	430b      	orrs	r3, r1
 800a77e:	6961      	ldr	r1, [r4, #20]
 800a780:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800a784:	69e1      	ldr	r1, [r4, #28]
 800a786:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800a78a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a78e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800a792:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a794:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a798:	430b      	orrs	r3, r1
 800a79a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a79e:	4c6b      	ldr	r4, [pc, #428]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7a6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7a8:	f7fc f834 	bl	8006814 <HAL_GetTick>
 800a7ac:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	f140 80c4 	bpl.w	800a93e <HAL_RCCEx_PeriphCLKConfig+0x546>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	e009      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      plli2sused = 1;
 800a7ba:	2601      	movs	r6, #1
 800a7bc:	e658      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7be:	f7fc f829 	bl	8006814 <HAL_GetTick>
 800a7c2:	eba0 0008 	sub.w	r0, r0, r8
 800a7c6:	2864      	cmp	r0, #100	; 0x64
 800a7c8:	f67f ae6a 	bls.w	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800a7cc:	2003      	movs	r0, #3
}
 800a7ce:	b003      	add	sp, #12
 800a7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a7d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a7d6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	f43f ae6a 	beq.w	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800a7e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800a7e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a7ec:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a7ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a7f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a7f4:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800a7f6:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a7f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7fa:	07db      	lsls	r3, r3, #31
 800a7fc:	f57f ae5a 	bpl.w	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800a800:	f7fc f808 	bl	8006814 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a804:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a808:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a80a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a80c:	0798      	lsls	r0, r3, #30
 800a80e:	f53f ae51 	bmi.w	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a812:	f7fb ffff 	bl	8006814 <HAL_GetTick>
 800a816:	eba0 0008 	sub.w	r0, r0, r8
 800a81a:	4548      	cmp	r0, r9
 800a81c:	d9f5      	bls.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x412>
 800a81e:	e7d5      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a820:	6891      	ldr	r1, [r2, #8]
 800a822:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800a826:	e655      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800a828:	4e48      	ldr	r6, [pc, #288]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800a82a:	6833      	ldr	r3, [r6, #0]
 800a82c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a830:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a832:	f7fb ffef 	bl	8006814 <HAL_GetTick>
 800a836:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a838:	6833      	ldr	r3, [r6, #0]
 800a83a:	011a      	lsls	r2, r3, #4
 800a83c:	d472      	bmi.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a83e:	6822      	ldr	r2, [r4, #0]
 800a840:	07d3      	lsls	r3, r2, #31
 800a842:	d512      	bpl.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x472>
 800a844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a846:	b983      	cbnz	r3, 800a86a <HAL_RCCEx_PeriphCLKConfig+0x472>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a848:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a84c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a854:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800a858:	430b      	orrs	r3, r1
 800a85a:	6861      	ldr	r1, [r4, #4]
 800a85c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800a860:	68a1      	ldr	r1, [r4, #8]
 800a862:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800a866:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a86a:	0317      	lsls	r7, r2, #12
 800a86c:	d503      	bpl.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a86e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a874:	d005      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a876:	02d6      	lsls	r6, r2, #11
 800a878:	d51e      	bpl.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a87a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a87c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a880:	d11a      	bne.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a882:	4932      	ldr	r1, [pc, #200]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800a884:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a888:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a88c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a890:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800a894:	4303      	orrs	r3, r0
 800a896:	6860      	ldr	r0, [r4, #4]
 800a898:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a89c:	68e0      	ldr	r0, [r4, #12]
 800a89e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a8a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a8a6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800a8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ac:	f020 001f 	bic.w	r0, r0, #31
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	4303      	orrs	r3, r0
 800a8b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a8b8:	01d0      	lsls	r0, r2, #7
 800a8ba:	d511      	bpl.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a8bc:	4923      	ldr	r1, [pc, #140]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800a8be:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a8c2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a8c6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800a8ca:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800a8ce:	4303      	orrs	r3, r0
 800a8d0:	6860      	ldr	r0, [r4, #4]
 800a8d2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a8d6:	6920      	ldr	r0, [r4, #16]
 800a8d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a8dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a8e0:	0191      	lsls	r1, r2, #6
 800a8e2:	d50d      	bpl.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x508>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8e4:	6923      	ldr	r3, [r4, #16]
 800a8e6:	6862      	ldr	r2, [r4, #4]
 800a8e8:	041b      	lsls	r3, r3, #16
 800a8ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800a8ee:	68e2      	ldr	r2, [r4, #12]
 800a8f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a8f4:	68a2      	ldr	r2, [r4, #8]
 800a8f6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800a8fa:	4a14      	ldr	r2, [pc, #80]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800a8fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800a900:	4e12      	ldr	r6, [pc, #72]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800a902:	6833      	ldr	r3, [r6, #0]
 800a904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a908:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a90a:	f7fb ff83 	bl	8006814 <HAL_GetTick>
 800a90e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a910:	6833      	ldr	r3, [r6, #0]
 800a912:	011a      	lsls	r2, r3, #4
 800a914:	f53f aed7 	bmi.w	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a918:	f7fb ff7c 	bl	8006814 <HAL_GetTick>
 800a91c:	1bc0      	subs	r0, r0, r7
 800a91e:	2864      	cmp	r0, #100	; 0x64
 800a920:	d9f6      	bls.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a922:	e753      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a924:	f7fb ff76 	bl	8006814 <HAL_GetTick>
 800a928:	1bc0      	subs	r0, r0, r7
 800a92a:	2864      	cmp	r0, #100	; 0x64
 800a92c:	d984      	bls.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800a92e:	e74d      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a930:	f7fb ff70 	bl	8006814 <HAL_GetTick>
 800a934:	1bc0      	subs	r0, r0, r7
 800a936:	2864      	cmp	r0, #100	; 0x64
 800a938:	f67f aed0 	bls.w	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800a93c:	e746      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a93e:	f7fb ff69 	bl	8006814 <HAL_GetTick>
 800a942:	1b40      	subs	r0, r0, r5
 800a944:	2864      	cmp	r0, #100	; 0x64
 800a946:	f67f af32 	bls.w	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a94a:	e73f      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800a94c:	40023800 	.word	0x40023800

0800a950 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a954:	4604      	mov	r4, r0
 800a956:	b1c8      	cbz	r0, 800a98c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a958:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a95c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a960:	b91b      	cbnz	r3, 800a96a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a962:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a966:	f7f9 fd5b 	bl	8004420 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a96a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a96c:	1d21      	adds	r1, r4, #4
 800a96e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a970:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a974:	f000 fbdf 	bl	800b136 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a978:	6862      	ldr	r2, [r4, #4]
 800a97a:	4629      	mov	r1, r5
 800a97c:	6820      	ldr	r0, [r4, #0]
 800a97e:	f000 fc15 	bl	800b1ac <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a982:	2301      	movs	r3, #1

  return HAL_OK;
 800a984:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a986:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a98c:	2001      	movs	r0, #1
 800a98e:	e7fc      	b.n	800a98a <HAL_SDRAM_Init+0x3a>

0800a990 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a990:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a992:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a996:	4605      	mov	r5, r0
 800a998:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a99a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a99c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a99e:	d010      	beq.n	800a9c2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a9a0:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800a9a4:	2c01      	cmp	r4, #1
 800a9a6:	d110      	bne.n	800a9ca <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9a8:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a9aa:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9ac:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a9b0:	f000 fc32 	bl	800b218 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a9b4:	6833      	ldr	r3, [r6, #0]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d104      	bne.n	800a9c4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a9ba:	2305      	movs	r3, #5
 800a9bc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a9c0:	2000      	movs	r0, #0
}
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a9c4:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800a9c8:	e7fa      	b.n	800a9c0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	e7f9      	b.n	800a9c2 <HAL_SDRAM_SendCommand+0x32>

0800a9ce <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a9ce:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a9d4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	b2d8      	uxtb	r0, r3
 800a9da:	d00d      	beq.n	800a9f8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a9dc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	b2dd      	uxtb	r5, r3
 800a9e4:	d109      	bne.n	800a9fa <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9e6:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a9e8:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a9ee:	f000 fc25 	bl	800b23c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a9f2:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a9f4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a9f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	e7fc      	b.n	800a9f8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

0800aa00 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa00:	6a03      	ldr	r3, [r0, #32]
 800aa02:	f023 0301 	bic.w	r3, r3, #1
{
 800aa06:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa0c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa0e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa10:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800aa14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa16:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800aa1a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800aa1e:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa20:	688d      	ldr	r5, [r1, #8]
 800aa22:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa24:	4d0e      	ldr	r5, [pc, #56]	; (800aa60 <TIM_OC1_SetConfig+0x60>)
 800aa26:	42a8      	cmp	r0, r5
 800aa28:	d002      	beq.n	800aa30 <TIM_OC1_SetConfig+0x30>
 800aa2a:	4e0e      	ldr	r6, [pc, #56]	; (800aa64 <TIM_OC1_SetConfig+0x64>)
 800aa2c:	42b0      	cmp	r0, r6
 800aa2e:	d111      	bne.n	800aa54 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa30:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa34:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa36:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800aa38:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa3c:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa40:	d002      	beq.n	800aa48 <TIM_OC1_SetConfig+0x48>
 800aa42:	4d08      	ldr	r5, [pc, #32]	; (800aa64 <TIM_OC1_SetConfig+0x64>)
 800aa44:	42a8      	cmp	r0, r5
 800aa46:	d105      	bne.n	800aa54 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa4c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800aa50:	4335      	orrs	r5, r6
 800aa52:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa54:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa56:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800aa58:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800aa5a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa5c:	6203      	str	r3, [r0, #32]
}
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	40010000 	.word	0x40010000
 800aa64:	40010400 	.word	0x40010400

0800aa68 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa68:	6a03      	ldr	r3, [r0, #32]
 800aa6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800aa6e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa74:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa76:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800aa7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa7e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800aa82:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800aa86:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa88:	688d      	ldr	r5, [r1, #8]
 800aa8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa8e:	4d11      	ldr	r5, [pc, #68]	; (800aad4 <TIM_OC3_SetConfig+0x6c>)
 800aa90:	42a8      	cmp	r0, r5
 800aa92:	d003      	beq.n	800aa9c <TIM_OC3_SetConfig+0x34>
 800aa94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800aa98:	42a8      	cmp	r0, r5
 800aa9a:	d114      	bne.n	800aac6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa9c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aaa2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaa6:	4d0b      	ldr	r5, [pc, #44]	; (800aad4 <TIM_OC3_SetConfig+0x6c>)
 800aaa8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800aaaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaae:	d003      	beq.n	800aab8 <TIM_OC3_SetConfig+0x50>
 800aab0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800aab4:	42a8      	cmp	r0, r5
 800aab6:	d106      	bne.n	800aac6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aab8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aabc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800aac0:	4335      	orrs	r5, r6
 800aac2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aac8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800aaca:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800aacc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aace:	6203      	str	r3, [r0, #32]
}
 800aad0:	bd70      	pop	{r4, r5, r6, pc}
 800aad2:	bf00      	nop
 800aad4:	40010000 	.word	0x40010000

0800aad8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aad8:	6a03      	ldr	r3, [r0, #32]
 800aada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800aade:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aae0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aae6:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aaee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaf2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaf6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aafa:	688d      	ldr	r5, [r1, #8]
 800aafc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab00:	4d08      	ldr	r5, [pc, #32]	; (800ab24 <TIM_OC4_SetConfig+0x4c>)
 800ab02:	42a8      	cmp	r0, r5
 800ab04:	d003      	beq.n	800ab0e <TIM_OC4_SetConfig+0x36>
 800ab06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ab0a:	42a8      	cmp	r0, r5
 800ab0c:	d104      	bne.n	800ab18 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab0e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab12:	694d      	ldr	r5, [r1, #20]
 800ab14:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab1a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab1c:	684b      	ldr	r3, [r1, #4]
 800ab1e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab20:	6202      	str	r2, [r0, #32]
}
 800ab22:	bd30      	pop	{r4, r5, pc}
 800ab24:	40010000 	.word	0x40010000

0800ab28 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab28:	6a03      	ldr	r3, [r0, #32]
 800ab2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800ab2e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab30:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab32:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab34:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab36:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab38:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800ab3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800ab46:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab48:	688d      	ldr	r5, [r1, #8]
 800ab4a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab4e:	4d09      	ldr	r5, [pc, #36]	; (800ab74 <TIM_OC5_SetConfig+0x4c>)
 800ab50:	42a8      	cmp	r0, r5
 800ab52:	d003      	beq.n	800ab5c <TIM_OC5_SetConfig+0x34>
 800ab54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ab58:	42a8      	cmp	r0, r5
 800ab5a:	d104      	bne.n	800ab66 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab5c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab60:	694d      	ldr	r5, [r1, #20]
 800ab62:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab66:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab68:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab6a:	684b      	ldr	r3, [r1, #4]
 800ab6c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab6e:	6202      	str	r2, [r0, #32]
}
 800ab70:	bd30      	pop	{r4, r5, pc}
 800ab72:	bf00      	nop
 800ab74:	40010000 	.word	0x40010000

0800ab78 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab78:	6a03      	ldr	r3, [r0, #32]
 800ab7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800ab7e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab82:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab84:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab86:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab88:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ab8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab9a:	688d      	ldr	r5, [r1, #8]
 800ab9c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aba0:	4d08      	ldr	r5, [pc, #32]	; (800abc4 <TIM_OC6_SetConfig+0x4c>)
 800aba2:	42a8      	cmp	r0, r5
 800aba4:	d003      	beq.n	800abae <TIM_OC6_SetConfig+0x36>
 800aba6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800abaa:	42a8      	cmp	r0, r5
 800abac:	d104      	bne.n	800abb8 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800abae:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800abb2:	694d      	ldr	r5, [r1, #20]
 800abb4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800abba:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800abbc:	684b      	ldr	r3, [r1, #4]
 800abbe:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc0:	6202      	str	r2, [r0, #32]
}
 800abc2:	bd30      	pop	{r4, r5, pc}
 800abc4:	40010000 	.word	0x40010000

0800abc8 <HAL_TIM_Base_MspInit>:
}
 800abc8:	4770      	bx	lr
	...

0800abcc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800abcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d133      	bne.n	800ac3c <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800abd4:	2302      	movs	r3, #2
 800abd6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abda:	6803      	ldr	r3, [r0, #0]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	f042 0201 	orr.w	r2, r2, #1
 800abe2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe4:	4a16      	ldr	r2, [pc, #88]	; (800ac40 <HAL_TIM_Base_Start_IT+0x74>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d01a      	beq.n	800ac20 <HAL_TIM_Base_Start_IT+0x54>
 800abea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abee:	d017      	beq.n	800ac20 <HAL_TIM_Base_Start_IT+0x54>
 800abf0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d013      	beq.n	800ac20 <HAL_TIM_Base_Start_IT+0x54>
 800abf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d00f      	beq.n	800ac20 <HAL_TIM_Base_Start_IT+0x54>
 800ac00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d00b      	beq.n	800ac20 <HAL_TIM_Base_Start_IT+0x54>
 800ac08:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d007      	beq.n	800ac20 <HAL_TIM_Base_Start_IT+0x54>
 800ac10:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d003      	beq.n	800ac20 <HAL_TIM_Base_Start_IT+0x54>
 800ac18:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d107      	bne.n	800ac30 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac20:	6899      	ldr	r1, [r3, #8]
 800ac22:	4a08      	ldr	r2, [pc, #32]	; (800ac44 <HAL_TIM_Base_Start_IT+0x78>)
 800ac24:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac26:	2a06      	cmp	r2, #6
 800ac28:	d006      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x6c>
 800ac2a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ac2e:	d003      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	f042 0201 	orr.w	r2, r2, #1
 800ac36:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ac38:	2000      	movs	r0, #0
}
 800ac3a:	4770      	bx	lr
    return HAL_ERROR;
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	4770      	bx	lr
 800ac40:	40010000 	.word	0x40010000
 800ac44:	00010007 	.word	0x00010007

0800ac48 <HAL_TIM_OC_DelayElapsedCallback>:
 800ac48:	4770      	bx	lr

0800ac4a <HAL_TIM_IC_CaptureCallback>:
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_TIM_PWM_PulseFinishedCallback>:
 800ac4c:	4770      	bx	lr

0800ac4e <HAL_TIM_TriggerCallback>:
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac50:	6803      	ldr	r3, [r0, #0]
 800ac52:	691a      	ldr	r2, [r3, #16]
 800ac54:	0791      	lsls	r1, r2, #30
{
 800ac56:	b510      	push	{r4, lr}
 800ac58:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac5a:	d50f      	bpl.n	800ac7c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	0792      	lsls	r2, r2, #30
 800ac60:	d50c      	bpl.n	800ac7c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac62:	f06f 0202 	mvn.w	r2, #2
 800ac66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac68:	2201      	movs	r2, #1
 800ac6a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	0799      	lsls	r1, r3, #30
 800ac70:	f000 8085 	beq.w	800ad7e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800ac74:	f7ff ffe9 	bl	800ac4a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac7c:	6823      	ldr	r3, [r4, #0]
 800ac7e:	691a      	ldr	r2, [r3, #16]
 800ac80:	0752      	lsls	r2, r2, #29
 800ac82:	d510      	bpl.n	800aca6 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	0750      	lsls	r0, r2, #29
 800ac88:	d50d      	bpl.n	800aca6 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac8a:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ac8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac92:	2202      	movs	r2, #2
 800ac94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac96:	699b      	ldr	r3, [r3, #24]
 800ac98:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ac9c:	d075      	beq.n	800ad8a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800ac9e:	f7ff ffd4 	bl	800ac4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aca2:	2300      	movs	r3, #0
 800aca4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	691a      	ldr	r2, [r3, #16]
 800acaa:	0711      	lsls	r1, r2, #28
 800acac:	d50f      	bpl.n	800acce <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	0712      	lsls	r2, r2, #28
 800acb2:	d50c      	bpl.n	800acce <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acb4:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800acb8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acbc:	2204      	movs	r2, #4
 800acbe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	079b      	lsls	r3, r3, #30
 800acc4:	d067      	beq.n	800ad96 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800acc6:	f7ff ffc0 	bl	800ac4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acca:	2300      	movs	r3, #0
 800accc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	691a      	ldr	r2, [r3, #16]
 800acd2:	06d0      	lsls	r0, r2, #27
 800acd4:	d510      	bpl.n	800acf8 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	06d1      	lsls	r1, r2, #27
 800acda:	d50d      	bpl.n	800acf8 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acdc:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800ace0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ace2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ace4:	2208      	movs	r2, #8
 800ace6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ace8:	69db      	ldr	r3, [r3, #28]
 800acea:	f413 7f40 	tst.w	r3, #768	; 0x300
 800acee:	d058      	beq.n	800ada2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800acf0:	f7ff ffab 	bl	800ac4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acf4:	2300      	movs	r3, #0
 800acf6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	691a      	ldr	r2, [r3, #16]
 800acfc:	07d2      	lsls	r2, r2, #31
 800acfe:	d508      	bpl.n	800ad12 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad00:	68da      	ldr	r2, [r3, #12]
 800ad02:	07d0      	lsls	r0, r2, #31
 800ad04:	d505      	bpl.n	800ad12 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad06:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad0e:	f7f9 f8b7 	bl	8003e80 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	691a      	ldr	r2, [r3, #16]
 800ad16:	0611      	lsls	r1, r2, #24
 800ad18:	d508      	bpl.n	800ad2c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad1a:	68da      	ldr	r2, [r3, #12]
 800ad1c:	0612      	lsls	r2, r2, #24
 800ad1e:	d505      	bpl.n	800ad2c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad20:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800ad24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ad28:	f000 fa03 	bl	800b132 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	691a      	ldr	r2, [r3, #16]
 800ad30:	05d0      	lsls	r0, r2, #23
 800ad32:	d508      	bpl.n	800ad46 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad34:	68da      	ldr	r2, [r3, #12]
 800ad36:	0611      	lsls	r1, r2, #24
 800ad38:	d505      	bpl.n	800ad46 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ad3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ad42:	f000 f9f7 	bl	800b134 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	691a      	ldr	r2, [r3, #16]
 800ad4a:	0652      	lsls	r2, r2, #25
 800ad4c:	d508      	bpl.n	800ad60 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	0650      	lsls	r0, r2, #25
 800ad52:	d505      	bpl.n	800ad60 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad54:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800ad58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ad5c:	f7ff ff77 	bl	800ac4e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	691a      	ldr	r2, [r3, #16]
 800ad64:	0691      	lsls	r1, r2, #26
 800ad66:	d522      	bpl.n	800adae <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad68:	68da      	ldr	r2, [r3, #12]
 800ad6a:	0692      	lsls	r2, r2, #26
 800ad6c:	d51f      	bpl.n	800adae <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad6e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ad72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad74:	611a      	str	r2, [r3, #16]
}
 800ad76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ad7a:	f000 b9d9 	b.w	800b130 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad7e:	f7ff ff63 	bl	800ac48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad82:	4620      	mov	r0, r4
 800ad84:	f7ff ff62 	bl	800ac4c <HAL_TIM_PWM_PulseFinishedCallback>
 800ad88:	e776      	b.n	800ac78 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad8a:	f7ff ff5d 	bl	800ac48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7ff ff5c 	bl	800ac4c <HAL_TIM_PWM_PulseFinishedCallback>
 800ad94:	e785      	b.n	800aca2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad96:	f7ff ff57 	bl	800ac48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f7ff ff56 	bl	800ac4c <HAL_TIM_PWM_PulseFinishedCallback>
 800ada0:	e793      	b.n	800acca <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ada2:	f7ff ff51 	bl	800ac48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7ff ff50 	bl	800ac4c <HAL_TIM_PWM_PulseFinishedCallback>
 800adac:	e7a2      	b.n	800acf4 <HAL_TIM_IRQHandler+0xa4>
}
 800adae:	bd10      	pop	{r4, pc}

0800adb0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800adb0:	4a30      	ldr	r2, [pc, #192]	; (800ae74 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800adb2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800adb4:	4290      	cmp	r0, r2
 800adb6:	d012      	beq.n	800adde <TIM_Base_SetConfig+0x2e>
 800adb8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800adbc:	d00f      	beq.n	800adde <TIM_Base_SetConfig+0x2e>
 800adbe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800adc2:	4290      	cmp	r0, r2
 800adc4:	d00b      	beq.n	800adde <TIM_Base_SetConfig+0x2e>
 800adc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adca:	4290      	cmp	r0, r2
 800adcc:	d007      	beq.n	800adde <TIM_Base_SetConfig+0x2e>
 800adce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800add2:	4290      	cmp	r0, r2
 800add4:	d003      	beq.n	800adde <TIM_Base_SetConfig+0x2e>
 800add6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800adda:	4290      	cmp	r0, r2
 800addc:	d119      	bne.n	800ae12 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800adde:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ade0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ade4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ade6:	4a23      	ldr	r2, [pc, #140]	; (800ae74 <TIM_Base_SetConfig+0xc4>)
 800ade8:	4290      	cmp	r0, r2
 800adea:	d029      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800adec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800adf0:	d026      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800adf2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800adf6:	4290      	cmp	r0, r2
 800adf8:	d022      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800adfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adfe:	4290      	cmp	r0, r2
 800ae00:	d01e      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800ae02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae06:	4290      	cmp	r0, r2
 800ae08:	d01a      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800ae0a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ae0e:	4290      	cmp	r0, r2
 800ae10:	d016      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800ae12:	4a19      	ldr	r2, [pc, #100]	; (800ae78 <TIM_Base_SetConfig+0xc8>)
 800ae14:	4290      	cmp	r0, r2
 800ae16:	d013      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800ae18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae1c:	4290      	cmp	r0, r2
 800ae1e:	d00f      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800ae20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae24:	4290      	cmp	r0, r2
 800ae26:	d00b      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800ae28:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ae2c:	4290      	cmp	r0, r2
 800ae2e:	d007      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800ae30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae34:	4290      	cmp	r0, r2
 800ae36:	d003      	beq.n	800ae40 <TIM_Base_SetConfig+0x90>
 800ae38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae3c:	4290      	cmp	r0, r2
 800ae3e:	d103      	bne.n	800ae48 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae44:	68ca      	ldr	r2, [r1, #12]
 800ae46:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae48:	694a      	ldr	r2, [r1, #20]
 800ae4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae4e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800ae50:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae52:	688b      	ldr	r3, [r1, #8]
 800ae54:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ae56:	680b      	ldr	r3, [r1, #0]
 800ae58:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <TIM_Base_SetConfig+0xc4>)
 800ae5c:	4298      	cmp	r0, r3
 800ae5e:	d003      	beq.n	800ae68 <TIM_Base_SetConfig+0xb8>
 800ae60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae64:	4298      	cmp	r0, r3
 800ae66:	d101      	bne.n	800ae6c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800ae68:	690b      	ldr	r3, [r1, #16]
 800ae6a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	6143      	str	r3, [r0, #20]
}
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40010000 	.word	0x40010000
 800ae78:	40014000 	.word	0x40014000

0800ae7c <HAL_TIM_Base_Init>:
{
 800ae7c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ae7e:	4604      	mov	r4, r0
 800ae80:	b350      	cbz	r0, 800aed8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ae82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ae86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae8a:	b91b      	cbnz	r3, 800ae94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800ae8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ae90:	f7ff fe9a 	bl	800abc8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800ae94:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae96:	6820      	ldr	r0, [r4, #0]
 800ae98:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800ae9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae9e:	f7ff ff87 	bl	800adb0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aea2:	2301      	movs	r3, #1
  return HAL_OK;
 800aea4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aea6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeaa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800aeae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800aeb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800aeb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800aeba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aec2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800aec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aeca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800aece:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800aed2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800aed6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800aed8:	2001      	movs	r0, #1
 800aeda:	e7fc      	b.n	800aed6 <HAL_TIM_Base_Init+0x5a>

0800aedc <HAL_TIM_OC_Init>:
{
 800aedc:	b510      	push	{r4, lr}
  if (htim == NULL)
 800aede:	4604      	mov	r4, r0
 800aee0:	b350      	cbz	r0, 800af38 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800aee2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800aee6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aeea:	b91b      	cbnz	r3, 800aef4 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800aeec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800aef0:	f7f9 fa76 	bl	80043e0 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800aef4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800aef6:	6820      	ldr	r0, [r4, #0]
 800aef8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800aefa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800aefe:	f7ff ff57 	bl	800adb0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af02:	2301      	movs	r3, #1
  return HAL_OK;
 800af04:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af06:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800af0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800af12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800af16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800af1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800af26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af2a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800af2e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800af32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800af36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800af38:	2001      	movs	r0, #1
 800af3a:	e7fc      	b.n	800af36 <HAL_TIM_OC_Init+0x5a>

0800af3c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af3c:	6a03      	ldr	r3, [r0, #32]
 800af3e:	f023 0310 	bic.w	r3, r3, #16
{
 800af42:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af44:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800af46:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800af48:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800af4a:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800af4c:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af52:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800af56:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af5a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af5e:	688d      	ldr	r5, [r1, #8]
 800af60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af64:	4d10      	ldr	r5, [pc, #64]	; (800afa8 <TIM_OC2_SetConfig+0x6c>)
 800af66:	42a8      	cmp	r0, r5
 800af68:	d003      	beq.n	800af72 <TIM_OC2_SetConfig+0x36>
 800af6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af6e:	42a8      	cmp	r0, r5
 800af70:	d114      	bne.n	800af9c <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af72:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800af74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af78:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7c:	4d0a      	ldr	r5, [pc, #40]	; (800afa8 <TIM_OC2_SetConfig+0x6c>)
 800af7e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800af80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af84:	d003      	beq.n	800af8e <TIM_OC2_SetConfig+0x52>
 800af86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af8a:	42a8      	cmp	r0, r5
 800af8c:	d106      	bne.n	800af9c <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af92:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800af96:	4335      	orrs	r5, r6
 800af98:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800af9c:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800af9e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800afa0:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800afa2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800afa4:	6203      	str	r3, [r0, #32]
}
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	40010000 	.word	0x40010000

0800afac <HAL_TIM_OC_ConfigChannel>:
{
 800afac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800afae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800afb2:	4605      	mov	r5, r0
 800afb4:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d02c      	beq.n	800b014 <HAL_TIM_OC_ConfigChannel+0x68>
 800afba:	2201      	movs	r2, #1
  switch (Channel)
 800afbc:	2c0c      	cmp	r4, #12
  __HAL_LOCK(htim);
 800afbe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 800afc2:	d01f      	beq.n	800b004 <HAL_TIM_OC_ConfigChannel+0x58>
 800afc4:	d809      	bhi.n	800afda <HAL_TIM_OC_ConfigChannel+0x2e>
 800afc6:	2c04      	cmp	r4, #4
 800afc8:	d014      	beq.n	800aff4 <HAL_TIM_OC_ConfigChannel+0x48>
 800afca:	2c08      	cmp	r4, #8
 800afcc:	d016      	beq.n	800affc <HAL_TIM_OC_ConfigChannel+0x50>
 800afce:	b164      	cbz	r4, 800afea <HAL_TIM_OC_ConfigChannel+0x3e>
  __HAL_UNLOCK(htim);
 800afd0:	2300      	movs	r3, #0
 800afd2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800afd6:	4610      	mov	r0, r2
 800afd8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800afda:	2c10      	cmp	r4, #16
 800afdc:	d016      	beq.n	800b00c <HAL_TIM_OC_ConfigChannel+0x60>
 800afde:	2c14      	cmp	r4, #20
 800afe0:	d1f6      	bne.n	800afd0 <HAL_TIM_OC_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afe2:	6800      	ldr	r0, [r0, #0]
 800afe4:	f7ff fdc8 	bl	800ab78 <TIM_OC6_SetConfig>
 800afe8:	e002      	b.n	800aff0 <HAL_TIM_OC_ConfigChannel+0x44>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	f7ff fd08 	bl	800aa00 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800aff0:	2200      	movs	r2, #0
      break;
 800aff2:	e7ed      	b.n	800afd0 <HAL_TIM_OC_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aff4:	6800      	ldr	r0, [r0, #0]
 800aff6:	f7ff ffa1 	bl	800af3c <TIM_OC2_SetConfig>
      break;
 800affa:	e7f9      	b.n	800aff0 <HAL_TIM_OC_ConfigChannel+0x44>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800affc:	6800      	ldr	r0, [r0, #0]
 800affe:	f7ff fd33 	bl	800aa68 <TIM_OC3_SetConfig>
      break;
 800b002:	e7f5      	b.n	800aff0 <HAL_TIM_OC_ConfigChannel+0x44>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b004:	6800      	ldr	r0, [r0, #0]
 800b006:	f7ff fd67 	bl	800aad8 <TIM_OC4_SetConfig>
      break;
 800b00a:	e7f1      	b.n	800aff0 <HAL_TIM_OC_ConfigChannel+0x44>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b00c:	6800      	ldr	r0, [r0, #0]
 800b00e:	f7ff fd8b 	bl	800ab28 <TIM_OC5_SetConfig>
      break;
 800b012:	e7ed      	b.n	800aff0 <HAL_TIM_OC_ConfigChannel+0x44>
  __HAL_LOCK(htim);
 800b014:	2202      	movs	r2, #2
 800b016:	e7de      	b.n	800afd6 <HAL_TIM_OC_ConfigChannel+0x2a>

0800b018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b018:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b01a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b01e:	2b01      	cmp	r3, #1
 800b020:	f04f 0302 	mov.w	r3, #2
 800b024:	d03d      	beq.n	800b0a2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b026:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b02a:	4d1f      	ldr	r5, [pc, #124]	; (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 800b02c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b02e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800b030:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800b032:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b034:	d003      	beq.n	800b03e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800b036:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b03a:	42ab      	cmp	r3, r5
 800b03c:	d103      	bne.n	800b046 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b03e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b042:	684d      	ldr	r5, [r1, #4]
 800b044:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b046:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800b048:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b04c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b04e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b050:	4a15      	ldr	r2, [pc, #84]	; (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d01a      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b05a:	d017      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b05c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b060:	4293      	cmp	r3, r2
 800b062:	d013      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b068:	4293      	cmp	r3, r2
 800b06a:	d00f      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b06c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b070:	4293      	cmp	r3, r2
 800b072:	d00b      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b074:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b078:	4293      	cmp	r3, r2
 800b07a:	d007      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b07c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b080:	4293      	cmp	r3, r2
 800b082:	d003      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b084:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b088:	4293      	cmp	r3, r2
 800b08a:	d104      	bne.n	800b096 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b08c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b08e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b092:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b096:	2301      	movs	r3, #1
 800b098:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b09c:	2300      	movs	r3, #0
 800b09e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800b0a2:	4618      	mov	r0, r3

  return HAL_OK;
}
 800b0a4:	bd30      	pop	{r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	40010000 	.word	0x40010000

0800b0ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0ac:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d038      	beq.n	800b128 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0b6:	68cb      	ldr	r3, [r1, #12]
 800b0b8:	688a      	ldr	r2, [r1, #8]
 800b0ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0be:	4c1b      	ldr	r4, [pc, #108]	; (800b12c <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0c2:	684a      	ldr	r2, [r1, #4]
 800b0c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0ca:	680a      	ldr	r2, [r1, #0]
 800b0cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0d2:	690a      	ldr	r2, [r1, #16]
 800b0d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0da:	694a      	ldr	r2, [r1, #20]
 800b0dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b0e2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800b0e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b0ea:	698a      	ldr	r2, [r1, #24]
 800b0ec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800b0f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0f4:	6802      	ldr	r2, [r0, #0]
 800b0f6:	42a2      	cmp	r2, r4
 800b0f8:	d003      	beq.n	800b102 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800b0fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b0fe:	42a2      	cmp	r2, r4
 800b100:	d10c      	bne.n	800b11c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b102:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800b104:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b108:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b10c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b10e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b114:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b116:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b11a:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b11c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b11e:	2300      	movs	r3, #0
 800b120:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800b124:	4618      	mov	r0, r3
}
 800b126:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800b128:	2002      	movs	r0, #2
 800b12a:	e7fc      	b.n	800b126 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 800b12c:	40010000 	.word	0x40010000

0800b130 <HAL_TIMEx_CommutCallback>:
 800b130:	4770      	bx	lr

0800b132 <HAL_TIMEx_BreakCallback>:
 800b132:	4770      	bx	lr

0800b134 <HAL_TIMEx_Break2Callback>:
 800b134:	4770      	bx	lr

0800b136 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b13a:	680a      	ldr	r2, [r1, #0]
 800b13c:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800b140:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800b144:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800b148:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800b14c:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800b150:	4323      	orrs	r3, r4
 800b152:	b9a2      	cbnz	r2, 800b17e <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b154:	ea43 0209 	orr.w	r2, r3, r9
 800b158:	6801      	ldr	r1, [r0, #0]
 800b15a:	432a      	orrs	r2, r5
 800b15c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800b160:	ea42 0308 	orr.w	r3, r2, r8
 800b164:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800b168:	ea43 030e 	orr.w	r3, r3, lr
 800b16c:	ea43 030c 	orr.w	r3, r3, ip
 800b170:	433b      	orrs	r3, r7
 800b172:	4333      	orrs	r3, r6
 800b174:	430b      	orrs	r3, r1
 800b176:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b178:	2000      	movs	r0, #0
 800b17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b17e:	6802      	ldr	r2, [r0, #0]
 800b180:	ea43 0309 	orr.w	r3, r3, r9
 800b184:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b188:	4313      	orrs	r3, r2
 800b18a:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b18c:	ea45 0308 	orr.w	r3, r5, r8
 800b190:	6842      	ldr	r2, [r0, #4]
 800b192:	ea43 030e 	orr.w	r3, r3, lr
 800b196:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800b19a:	ea43 030c 	orr.w	r3, r3, ip
 800b19e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800b1a2:	433b      	orrs	r3, r7
 800b1a4:	4333      	orrs	r3, r6
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	6043      	str	r3, [r0, #4]
 800b1aa:	e7e5      	b.n	800b178 <FMC_SDRAM_Init+0x42>

0800b1ac <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b1ac:	68cb      	ldr	r3, [r1, #12]
 800b1ae:	f103 3cff 	add.w	ip, r3, #4294967295
 800b1b2:	694b      	ldr	r3, [r1, #20]
{
 800b1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	680f      	ldr	r7, [r1, #0]
 800b1ba:	684c      	ldr	r4, [r1, #4]
 800b1bc:	688e      	ldr	r6, [r1, #8]
 800b1be:	051b      	lsls	r3, r3, #20
 800b1c0:	690d      	ldr	r5, [r1, #16]
 800b1c2:	3c01      	subs	r4, #1
 800b1c4:	6989      	ldr	r1, [r1, #24]
 800b1c6:	3e01      	subs	r6, #1
 800b1c8:	3d01      	subs	r5, #1
 800b1ca:	3f01      	subs	r7, #1
 800b1cc:	3901      	subs	r1, #1
 800b1ce:	0124      	lsls	r4, r4, #4
 800b1d0:	0236      	lsls	r6, r6, #8
 800b1d2:	042d      	lsls	r5, r5, #16
 800b1d4:	0609      	lsls	r1, r1, #24
 800b1d6:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800b1da:	b95a      	cbnz	r2, 800b1f4 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b1dc:	433b      	orrs	r3, r7
 800b1de:	6882      	ldr	r2, [r0, #8]
 800b1e0:	4323      	orrs	r3, r4
 800b1e2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b1e6:	4333      	orrs	r3, r6
 800b1e8:	432b      	orrs	r3, r5
 800b1ea:	430b      	orrs	r3, r1
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b1f4:	6882      	ldr	r2, [r0, #8]
 800b1f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b1fa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800b1fe:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b200:	ea44 0306 	orr.w	r3, r4, r6
 800b204:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b206:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b208:	68c2      	ldr	r2, [r0, #12]
 800b20a:	432b      	orrs	r3, r5
 800b20c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b210:	430b      	orrs	r3, r1
 800b212:	4313      	orrs	r3, r2
 800b214:	60c3      	str	r3, [r0, #12]
 800b216:	e7eb      	b.n	800b1f0 <FMC_SDRAM_Timing_Init+0x44>

0800b218 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b218:	6902      	ldr	r2, [r0, #16]
{
 800b21a:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b21c:	e9d1 3400 	ldrd	r3, r4, [r1]
 800b220:	0d92      	lsrs	r2, r2, #22
 800b222:	4323      	orrs	r3, r4
 800b224:	68cc      	ldr	r4, [r1, #12]
 800b226:	0592      	lsls	r2, r2, #22
 800b228:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b22c:	4313      	orrs	r3, r2
 800b22e:	688a      	ldr	r2, [r1, #8]
 800b230:	3a01      	subs	r2, #1
 800b232:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b236:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b238:	2000      	movs	r0, #0
 800b23a:	bd10      	pop	{r4, pc}

0800b23c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b23c:	6943      	ldr	r3, [r0, #20]
 800b23e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b242:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800b246:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800b24a:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800b24c:	2000      	movs	r0, #0
 800b24e:	4770      	bx	lr

0800b250 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b250:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b254:	b113      	cbz	r3, 800b25c <osKernelInitialize+0xc>
    stat = osErrorISR;
 800b256:	f06f 0005 	mvn.w	r0, #5
 800b25a:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b25c:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800b262:	b912      	cbnz	r2, 800b26a <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b264:	f3ef 8211 	mrs	r2, BASEPRI
 800b268:	b112      	cbz	r2, 800b270 <osKernelInitialize+0x20>
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	2a02      	cmp	r2, #2
 800b26e:	d0f2      	beq.n	800b256 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	b910      	cbnz	r0, 800b27a <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b274:	2201      	movs	r2, #1
 800b276:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b278:	4770      	bx	lr
    } else {
      stat = osError;
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800b27e:	4770      	bx	lr
 800b280:	2004cc40 	.word	0x2004cc40

0800b284 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b284:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b286:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b28a:	b113      	cbz	r3, 800b292 <osKernelStart+0xe>
    stat = osErrorISR;
 800b28c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800b290:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b292:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800b296:	4b0a      	ldr	r3, [pc, #40]	; (800b2c0 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800b298:	b912      	cbnz	r2, 800b2a0 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b29a:	f3ef 8211 	mrs	r2, BASEPRI
 800b29e:	b112      	cbz	r2, 800b2a6 <osKernelStart+0x22>
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	2a02      	cmp	r2, #2
 800b2a4:	d0f2      	beq.n	800b28c <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	2a01      	cmp	r2, #1
 800b2aa:	d105      	bne.n	800b2b8 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b2b0:	f001 fe7a 	bl	800cfa8 <vTaskStartScheduler>
      stat = osOK;
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	e7eb      	b.n	800b290 <osKernelStart+0xc>
      stat = osError;
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800b2bc:	e7e8      	b.n	800b290 <osKernelStart+0xc>
 800b2be:	bf00      	nop
 800b2c0:	2004cc40 	.word	0x2004cc40

0800b2c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c6:	4614      	mov	r4, r2
 800b2c8:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b2ca:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b2cc:	460b      	mov	r3, r1
  hTask = NULL;
 800b2ce:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2d0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b2d4:	bb22      	cbnz	r2, 800b320 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2d6:	f3ef 8210 	mrs	r2, PRIMASK
 800b2da:	b912      	cbnz	r2, 800b2e2 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2dc:	f3ef 8211 	mrs	r2, BASEPRI
 800b2e0:	b11a      	cbz	r2, 800b2ea <osThreadNew+0x26>
 800b2e2:	4a22      	ldr	r2, [pc, #136]	; (800b36c <osThreadNew+0xa8>)
 800b2e4:	6812      	ldr	r2, [r2, #0]
 800b2e6:	2a02      	cmp	r2, #2
 800b2e8:	d01a      	beq.n	800b320 <osThreadNew+0x5c>
 800b2ea:	b1c8      	cbz	r0, 800b320 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b2ec:	2c00      	cmp	r4, #0
 800b2ee:	d02f      	beq.n	800b350 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b2f0:	69a5      	ldr	r5, [r4, #24]
 800b2f2:	2d00      	cmp	r5, #0
 800b2f4:	bf08      	it	eq
 800b2f6:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b2f8:	1e6a      	subs	r2, r5, #1
 800b2fa:	46ac      	mov	ip, r5
 800b2fc:	2a37      	cmp	r2, #55	; 0x37
 800b2fe:	d82b      	bhi.n	800b358 <osThreadNew+0x94>
 800b300:	6862      	ldr	r2, [r4, #4]
 800b302:	07d2      	lsls	r2, r2, #31
 800b304:	d428      	bmi.n	800b358 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b306:	6966      	ldr	r6, [r4, #20]
 800b308:	b16e      	cbz	r6, 800b326 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b30a:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b30c:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b30e:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800b312:	b157      	cbz	r7, 800b32a <osThreadNew+0x66>
 800b314:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800b318:	d902      	bls.n	800b320 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b31a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b31c:	b104      	cbz	r4, 800b320 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b31e:	b9ee      	cbnz	r6, 800b35c <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b320:	9805      	ldr	r0, [sp, #20]
}
 800b322:	b007      	add	sp, #28
 800b324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b326:	2280      	movs	r2, #128	; 0x80
 800b328:	e7f0      	b.n	800b30c <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b32a:	f1be 0f00 	cmp.w	lr, #0
 800b32e:	d1f7      	bne.n	800b320 <osThreadNew+0x5c>
      if (mem == 0) {
 800b330:	6924      	ldr	r4, [r4, #16]
 800b332:	2c00      	cmp	r4, #0
 800b334:	d1f4      	bne.n	800b320 <osThreadNew+0x5c>
 800b336:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b338:	a905      	add	r1, sp, #20
 800b33a:	b292      	uxth	r2, r2
 800b33c:	e9cd c100 	strd	ip, r1, [sp]
 800b340:	4621      	mov	r1, r4
 800b342:	f001 fca5 	bl	800cc90 <xTaskCreate>
 800b346:	2801      	cmp	r0, #1
          hTask = NULL;
 800b348:	bf1c      	itt	ne
 800b34a:	2300      	movne	r3, #0
 800b34c:	9305      	strne	r3, [sp, #20]
 800b34e:	e7e7      	b.n	800b320 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800b350:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800b354:	2280      	movs	r2, #128	; 0x80
 800b356:	e7ef      	b.n	800b338 <osThreadNew+0x74>
        return (NULL);
 800b358:	2000      	movs	r0, #0
 800b35a:	e7e2      	b.n	800b322 <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b35c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b360:	9500      	str	r5, [sp, #0]
 800b362:	f001 fc57 	bl	800cc14 <xTaskCreateStatic>
 800b366:	9005      	str	r0, [sp, #20]
 800b368:	e7da      	b.n	800b320 <osThreadNew+0x5c>
 800b36a:	bf00      	nop
 800b36c:	2004cc40 	.word	0x2004cc40

0800b370 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b370:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b372:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b376:	b113      	cbz	r3, 800b37e <osDelay+0xe>
    stat = osErrorISR;
 800b378:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800b37c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b37e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800b382:	b913      	cbnz	r3, 800b38a <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b384:	f3ef 8311 	mrs	r3, BASEPRI
 800b388:	b11b      	cbz	r3, 800b392 <osDelay+0x22>
 800b38a:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <osDelay+0x30>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d0f2      	beq.n	800b378 <osDelay+0x8>
    if (ticks != 0U) {
 800b392:	2800      	cmp	r0, #0
 800b394:	d0f2      	beq.n	800b37c <osDelay+0xc>
      vTaskDelay(ticks);
 800b396:	f001 fdc5 	bl	800cf24 <vTaskDelay>
    stat = osOK;
 800b39a:	2000      	movs	r0, #0
 800b39c:	e7ee      	b.n	800b37c <osDelay+0xc>
 800b39e:	bf00      	nop
 800b3a0:	2004cc40 	.word	0x2004cc40

0800b3a4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3a8:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800b3ac:	b115      	cbz	r5, 800b3b4 <osMutexNew+0x10>
  hMutex = NULL;
 800b3ae:	2600      	movs	r6, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3b4:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800b3b8:	b912      	cbnz	r2, 800b3c0 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3ba:	f3ef 8211 	mrs	r2, BASEPRI
 800b3be:	b11a      	cbz	r2, 800b3c8 <osMutexNew+0x24>
 800b3c0:	4a18      	ldr	r2, [pc, #96]	; (800b424 <osMutexNew+0x80>)
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	2a02      	cmp	r2, #2
 800b3c6:	d0f2      	beq.n	800b3ae <osMutexNew+0xa>
    if (attr != NULL) {
 800b3c8:	b114      	cbz	r4, 800b3d0 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800b3ca:	6865      	ldr	r5, [r4, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800b3cc:	072b      	lsls	r3, r5, #28
 800b3ce:	d4ee      	bmi.n	800b3ae <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b3d0:	f005 0501 	and.w	r5, r5, #1
      if (attr != NULL) {
 800b3d4:	b17c      	cbz	r4, 800b3f6 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b3d6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800b3da:	b151      	cbz	r1, 800b3f2 <osMutexNew+0x4e>
 800b3dc:	2b4f      	cmp	r3, #79	; 0x4f
 800b3de:	d9e6      	bls.n	800b3ae <osMutexNew+0xa>
        if (rmtx != 0U) {
 800b3e0:	b1dd      	cbz	r5, 800b41a <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b3e2:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b3e4:	f000 ff42 	bl	800c26c <xQueueCreateMutexStatic>
 800b3e8:	4606      	mov	r6, r0
      if (hMutex != NULL) {
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d0df      	beq.n	800b3ae <osMutexNew+0xa>
          name = attr->name;
 800b3ee:	6824      	ldr	r4, [r4, #0]
 800b3f0:	e00a      	b.n	800b408 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1db      	bne.n	800b3ae <osMutexNew+0xa>
          if (rmtx != 0U) {
 800b3f6:	b195      	cbz	r5, 800b41e <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b3f8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800b3fa:	f000 ff6c 	bl	800c2d6 <xQueueCreateMutex>
 800b3fe:	4606      	mov	r6, r0
      if (hMutex != NULL) {
 800b400:	2800      	cmp	r0, #0
 800b402:	d0d4      	beq.n	800b3ae <osMutexNew+0xa>
        if (attr != NULL) {
 800b404:	2c00      	cmp	r4, #0
 800b406:	d1f2      	bne.n	800b3ee <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800b408:	4621      	mov	r1, r4
 800b40a:	4630      	mov	r0, r6
 800b40c:	f001 fa32 	bl	800c874 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b410:	2d00      	cmp	r5, #0
 800b412:	d0cd      	beq.n	800b3b0 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b414:	f046 0601 	orr.w	r6, r6, #1
  return ((osMutexId_t)hMutex);
 800b418:	e7ca      	b.n	800b3b0 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b41a:	2001      	movs	r0, #1
 800b41c:	e7e2      	b.n	800b3e4 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800b41e:	2001      	movs	r0, #1
 800b420:	e7eb      	b.n	800b3fa <osMutexNew+0x56>
 800b422:	bf00      	nop
 800b424:	2004cc40 	.word	0x2004cc40

0800b428 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b428:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b42a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b42e:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800b430:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b434:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b436:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b43a:	b112      	cbz	r2, 800b442 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800b43c:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800b440:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b442:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800b446:	b912      	cbnz	r2, 800b44e <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b448:	f3ef 8211 	mrs	r2, BASEPRI
 800b44c:	b11a      	cbz	r2, 800b456 <osMutexAcquire+0x2e>
 800b44e:	4a0d      	ldr	r2, [pc, #52]	; (800b484 <osMutexAcquire+0x5c>)
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	2a02      	cmp	r2, #2
 800b454:	d0f2      	beq.n	800b43c <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800b456:	b188      	cbz	r0, 800b47c <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b458:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800b45a:	b163      	cbz	r3, 800b476 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b45c:	f001 f990 	bl	800c780 <xQueueTakeMutexRecursive>
 800b460:	2801      	cmp	r0, #1
 800b462:	d101      	bne.n	800b468 <osMutexAcquire+0x40>
  stat = osOK;
 800b464:	2000      	movs	r0, #0
 800b466:	e7eb      	b.n	800b440 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800b468:	2c00      	cmp	r4, #0
 800b46a:	bf14      	ite	ne
 800b46c:	f06f 0001 	mvnne.w	r0, #1
 800b470:	f06f 0002 	mvneq.w	r0, #2
 800b474:	e7e4      	b.n	800b440 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b476:	f001 f8b7 	bl	800c5e8 <xQueueSemaphoreTake>
 800b47a:	e7f1      	b.n	800b460 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800b47c:	f06f 0003 	mvn.w	r0, #3
 800b480:	e7de      	b.n	800b440 <osMutexAcquire+0x18>
 800b482:	bf00      	nop
 800b484:	2004cc40 	.word	0x2004cc40

0800b488 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b488:	b508      	push	{r3, lr}
 800b48a:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b48c:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800b490:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b494:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b498:	b112      	cbz	r2, 800b4a0 <osMutexRelease+0x18>
    stat = osErrorISR;
 800b49a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800b49e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4a0:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800b4a4:	b912      	cbnz	r2, 800b4ac <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4a6:	f3ef 8211 	mrs	r2, BASEPRI
 800b4aa:	b11a      	cbz	r2, 800b4b4 <osMutexRelease+0x2c>
 800b4ac:	4a0a      	ldr	r2, [pc, #40]	; (800b4d8 <osMutexRelease+0x50>)
 800b4ae:	6812      	ldr	r2, [r2, #0]
 800b4b0:	2a02      	cmp	r2, #2
 800b4b2:	d0f2      	beq.n	800b49a <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800b4b4:	b168      	cbz	r0, 800b4d2 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800b4b6:	b13b      	cbz	r3, 800b4c8 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b4b8:	f000 feed 	bl	800c296 <xQueueGiveMutexRecursive>
 800b4bc:	2801      	cmp	r0, #1
  stat = osOK;
 800b4be:	bf0c      	ite	eq
 800b4c0:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b4c2:	f06f 0002 	mvnne.w	r0, #2
 800b4c6:	e7ea      	b.n	800b49e <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	f000 fe14 	bl	800c0f8 <xQueueGenericSend>
 800b4d0:	e7f4      	b.n	800b4bc <osMutexRelease+0x34>
    stat = osErrorParameter;
 800b4d2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b4d6:	e7e2      	b.n	800b49e <osMutexRelease+0x16>
 800b4d8:	2004cc40 	.word	0x2004cc40

0800b4dc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b4dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4de:	460e      	mov	r6, r1
 800b4e0:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4e2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b4e6:	b11b      	cbz	r3, 800b4f0 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800b4e8:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	b002      	add	sp, #8
 800b4ee:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4f0:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b4f4:	b913      	cbnz	r3, 800b4fc <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4f6:	f3ef 8311 	mrs	r3, BASEPRI
 800b4fa:	b11b      	cbz	r3, 800b504 <osSemaphoreNew+0x28>
 800b4fc:	4b21      	ldr	r3, [pc, #132]	; (800b584 <osSemaphoreNew+0xa8>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b02      	cmp	r3, #2
 800b502:	d0f1      	beq.n	800b4e8 <osSemaphoreNew+0xc>
 800b504:	2800      	cmp	r0, #0
 800b506:	d0ef      	beq.n	800b4e8 <osSemaphoreNew+0xc>
 800b508:	42b0      	cmp	r0, r6
 800b50a:	d3ed      	bcc.n	800b4e8 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800b50c:	b1ed      	cbz	r5, 800b54a <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b50e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800b512:	b1c3      	cbz	r3, 800b546 <osSemaphoreNew+0x6a>
 800b514:	2a4f      	cmp	r2, #79	; 0x4f
 800b516:	d9e7      	bls.n	800b4e8 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800b518:	2801      	cmp	r0, #1
 800b51a:	d129      	bne.n	800b570 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b51c:	2203      	movs	r2, #3
 800b51e:	9200      	str	r2, [sp, #0]
 800b520:	2200      	movs	r2, #0
 800b522:	4611      	mov	r1, r2
 800b524:	f000 fd1e 	bl	800bf64 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800b528:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d0dc      	beq.n	800b4e8 <osSemaphoreNew+0xc>
 800b52e:	b1ce      	cbz	r6, 800b564 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b530:	2300      	movs	r3, #0
 800b532:	461a      	mov	r2, r3
 800b534:	4619      	mov	r1, r3
 800b536:	f000 fddf 	bl	800c0f8 <xQueueGenericSend>
 800b53a:	2801      	cmp	r0, #1
 800b53c:	d012      	beq.n	800b564 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800b53e:	4620      	mov	r0, r4
 800b540:	f001 f9c2 	bl	800c8c8 <vQueueDelete>
 800b544:	e7d0      	b.n	800b4e8 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b546:	2a00      	cmp	r2, #0
 800b548:	d1ce      	bne.n	800b4e8 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800b54a:	2801      	cmp	r0, #1
 800b54c:	d104      	bne.n	800b558 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800b54e:	2203      	movs	r2, #3
 800b550:	2100      	movs	r1, #0
 800b552:	f000 fd5f 	bl	800c014 <xQueueGenericCreate>
 800b556:	e7e7      	b.n	800b528 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b558:	4631      	mov	r1, r6
 800b55a:	f000 fdaa 	bl	800c0b2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b55e:	4604      	mov	r4, r0
 800b560:	2800      	cmp	r0, #0
 800b562:	d0c1      	beq.n	800b4e8 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800b564:	b95d      	cbnz	r5, 800b57e <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800b566:	4629      	mov	r1, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	f001 f983 	bl	800c874 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b56e:	e7bc      	b.n	800b4ea <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b570:	461a      	mov	r2, r3
 800b572:	4631      	mov	r1, r6
 800b574:	f000 fd77 	bl	800c066 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b578:	4604      	mov	r4, r0
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d0b4      	beq.n	800b4e8 <osSemaphoreNew+0xc>
          name = attr->name;
 800b57e:	682d      	ldr	r5, [r5, #0]
 800b580:	e7f1      	b.n	800b566 <osSemaphoreNew+0x8a>
 800b582:	bf00      	nop
 800b584:	2004cc40 	.word	0x2004cc40

0800b588 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b588:	b513      	push	{r0, r1, r4, lr}
 800b58a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b58c:	b918      	cbnz	r0, 800b596 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800b58e:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800b592:	b002      	add	sp, #8
 800b594:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b596:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800b59a:	b163      	cbz	r3, 800b5b6 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800b59c:	2c00      	cmp	r4, #0
 800b59e:	d1f6      	bne.n	800b58e <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b5a0:	aa01      	add	r2, sp, #4
 800b5a2:	4621      	mov	r1, r4
      yield = pdFALSE;
 800b5a4:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b5a6:	f001 f90f 	bl	800c7c8 <xQueueReceiveFromISR>
 800b5aa:	2801      	cmp	r0, #1
 800b5ac:	d113      	bne.n	800b5d6 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	b9a3      	cbnz	r3, 800b5dc <osSemaphoreAcquire+0x54>
  stat = osOK;
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e7ed      	b.n	800b592 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5b6:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800b5ba:	b913      	cbnz	r3, 800b5c2 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5bc:	f3ef 8311 	mrs	r3, BASEPRI
 800b5c0:	b11b      	cbz	r3, 800b5ca <osSemaphoreAcquire+0x42>
 800b5c2:	4b0c      	ldr	r3, [pc, #48]	; (800b5f4 <osSemaphoreAcquire+0x6c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d0e8      	beq.n	800b59c <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	f001 f80c 	bl	800c5e8 <xQueueSemaphoreTake>
 800b5d0:	2801      	cmp	r0, #1
 800b5d2:	d0ee      	beq.n	800b5b2 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 800b5d4:	b95c      	cbnz	r4, 800b5ee <osSemaphoreAcquire+0x66>
        stat = osErrorResource;
 800b5d6:	f06f 0002 	mvn.w	r0, #2
 800b5da:	e7da      	b.n	800b592 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800b5dc:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <osSemaphoreAcquire+0x70>)
 800b5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	e7e1      	b.n	800b5b2 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800b5ee:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b5f2:	e7ce      	b.n	800b592 <osSemaphoreAcquire+0xa>
 800b5f4:	2004cc40 	.word	0x2004cc40
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b5fc:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b5fe:	b360      	cbz	r0, 800b65a <osSemaphoreRelease+0x5e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b600:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b604:	b14b      	cbz	r3, 800b61a <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800b606:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b608:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b60a:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b60c:	f000 fee9 	bl	800c3e2 <xQueueGiveFromISR>
 800b610:	2801      	cmp	r0, #1
 800b612:	d014      	beq.n	800b63e <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b614:	f06f 0002 	mvn.w	r0, #2
 800b618:	e014      	b.n	800b644 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b61a:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800b61e:	b913      	cbnz	r3, 800b626 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b620:	f3ef 8311 	mrs	r3, BASEPRI
 800b624:	b11b      	cbz	r3, 800b62e <osSemaphoreRelease+0x32>
 800b626:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <osSemaphoreRelease+0x64>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d0eb      	beq.n	800b606 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b62e:	2300      	movs	r3, #0
 800b630:	461a      	mov	r2, r3
 800b632:	4619      	mov	r1, r3
 800b634:	f000 fd60 	bl	800c0f8 <xQueueGenericSend>
 800b638:	2801      	cmp	r0, #1
 800b63a:	d002      	beq.n	800b642 <osSemaphoreRelease+0x46>
 800b63c:	e7ea      	b.n	800b614 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	b913      	cbnz	r3, 800b648 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800b642:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800b644:	b002      	add	sp, #8
 800b646:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800b648:	4b06      	ldr	r3, [pc, #24]	; (800b664 <osSemaphoreRelease+0x68>)
 800b64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	e7f3      	b.n	800b642 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800b65a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b65e:	e7f1      	b.n	800b644 <osSemaphoreRelease+0x48>
 800b660:	2004cc40 	.word	0x2004cc40
 800b664:	e000ed04 	.word	0xe000ed04

0800b668 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b668:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b66a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b66c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b670:	b11b      	cbz	r3, 800b67a <osMessageQueueNew+0x12>
  hQueue = NULL;
 800b672:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b674:	4628      	mov	r0, r5
 800b676:	b002      	add	sp, #8
 800b678:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b67a:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b67e:	b913      	cbnz	r3, 800b686 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b680:	f3ef 8311 	mrs	r3, BASEPRI
 800b684:	b11b      	cbz	r3, 800b68e <osMessageQueueNew+0x26>
 800b686:	4b1a      	ldr	r3, [pc, #104]	; (800b6f0 <osMessageQueueNew+0x88>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d0f1      	beq.n	800b672 <osMessageQueueNew+0xa>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d0ef      	beq.n	800b672 <osMessageQueueNew+0xa>
 800b692:	2900      	cmp	r1, #0
 800b694:	d0ed      	beq.n	800b672 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800b696:	b1ec      	cbz	r4, 800b6d4 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b698:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800b69c:	b193      	cbz	r3, 800b6c4 <osMessageQueueNew+0x5c>
 800b69e:	2a4f      	cmp	r2, #79	; 0x4f
 800b6a0:	d9e7      	bls.n	800b672 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b6a2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b6a4:	2a00      	cmp	r2, #0
 800b6a6:	d0e4      	beq.n	800b672 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b6a8:	fb01 f500 	mul.w	r5, r1, r0
 800b6ac:	6966      	ldr	r6, [r4, #20]
 800b6ae:	42ae      	cmp	r6, r5
 800b6b0:	d3df      	bcc.n	800b672 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b6b2:	2500      	movs	r5, #0
 800b6b4:	9500      	str	r5, [sp, #0]
 800b6b6:	f000 fc55 	bl	800bf64 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d0d8      	beq.n	800b672 <osMessageQueueNew+0xa>
        name = attr->name;
 800b6c0:	6824      	ldr	r4, [r4, #0]
 800b6c2:	e00f      	b.n	800b6e4 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b6c4:	2a00      	cmp	r2, #0
 800b6c6:	d1d4      	bne.n	800b672 <osMessageQueueNew+0xa>
 800b6c8:	6923      	ldr	r3, [r4, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1d1      	bne.n	800b672 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b6ce:	6963      	ldr	r3, [r4, #20]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1ce      	bne.n	800b672 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f000 fc9d 	bl	800c014 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b6da:	4605      	mov	r5, r0
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d0c8      	beq.n	800b672 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800b6e0:	2c00      	cmp	r4, #0
 800b6e2:	d1ed      	bne.n	800b6c0 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f001 f8c4 	bl	800c874 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b6ec:	e7c2      	b.n	800b674 <osMessageQueueNew+0xc>
 800b6ee:	bf00      	nop
 800b6f0:	2004cc40 	.word	0x2004cc40

0800b6f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b6f4:	b513      	push	{r0, r1, r4, lr}
 800b6f6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6f8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b6fc:	b123      	cbz	r3, 800b708 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b6fe:	b9d8      	cbnz	r0, 800b738 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800b700:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800b704:	b002      	add	sp, #8
 800b706:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b708:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800b70c:	b913      	cbnz	r3, 800b714 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b70e:	f3ef 8311 	mrs	r3, BASEPRI
 800b712:	b11b      	cbz	r3, 800b71c <osMessageQueuePut+0x28>
 800b714:	4b16      	ldr	r3, [pc, #88]	; (800b770 <osMessageQueuePut+0x7c>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d0f0      	beq.n	800b6fe <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d0ef      	beq.n	800b700 <osMessageQueuePut+0xc>
 800b720:	2900      	cmp	r1, #0
 800b722:	d0ed      	beq.n	800b700 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b724:	2300      	movs	r3, #0
 800b726:	4622      	mov	r2, r4
 800b728:	f000 fce6 	bl	800c0f8 <xQueueGenericSend>
 800b72c:	2801      	cmp	r0, #1
 800b72e:	d010      	beq.n	800b752 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800b730:	b9d4      	cbnz	r4, 800b768 <osMessageQueuePut+0x74>
          stat = osErrorResource;
 800b732:	f06f 0002 	mvn.w	r0, #2
 800b736:	e7e5      	b.n	800b704 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b738:	2900      	cmp	r1, #0
 800b73a:	d0e1      	beq.n	800b700 <osMessageQueuePut+0xc>
 800b73c:	2c00      	cmp	r4, #0
 800b73e:	d1df      	bne.n	800b700 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b740:	4623      	mov	r3, r4
 800b742:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b744:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b746:	f000 fde3 	bl	800c310 <xQueueGenericSendFromISR>
 800b74a:	2801      	cmp	r0, #1
 800b74c:	d1f1      	bne.n	800b732 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	b90b      	cbnz	r3, 800b756 <osMessageQueuePut+0x62>
  stat = osOK;
 800b752:	2000      	movs	r0, #0
 800b754:	e7d6      	b.n	800b704 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800b756:	4b07      	ldr	r3, [pc, #28]	; (800b774 <osMessageQueuePut+0x80>)
 800b758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	e7f4      	b.n	800b752 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 800b768:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b76c:	e7ca      	b.n	800b704 <osMessageQueuePut+0x10>
 800b76e:	bf00      	nop
 800b770:	2004cc40 	.word	0x2004cc40
 800b774:	e000ed04 	.word	0xe000ed04

0800b778 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b778:	b513      	push	{r0, r1, r4, lr}
 800b77a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b77c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b780:	b123      	cbz	r3, 800b78c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b782:	b9d0      	cbnz	r0, 800b7ba <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800b784:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800b788:	b002      	add	sp, #8
 800b78a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b78c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800b790:	b913      	cbnz	r3, 800b798 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b792:	f3ef 8311 	mrs	r3, BASEPRI
 800b796:	b11b      	cbz	r3, 800b7a0 <osMessageQueueGet+0x28>
 800b798:	4b15      	ldr	r3, [pc, #84]	; (800b7f0 <osMessageQueueGet+0x78>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d0f0      	beq.n	800b782 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d0ef      	beq.n	800b784 <osMessageQueueGet+0xc>
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	d0ed      	beq.n	800b784 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	f000 fe77 	bl	800c49c <xQueueReceive>
 800b7ae:	2801      	cmp	r0, #1
 800b7b0:	d00f      	beq.n	800b7d2 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800b7b2:	b9cc      	cbnz	r4, 800b7e8 <osMessageQueueGet+0x70>
          stat = osErrorResource;
 800b7b4:	f06f 0002 	mvn.w	r0, #2
 800b7b8:	e7e6      	b.n	800b788 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7ba:	2900      	cmp	r1, #0
 800b7bc:	d0e2      	beq.n	800b784 <osMessageQueueGet+0xc>
 800b7be:	2c00      	cmp	r4, #0
 800b7c0:	d1e0      	bne.n	800b784 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b7c2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b7c4:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b7c6:	f000 ffff 	bl	800c7c8 <xQueueReceiveFromISR>
 800b7ca:	2801      	cmp	r0, #1
 800b7cc:	d1f2      	bne.n	800b7b4 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	b90b      	cbnz	r3, 800b7d6 <osMessageQueueGet+0x5e>
  stat = osOK;
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	e7d8      	b.n	800b788 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800b7d6:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <osMessageQueueGet+0x7c>)
 800b7d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	e7f4      	b.n	800b7d2 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 800b7e8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b7ec:	e7cc      	b.n	800b788 <osMessageQueueGet+0x10>
 800b7ee:	bf00      	nop
 800b7f0:	2004cc40 	.word	0x2004cc40
 800b7f4:	e000ed04 	.word	0xe000ed04

0800b7f8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b7f8:	4b03      	ldr	r3, [pc, #12]	; (800b808 <vApplicationGetIdleTaskMemory+0x10>)
 800b7fa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b7fc:	4b03      	ldr	r3, [pc, #12]	; (800b80c <vApplicationGetIdleTaskMemory+0x14>)
 800b7fe:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b800:	2380      	movs	r3, #128	; 0x80
 800b802:	6013      	str	r3, [r2, #0]
}
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	2004cbe0 	.word	0x2004cbe0
 800b80c:	2004c9e0 	.word	0x2004c9e0

0800b810 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b810:	4b03      	ldr	r3, [pc, #12]	; (800b820 <vApplicationGetTimerTaskMemory+0x10>)
 800b812:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b814:	4b03      	ldr	r3, [pc, #12]	; (800b824 <vApplicationGetTimerTaskMemory+0x14>)
 800b816:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b81c:	6013      	str	r3, [r2, #0]
}
 800b81e:	4770      	bx	lr
 800b820:	2004d044 	.word	0x2004d044
 800b824:	2004cc44 	.word	0x2004cc44

0800b828 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <prvInsertBlockIntoFreeList+0x40>)
{
 800b82a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b82c:	461a      	mov	r2, r3
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4283      	cmp	r3, r0
 800b832:	d3fb      	bcc.n	800b82c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b834:	6854      	ldr	r4, [r2, #4]
 800b836:	1911      	adds	r1, r2, r4
 800b838:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b83a:	bf01      	itttt	eq
 800b83c:	6841      	ldreq	r1, [r0, #4]
 800b83e:	4610      	moveq	r0, r2
 800b840:	1909      	addeq	r1, r1, r4
 800b842:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b844:	6844      	ldr	r4, [r0, #4]
 800b846:	1901      	adds	r1, r0, r4
 800b848:	428b      	cmp	r3, r1
 800b84a:	d107      	bne.n	800b85c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b84c:	4907      	ldr	r1, [pc, #28]	; (800b86c <prvInsertBlockIntoFreeList+0x44>)
 800b84e:	6809      	ldr	r1, [r1, #0]
 800b850:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b852:	bf1f      	itttt	ne
 800b854:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b856:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b858:	1909      	addne	r1, r1, r4
 800b85a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b85c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b85e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b860:	bf18      	it	ne
 800b862:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b864:	bd10      	pop	{r4, pc}
 800b866:	bf00      	nop
 800b868:	2005f5ac 	.word	0x2005f5ac
 800b86c:	2004d0a4 	.word	0x2004d0a4

0800b870 <pvPortMalloc>:
{
 800b870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b874:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b876:	f001 fa39 	bl	800ccec <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b87a:	4b3d      	ldr	r3, [pc, #244]	; (800b970 <pvPortMalloc+0x100>)
 800b87c:	483d      	ldr	r0, [pc, #244]	; (800b974 <pvPortMalloc+0x104>)
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	469c      	mov	ip, r3
 800b882:	b9d2      	cbnz	r2, 800b8ba <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 800b884:	4a3c      	ldr	r2, [pc, #240]	; (800b978 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 800b886:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b888:	4b3c      	ldr	r3, [pc, #240]	; (800b97c <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b88a:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 800b88c:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b88e:	bf1c      	itt	ne
 800b890:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b892:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b896:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 800b898:	4b39      	ldr	r3, [pc, #228]	; (800b980 <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b89a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b89e:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8a2:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b8a4:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8a8:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8ac:	4b35      	ldr	r3, [pc, #212]	; (800b984 <pvPortMalloc+0x114>)
 800b8ae:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8b0:	4b35      	ldr	r3, [pc, #212]	; (800b988 <pvPortMalloc+0x118>)
 800b8b2:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8b8:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8ba:	6807      	ldr	r7, [r0, #0]
 800b8bc:	4227      	tst	r7, r4
 800b8be:	d152      	bne.n	800b966 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 800b8c0:	2c00      	cmp	r4, #0
 800b8c2:	d041      	beq.n	800b948 <pvPortMalloc+0xd8>
				xWantedSize += xHeapStructSize;
 800b8c4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8c8:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8ca:	bf1c      	itt	ne
 800b8cc:	f023 0307 	bicne.w	r3, r3, #7
 800b8d0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d047      	beq.n	800b966 <pvPortMalloc+0xf6>
 800b8d6:	4a2c      	ldr	r2, [pc, #176]	; (800b988 <pvPortMalloc+0x118>)
 800b8d8:	6816      	ldr	r6, [r2, #0]
 800b8da:	4690      	mov	r8, r2
 800b8dc:	429e      	cmp	r6, r3
 800b8de:	d342      	bcc.n	800b966 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 800b8e0:	4a26      	ldr	r2, [pc, #152]	; (800b97c <pvPortMalloc+0x10c>)
 800b8e2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8e4:	6869      	ldr	r1, [r5, #4]
 800b8e6:	4299      	cmp	r1, r3
 800b8e8:	d201      	bcs.n	800b8ee <pvPortMalloc+0x7e>
 800b8ea:	6828      	ldr	r0, [r5, #0]
 800b8ec:	b9b8      	cbnz	r0, 800b91e <pvPortMalloc+0xae>
				if( pxBlock != pxEnd )
 800b8ee:	f8dc 0000 	ldr.w	r0, [ip]
 800b8f2:	42a8      	cmp	r0, r5
 800b8f4:	d037      	beq.n	800b966 <pvPortMalloc+0xf6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8f6:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8f8:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8fa:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8fc:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8fe:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b900:	d914      	bls.n	800b92c <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b902:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b904:	0742      	lsls	r2, r0, #29
 800b906:	d00d      	beq.n	800b924 <pvPortMalloc+0xb4>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90c:	b672      	cpsid	i
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	b662      	cpsie	i
 800b91c:	e7fe      	b.n	800b91c <pvPortMalloc+0xac>
 800b91e:	462a      	mov	r2, r5
 800b920:	4605      	mov	r5, r0
 800b922:	e7df      	b.n	800b8e4 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b924:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b926:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b928:	f7ff ff7e 	bl	800b828 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b92c:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b92e:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b930:	4914      	ldr	r1, [pc, #80]	; (800b984 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b932:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b934:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b936:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800b938:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b93a:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b93e:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b940:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b942:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b944:	bf38      	it	cc
 800b946:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 800b948:	f001 fa76 	bl	800ce38 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b94c:	0763      	lsls	r3, r4, #29
 800b94e:	d00c      	beq.n	800b96a <pvPortMalloc+0xfa>
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	b672      	cpsid	i
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	b662      	cpsie	i
 800b964:	e7fe      	b.n	800b964 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 800b966:	2400      	movs	r4, #0
 800b968:	e7ee      	b.n	800b948 <pvPortMalloc+0xd8>
}
 800b96a:	4620      	mov	r0, r4
 800b96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b970:	2004d0a4 	.word	0x2004d0a4
 800b974:	2005f5a0 	.word	0x2005f5a0
 800b978:	2004d0a8 	.word	0x2004d0a8
 800b97c:	2005f5ac 	.word	0x2005f5ac
 800b980:	2005f598 	.word	0x2005f598
 800b984:	2005f5a8 	.word	0x2005f5a8
 800b988:	2005f5a4 	.word	0x2005f5a4

0800b98c <vPortFree>:
{
 800b98c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b98e:	4604      	mov	r4, r0
 800b990:	2800      	cmp	r0, #0
 800b992:	d032      	beq.n	800b9fa <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b994:	4a19      	ldr	r2, [pc, #100]	; (800b9fc <vPortFree+0x70>)
 800b996:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b99a:	6812      	ldr	r2, [r2, #0]
 800b99c:	4213      	tst	r3, r2
 800b99e:	d10a      	bne.n	800b9b6 <vPortFree+0x2a>
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	b672      	cpsid	i
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	b662      	cpsie	i
 800b9b4:	e7fe      	b.n	800b9b4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9b6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b9ba:	b151      	cbz	r1, 800b9d2 <vPortFree+0x46>
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	b672      	cpsid	i
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	b662      	cpsie	i
 800b9d0:	e7fe      	b.n	800b9d0 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9d2:	ea23 0302 	bic.w	r3, r3, r2
 800b9d6:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b9da:	f001 f987 	bl	800ccec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9de:	4a08      	ldr	r2, [pc, #32]	; (800ba00 <vPortFree+0x74>)
 800b9e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9e4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9e8:	6811      	ldr	r1, [r2, #0]
 800b9ea:	440b      	add	r3, r1
 800b9ec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9ee:	f7ff ff1b 	bl	800b828 <prvInsertBlockIntoFreeList>
}
 800b9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800b9f6:	f001 ba1f 	b.w	800ce38 <xTaskResumeAll>
}
 800b9fa:	bd10      	pop	{r4, pc}
 800b9fc:	2005f5a0 	.word	0x2005f5a0
 800ba00:	2005f5a4 	.word	0x2005f5a4

0800ba04 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba04:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba08:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba0c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba0e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba10:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba14:	2300      	movs	r3, #0
 800ba16:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba18:	4770      	bx	lr

0800ba1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba1e:	4770      	bx	lr

0800ba20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba20:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba22:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800ba24:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba26:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba28:	689a      	ldr	r2, [r3, #8]
 800ba2a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba2c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ba2e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ba30:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ba32:	3301      	adds	r3, #1
 800ba34:	6003      	str	r3, [r0, #0]
}
 800ba36:	4770      	bx	lr

0800ba38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba38:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba3a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba3c:	1c63      	adds	r3, r4, #1
 800ba3e:	d10a      	bne.n	800ba56 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba40:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba46:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba48:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba4a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ba4c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ba4e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ba50:	3301      	adds	r3, #1
 800ba52:	6003      	str	r3, [r0, #0]
}
 800ba54:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba56:	f100 0208 	add.w	r2, r0, #8
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	6852      	ldr	r2, [r2, #4]
 800ba5e:	6815      	ldr	r5, [r2, #0]
 800ba60:	42a5      	cmp	r5, r4
 800ba62:	d9fa      	bls.n	800ba5a <vListInsert+0x22>
 800ba64:	e7ed      	b.n	800ba42 <vListInsert+0xa>

0800ba66 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba66:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba68:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800ba6c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba6e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba70:	6859      	ldr	r1, [r3, #4]
 800ba72:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba74:	bf08      	it	eq
 800ba76:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba78:	2200      	movs	r2, #0
 800ba7a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	3a01      	subs	r2, #1
 800ba80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba82:	6818      	ldr	r0, [r3, #0]
}
 800ba84:	4770      	bx	lr
	...

0800ba88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba88:	4808      	ldr	r0, [pc, #32]	; (800baac <prvPortStartFirstTask+0x24>)
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	6800      	ldr	r0, [r0, #0]
 800ba8e:	f380 8808 	msr	MSP, r0
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f380 8814 	msr	CONTROL, r0
 800ba9a:	b662      	cpsie	i
 800ba9c:	b661      	cpsie	f
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	df00      	svc	0
 800baa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baaa:	0000      	.short	0x0000
 800baac:	e000ed08 	.word	0xe000ed08

0800bab0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bab0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bac0 <vPortEnableVFP+0x10>
 800bab4:	6801      	ldr	r1, [r0, #0]
 800bab6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800baba:	6001      	str	r1, [r0, #0]
 800babc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800babe:	0000      	.short	0x0000
 800bac0:	e000ed88 	.word	0xe000ed88

0800bac4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800bac4:	2300      	movs	r3, #0
{
 800bac6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800bac8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800baca:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <prvTaskExitError+0x44>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3301      	adds	r3, #1
 800bad0:	d00a      	beq.n	800bae8 <prvTaskExitError+0x24>
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	b672      	cpsid	i
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	b662      	cpsie	i
 800bae6:	e7fe      	b.n	800bae6 <prvTaskExitError+0x22>
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	b672      	cpsid	i
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	b662      	cpsie	i
	while( ulDummy == 0 )
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d0fc      	beq.n	800bafc <prvTaskExitError+0x38>
}
 800bb02:	b002      	add	sp, #8
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	2000006c 	.word	0x2000006c

0800bb0c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb10:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb14:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800bb18:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb1a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb1c:	4b03      	ldr	r3, [pc, #12]	; (800bb2c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb1e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb20:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb22:	f06f 0302 	mvn.w	r3, #2
 800bb26:	6203      	str	r3, [r0, #32]
}
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	0800bac5 	.word	0x0800bac5

0800bb30 <SVC_Handler>:
	__asm volatile (
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <pxCurrentTCBConst2>)
 800bb32:	6819      	ldr	r1, [r3, #0]
 800bb34:	6808      	ldr	r0, [r1, #0]
 800bb36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3a:	f380 8809 	msr	PSP, r0
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f04f 0000 	mov.w	r0, #0
 800bb46:	f380 8811 	msr	BASEPRI, r0
 800bb4a:	4770      	bx	lr
 800bb4c:	f3af 8000 	nop.w

0800bb50 <pxCurrentTCBConst2>:
 800bb50:	2005f5bc 	.word	0x2005f5bc

0800bb54 <vPortEnterCritical>:
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	b672      	cpsid	i
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	b662      	cpsie	i
	uxCriticalNesting++;
 800bb68:	4a0b      	ldr	r2, [pc, #44]	; (800bb98 <vPortEnterCritical+0x44>)
 800bb6a:	6813      	ldr	r3, [r2, #0]
 800bb6c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800bb6e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800bb70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800bb72:	d10f      	bne.n	800bb94 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb74:	4b09      	ldr	r3, [pc, #36]	; (800bb9c <vPortEnterCritical+0x48>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bb7c:	d00a      	beq.n	800bb94 <vPortEnterCritical+0x40>
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	b672      	cpsid	i
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	b662      	cpsie	i
 800bb92:	e7fe      	b.n	800bb92 <vPortEnterCritical+0x3e>
}
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	2000006c 	.word	0x2000006c
 800bb9c:	e000ed04 	.word	0xe000ed04

0800bba0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800bba0:	4a09      	ldr	r2, [pc, #36]	; (800bbc8 <vPortExitCritical+0x28>)
 800bba2:	6813      	ldr	r3, [r2, #0]
 800bba4:	b953      	cbnz	r3, 800bbbc <vPortExitCritical+0x1c>
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	b672      	cpsid	i
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	b662      	cpsie	i
 800bbba:	e7fe      	b.n	800bbba <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbc0:	b90b      	cbnz	r3, 800bbc6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bbc2:	f383 8811 	msr	BASEPRI, r3
}
 800bbc6:	4770      	bx	lr
 800bbc8:	2000006c 	.word	0x2000006c
 800bbcc:	00000000 	.word	0x00000000

0800bbd0 <PendSV_Handler>:
	__asm volatile
 800bbd0:	f3ef 8009 	mrs	r0, PSP
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <pxCurrentTCBConst>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	f01e 0f10 	tst.w	lr, #16
 800bbe0:	bf08      	it	eq
 800bbe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bbe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	6010      	str	r0, [r2, #0]
 800bbec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bbf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bbf4:	b672      	cpsid	i
 800bbf6:	f380 8811 	msr	BASEPRI, r0
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	b662      	cpsie	i
 800bc04:	f001 fa1e 	bl	800d044 <vTaskSwitchContext>
 800bc08:	f04f 0000 	mov.w	r0, #0
 800bc0c:	f380 8811 	msr	BASEPRI, r0
 800bc10:	bc09      	pop	{r0, r3}
 800bc12:	6819      	ldr	r1, [r3, #0]
 800bc14:	6808      	ldr	r0, [r1, #0]
 800bc16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1a:	f01e 0f10 	tst.w	lr, #16
 800bc1e:	bf08      	it	eq
 800bc20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc24:	f380 8809 	msr	PSP, r0
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop

0800bc30 <pxCurrentTCBConst>:
 800bc30:	2005f5bc 	.word	0x2005f5bc

0800bc34 <SysTick_Handler>:
{
 800bc34:	b508      	push	{r3, lr}
	__asm volatile
 800bc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3a:	b672      	cpsid	i
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800bc4a:	f001 f85d 	bl	800cd08 <xTaskIncrementTick>
 800bc4e:	b118      	cbz	r0, 800bc58 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc50:	4b03      	ldr	r3, [pc, #12]	; (800bc60 <SysTick_Handler+0x2c>)
 800bc52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc56:	601a      	str	r2, [r3, #0]
	__asm volatile
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f383 8811 	msr	BASEPRI, r3
}
 800bc5e:	bd08      	pop	{r3, pc}
 800bc60:	e000ed04 	.word	0xe000ed04

0800bc64 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc64:	2300      	movs	r3, #0
 800bc66:	4a08      	ldr	r2, [pc, #32]	; (800bc88 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc68:	4908      	ldr	r1, [pc, #32]	; (800bc8c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc6c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bc72:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <vPortSetupTimerInterrupt+0x2c>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc7a:	4906      	ldr	r1, [pc, #24]	; (800bc94 <vPortSetupTimerInterrupt+0x30>)
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc80:	2307      	movs	r3, #7
 800bc82:	6013      	str	r3, [r2, #0]
}
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	e000e010 	.word	0xe000e010
 800bc8c:	e000e018 	.word	0xe000e018
 800bc90:	20000060 	.word	0x20000060
 800bc94:	e000e014 	.word	0xe000e014

0800bc98 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc98:	4b2b      	ldr	r3, [pc, #172]	; (800bd48 <xPortStartScheduler+0xb0>)
{
 800bc9a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc9c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc9e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bca0:	b2d2      	uxtb	r2, r2
 800bca2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bca4:	22ff      	movs	r2, #255	; 0xff
 800bca6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bca8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcaa:	4a28      	ldr	r2, [pc, #160]	; (800bd4c <xPortStartScheduler+0xb4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bcb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bcba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcbc:	2307      	movs	r3, #7
 800bcbe:	4a24      	ldr	r2, [pc, #144]	; (800bd50 <xPortStartScheduler+0xb8>)
 800bcc0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcc2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800bcc6:	1e5c      	subs	r4, r3, #1
 800bcc8:	0600      	lsls	r0, r0, #24
 800bcca:	d40e      	bmi.n	800bcea <xPortStartScheduler+0x52>
 800bccc:	b111      	cbz	r1, 800bcd4 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	d013      	beq.n	800bcfc <xPortStartScheduler+0x64>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	b672      	cpsid	i
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	b662      	cpsie	i
 800bce8:	e7fe      	b.n	800bce8 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bcea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bcee:	2101      	movs	r1, #1
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f88d 3003 	strb.w	r3, [sp, #3]
 800bcf8:	4623      	mov	r3, r4
 800bcfa:	e7e2      	b.n	800bcc2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcfc:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 800bd00:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd02:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	4a10      	ldr	r2, [pc, #64]	; (800bd48 <xPortStartScheduler+0xb0>)
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd0c:	4b11      	ldr	r3, [pc, #68]	; (800bd54 <xPortStartScheduler+0xbc>)
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800bd14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800bd1c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800bd1e:	f7ff ffa1 	bl	800bc64 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800bd22:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <xPortStartScheduler+0xc0>)
 800bd24:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800bd26:	f7ff fec3 	bl	800bab0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd2a:	4a0c      	ldr	r2, [pc, #48]	; (800bd5c <xPortStartScheduler+0xc4>)
 800bd2c:	6813      	ldr	r3, [r2, #0]
 800bd2e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd32:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800bd34:	f7ff fea8 	bl	800ba88 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800bd38:	f001 f984 	bl	800d044 <vTaskSwitchContext>
	prvTaskExitError();
 800bd3c:	f7ff fec2 	bl	800bac4 <prvTaskExitError>
}
 800bd40:	4620      	mov	r0, r4
 800bd42:	b002      	add	sp, #8
 800bd44:	bd10      	pop	{r4, pc}
 800bd46:	bf00      	nop
 800bd48:	e000e400 	.word	0xe000e400
 800bd4c:	2005f5b4 	.word	0x2005f5b4
 800bd50:	2005f5b8 	.word	0x2005f5b8
 800bd54:	e000ed20 	.word	0xe000ed20
 800bd58:	2000006c 	.word	0x2000006c
 800bd5c:	e000ef34 	.word	0xe000ef34

0800bd60 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd60:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd64:	2b0f      	cmp	r3, #15
 800bd66:	d910      	bls.n	800bd8a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd68:	4a12      	ldr	r2, [pc, #72]	; (800bdb4 <vPortValidateInterruptPriority+0x54>)
 800bd6a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd6c:	4a12      	ldr	r2, [pc, #72]	; (800bdb8 <vPortValidateInterruptPriority+0x58>)
 800bd6e:	7812      	ldrb	r2, [r2, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d90a      	bls.n	800bd8a <vPortValidateInterruptPriority+0x2a>
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	b672      	cpsid	i
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	b662      	cpsie	i
 800bd88:	e7fe      	b.n	800bd88 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd8a:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <vPortValidateInterruptPriority+0x5c>)
 800bd8c:	4a0c      	ldr	r2, [pc, #48]	; (800bdc0 <vPortValidateInterruptPriority+0x60>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6812      	ldr	r2, [r2, #0]
 800bd92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d90a      	bls.n	800bdb0 <vPortValidateInterruptPriority+0x50>
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	b672      	cpsid	i
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	b662      	cpsie	i
 800bdae:	e7fe      	b.n	800bdae <vPortValidateInterruptPriority+0x4e>
	}
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	e000e3f0 	.word	0xe000e3f0
 800bdb8:	2005f5b4 	.word	0x2005f5b4
 800bdbc:	e000ed0c 	.word	0xe000ed0c
 800bdc0:	2005f5b8 	.word	0x2005f5b8

0800bdc4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdc8:	f7ff fec4 	bl	800bb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bdcc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bdce:	f7ff fee7 	bl	800bba0 <vPortExitCritical>

	return xReturn;
}
 800bdd2:	fab4 f084 	clz	r0, r4
 800bdd6:	0940      	lsrs	r0, r0, #5
 800bdd8:	bd10      	pop	{r4, pc}

0800bdda <prvCopyDataToQueue>:
{
 800bdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bddc:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bdde:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800bde0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bde2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bde4:	b952      	cbnz	r2, 800bdfc <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bde6:	6807      	ldr	r7, [r0, #0]
 800bde8:	bb47      	cbnz	r7, 800be3c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bdea:	6880      	ldr	r0, [r0, #8]
 800bdec:	f001 fa9e 	bl	800d32c <xTaskPriorityDisinherit>
 800bdf0:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdf2:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdf4:	3601      	adds	r6, #1
}
 800bdf6:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdf8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800bdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800bdfc:	b965      	cbnz	r5, 800be18 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bdfe:	6840      	ldr	r0, [r0, #4]
 800be00:	f019 fb54 	bl	80254ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800be08:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be0a:	68a2      	ldr	r2, [r4, #8]
 800be0c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be0e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be10:	d3f0      	bcc.n	800bdf4 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	6063      	str	r3, [r4, #4]
 800be16:	e7ed      	b.n	800bdf4 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be18:	68c0      	ldr	r0, [r0, #12]
 800be1a:	f019 fb47 	bl	80254ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800be20:	68e3      	ldr	r3, [r4, #12]
 800be22:	4251      	negs	r1, r2
 800be24:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be26:	6822      	ldr	r2, [r4, #0]
 800be28:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be2a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be2c:	bf3e      	ittt	cc
 800be2e:	68a3      	ldrcc	r3, [r4, #8]
 800be30:	185b      	addcc	r3, r3, r1
 800be32:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800be34:	2d02      	cmp	r5, #2
 800be36:	d101      	bne.n	800be3c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be38:	b116      	cbz	r6, 800be40 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800be3a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800be3c:	2500      	movs	r5, #0
 800be3e:	e7d9      	b.n	800bdf4 <prvCopyDataToQueue+0x1a>
 800be40:	4635      	mov	r5, r6
 800be42:	e7d7      	b.n	800bdf4 <prvCopyDataToQueue+0x1a>

0800be44 <prvCopyDataFromQueue>:
{
 800be44:	4603      	mov	r3, r0
 800be46:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800be4a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be4c:	b162      	cbz	r2, 800be68 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be4e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be50:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be52:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be54:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be56:	60dc      	str	r4, [r3, #12]
}
 800be58:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be5c:	bf24      	itt	cs
 800be5e:	6819      	ldrcs	r1, [r3, #0]
 800be60:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be62:	68d9      	ldr	r1, [r3, #12]
 800be64:	f019 bb22 	b.w	80254ac <memcpy>
}
 800be68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <prvUnlockQueue>:
{
 800be6e:	b570      	push	{r4, r5, r6, lr}
 800be70:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800be72:	f7ff fe6f 	bl	800bb54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800be76:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be7a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800be7e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be80:	2d00      	cmp	r5, #0
 800be82:	dc14      	bgt.n	800beae <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800be84:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be86:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800be8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800be8e:	f7ff fe87 	bl	800bba0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800be92:	f7ff fe5f 	bl	800bb54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800be96:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800be9a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be9c:	2d00      	cmp	r5, #0
 800be9e:	dc12      	bgt.n	800bec6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800bea0:	23ff      	movs	r3, #255	; 0xff
 800bea2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800bea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800beaa:	f7ff be79 	b.w	800bba0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d0e7      	beq.n	800be84 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800beb4:	4630      	mov	r0, r6
 800beb6:	f001 f949 	bl	800d14c <xTaskRemoveFromEventList>
 800beba:	b108      	cbz	r0, 800bec0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800bebc:	f001 f9d8 	bl	800d270 <vTaskMissedYield>
			--cTxLock;
 800bec0:	3d01      	subs	r5, #1
 800bec2:	b26d      	sxtb	r5, r5
 800bec4:	e7dc      	b.n	800be80 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bec6:	6923      	ldr	r3, [r4, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d0e9      	beq.n	800bea0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800becc:	4630      	mov	r0, r6
 800bece:	f001 f93d 	bl	800d14c <xTaskRemoveFromEventList>
 800bed2:	b108      	cbz	r0, 800bed8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800bed4:	f001 f9cc 	bl	800d270 <vTaskMissedYield>
				--cRxLock;
 800bed8:	3d01      	subs	r5, #1
 800beda:	b26d      	sxtb	r5, r5
 800bedc:	e7de      	b.n	800be9c <prvUnlockQueue+0x2e>
	...

0800bee0 <xQueueGenericReset>:
{
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bee4:	4604      	mov	r4, r0
 800bee6:	b950      	cbnz	r0, 800befe <xQueueGenericReset+0x1e>
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	b672      	cpsid	i
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	b662      	cpsie	i
 800befc:	e7fe      	b.n	800befc <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800befe:	f7ff fe29 	bl	800bb54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf02:	6822      	ldr	r2, [r4, #0]
 800bf04:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf08:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf0a:	434b      	muls	r3, r1
 800bf0c:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf0e:	1a5b      	subs	r3, r3, r1
 800bf10:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf12:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf14:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf16:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf18:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf1a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800bf1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800bf24:	b995      	cbnz	r5, 800bf4c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	b163      	cbz	r3, 800bf44 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf2a:	f104 0010 	add.w	r0, r4, #16
 800bf2e:	f001 f90d 	bl	800d14c <xTaskRemoveFromEventList>
 800bf32:	b138      	cbz	r0, 800bf44 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800bf34:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <xQueueGenericReset+0x80>)
 800bf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800bf44:	f7ff fe2c 	bl	800bba0 <vPortExitCritical>
}
 800bf48:	2001      	movs	r0, #1
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf4c:	f104 0010 	add.w	r0, r4, #16
 800bf50:	f7ff fd58 	bl	800ba04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bf58:	f7ff fd54 	bl	800ba04 <vListInitialise>
 800bf5c:	e7f2      	b.n	800bf44 <xQueueGenericReset+0x64>
 800bf5e:	bf00      	nop
 800bf60:	e000ed04 	.word	0xe000ed04

0800bf64 <xQueueGenericCreateStatic>:
	{
 800bf64:	b513      	push	{r0, r1, r4, lr}
 800bf66:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf68:	b950      	cbnz	r0, 800bf80 <xQueueGenericCreateStatic+0x1c>
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	b672      	cpsid	i
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	b662      	cpsie	i
 800bf7e:	e7fe      	b.n	800bf7e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800bf80:	b953      	cbnz	r3, 800bf98 <xQueueGenericCreateStatic+0x34>
 800bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf86:	b672      	cpsid	i
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	b662      	cpsie	i
 800bf96:	e7fe      	b.n	800bf96 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf98:	b15a      	cbz	r2, 800bfb2 <xQueueGenericCreateStatic+0x4e>
 800bf9a:	b9b1      	cbnz	r1, 800bfca <xQueueGenericCreateStatic+0x66>
 800bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa0:	b672      	cpsid	i
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	b662      	cpsie	i
 800bfb0:	e7fe      	b.n	800bfb0 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bfb2:	b151      	cbz	r1, 800bfca <xQueueGenericCreateStatic+0x66>
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	b672      	cpsid	i
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	b662      	cpsie	i
 800bfc8:	e7fe      	b.n	800bfc8 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bfca:	2350      	movs	r3, #80	; 0x50
 800bfcc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bfce:	9b01      	ldr	r3, [sp, #4]
 800bfd0:	2b50      	cmp	r3, #80	; 0x50
 800bfd2:	d00a      	beq.n	800bfea <xQueueGenericCreateStatic+0x86>
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	b672      	cpsid	i
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	b662      	cpsie	i
 800bfe8:	e7fe      	b.n	800bfe8 <xQueueGenericCreateStatic+0x84>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfea:	2900      	cmp	r1, #0
 800bfec:	bf08      	it	eq
 800bfee:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bff0:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bff2:	2301      	movs	r3, #1
 800bff4:	6022      	str	r2, [r4, #0]
 800bff6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800bffa:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bffe:	4619      	mov	r1, r3
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff ff6d 	bl	800bee0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c006:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800c00a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c00c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800c010:	b002      	add	sp, #8
 800c012:	bd10      	pop	{r4, pc}

0800c014 <xQueueGenericCreate>:
	{
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	460d      	mov	r5, r1
 800c018:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c01a:	4606      	mov	r6, r0
 800c01c:	b950      	cbnz	r0, 800c034 <xQueueGenericCreate+0x20>
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	b672      	cpsid	i
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	b662      	cpsie	i
 800c032:	e7fe      	b.n	800c032 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c034:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c036:	3050      	adds	r0, #80	; 0x50
 800c038:	f7ff fc1a 	bl	800b870 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c03c:	4604      	mov	r4, r0
 800c03e:	b170      	cbz	r0, 800c05e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c040:	2300      	movs	r3, #0
 800c042:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c046:	b165      	cbz	r5, 800c062 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c048:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c04c:	2101      	movs	r1, #1
 800c04e:	4620      	mov	r0, r4
 800c050:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800c052:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c056:	f7ff ff43 	bl	800bee0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c05a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800c05e:	4620      	mov	r0, r4
 800c060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c062:	4603      	mov	r3, r0
 800c064:	e7f2      	b.n	800c04c <xQueueGenericCreate+0x38>

0800c066 <xQueueCreateCountingSemaphoreStatic>:
	{
 800c066:	b513      	push	{r0, r1, r4, lr}
 800c068:	4613      	mov	r3, r2
 800c06a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800c06c:	b950      	cbnz	r0, 800c084 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	b672      	cpsid	i
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	b662      	cpsie	i
 800c082:	e7fe      	b.n	800c082 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c084:	4288      	cmp	r0, r1
 800c086:	d20a      	bcs.n	800c09e <xQueueCreateCountingSemaphoreStatic+0x38>
 800c088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08c:	b672      	cpsid	i
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	b662      	cpsie	i
 800c09c:	e7fe      	b.n	800c09c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c09e:	2202      	movs	r2, #2
 800c0a0:	9200      	str	r2, [sp, #0]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	f7ff ff5d 	bl	800bf64 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c0aa:	b100      	cbz	r0, 800c0ae <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c0ac:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c0ae:	b002      	add	sp, #8
 800c0b0:	bd10      	pop	{r4, pc}

0800c0b2 <xQueueCreateCountingSemaphore>:
	{
 800c0b2:	b510      	push	{r4, lr}
 800c0b4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800c0b6:	b950      	cbnz	r0, 800c0ce <xQueueCreateCountingSemaphore+0x1c>
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	b672      	cpsid	i
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	b662      	cpsie	i
 800c0cc:	e7fe      	b.n	800c0cc <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c0ce:	4288      	cmp	r0, r1
 800c0d0:	d20a      	bcs.n	800c0e8 <xQueueCreateCountingSemaphore+0x36>
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	b672      	cpsid	i
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	b662      	cpsie	i
 800c0e6:	e7fe      	b.n	800c0e6 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c0e8:	2202      	movs	r2, #2
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	f7ff ff92 	bl	800c014 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c0f0:	b100      	cbz	r0, 800c0f4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c0f2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c0f4:	bd10      	pop	{r4, pc}
	...

0800c0f8 <xQueueGenericSend>:
{
 800c0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fc:	4688      	mov	r8, r1
 800c0fe:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800c100:	4604      	mov	r4, r0
{
 800c102:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c104:	b950      	cbnz	r0, 800c11c <xQueueGenericSend+0x24>
 800c106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10a:	b672      	cpsid	i
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	b662      	cpsie	i
 800c11a:	e7fe      	b.n	800c11a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c11c:	b961      	cbnz	r1, 800c138 <xQueueGenericSend+0x40>
 800c11e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c120:	b153      	cbz	r3, 800c138 <xQueueGenericSend+0x40>
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	b672      	cpsid	i
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	b662      	cpsie	i
 800c136:	e7fe      	b.n	800c136 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c138:	2f02      	cmp	r7, #2
 800c13a:	d10d      	bne.n	800c158 <xQueueGenericSend+0x60>
 800c13c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d00a      	beq.n	800c158 <xQueueGenericSend+0x60>
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	b672      	cpsid	i
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	b662      	cpsie	i
 800c156:	e7fe      	b.n	800c156 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c158:	f001 f896 	bl	800d288 <xTaskGetSchedulerState>
 800c15c:	4606      	mov	r6, r0
 800c15e:	b960      	cbnz	r0, 800c17a <xQueueGenericSend+0x82>
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	b15b      	cbz	r3, 800c17c <xQueueGenericSend+0x84>
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	b672      	cpsid	i
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	b662      	cpsie	i
 800c178:	e7fe      	b.n	800c178 <xQueueGenericSend+0x80>
 800c17a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800c17c:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800c180:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c268 <xQueueGenericSend+0x170>
 800c184:	e037      	b.n	800c1f6 <xQueueGenericSend+0xfe>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c186:	9d01      	ldr	r5, [sp, #4]
 800c188:	b91d      	cbnz	r5, 800c192 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 800c18a:	f7ff fd09 	bl	800bba0 <vPortExitCritical>
			return errQUEUE_FULL;
 800c18e:	2000      	movs	r0, #0
 800c190:	e050      	b.n	800c234 <xQueueGenericSend+0x13c>
				else if( xEntryTimeSet == pdFALSE )
 800c192:	b916      	cbnz	r6, 800c19a <xQueueGenericSend+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c194:	a802      	add	r0, sp, #8
 800c196:	f001 f81f 	bl	800d1d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c19a:	f7ff fd01 	bl	800bba0 <vPortExitCritical>
		vTaskSuspendAll();
 800c19e:	f000 fda5 	bl	800ccec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1a2:	f7ff fcd7 	bl	800bb54 <vPortEnterCritical>
 800c1a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c1aa:	2bff      	cmp	r3, #255	; 0xff
 800c1ac:	d101      	bne.n	800c1b2 <xQueueGenericSend+0xba>
 800c1ae:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800c1b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c1b6:	2bff      	cmp	r3, #255	; 0xff
 800c1b8:	d101      	bne.n	800c1be <xQueueGenericSend+0xc6>
 800c1ba:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800c1be:	f7ff fcef 	bl	800bba0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1c2:	a901      	add	r1, sp, #4
 800c1c4:	a802      	add	r0, sp, #8
 800c1c6:	f001 f813 	bl	800d1f0 <xTaskCheckForTimeOut>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d146      	bne.n	800c25c <xQueueGenericSend+0x164>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1ce:	f7ff fcc1 	bl	800bb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c1d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d12f      	bne.n	800c23a <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c1da:	f7ff fce1 	bl	800bba0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c1de:	9901      	ldr	r1, [sp, #4]
 800c1e0:	f104 0010 	add.w	r0, r4, #16
 800c1e4:	f000 ff76 	bl	800d0d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f7ff fe40 	bl	800be6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1ee:	f000 fe23 	bl	800ce38 <xTaskResumeAll>
 800c1f2:	b350      	cbz	r0, 800c24a <xQueueGenericSend+0x152>
 800c1f4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800c1f6:	f7ff fcad 	bl	800bb54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c1fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d301      	bcc.n	800c206 <xQueueGenericSend+0x10e>
 800c202:	2f02      	cmp	r7, #2
 800c204:	d1bf      	bne.n	800c186 <xQueueGenericSend+0x8e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c206:	463a      	mov	r2, r7
 800c208:	4641      	mov	r1, r8
 800c20a:	4620      	mov	r0, r4
 800c20c:	f7ff fde5 	bl	800bdda <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c212:	b11b      	cbz	r3, 800c21c <xQueueGenericSend+0x124>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c214:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c218:	f000 ff98 	bl	800d14c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800c21c:	b138      	cbz	r0, 800c22e <xQueueGenericSend+0x136>
						queueYIELD_IF_USING_PREEMPTION();
 800c21e:	4b12      	ldr	r3, [pc, #72]	; (800c268 <xQueueGenericSend+0x170>)
 800c220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c224:	601a      	str	r2, [r3, #0]
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c22e:	f7ff fcb7 	bl	800bba0 <vPortExitCritical>
				return pdPASS;
 800c232:	2001      	movs	r0, #1
}
 800c234:	b004      	add	sp, #16
 800c236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800c23a:	f7ff fcb1 	bl	800bba0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800c23e:	4620      	mov	r0, r4
 800c240:	f7ff fe15 	bl	800be6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c244:	f000 fdf8 	bl	800ce38 <xTaskResumeAll>
 800c248:	e7d4      	b.n	800c1f4 <xQueueGenericSend+0xfc>
					portYIELD_WITHIN_API();
 800c24a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c24e:	f8ca 3000 	str.w	r3, [sl]
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	e7cb      	b.n	800c1f4 <xQueueGenericSend+0xfc>
			prvUnlockQueue( pxQueue );
 800c25c:	4620      	mov	r0, r4
 800c25e:	f7ff fe06 	bl	800be6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c262:	f000 fde9 	bl	800ce38 <xTaskResumeAll>
 800c266:	e792      	b.n	800c18e <xQueueGenericSend+0x96>
 800c268:	e000ed04 	.word	0xe000ed04

0800c26c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c26c:	2200      	movs	r2, #0
	{
 800c26e:	460b      	mov	r3, r1
 800c270:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c272:	4611      	mov	r1, r2
 800c274:	9000      	str	r0, [sp, #0]
 800c276:	2001      	movs	r0, #1
 800c278:	f7ff fe74 	bl	800bf64 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800c27c:	4604      	mov	r4, r0
 800c27e:	b138      	cbz	r0, 800c290 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c280:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c282:	461a      	mov	r2, r3
 800c284:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c286:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c288:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c28a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c28c:	f7ff ff34 	bl	800c0f8 <xQueueGenericSend>
	}
 800c290:	4620      	mov	r0, r4
 800c292:	b002      	add	sp, #8
 800c294:	bd10      	pop	{r4, pc}

0800c296 <xQueueGiveMutexRecursive>:
	{
 800c296:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800c298:	4604      	mov	r4, r0
 800c29a:	b950      	cbnz	r0, 800c2b2 <xQueueGiveMutexRecursive+0x1c>
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	b672      	cpsid	i
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	b662      	cpsie	i
 800c2b0:	e7fe      	b.n	800c2b0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c2b2:	6885      	ldr	r5, [r0, #8]
 800c2b4:	f000 ffe2 	bl	800d27c <xTaskGetCurrentTaskHandle>
 800c2b8:	4285      	cmp	r5, r0
 800c2ba:	d10a      	bne.n	800c2d2 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c2bc:	68e3      	ldr	r3, [r4, #12]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c2c2:	b923      	cbnz	r3, 800c2ce <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f7ff ff15 	bl	800c0f8 <xQueueGenericSend>
			xReturn = pdPASS;
 800c2ce:	2001      	movs	r0, #1
		return xReturn;
 800c2d0:	e000      	b.n	800c2d4 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800c2d2:	2000      	movs	r0, #0
	}
 800c2d4:	bd38      	pop	{r3, r4, r5, pc}

0800c2d6 <xQueueCreateMutex>:
	{
 800c2d6:	b570      	push	{r4, r5, r6, lr}
 800c2d8:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c2da:	2050      	movs	r0, #80	; 0x50
 800c2dc:	f7ff fac8 	bl	800b870 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	b198      	cbz	r0, 800c30c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c2e4:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c2e6:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2e8:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c2ea:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800c2ee:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2f2:	f7ff fdf5 	bl	800bee0 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c2f6:	462b      	mov	r3, r5
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c2fe:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c302:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c304:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c306:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c308:	f7ff fef6 	bl	800c0f8 <xQueueGenericSend>
	}
 800c30c:	4620      	mov	r0, r4
 800c30e:	bd70      	pop	{r4, r5, r6, pc}

0800c310 <xQueueGenericSendFromISR>:
{
 800c310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c314:	4689      	mov	r9, r1
 800c316:	4690      	mov	r8, r2
 800c318:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800c31a:	4604      	mov	r4, r0
 800c31c:	b950      	cbnz	r0, 800c334 <xQueueGenericSendFromISR+0x24>
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	b672      	cpsid	i
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	b662      	cpsie	i
 800c332:	e7fe      	b.n	800c332 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c334:	b961      	cbnz	r1, 800c350 <xQueueGenericSendFromISR+0x40>
 800c336:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c338:	b153      	cbz	r3, 800c350 <xQueueGenericSendFromISR+0x40>
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	b672      	cpsid	i
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	b662      	cpsie	i
 800c34e:	e7fe      	b.n	800c34e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c350:	2f02      	cmp	r7, #2
 800c352:	d10d      	bne.n	800c370 <xQueueGenericSendFromISR+0x60>
 800c354:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c356:	2b01      	cmp	r3, #1
 800c358:	d00a      	beq.n	800c370 <xQueueGenericSendFromISR+0x60>
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	b672      	cpsid	i
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	b662      	cpsie	i
 800c36e:	e7fe      	b.n	800c36e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c370:	f7ff fcf6 	bl	800bd60 <vPortValidateInterruptPriority>
	__asm volatile
 800c374:	f3ef 8611 	mrs	r6, BASEPRI
 800c378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37c:	b672      	cpsid	i
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c38c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c38e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c390:	429a      	cmp	r2, r3
 800c392:	d301      	bcc.n	800c398 <xQueueGenericSendFromISR+0x88>
 800c394:	2f02      	cmp	r7, #2
 800c396:	d122      	bne.n	800c3de <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c398:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c39c:	463a      	mov	r2, r7
 800c39e:	4649      	mov	r1, r9
 800c3a0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3a2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3a4:	f7ff fd19 	bl	800bdda <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c3a8:	1c6b      	adds	r3, r5, #1
 800c3aa:	d113      	bne.n	800c3d4 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ae:	b90b      	cbnz	r3, 800c3b4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800c3b0:	2001      	movs	r0, #1
 800c3b2:	e00b      	b.n	800c3cc <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c3b8:	f000 fec8 	bl	800d14c <xTaskRemoveFromEventList>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d0f7      	beq.n	800c3b0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800c3c0:	f1b8 0f00 	cmp.w	r8, #0
 800c3c4:	d0f4      	beq.n	800c3b0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800c3cc:	f386 8811 	msr	BASEPRI, r6
}
 800c3d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3d4:	3501      	adds	r5, #1
 800c3d6:	b26d      	sxtb	r5, r5
 800c3d8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800c3dc:	e7e8      	b.n	800c3b0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e7f4      	b.n	800c3cc <xQueueGenericSendFromISR+0xbc>

0800c3e2 <xQueueGiveFromISR>:
{
 800c3e2:	b570      	push	{r4, r5, r6, lr}
 800c3e4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	b950      	cbnz	r0, 800c400 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800c3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ee:	b672      	cpsid	i
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	b662      	cpsie	i
 800c3fe:	e7fe      	b.n	800c3fe <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c400:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c402:	b153      	cbz	r3, 800c41a <xQueueGiveFromISR+0x38>
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	b672      	cpsid	i
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	b662      	cpsie	i
 800c418:	e7fe      	b.n	800c418 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c41a:	6803      	ldr	r3, [r0, #0]
 800c41c:	b963      	cbnz	r3, 800c438 <xQueueGiveFromISR+0x56>
 800c41e:	6883      	ldr	r3, [r0, #8]
 800c420:	b153      	cbz	r3, 800c438 <xQueueGiveFromISR+0x56>
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	b672      	cpsid	i
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	b662      	cpsie	i
 800c436:	e7fe      	b.n	800c436 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c438:	f7ff fc92 	bl	800bd60 <vPortValidateInterruptPriority>
	__asm volatile
 800c43c:	f3ef 8611 	mrs	r6, BASEPRI
 800c440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c444:	b672      	cpsid	i
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c454:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c456:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c458:	4293      	cmp	r3, r2
 800c45a:	d91c      	bls.n	800c496 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c45c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c460:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800c462:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800c464:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c466:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c468:	d110      	bne.n	800c48c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c46c:	b90b      	cbnz	r3, 800c472 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800c46e:	2001      	movs	r0, #1
 800c470:	e009      	b.n	800c486 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c472:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c476:	f000 fe69 	bl	800d14c <xTaskRemoveFromEventList>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d0f7      	beq.n	800c46e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800c47e:	2d00      	cmp	r5, #0
 800c480:	d0f5      	beq.n	800c46e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c482:	2001      	movs	r0, #1
 800c484:	6028      	str	r0, [r5, #0]
	__asm volatile
 800c486:	f386 8811 	msr	BASEPRI, r6
}
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c48c:	3301      	adds	r3, #1
 800c48e:	b25b      	sxtb	r3, r3
 800c490:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c494:	e7eb      	b.n	800c46e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800c496:	2000      	movs	r0, #0
 800c498:	e7f5      	b.n	800c486 <xQueueGiveFromISR+0xa4>
	...

0800c49c <xQueueReceive>:
{
 800c49c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4a0:	b085      	sub	sp, #20
 800c4a2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800c4a4:	4604      	mov	r4, r0
{
 800c4a6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c4a8:	b950      	cbnz	r0, 800c4c0 <xQueueReceive+0x24>
	__asm volatile
 800c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ae:	b672      	cpsid	i
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	b662      	cpsie	i
 800c4be:	e7fe      	b.n	800c4be <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4c0:	b961      	cbnz	r1, 800c4dc <xQueueReceive+0x40>
 800c4c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c4c4:	b153      	cbz	r3, 800c4dc <xQueueReceive+0x40>
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	b672      	cpsid	i
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	b662      	cpsie	i
 800c4da:	e7fe      	b.n	800c4da <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4dc:	f000 fed4 	bl	800d288 <xTaskGetSchedulerState>
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	b960      	cbnz	r0, 800c4fe <xQueueReceive+0x62>
 800c4e4:	9b01      	ldr	r3, [sp, #4]
 800c4e6:	b15b      	cbz	r3, 800c500 <xQueueReceive+0x64>
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	b672      	cpsid	i
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	b662      	cpsie	i
 800c4fc:	e7fe      	b.n	800c4fc <xQueueReceive+0x60>
 800c4fe:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800c500:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800c504:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800c5e4 <xQueueReceive+0x148>
 800c508:	e03b      	b.n	800c582 <xQueueReceive+0xe6>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c50a:	9d01      	ldr	r5, [sp, #4]
 800c50c:	b91d      	cbnz	r5, 800c516 <xQueueReceive+0x7a>
					taskEXIT_CRITICAL();
 800c50e:	f7ff fb47 	bl	800bba0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800c512:	2000      	movs	r0, #0
 800c514:	e052      	b.n	800c5bc <xQueueReceive+0x120>
				else if( xEntryTimeSet == pdFALSE )
 800c516:	b916      	cbnz	r6, 800c51e <xQueueReceive+0x82>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c518:	a802      	add	r0, sp, #8
 800c51a:	f000 fe5d 	bl	800d1d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c51e:	f7ff fb3f 	bl	800bba0 <vPortExitCritical>
		vTaskSuspendAll();
 800c522:	f000 fbe3 	bl	800ccec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c526:	f7ff fb15 	bl	800bb54 <vPortEnterCritical>
 800c52a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c52e:	2bff      	cmp	r3, #255	; 0xff
 800c530:	d101      	bne.n	800c536 <xQueueReceive+0x9a>
 800c532:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800c536:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c53a:	2bff      	cmp	r3, #255	; 0xff
 800c53c:	d101      	bne.n	800c542 <xQueueReceive+0xa6>
 800c53e:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800c542:	f7ff fb2d 	bl	800bba0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c546:	a901      	add	r1, sp, #4
 800c548:	a802      	add	r0, sp, #8
 800c54a:	f000 fe51 	bl	800d1f0 <xTaskCheckForTimeOut>
 800c54e:	2800      	cmp	r0, #0
 800c550:	d13d      	bne.n	800c5ce <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c552:	4620      	mov	r0, r4
 800c554:	f7ff fc36 	bl	800bdc4 <prvIsQueueEmpty>
 800c558:	b398      	cbz	r0, 800c5c2 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c55a:	9901      	ldr	r1, [sp, #4]
 800c55c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c560:	f000 fdb8 	bl	800d0d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c564:	4620      	mov	r0, r4
 800c566:	f7ff fc82 	bl	800be6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c56a:	f000 fc65 	bl	800ce38 <xTaskResumeAll>
 800c56e:	b938      	cbnz	r0, 800c580 <xQueueReceive+0xe4>
					portYIELD_WITHIN_API();
 800c570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c574:	f8c9 3000 	str.w	r3, [r9]
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800c582:	f7ff fae7 	bl	800bb54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c586:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c588:	2d00      	cmp	r5, #0
 800c58a:	d0be      	beq.n	800c50a <xQueueReceive+0x6e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c58c:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c58e:	4639      	mov	r1, r7
 800c590:	4620      	mov	r0, r4
 800c592:	f7ff fc57 	bl	800be44 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c596:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c598:	6923      	ldr	r3, [r4, #16]
 800c59a:	b163      	cbz	r3, 800c5b6 <xQueueReceive+0x11a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c59c:	f104 0010 	add.w	r0, r4, #16
 800c5a0:	f000 fdd4 	bl	800d14c <xTaskRemoveFromEventList>
 800c5a4:	b138      	cbz	r0, 800c5b6 <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	; (800c5e4 <xQueueReceive+0x148>)
 800c5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c5b6:	f7ff faf3 	bl	800bba0 <vPortExitCritical>
				return pdPASS;
 800c5ba:	2001      	movs	r0, #1
}
 800c5bc:	b005      	add	sp, #20
 800c5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f7ff fc53 	bl	800be6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5c8:	f000 fc36 	bl	800ce38 <xTaskResumeAll>
 800c5cc:	e7d8      	b.n	800c580 <xQueueReceive+0xe4>
			prvUnlockQueue( pxQueue );
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f7ff fc4d 	bl	800be6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5d4:	f000 fc30 	bl	800ce38 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f7ff fbf3 	bl	800bdc4 <prvIsQueueEmpty>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d0ce      	beq.n	800c580 <xQueueReceive+0xe4>
 800c5e2:	e796      	b.n	800c512 <xQueueReceive+0x76>
 800c5e4:	e000ed04 	.word	0xe000ed04

0800c5e8 <xQueueSemaphoreTake>:
{
 800c5e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800c5ec:	4604      	mov	r4, r0
{
 800c5ee:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c5f0:	b950      	cbnz	r0, 800c608 <xQueueSemaphoreTake+0x20>
 800c5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f6:	b672      	cpsid	i
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	b662      	cpsie	i
 800c606:	e7fe      	b.n	800c606 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c608:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800c60a:	b155      	cbz	r5, 800c622 <xQueueSemaphoreTake+0x3a>
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	b672      	cpsid	i
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	b662      	cpsie	i
 800c620:	e7fe      	b.n	800c620 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c622:	f000 fe31 	bl	800d288 <xTaskGetSchedulerState>
 800c626:	4606      	mov	r6, r0
 800c628:	b960      	cbnz	r0, 800c644 <xQueueSemaphoreTake+0x5c>
 800c62a:	9b01      	ldr	r3, [sp, #4]
 800c62c:	b17b      	cbz	r3, 800c64e <xQueueSemaphoreTake+0x66>
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	b672      	cpsid	i
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	b662      	cpsie	i
 800c642:	e7fe      	b.n	800c642 <xQueueSemaphoreTake+0x5a>
 800c644:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c646:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800c648:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800c77c <xQueueSemaphoreTake+0x194>
 800c64c:	e053      	b.n	800c6f6 <xQueueSemaphoreTake+0x10e>
 800c64e:	4605      	mov	r5, r0
 800c650:	e7f9      	b.n	800c646 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c652:	9b01      	ldr	r3, [sp, #4]
 800c654:	b973      	cbnz	r3, 800c674 <xQueueSemaphoreTake+0x8c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c656:	b155      	cbz	r5, 800c66e <xQueueSemaphoreTake+0x86>
 800c658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65c:	b672      	cpsid	i
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	b662      	cpsie	i
 800c66c:	e7fe      	b.n	800c66c <xQueueSemaphoreTake+0x84>
					taskEXIT_CRITICAL();
 800c66e:	f7ff fa97 	bl	800bba0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c672:	e05e      	b.n	800c732 <xQueueSemaphoreTake+0x14a>
				else if( xEntryTimeSet == pdFALSE )
 800c674:	b916      	cbnz	r6, 800c67c <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c676:	a802      	add	r0, sp, #8
 800c678:	f000 fdae 	bl	800d1d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c67c:	f7ff fa90 	bl	800bba0 <vPortExitCritical>
		vTaskSuspendAll();
 800c680:	f000 fb34 	bl	800ccec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c684:	f7ff fa66 	bl	800bb54 <vPortEnterCritical>
 800c688:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c68c:	2bff      	cmp	r3, #255	; 0xff
 800c68e:	d101      	bne.n	800c694 <xQueueSemaphoreTake+0xac>
 800c690:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800c694:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c698:	2bff      	cmp	r3, #255	; 0xff
 800c69a:	d101      	bne.n	800c6a0 <xQueueSemaphoreTake+0xb8>
 800c69c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c6a0:	f7ff fa7e 	bl	800bba0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6a4:	a901      	add	r1, sp, #4
 800c6a6:	a802      	add	r0, sp, #8
 800c6a8:	f000 fda2 	bl	800d1f0 <xTaskCheckForTimeOut>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d14a      	bne.n	800c746 <xQueueSemaphoreTake+0x15e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f7ff fb87 	bl	800bdc4 <prvIsQueueEmpty>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d03f      	beq.n	800c73a <xQueueSemaphoreTake+0x152>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	b93b      	cbnz	r3, 800c6ce <xQueueSemaphoreTake+0xe6>
						taskENTER_CRITICAL();
 800c6be:	f7ff fa49 	bl	800bb54 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6c2:	68a0      	ldr	r0, [r4, #8]
 800c6c4:	f000 fdf0 	bl	800d2a8 <xTaskPriorityInherit>
 800c6c8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c6ca:	f7ff fa69 	bl	800bba0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6ce:	9901      	ldr	r1, [sp, #4]
 800c6d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c6d4:	f000 fcfe 	bl	800d0d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f7ff fbc8 	bl	800be6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6de:	f000 fbab 	bl	800ce38 <xTaskResumeAll>
 800c6e2:	b938      	cbnz	r0, 800c6f4 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800c6e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c6e8:	f8c8 3000 	str.w	r3, [r8]
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800c6f6:	f7ff fa2d 	bl	800bb54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c6fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0a8      	beq.n	800c652 <xQueueSemaphoreTake+0x6a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c700:	3b01      	subs	r3, #1
 800c702:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	b913      	cbnz	r3, 800c70e <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c708:	f000 feae 	bl	800d468 <pvTaskIncrementMutexHeldCount>
 800c70c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c70e:	6923      	ldr	r3, [r4, #16]
 800c710:	b163      	cbz	r3, 800c72c <xQueueSemaphoreTake+0x144>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c712:	f104 0010 	add.w	r0, r4, #16
 800c716:	f000 fd19 	bl	800d14c <xTaskRemoveFromEventList>
 800c71a:	b138      	cbz	r0, 800c72c <xQueueSemaphoreTake+0x144>
						queueYIELD_IF_USING_PREEMPTION();
 800c71c:	4b17      	ldr	r3, [pc, #92]	; (800c77c <xQueueSemaphoreTake+0x194>)
 800c71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800c72c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800c72e:	f7ff fa37 	bl	800bba0 <vPortExitCritical>
}
 800c732:	4628      	mov	r0, r5
 800c734:	b004      	add	sp, #16
 800c736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800c73a:	4620      	mov	r0, r4
 800c73c:	f7ff fb97 	bl	800be6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c740:	f000 fb7a 	bl	800ce38 <xTaskResumeAll>
 800c744:	e7d6      	b.n	800c6f4 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800c746:	4620      	mov	r0, r4
 800c748:	f7ff fb91 	bl	800be6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c74c:	f000 fb74 	bl	800ce38 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c750:	4620      	mov	r0, r4
 800c752:	f7ff fb37 	bl	800bdc4 <prvIsQueueEmpty>
 800c756:	2800      	cmp	r0, #0
 800c758:	d0cc      	beq.n	800c6f4 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800c75a:	2d00      	cmp	r5, #0
 800c75c:	d0e9      	beq.n	800c732 <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 800c75e:	f7ff f9f9 	bl	800bb54 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c762:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c764:	b119      	cbz	r1, 800c76e <xQueueSemaphoreTake+0x186>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c766:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c768:	6819      	ldr	r1, [r3, #0]
 800c76a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c76e:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800c770:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c772:	f000 fe23 	bl	800d3bc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c776:	f7ff fa13 	bl	800bba0 <vPortExitCritical>
 800c77a:	e7da      	b.n	800c732 <xQueueSemaphoreTake+0x14a>
 800c77c:	e000ed04 	.word	0xe000ed04

0800c780 <xQueueTakeMutexRecursive>:
	{
 800c780:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800c782:	4604      	mov	r4, r0
 800c784:	b950      	cbnz	r0, 800c79c <xQueueTakeMutexRecursive+0x1c>
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	b672      	cpsid	i
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	b662      	cpsie	i
 800c79a:	e7fe      	b.n	800c79a <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c79c:	6885      	ldr	r5, [r0, #8]
 800c79e:	9101      	str	r1, [sp, #4]
 800c7a0:	f000 fd6c 	bl	800d27c <xTaskGetCurrentTaskHandle>
 800c7a4:	4285      	cmp	r5, r0
 800c7a6:	9901      	ldr	r1, [sp, #4]
 800c7a8:	d105      	bne.n	800c7b6 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c7aa:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800c7ac:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	60e3      	str	r3, [r4, #12]
	}
 800c7b2:	b003      	add	sp, #12
 800c7b4:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f7ff ff16 	bl	800c5e8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d0f8      	beq.n	800c7b2 <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c7c0:	68e3      	ldr	r3, [r4, #12]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800c7c6:	e7f4      	b.n	800c7b2 <xQueueTakeMutexRecursive+0x32>

0800c7c8 <xQueueReceiveFromISR>:
{
 800c7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7cc:	4689      	mov	r9, r1
 800c7ce:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	b950      	cbnz	r0, 800c7ea <xQueueReceiveFromISR+0x22>
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	b672      	cpsid	i
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	b662      	cpsie	i
 800c7e8:	e7fe      	b.n	800c7e8 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7ea:	b961      	cbnz	r1, 800c806 <xQueueReceiveFromISR+0x3e>
 800c7ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c7ee:	b153      	cbz	r3, 800c806 <xQueueReceiveFromISR+0x3e>
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	b672      	cpsid	i
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	b662      	cpsie	i
 800c804:	e7fe      	b.n	800c804 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c806:	f7ff faab 	bl	800bd60 <vPortValidateInterruptPriority>
	__asm volatile
 800c80a:	f3ef 8711 	mrs	r7, BASEPRI
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	b672      	cpsid	i
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c822:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c824:	b31c      	cbz	r4, 800c86e <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c826:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c82a:	4649      	mov	r1, r9
 800c82c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c82e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c830:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c832:	f7ff fb07 	bl	800be44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c836:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800c838:	1c73      	adds	r3, r6, #1
 800c83a:	d113      	bne.n	800c864 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c83c:	692b      	ldr	r3, [r5, #16]
 800c83e:	b90b      	cbnz	r3, 800c844 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800c840:	2001      	movs	r0, #1
 800c842:	e00b      	b.n	800c85c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c844:	f105 0010 	add.w	r0, r5, #16
 800c848:	f000 fc80 	bl	800d14c <xTaskRemoveFromEventList>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d0f7      	beq.n	800c840 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800c850:	f1b8 0f00 	cmp.w	r8, #0
 800c854:	d0f4      	beq.n	800c840 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c856:	2001      	movs	r0, #1
 800c858:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800c85c:	f387 8811 	msr	BASEPRI, r7
}
 800c860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c864:	3601      	adds	r6, #1
 800c866:	b276      	sxtb	r6, r6
 800c868:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800c86c:	e7e8      	b.n	800c840 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800c86e:	4620      	mov	r0, r4
 800c870:	e7f4      	b.n	800c85c <xQueueReceiveFromISR+0x94>
	...

0800c874 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c874:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c876:	4a07      	ldr	r2, [pc, #28]	; (800c894 <vQueueAddToRegistry+0x20>)
	{
 800c878:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c87a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c87e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c882:	b91d      	cbnz	r5, 800c88c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c884:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c888:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c88a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c88c:	3301      	adds	r3, #1
 800c88e:	2b08      	cmp	r3, #8
 800c890:	d1f3      	bne.n	800c87a <vQueueAddToRegistry+0x6>
 800c892:	e7fa      	b.n	800c88a <vQueueAddToRegistry+0x16>
 800c894:	20061364 	.word	0x20061364

0800c898 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c898:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c89a:	4909      	ldr	r1, [pc, #36]	; (800c8c0 <vQueueUnregisterQueue+0x28>)
	{
 800c89c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c89e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800c8a2:	00dc      	lsls	r4, r3, #3
 800c8a4:	4282      	cmp	r2, r0
 800c8a6:	d106      	bne.n	800c8b6 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c8a8:	4a06      	ldr	r2, [pc, #24]	; (800c8c4 <vQueueUnregisterQueue+0x2c>)
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c8b0:	4422      	add	r2, r4
 800c8b2:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c8b4:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	2b08      	cmp	r3, #8
 800c8ba:	d1f0      	bne.n	800c89e <vQueueUnregisterQueue+0x6>
 800c8bc:	e7fa      	b.n	800c8b4 <vQueueUnregisterQueue+0x1c>
 800c8be:	bf00      	nop
 800c8c0:	20061368 	.word	0x20061368
 800c8c4:	20061364 	.word	0x20061364

0800c8c8 <vQueueDelete>:
{
 800c8c8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c8ca:	b950      	cbnz	r0, 800c8e2 <vQueueDelete+0x1a>
	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	b672      	cpsid	i
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	b662      	cpsie	i
 800c8e0:	e7fe      	b.n	800c8e0 <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 800c8e2:	f7ff ffd9 	bl	800c898 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c8e6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800c8ea:	b91b      	cbnz	r3, 800c8f4 <vQueueDelete+0x2c>
}
 800c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c8f0:	f7ff b84c 	b.w	800b98c <vPortFree>
}
 800c8f4:	bd10      	pop	{r4, pc}

0800c8f6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8f6:	b570      	push	{r4, r5, r6, lr}
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c8fe:	f7ff f929 	bl	800bb54 <vPortEnterCritical>
 800c902:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c906:	2bff      	cmp	r3, #255	; 0xff
 800c908:	d102      	bne.n	800c910 <vQueueWaitForMessageRestricted+0x1a>
 800c90a:	2300      	movs	r3, #0
 800c90c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c910:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c914:	2bff      	cmp	r3, #255	; 0xff
 800c916:	d102      	bne.n	800c91e <vQueueWaitForMessageRestricted+0x28>
 800c918:	2300      	movs	r3, #0
 800c91a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c91e:	f7ff f93f 	bl	800bba0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c922:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c924:	b92b      	cbnz	r3, 800c932 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c926:	4632      	mov	r2, r6
 800c928:	4629      	mov	r1, r5
 800c92a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c92e:	f000 fbed 	bl	800d10c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c932:	4620      	mov	r0, r4
	}
 800c934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c938:	f7ff ba99 	b.w	800be6e <prvUnlockQueue>

0800c93c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c940:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c942:	f7ff f907 	bl	800bb54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c946:	4b2e      	ldr	r3, [pc, #184]	; (800ca00 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800c948:	4d2e      	ldr	r5, [pc, #184]	; (800ca04 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	4f2e      	ldr	r7, [pc, #184]	; (800ca08 <prvAddNewTaskToReadyList+0xcc>)
 800c94e:	3201      	adds	r2, #1
 800c950:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c952:	682e      	ldr	r6, [r5, #0]
 800c954:	2e00      	cmp	r6, #0
 800c956:	d148      	bne.n	800c9ea <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c958:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d11f      	bne.n	800c9a0 <prvAddNewTaskToReadyList+0x64>
 800c960:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c962:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c964:	4640      	mov	r0, r8
 800c966:	f7ff f84d 	bl	800ba04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c96a:	f108 0814 	add.w	r8, r8, #20
 800c96e:	2e38      	cmp	r6, #56	; 0x38
 800c970:	d1f7      	bne.n	800c962 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c972:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ca34 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c976:	4e25      	ldr	r6, [pc, #148]	; (800ca0c <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800c978:	4640      	mov	r0, r8
 800c97a:	f7ff f843 	bl	800ba04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c97e:	4630      	mov	r0, r6
 800c980:	f7ff f840 	bl	800ba04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c984:	4822      	ldr	r0, [pc, #136]	; (800ca10 <prvAddNewTaskToReadyList+0xd4>)
 800c986:	f7ff f83d 	bl	800ba04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c98a:	4822      	ldr	r0, [pc, #136]	; (800ca14 <prvAddNewTaskToReadyList+0xd8>)
 800c98c:	f7ff f83a 	bl	800ba04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c990:	4821      	ldr	r0, [pc, #132]	; (800ca18 <prvAddNewTaskToReadyList+0xdc>)
 800c992:	f7ff f837 	bl	800ba04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c996:	4b21      	ldr	r3, [pc, #132]	; (800ca1c <prvAddNewTaskToReadyList+0xe0>)
 800c998:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c99c:	4b20      	ldr	r3, [pc, #128]	; (800ca20 <prvAddNewTaskToReadyList+0xe4>)
 800c99e:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800c9a0:	4a20      	ldr	r2, [pc, #128]	; (800ca24 <prvAddNewTaskToReadyList+0xe8>)
 800c9a2:	6813      	ldr	r3, [r2, #0]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c9a8:	4a1f      	ldr	r2, [pc, #124]	; (800ca28 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c9aa:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c9ac:	6811      	ldr	r1, [r2, #0]
 800c9ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c9b0:	428b      	cmp	r3, r1
 800c9b2:	d900      	bls.n	800c9b6 <prvAddNewTaskToReadyList+0x7a>
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	2014      	movs	r0, #20
 800c9b8:	1d21      	adds	r1, r4, #4
 800c9ba:	fb00 7003 	mla	r0, r0, r3, r7
 800c9be:	f7ff f82f 	bl	800ba20 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c9c2:	f7ff f8ed 	bl	800bba0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c9c6:	4b19      	ldr	r3, [pc, #100]	; (800ca2c <prvAddNewTaskToReadyList+0xf0>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	b163      	cbz	r3, 800c9e6 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d207      	bcs.n	800c9e6 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800c9d6:	4b16      	ldr	r3, [pc, #88]	; (800ca30 <prvAddNewTaskToReadyList+0xf4>)
 800c9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	f3bf 8f6f 	isb	sy
}
 800c9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c9ea:	4b10      	ldr	r3, [pc, #64]	; (800ca2c <prvAddNewTaskToReadyList+0xf0>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1d6      	bne.n	800c9a0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c9f2:	682b      	ldr	r3, [r5, #0]
 800c9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d8d1      	bhi.n	800c9a0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c9fc:	602c      	str	r4, [r5, #0]
 800c9fe:	e7cf      	b.n	800c9a0 <prvAddNewTaskToReadyList+0x64>
 800ca00:	2005fa28 	.word	0x2005fa28
 800ca04:	2005f5bc 	.word	0x2005f5bc
 800ca08:	2005f5c8 	.word	0x2005f5c8
 800ca0c:	2005fa54 	.word	0x2005fa54
 800ca10:	2005fa70 	.word	0x2005fa70
 800ca14:	2005fa9c 	.word	0x2005fa9c
 800ca18:	2005fa88 	.word	0x2005fa88
 800ca1c:	2005f5c0 	.word	0x2005f5c0
 800ca20:	2005f5c4 	.word	0x2005f5c4
 800ca24:	2005fa38 	.word	0x2005fa38
 800ca28:	2005fa3c 	.word	0x2005fa3c
 800ca2c:	2005fa84 	.word	0x2005fa84
 800ca30:	e000ed04 	.word	0xe000ed04
 800ca34:	2005fa40 	.word	0x2005fa40

0800ca38 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca38:	4a06      	ldr	r2, [pc, #24]	; (800ca54 <prvResetNextTaskUnblockTime+0x1c>)
 800ca3a:	6813      	ldr	r3, [r2, #0]
 800ca3c:	6819      	ldr	r1, [r3, #0]
 800ca3e:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <prvResetNextTaskUnblockTime+0x20>)
 800ca40:	b919      	cbnz	r1, 800ca4a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca42:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca46:	601a      	str	r2, [r3, #0]
	}
}
 800ca48:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca4a:	6812      	ldr	r2, [r2, #0]
 800ca4c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca4e:	68d2      	ldr	r2, [r2, #12]
 800ca50:	6852      	ldr	r2, [r2, #4]
 800ca52:	e7f8      	b.n	800ca46 <prvResetNextTaskUnblockTime+0xe>
 800ca54:	2005f5c0 	.word	0x2005f5c0
 800ca58:	2005fa68 	.word	0x2005fa68

0800ca5c <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ca5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca60:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ca64:	4606      	mov	r6, r0
 800ca66:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca68:	21a5      	movs	r1, #165	; 0xa5
 800ca6a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ca6c:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ca6e:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ca72:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca76:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ca78:	f018 fd26 	bl	80254c8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ca7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ca7e:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca80:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800ca84:	2d00      	cmp	r5, #0
 800ca86:	d037      	beq.n	800caf8 <prvInitialiseNewTask.isra.0+0x9c>
 800ca88:	1e6b      	subs	r3, r5, #1
 800ca8a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800ca8e:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca90:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ca94:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800ca98:	7819      	ldrb	r1, [r3, #0]
 800ca9a:	b109      	cbz	r1, 800caa0 <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca9c:	42ab      	cmp	r3, r5
 800ca9e:	d1f7      	bne.n	800ca90 <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800caa0:	2300      	movs	r3, #0
 800caa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800caa6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800caa8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800caac:	1d20      	adds	r0, r4, #4
 800caae:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800cab0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800cab4:	bf28      	it	cs
 800cab6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800cab8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800caba:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cabc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cac0:	f7fe ffab 	bl	800ba1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cac4:	f104 0018 	add.w	r0, r4, #24
 800cac8:	f7fe ffa7 	bl	800ba1a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800cacc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cad0:	463a      	mov	r2, r7
 800cad2:	4631      	mov	r1, r6
 800cad4:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cad6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cad8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cada:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800cadc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cae0:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cae4:	f7ff f812 	bl	800bb0c <pxPortInitialiseStack>
 800cae8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800caea:	f1b8 0f00 	cmp.w	r8, #0
 800caee:	d001      	beq.n	800caf4 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800caf0:	f8c8 4000 	str.w	r4, [r8]
}
 800caf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800caf8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800cafc:	e7d3      	b.n	800caa6 <prvInitialiseNewTask.isra.0+0x4a>

0800cafe <prvDeleteTCB>:
	{
 800cafe:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb00:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800cb04:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb06:	b93b      	cbnz	r3, 800cb18 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800cb08:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800cb0a:	f7fe ff3f 	bl	800b98c <vPortFree>
				vPortFree( pxTCB );
 800cb0e:	4620      	mov	r0, r4
	}
 800cb10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800cb14:	f7fe bf3a 	b.w	800b98c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d0f9      	beq.n	800cb10 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d00a      	beq.n	800cb36 <prvDeleteTCB+0x38>
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	b672      	cpsid	i
 800cb26:	f383 8811 	msr	BASEPRI, r3
 800cb2a:	f3bf 8f6f 	isb	sy
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	b662      	cpsie	i
 800cb34:	e7fe      	b.n	800cb34 <prvDeleteTCB+0x36>
	}
 800cb36:	bd10      	pop	{r4, pc}

0800cb38 <prvIdleTask>:
{
 800cb38:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb3a:	4e14      	ldr	r6, [pc, #80]	; (800cb8c <prvIdleTask+0x54>)
				taskYIELD();
 800cb3c:	4f14      	ldr	r7, [pc, #80]	; (800cb90 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb3e:	4c15      	ldr	r4, [pc, #84]	; (800cb94 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800cb40:	4d15      	ldr	r5, [pc, #84]	; (800cb98 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	b96b      	cbnz	r3, 800cb62 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb46:	4b15      	ldr	r3, [pc, #84]	; (800cb9c <prvIdleTask+0x64>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d906      	bls.n	800cb5c <prvIdleTask+0x24>
				taskYIELD();
 800cb4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb52:	603b      	str	r3, [r7, #0]
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800cb5c:	f7f6 fad4 	bl	8003108 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cb60:	e7ed      	b.n	800cb3e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800cb62:	f7fe fff7 	bl	800bb54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb66:	68f3      	ldr	r3, [r6, #12]
 800cb68:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb6c:	f108 0004 	add.w	r0, r8, #4
 800cb70:	f7fe ff79 	bl	800ba66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	3b01      	subs	r3, #1
 800cb78:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800cb80:	f7ff f80e 	bl	800bba0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800cb84:	4640      	mov	r0, r8
 800cb86:	f7ff ffba 	bl	800cafe <prvDeleteTCB>
 800cb8a:	e7da      	b.n	800cb42 <prvIdleTask+0xa>
 800cb8c:	2005fa9c 	.word	0x2005fa9c
 800cb90:	e000ed04 	.word	0xe000ed04
 800cb94:	2005fa2c 	.word	0x2005fa2c
 800cb98:	2005fa28 	.word	0x2005fa28
 800cb9c:	2005f5c8 	.word	0x2005f5c8

0800cba0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cba2:	4b16      	ldr	r3, [pc, #88]	; (800cbfc <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800cba4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cba6:	4e16      	ldr	r6, [pc, #88]	; (800cc00 <prvAddCurrentTaskToDelayedList+0x60>)
{
 800cba8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800cbaa:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbac:	6830      	ldr	r0, [r6, #0]
 800cbae:	3004      	adds	r0, #4
 800cbb0:	f7fe ff59 	bl	800ba66 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cbb4:	1c63      	adds	r3, r4, #1
 800cbb6:	4633      	mov	r3, r6
 800cbb8:	d107      	bne.n	800cbca <prvAddCurrentTaskToDelayedList+0x2a>
 800cbba:	b137      	cbz	r7, 800cbca <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbbc:	6831      	ldr	r1, [r6, #0]
 800cbbe:	4811      	ldr	r0, [pc, #68]	; (800cc04 <prvAddCurrentTaskToDelayedList+0x64>)
 800cbc0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cbc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbc6:	f7fe bf2b 	b.w	800ba20 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cbca:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800cbd0:	d307      	bcc.n	800cbe2 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbd2:	4a0d      	ldr	r2, [pc, #52]	; (800cc08 <prvAddCurrentTaskToDelayedList+0x68>)
 800cbd4:	6810      	ldr	r0, [r2, #0]
 800cbd6:	6819      	ldr	r1, [r3, #0]
}
 800cbd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbdc:	3104      	adds	r1, #4
 800cbde:	f7fe bf2b 	b.w	800ba38 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbe2:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <prvAddCurrentTaskToDelayedList+0x6c>)
 800cbe4:	6810      	ldr	r0, [r2, #0]
 800cbe6:	6819      	ldr	r1, [r3, #0]
 800cbe8:	3104      	adds	r1, #4
 800cbea:	f7fe ff25 	bl	800ba38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbee:	4b08      	ldr	r3, [pc, #32]	; (800cc10 <prvAddCurrentTaskToDelayedList+0x70>)
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	42a2      	cmp	r2, r4
 800cbf4:	d900      	bls.n	800cbf8 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800cbf6:	601c      	str	r4, [r3, #0]
}
 800cbf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	2005fab0 	.word	0x2005fab0
 800cc00:	2005f5bc 	.word	0x2005f5bc
 800cc04:	2005fa88 	.word	0x2005fa88
 800cc08:	2005f5c4 	.word	0x2005f5c4
 800cc0c:	2005f5c0 	.word	0x2005f5c0
 800cc10:	2005fa68 	.word	0x2005fa68

0800cc14 <xTaskCreateStatic>:
	{
 800cc14:	b570      	push	{r4, r5, r6, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800cc1c:	b955      	cbnz	r5, 800cc34 <xTaskCreateStatic+0x20>
 800cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc22:	b672      	cpsid	i
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	b662      	cpsie	i
 800cc32:	e7fe      	b.n	800cc32 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800cc34:	b954      	cbnz	r4, 800cc4c <xTaskCreateStatic+0x38>
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	b672      	cpsid	i
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	b662      	cpsie	i
 800cc4a:	e7fe      	b.n	800cc4a <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc4c:	2660      	movs	r6, #96	; 0x60
 800cc4e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc50:	9e05      	ldr	r6, [sp, #20]
 800cc52:	2e60      	cmp	r6, #96	; 0x60
 800cc54:	d00a      	beq.n	800cc6c <xTaskCreateStatic+0x58>
 800cc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5a:	b672      	cpsid	i
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	b662      	cpsie	i
 800cc6a:	e7fe      	b.n	800cc6a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc6c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc6e:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc70:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc72:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc76:	ad04      	add	r5, sp, #16
 800cc78:	9402      	str	r4, [sp, #8]
 800cc7a:	9501      	str	r5, [sp, #4]
 800cc7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cc7e:	9500      	str	r5, [sp, #0]
 800cc80:	f7ff feec 	bl	800ca5c <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc84:	4620      	mov	r0, r4
 800cc86:	f7ff fe59 	bl	800c93c <prvAddNewTaskToReadyList>
	}
 800cc8a:	9804      	ldr	r0, [sp, #16]
 800cc8c:	b006      	add	sp, #24
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}

0800cc90 <xTaskCreate>:
	{
 800cc90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc94:	4607      	mov	r7, r0
 800cc96:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc98:	0090      	lsls	r0, r2, #2
	{
 800cc9a:	4688      	mov	r8, r1
 800cc9c:	4616      	mov	r6, r2
 800cc9e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cca0:	f7fe fde6 	bl	800b870 <pvPortMalloc>
			if( pxStack != NULL )
 800cca4:	4605      	mov	r5, r0
 800cca6:	b1e8      	cbz	r0, 800cce4 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cca8:	2060      	movs	r0, #96	; 0x60
 800ccaa:	f7fe fde1 	bl	800b870 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ccae:	4604      	mov	r4, r0
 800ccb0:	b1a8      	cbz	r0, 800ccde <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ccb2:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800ccb4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccb6:	4632      	mov	r2, r6
 800ccb8:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ccba:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccc0:	9002      	str	r0, [sp, #8]
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	464b      	mov	r3, r9
 800cccc:	f7ff fec6 	bl	800ca5c <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f7ff fe33 	bl	800c93c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccd6:	2001      	movs	r0, #1
	}
 800ccd8:	b005      	add	sp, #20
 800ccda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800ccde:	4628      	mov	r0, r5
 800cce0:	f7fe fe54 	bl	800b98c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800cce8:	e7f6      	b.n	800ccd8 <xTaskCreate+0x48>
	...

0800ccec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ccec:	4a02      	ldr	r2, [pc, #8]	; (800ccf8 <vTaskSuspendAll+0xc>)
 800ccee:	6813      	ldr	r3, [r2, #0]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	6013      	str	r3, [r2, #0]
}
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	2005fa34 	.word	0x2005fa34

0800ccfc <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ccfc:	4b01      	ldr	r3, [pc, #4]	; (800cd04 <xTaskGetTickCount+0x8>)
 800ccfe:	6818      	ldr	r0, [r3, #0]
}
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	2005fab0 	.word	0x2005fab0

0800cd08 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd08:	4b40      	ldr	r3, [pc, #256]	; (800ce0c <xTaskIncrementTick+0x104>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
{
 800cd0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d174      	bne.n	800cdfe <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd14:	4b3e      	ldr	r3, [pc, #248]	; (800ce10 <xTaskIncrementTick+0x108>)
 800cd16:	681d      	ldr	r5, [r3, #0]
 800cd18:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800cd1a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd1c:	b9cd      	cbnz	r5, 800cd52 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800cd1e:	4b3d      	ldr	r3, [pc, #244]	; (800ce14 <xTaskIncrementTick+0x10c>)
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	6812      	ldr	r2, [r2, #0]
 800cd24:	b152      	cbz	r2, 800cd3c <xTaskIncrementTick+0x34>
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	b672      	cpsid	i
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	b662      	cpsie	i
 800cd3a:	e7fe      	b.n	800cd3a <xTaskIncrementTick+0x32>
 800cd3c:	4a36      	ldr	r2, [pc, #216]	; (800ce18 <xTaskIncrementTick+0x110>)
 800cd3e:	6819      	ldr	r1, [r3, #0]
 800cd40:	6810      	ldr	r0, [r2, #0]
 800cd42:	6018      	str	r0, [r3, #0]
 800cd44:	6011      	str	r1, [r2, #0]
 800cd46:	4a35      	ldr	r2, [pc, #212]	; (800ce1c <xTaskIncrementTick+0x114>)
 800cd48:	6813      	ldr	r3, [r2, #0]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	6013      	str	r3, [r2, #0]
 800cd4e:	f7ff fe73 	bl	800ca38 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd52:	4e33      	ldr	r6, [pc, #204]	; (800ce20 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800cd54:	2400      	movs	r4, #0
 800cd56:	4f33      	ldr	r7, [pc, #204]	; (800ce24 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd58:	6833      	ldr	r3, [r6, #0]
 800cd5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800ce30 <xTaskIncrementTick+0x128>
 800cd5e:	42ab      	cmp	r3, r5
 800cd60:	d911      	bls.n	800cd86 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd62:	f8d8 3000 	ldr.w	r3, [r8]
 800cd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd68:	2314      	movs	r3, #20
 800cd6a:	4353      	muls	r3, r2
 800cd6c:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	bf28      	it	cs
 800cd72:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800cd74:	4b2c      	ldr	r3, [pc, #176]	; (800ce28 <xTaskIncrementTick+0x120>)
 800cd76:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800cd78:	2b00      	cmp	r3, #0
}
 800cd7a:	bf0c      	ite	eq
 800cd7c:	4620      	moveq	r0, r4
 800cd7e:	2001      	movne	r0, #1
 800cd80:	b003      	add	sp, #12
 800cd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd86:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800ce14 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800cd8a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800ce34 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd8e:	f8d9 3000 	ldr.w	r3, [r9]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	b91b      	cbnz	r3, 800cd9e <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd96:	f04f 33ff 	mov.w	r3, #4294967295
 800cd9a:	6033      	str	r3, [r6, #0]
					break;
 800cd9c:	e7e1      	b.n	800cd62 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd9e:	f8d9 3000 	ldr.w	r3, [r9]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cda8:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800cdac:	4295      	cmp	r5, r2
 800cdae:	d201      	bcs.n	800cdb4 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800cdb0:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cdb2:	e7d6      	b.n	800cd62 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdb4:	f10b 0104 	add.w	r1, fp, #4
 800cdb8:	4608      	mov	r0, r1
 800cdba:	9101      	str	r1, [sp, #4]
 800cdbc:	f7fe fe53 	bl	800ba66 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cdc0:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800cdc4:	9901      	ldr	r1, [sp, #4]
 800cdc6:	b122      	cbz	r2, 800cdd2 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdc8:	f10b 0018 	add.w	r0, fp, #24
 800cdcc:	f7fe fe4b 	bl	800ba66 <uxListRemove>
 800cdd0:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800cdd2:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800cdd6:	f8da 2000 	ldr.w	r2, [sl]
 800cdda:	4290      	cmp	r0, r2
 800cddc:	d901      	bls.n	800cde2 <xTaskIncrementTick+0xda>
 800cdde:	f8ca 0000 	str.w	r0, [sl]
 800cde2:	2314      	movs	r3, #20
 800cde4:	fb03 7000 	mla	r0, r3, r0, r7
 800cde8:	f7fe fe1a 	bl	800ba20 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdec:	f8d8 1000 	ldr.w	r1, [r8]
 800cdf0:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800cdf4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	bf28      	it	cs
 800cdfa:	2401      	movcs	r4, #1
 800cdfc:	e7c7      	b.n	800cd8e <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800cdfe:	4a0b      	ldr	r2, [pc, #44]	; (800ce2c <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800ce00:	2400      	movs	r4, #0
		++uxPendedTicks;
 800ce02:	6813      	ldr	r3, [r2, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	6013      	str	r3, [r2, #0]
 800ce08:	e7b4      	b.n	800cd74 <xTaskIncrementTick+0x6c>
 800ce0a:	bf00      	nop
 800ce0c:	2005fa34 	.word	0x2005fa34
 800ce10:	2005fab0 	.word	0x2005fab0
 800ce14:	2005f5c0 	.word	0x2005f5c0
 800ce18:	2005f5c4 	.word	0x2005f5c4
 800ce1c:	2005fa6c 	.word	0x2005fa6c
 800ce20:	2005fa68 	.word	0x2005fa68
 800ce24:	2005f5c8 	.word	0x2005f5c8
 800ce28:	2005fab4 	.word	0x2005fab4
 800ce2c:	2005fa30 	.word	0x2005fa30
 800ce30:	2005f5bc 	.word	0x2005f5bc
 800ce34:	2005fa3c 	.word	0x2005fa3c

0800ce38 <xTaskResumeAll>:
{
 800ce38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800ce3a:	4c31      	ldr	r4, [pc, #196]	; (800cf00 <xTaskResumeAll+0xc8>)
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	b953      	cbnz	r3, 800ce56 <xTaskResumeAll+0x1e>
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	b672      	cpsid	i
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	b662      	cpsie	i
 800ce54:	e7fe      	b.n	800ce54 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800ce56:	f7fe fe7d 	bl	800bb54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ce5a:	6823      	ldr	r3, [r4, #0]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce60:	6824      	ldr	r4, [r4, #0]
 800ce62:	b12c      	cbz	r4, 800ce70 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800ce64:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ce66:	f7fe fe9b 	bl	800bba0 <vPortExitCritical>
}
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	b003      	add	sp, #12
 800ce6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce70:	4b24      	ldr	r3, [pc, #144]	; (800cf04 <xTaskResumeAll+0xcc>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d0f5      	beq.n	800ce64 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce78:	4d23      	ldr	r5, [pc, #140]	; (800cf08 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800ce7a:	4e24      	ldr	r6, [pc, #144]	; (800cf0c <xTaskResumeAll+0xd4>)
 800ce7c:	4f24      	ldr	r7, [pc, #144]	; (800cf10 <xTaskResumeAll+0xd8>)
 800ce7e:	e01e      	b.n	800cebe <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce80:	68eb      	ldr	r3, [r5, #12]
 800ce82:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce84:	f104 0018 	add.w	r0, r4, #24
 800ce88:	f7fe fded 	bl	800ba66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce8c:	1d21      	adds	r1, r4, #4
 800ce8e:	4608      	mov	r0, r1
 800ce90:	9101      	str	r1, [sp, #4]
 800ce92:	f7fe fde8 	bl	800ba66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce98:	6832      	ldr	r2, [r6, #0]
 800ce9a:	9901      	ldr	r1, [sp, #4]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d900      	bls.n	800cea2 <xTaskResumeAll+0x6a>
 800cea0:	6033      	str	r3, [r6, #0]
 800cea2:	2014      	movs	r0, #20
 800cea4:	fb00 7003 	mla	r0, r0, r3, r7
 800cea8:	f7fe fdba 	bl	800ba20 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ceac:	4b19      	ldr	r3, [pc, #100]	; (800cf14 <xTaskResumeAll+0xdc>)
 800ceae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d302      	bcc.n	800cebe <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800ceb8:	4b17      	ldr	r3, [pc, #92]	; (800cf18 <xTaskResumeAll+0xe0>)
 800ceba:	2201      	movs	r2, #1
 800cebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cebe:	682b      	ldr	r3, [r5, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1dd      	bne.n	800ce80 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800cec4:	b10c      	cbz	r4, 800ceca <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800cec6:	f7ff fdb7 	bl	800ca38 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ceca:	4d14      	ldr	r5, [pc, #80]	; (800cf1c <xTaskResumeAll+0xe4>)
 800cecc:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cece:	b144      	cbz	r4, 800cee2 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800ced0:	4e11      	ldr	r6, [pc, #68]	; (800cf18 <xTaskResumeAll+0xe0>)
 800ced2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800ced4:	f7ff ff18 	bl	800cd08 <xTaskIncrementTick>
 800ced8:	b100      	cbz	r0, 800cedc <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800ceda:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cedc:	3c01      	subs	r4, #1
 800cede:	d1f9      	bne.n	800ced4 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800cee0:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800cee2:	4b0d      	ldr	r3, [pc, #52]	; (800cf18 <xTaskResumeAll+0xe0>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0bc      	beq.n	800ce64 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800ceea:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <xTaskResumeAll+0xe8>)
 800ceec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800cefa:	2401      	movs	r4, #1
 800cefc:	e7b3      	b.n	800ce66 <xTaskResumeAll+0x2e>
 800cefe:	bf00      	nop
 800cf00:	2005fa34 	.word	0x2005fa34
 800cf04:	2005fa28 	.word	0x2005fa28
 800cf08:	2005fa70 	.word	0x2005fa70
 800cf0c:	2005fa3c 	.word	0x2005fa3c
 800cf10:	2005f5c8 	.word	0x2005f5c8
 800cf14:	2005f5bc 	.word	0x2005f5bc
 800cf18:	2005fab4 	.word	0x2005fab4
 800cf1c:	2005fa30 	.word	0x2005fa30
 800cf20:	e000ed04 	.word	0xe000ed04

0800cf24 <vTaskDelay>:
	{
 800cf24:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf26:	b940      	cbnz	r0, 800cf3a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800cf28:	4b0f      	ldr	r3, [pc, #60]	; (800cf68 <vTaskDelay+0x44>)
 800cf2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	f3bf 8f6f 	isb	sy
	}
 800cf38:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800cf3a:	4b0c      	ldr	r3, [pc, #48]	; (800cf6c <vTaskDelay+0x48>)
 800cf3c:	6819      	ldr	r1, [r3, #0]
 800cf3e:	b151      	cbz	r1, 800cf56 <vTaskDelay+0x32>
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	b672      	cpsid	i
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	b662      	cpsie	i
 800cf54:	e7fe      	b.n	800cf54 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800cf56:	f7ff fec9 	bl	800ccec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf5a:	f7ff fe21 	bl	800cba0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800cf5e:	f7ff ff6b 	bl	800ce38 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d0e0      	beq.n	800cf28 <vTaskDelay+0x4>
 800cf66:	e7e7      	b.n	800cf38 <vTaskDelay+0x14>
 800cf68:	e000ed04 	.word	0xe000ed04
 800cf6c:	2005fa34 	.word	0x2005fa34

0800cf70 <vTaskSetApplicationTaskTag>:
	{
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	460d      	mov	r5, r1
		if( xTask == NULL )
 800cf74:	4604      	mov	r4, r0
 800cf76:	b908      	cbnz	r0, 800cf7c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800cf78:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <vTaskSetApplicationTaskTag+0x1c>)
 800cf7a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800cf7c:	f7fe fdea 	bl	800bb54 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800cf80:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800cf82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800cf86:	f7fe be0b 	b.w	800bba0 <vPortExitCritical>
 800cf8a:	bf00      	nop
 800cf8c:	2005f5bc 	.word	0x2005f5bc

0800cf90 <xTaskCallApplicationTaskHook>:
	{
 800cf90:	4603      	mov	r3, r0
 800cf92:	4608      	mov	r0, r1
		if( xTask == NULL )
 800cf94:	b90b      	cbnz	r3, 800cf9a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800cf96:	4b03      	ldr	r3, [pc, #12]	; (800cfa4 <xTaskCallApplicationTaskHook+0x14>)
 800cf98:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800cf9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf9c:	b103      	cbz	r3, 800cfa0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800cf9e:	4718      	bx	r3
	}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	4770      	bx	lr
 800cfa4:	2005f5bc 	.word	0x2005f5bc

0800cfa8 <vTaskStartScheduler>:
{
 800cfa8:	b510      	push	{r4, lr}
 800cfaa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfac:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfae:	aa07      	add	r2, sp, #28
 800cfb0:	a906      	add	r1, sp, #24
 800cfb2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfb4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfb8:	f7fe fc1e 	bl	800b7f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfbc:	9b05      	ldr	r3, [sp, #20]
 800cfbe:	9a07      	ldr	r2, [sp, #28]
 800cfc0:	9302      	str	r3, [sp, #8]
 800cfc2:	9b06      	ldr	r3, [sp, #24]
 800cfc4:	4919      	ldr	r1, [pc, #100]	; (800d02c <vTaskStartScheduler+0x84>)
 800cfc6:	481a      	ldr	r0, [pc, #104]	; (800d030 <vTaskStartScheduler+0x88>)
 800cfc8:	e9cd 4300 	strd	r4, r3, [sp]
 800cfcc:	4623      	mov	r3, r4
 800cfce:	f7ff fe21 	bl	800cc14 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800cfd2:	b1e0      	cbz	r0, 800d00e <vTaskStartScheduler+0x66>
			xReturn = xTimerCreateTimerTask();
 800cfd4:	f000 faa6 	bl	800d524 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800cfd8:	2801      	cmp	r0, #1
 800cfda:	d11a      	bne.n	800d012 <vTaskStartScheduler+0x6a>
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	b672      	cpsid	i
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800cff0:	4b10      	ldr	r3, [pc, #64]	; (800d034 <vTaskStartScheduler+0x8c>)
 800cff2:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 800cff6:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800cff8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cffa:	4b0f      	ldr	r3, [pc, #60]	; (800d038 <vTaskStartScheduler+0x90>)
 800cffc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cffe:	4b0f      	ldr	r3, [pc, #60]	; (800d03c <vTaskStartScheduler+0x94>)
 800d000:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800d002:	4b0f      	ldr	r3, [pc, #60]	; (800d040 <vTaskStartScheduler+0x98>)
 800d004:	6818      	ldr	r0, [r3, #0]
 800d006:	f7ff ffc3 	bl	800cf90 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 800d00a:	f7fe fe45 	bl	800bc98 <xPortStartScheduler>
}
 800d00e:	b008      	add	sp, #32
 800d010:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d012:	3001      	adds	r0, #1
 800d014:	d1fb      	bne.n	800d00e <vTaskStartScheduler+0x66>
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	b672      	cpsid	i
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	b662      	cpsie	i
 800d02a:	e7fe      	b.n	800d02a <vTaskStartScheduler+0x82>
 800d02c:	08029605 	.word	0x08029605
 800d030:	0800cb39 	.word	0x0800cb39
 800d034:	2005fa68 	.word	0x2005fa68
 800d038:	2005fa84 	.word	0x2005fa84
 800d03c:	2005fab0 	.word	0x2005fab0
 800d040:	2005f5bc 	.word	0x2005f5bc

0800d044 <vTaskSwitchContext>:
{
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d046:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <vTaskSwitchContext+0x7c>)
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	4b1e      	ldr	r3, [pc, #120]	; (800d0c4 <vTaskSwitchContext+0x80>)
 800d04c:	b112      	cbz	r2, 800d054 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800d04e:	2201      	movs	r2, #1
 800d050:	601a      	str	r2, [r3, #0]
}
 800d052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800d054:	4e1c      	ldr	r6, [pc, #112]	; (800d0c8 <vTaskSwitchContext+0x84>)
 800d056:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 800d058:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800d05a:	6830      	ldr	r0, [r6, #0]
 800d05c:	f7ff ff98 	bl	800cf90 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d060:	4d1a      	ldr	r5, [pc, #104]	; (800d0cc <vTaskSwitchContext+0x88>)
 800d062:	4a1b      	ldr	r2, [pc, #108]	; (800d0d0 <vTaskSwitchContext+0x8c>)
 800d064:	f04f 0c14 	mov.w	ip, #20
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	4617      	mov	r7, r2
 800d06c:	fb0c f103 	mul.w	r1, ip, r3
 800d070:	5854      	ldr	r4, [r2, r1]
 800d072:	1850      	adds	r0, r2, r1
 800d074:	b1ac      	cbz	r4, 800d0a2 <vTaskSwitchContext+0x5e>
 800d076:	6844      	ldr	r4, [r0, #4]
 800d078:	3108      	adds	r1, #8
 800d07a:	6864      	ldr	r4, [r4, #4]
 800d07c:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800d07e:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d080:	4294      	cmp	r4, r2
 800d082:	6044      	str	r4, [r0, #4]
 800d084:	bf04      	itt	eq
 800d086:	6862      	ldreq	r2, [r4, #4]
 800d088:	6042      	streq	r2, [r0, #4]
 800d08a:	2214      	movs	r2, #20
 800d08c:	fb02 7203 	mla	r2, r2, r3, r7
 800d090:	6852      	ldr	r2, [r2, #4]
 800d092:	68d2      	ldr	r2, [r2, #12]
 800d094:	6032      	str	r2, [r6, #0]
 800d096:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 800d098:	6830      	ldr	r0, [r6, #0]
}
 800d09a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800d09e:	f7ff bf77 	b.w	800cf90 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0a2:	b953      	cbnz	r3, 800d0ba <vTaskSwitchContext+0x76>
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	b672      	cpsid	i
 800d0aa:	f383 8811 	msr	BASEPRI, r3
 800d0ae:	f3bf 8f6f 	isb	sy
 800d0b2:	f3bf 8f4f 	dsb	sy
 800d0b6:	b662      	cpsie	i
 800d0b8:	e7fe      	b.n	800d0b8 <vTaskSwitchContext+0x74>
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	e7d6      	b.n	800d06c <vTaskSwitchContext+0x28>
 800d0be:	bf00      	nop
 800d0c0:	2005fa34 	.word	0x2005fa34
 800d0c4:	2005fab4 	.word	0x2005fab4
 800d0c8:	2005f5bc 	.word	0x2005f5bc
 800d0cc:	2005fa3c 	.word	0x2005fa3c
 800d0d0:	2005f5c8 	.word	0x2005f5c8

0800d0d4 <vTaskPlaceOnEventList>:
{
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800d0d8:	b950      	cbnz	r0, 800d0f0 <vTaskPlaceOnEventList+0x1c>
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	b672      	cpsid	i
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	b662      	cpsie	i
 800d0ee:	e7fe      	b.n	800d0ee <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0f0:	4b05      	ldr	r3, [pc, #20]	; (800d108 <vTaskPlaceOnEventList+0x34>)
 800d0f2:	6819      	ldr	r1, [r3, #0]
 800d0f4:	3118      	adds	r1, #24
 800d0f6:	f7fe fc9f 	bl	800ba38 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	2101      	movs	r1, #1
}
 800d0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d102:	f7ff bd4d 	b.w	800cba0 <prvAddCurrentTaskToDelayedList>
 800d106:	bf00      	nop
 800d108:	2005f5bc 	.word	0x2005f5bc

0800d10c <vTaskPlaceOnEventListRestricted>:
	{
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	460d      	mov	r5, r1
 800d110:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800d112:	b950      	cbnz	r0, 800d12a <vTaskPlaceOnEventListRestricted+0x1e>
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	b672      	cpsid	i
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	b662      	cpsie	i
 800d128:	e7fe      	b.n	800d128 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d12a:	4b07      	ldr	r3, [pc, #28]	; (800d148 <vTaskPlaceOnEventListRestricted+0x3c>)
 800d12c:	6819      	ldr	r1, [r3, #0]
 800d12e:	3118      	adds	r1, #24
 800d130:	f7fe fc76 	bl	800ba20 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800d134:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d136:	4621      	mov	r1, r4
 800d138:	bf0c      	ite	eq
 800d13a:	4628      	moveq	r0, r5
 800d13c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800d140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d144:	f7ff bd2c 	b.w	800cba0 <prvAddCurrentTaskToDelayedList>
 800d148:	2005f5bc 	.word	0x2005f5bc

0800d14c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d14c:	68c3      	ldr	r3, [r0, #12]
{
 800d14e:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d150:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d152:	b954      	cbnz	r4, 800d16a <xTaskRemoveFromEventList+0x1e>
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	b672      	cpsid	i
 800d15a:	f383 8811 	msr	BASEPRI, r3
 800d15e:	f3bf 8f6f 	isb	sy
 800d162:	f3bf 8f4f 	dsb	sy
 800d166:	b662      	cpsie	i
 800d168:	e7fe      	b.n	800d168 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d16a:	f104 0118 	add.w	r1, r4, #24
 800d16e:	4608      	mov	r0, r1
 800d170:	9101      	str	r1, [sp, #4]
 800d172:	f7fe fc78 	bl	800ba66 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d176:	4b12      	ldr	r3, [pc, #72]	; (800d1c0 <xTaskRemoveFromEventList+0x74>)
 800d178:	9901      	ldr	r1, [sp, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	b9e3      	cbnz	r3, 800d1b8 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d17e:	1d21      	adds	r1, r4, #4
 800d180:	4608      	mov	r0, r1
 800d182:	9101      	str	r1, [sp, #4]
 800d184:	f7fe fc6f 	bl	800ba66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d188:	4a0e      	ldr	r2, [pc, #56]	; (800d1c4 <xTaskRemoveFromEventList+0x78>)
 800d18a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d18c:	6810      	ldr	r0, [r2, #0]
 800d18e:	9901      	ldr	r1, [sp, #4]
 800d190:	4283      	cmp	r3, r0
 800d192:	d900      	bls.n	800d196 <xTaskRemoveFromEventList+0x4a>
 800d194:	6013      	str	r3, [r2, #0]
 800d196:	4a0c      	ldr	r2, [pc, #48]	; (800d1c8 <xTaskRemoveFromEventList+0x7c>)
 800d198:	2014      	movs	r0, #20
 800d19a:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d19e:	f7fe fc3f 	bl	800ba20 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1a2:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <xTaskRemoveFromEventList+0x80>)
 800d1a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d906      	bls.n	800d1bc <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800d1ae:	2001      	movs	r0, #1
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <xTaskRemoveFromEventList+0x84>)
 800d1b2:	6018      	str	r0, [r3, #0]
}
 800d1b4:	b002      	add	sp, #8
 800d1b6:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d1b8:	4806      	ldr	r0, [pc, #24]	; (800d1d4 <xTaskRemoveFromEventList+0x88>)
 800d1ba:	e7f0      	b.n	800d19e <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800d1bc:	2000      	movs	r0, #0
	return xReturn;
 800d1be:	e7f9      	b.n	800d1b4 <xTaskRemoveFromEventList+0x68>
 800d1c0:	2005fa34 	.word	0x2005fa34
 800d1c4:	2005fa3c 	.word	0x2005fa3c
 800d1c8:	2005f5c8 	.word	0x2005f5c8
 800d1cc:	2005f5bc 	.word	0x2005f5bc
 800d1d0:	2005fab4 	.word	0x2005fab4
 800d1d4:	2005fa70 	.word	0x2005fa70

0800d1d8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1d8:	4b03      	ldr	r3, [pc, #12]	; (800d1e8 <vTaskInternalSetTimeOutState+0x10>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1de:	4b03      	ldr	r3, [pc, #12]	; (800d1ec <vTaskInternalSetTimeOutState+0x14>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6043      	str	r3, [r0, #4]
}
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	2005fa6c 	.word	0x2005fa6c
 800d1ec:	2005fab0 	.word	0x2005fab0

0800d1f0 <xTaskCheckForTimeOut>:
{
 800d1f0:	b570      	push	{r4, r5, r6, lr}
 800d1f2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	b950      	cbnz	r0, 800d20e <xTaskCheckForTimeOut+0x1e>
 800d1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fc:	b672      	cpsid	i
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	b662      	cpsie	i
 800d20c:	e7fe      	b.n	800d20c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800d20e:	b951      	cbnz	r1, 800d226 <xTaskCheckForTimeOut+0x36>
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	b672      	cpsid	i
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	b662      	cpsie	i
 800d224:	e7fe      	b.n	800d224 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800d226:	f7fe fc95 	bl	800bb54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d22a:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <xTaskCheckForTimeOut+0x78>)
 800d22c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	d010      	beq.n	800d256 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d234:	480d      	ldr	r0, [pc, #52]	; (800d26c <xTaskCheckForTimeOut+0x7c>)
 800d236:	682e      	ldr	r6, [r5, #0]
 800d238:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d23a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d23c:	4286      	cmp	r6, r0
 800d23e:	d001      	beq.n	800d244 <xTaskCheckForTimeOut+0x54>
 800d240:	428a      	cmp	r2, r1
 800d242:	d90f      	bls.n	800d264 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d244:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d246:	4283      	cmp	r3, r0
 800d248:	d90a      	bls.n	800d260 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800d24a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d24c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800d24e:	4413      	add	r3, r2
 800d250:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d252:	f7ff ffc1 	bl	800d1d8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800d256:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d258:	f7fe fca2 	bl	800bba0 <vPortExitCritical>
}
 800d25c:	4620      	mov	r0, r4
 800d25e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800d260:	2300      	movs	r3, #0
 800d262:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d264:	2401      	movs	r4, #1
 800d266:	e7f7      	b.n	800d258 <xTaskCheckForTimeOut+0x68>
 800d268:	2005fab0 	.word	0x2005fab0
 800d26c:	2005fa6c 	.word	0x2005fa6c

0800d270 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d270:	4b01      	ldr	r3, [pc, #4]	; (800d278 <vTaskMissedYield+0x8>)
 800d272:	2201      	movs	r2, #1
 800d274:	601a      	str	r2, [r3, #0]
}
 800d276:	4770      	bx	lr
 800d278:	2005fab4 	.word	0x2005fab4

0800d27c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800d27c:	4b01      	ldr	r3, [pc, #4]	; (800d284 <xTaskGetCurrentTaskHandle+0x8>)
 800d27e:	6818      	ldr	r0, [r3, #0]
	}
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	2005f5bc 	.word	0x2005f5bc

0800d288 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d288:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <xTaskGetSchedulerState+0x18>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	b133      	cbz	r3, 800d29c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d28e:	4b05      	ldr	r3, [pc, #20]	; (800d2a4 <xTaskGetSchedulerState+0x1c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800d294:	bf0c      	ite	eq
 800d296:	2002      	moveq	r0, #2
 800d298:	2000      	movne	r0, #0
 800d29a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d29c:	2001      	movs	r0, #1
	}
 800d29e:	4770      	bx	lr
 800d2a0:	2005fa84 	.word	0x2005fa84
 800d2a4:	2005fa34 	.word	0x2005fa34

0800d2a8 <xTaskPriorityInherit>:
	{
 800d2a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	b348      	cbz	r0, 800d302 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d2ae:	4a1c      	ldr	r2, [pc, #112]	; (800d320 <xTaskPriorityInherit+0x78>)
 800d2b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d2b2:	6811      	ldr	r1, [r2, #0]
 800d2b4:	4616      	mov	r6, r2
 800d2b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800d2b8:	428b      	cmp	r3, r1
 800d2ba:	d228      	bcs.n	800d30e <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2bc:	6982      	ldr	r2, [r0, #24]
 800d2be:	2a00      	cmp	r2, #0
 800d2c0:	db04      	blt.n	800d2cc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2c2:	6832      	ldr	r2, [r6, #0]
 800d2c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d2c6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d2ca:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d2cc:	2214      	movs	r2, #20
 800d2ce:	4d15      	ldr	r5, [pc, #84]	; (800d324 <xTaskPriorityInherit+0x7c>)
 800d2d0:	fb02 5303 	mla	r3, r2, r3, r5
 800d2d4:	6962      	ldr	r2, [r4, #20]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d115      	bne.n	800d306 <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2da:	1d21      	adds	r1, r4, #4
 800d2dc:	4608      	mov	r0, r1
 800d2de:	9101      	str	r1, [sp, #4]
 800d2e0:	f7fe fbc1 	bl	800ba66 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2e4:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2e6:	4a10      	ldr	r2, [pc, #64]	; (800d328 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2ea:	6810      	ldr	r0, [r2, #0]
 800d2ec:	9901      	ldr	r1, [sp, #4]
 800d2ee:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2f0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2f2:	d900      	bls.n	800d2f6 <xTaskPriorityInherit+0x4e>
 800d2f4:	6013      	str	r3, [r2, #0]
 800d2f6:	2014      	movs	r0, #20
 800d2f8:	fb00 5003 	mla	r0, r0, r3, r5
 800d2fc:	f7fe fb90 	bl	800ba20 <vListInsertEnd>
				xReturn = pdTRUE;
 800d300:	2001      	movs	r0, #1
	}
 800d302:	b002      	add	sp, #8
 800d304:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d306:	6833      	ldr	r3, [r6, #0]
 800d308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d30c:	e7f8      	b.n	800d300 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d30e:	6813      	ldr	r3, [r2, #0]
 800d310:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d312:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d314:	42a0      	cmp	r0, r4
 800d316:	bf2c      	ite	cs
 800d318:	2000      	movcs	r0, #0
 800d31a:	2001      	movcc	r0, #1
 800d31c:	e7f1      	b.n	800d302 <xTaskPriorityInherit+0x5a>
 800d31e:	bf00      	nop
 800d320:	2005f5bc 	.word	0x2005f5bc
 800d324:	2005f5c8 	.word	0x2005f5c8
 800d328:	2005fa3c 	.word	0x2005fa3c

0800d32c <xTaskPriorityDisinherit>:
	{
 800d32c:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800d32e:	b910      	cbnz	r0, 800d336 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800d330:	2000      	movs	r0, #0
	}
 800d332:	b002      	add	sp, #8
 800d334:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800d336:	4b1e      	ldr	r3, [pc, #120]	; (800d3b0 <xTaskPriorityDisinherit+0x84>)
 800d338:	681c      	ldr	r4, [r3, #0]
 800d33a:	4284      	cmp	r4, r0
 800d33c:	d00a      	beq.n	800d354 <xTaskPriorityDisinherit+0x28>
 800d33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d342:	b672      	cpsid	i
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	b662      	cpsie	i
 800d352:	e7fe      	b.n	800d352 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800d354:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d356:	b953      	cbnz	r3, 800d36e <xTaskPriorityDisinherit+0x42>
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	b672      	cpsid	i
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	b662      	cpsie	i
 800d36c:	e7fe      	b.n	800d36c <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d36e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800d370:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d372:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800d374:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d376:	4291      	cmp	r1, r2
 800d378:	d0da      	beq.n	800d330 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1d8      	bne.n	800d330 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d37e:	1d21      	adds	r1, r4, #4
 800d380:	4608      	mov	r0, r1
 800d382:	9101      	str	r1, [sp, #4]
 800d384:	f7fe fb6f 	bl	800ba66 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d388:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800d38a:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d38c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d390:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d392:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d394:	4a07      	ldr	r2, [pc, #28]	; (800d3b4 <xTaskPriorityDisinherit+0x88>)
 800d396:	6810      	ldr	r0, [r2, #0]
 800d398:	4283      	cmp	r3, r0
 800d39a:	d900      	bls.n	800d39e <xTaskPriorityDisinherit+0x72>
 800d39c:	6013      	str	r3, [r2, #0]
 800d39e:	4a06      	ldr	r2, [pc, #24]	; (800d3b8 <xTaskPriorityDisinherit+0x8c>)
 800d3a0:	2014      	movs	r0, #20
 800d3a2:	fb00 2003 	mla	r0, r0, r3, r2
 800d3a6:	f7fe fb3b 	bl	800ba20 <vListInsertEnd>
					xReturn = pdTRUE;
 800d3aa:	2001      	movs	r0, #1
		return xReturn;
 800d3ac:	e7c1      	b.n	800d332 <xTaskPriorityDisinherit+0x6>
 800d3ae:	bf00      	nop
 800d3b0:	2005f5bc 	.word	0x2005f5bc
 800d3b4:	2005fa3c 	.word	0x2005fa3c
 800d3b8:	2005f5c8 	.word	0x2005f5c8

0800d3bc <vTaskPriorityDisinheritAfterTimeout>:
	{
 800d3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800d3be:	4604      	mov	r4, r0
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d048      	beq.n	800d456 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3c4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800d3c6:	b952      	cbnz	r2, 800d3de <vTaskPriorityDisinheritAfterTimeout+0x22>
 800d3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3cc:	b672      	cpsid	i
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	b662      	cpsie	i
 800d3dc:	e7fe      	b.n	800d3dc <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d3de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d3e0:	4299      	cmp	r1, r3
 800d3e2:	bf38      	it	cc
 800d3e4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d3e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d3e8:	428b      	cmp	r3, r1
 800d3ea:	d034      	beq.n	800d456 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d3ec:	2a01      	cmp	r2, #1
 800d3ee:	d132      	bne.n	800d456 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800d3f0:	4a1a      	ldr	r2, [pc, #104]	; (800d45c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800d3f2:	6812      	ldr	r2, [r2, #0]
 800d3f4:	4282      	cmp	r2, r0
 800d3f6:	d10a      	bne.n	800d40e <vTaskPriorityDisinheritAfterTimeout+0x52>
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	b672      	cpsid	i
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	b662      	cpsie	i
 800d40c:	e7fe      	b.n	800d40c <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d40e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d410:	4d13      	ldr	r5, [pc, #76]	; (800d460 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d412:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d414:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800d418:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d41a:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d41e:	bfa8      	it	ge
 800d420:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d424:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d426:	bfa8      	it	ge
 800d428:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d113      	bne.n	800d456 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d42e:	1d01      	adds	r1, r0, #4
 800d430:	4608      	mov	r0, r1
 800d432:	9101      	str	r1, [sp, #4]
 800d434:	f7fe fb17 	bl	800ba66 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d438:	4a0a      	ldr	r2, [pc, #40]	; (800d464 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800d43a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d43c:	6810      	ldr	r0, [r2, #0]
 800d43e:	9901      	ldr	r1, [sp, #4]
 800d440:	4283      	cmp	r3, r0
 800d442:	d900      	bls.n	800d446 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800d444:	6013      	str	r3, [r2, #0]
 800d446:	2014      	movs	r0, #20
 800d448:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800d44c:	b003      	add	sp, #12
 800d44e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800d452:	f7fe bae5 	b.w	800ba20 <vListInsertEnd>
	}
 800d456:	b003      	add	sp, #12
 800d458:	bd30      	pop	{r4, r5, pc}
 800d45a:	bf00      	nop
 800d45c:	2005f5bc 	.word	0x2005f5bc
 800d460:	2005f5c8 	.word	0x2005f5c8
 800d464:	2005fa3c 	.word	0x2005fa3c

0800d468 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d468:	4b04      	ldr	r3, [pc, #16]	; (800d47c <pvTaskIncrementMutexHeldCount+0x14>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	b11a      	cbz	r2, 800d476 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d46e:	6819      	ldr	r1, [r3, #0]
 800d470:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800d472:	3201      	adds	r2, #1
 800d474:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800d476:	6818      	ldr	r0, [r3, #0]
	}
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	2005f5bc 	.word	0x2005f5bc

0800d480 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800d482:	4c11      	ldr	r4, [pc, #68]	; (800d4c8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800d484:	f7fe fb66 	bl	800bb54 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800d488:	6825      	ldr	r5, [r4, #0]
 800d48a:	b9bd      	cbnz	r5, 800d4bc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d48c:	4f0f      	ldr	r7, [pc, #60]	; (800d4cc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800d48e:	4e10      	ldr	r6, [pc, #64]	; (800d4d0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800d490:	4638      	mov	r0, r7
 800d492:	f7fe fab7 	bl	800ba04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d496:	4630      	mov	r0, r6
 800d498:	f7fe fab4 	bl	800ba04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d49c:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d49e:	4a0e      	ldr	r2, [pc, #56]	; (800d4d8 <prvCheckForValidListAndQueue+0x58>)
 800d4a0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800d4a2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d4a4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800d4a6:	4b0d      	ldr	r3, [pc, #52]	; (800d4dc <prvCheckForValidListAndQueue+0x5c>)
 800d4a8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <prvCheckForValidListAndQueue+0x60>)
 800d4ac:	9500      	str	r5, [sp, #0]
 800d4ae:	f7fe fd59 	bl	800bf64 <xQueueGenericCreateStatic>
 800d4b2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4b4:	b110      	cbz	r0, 800d4bc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4b6:	490b      	ldr	r1, [pc, #44]	; (800d4e4 <prvCheckForValidListAndQueue+0x64>)
 800d4b8:	f7ff f9dc 	bl	800c874 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800d4bc:	b003      	add	sp, #12
 800d4be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800d4c2:	f7fe bb6d 	b.w	800bba0 <vPortExitCritical>
 800d4c6:	bf00      	nop
 800d4c8:	2005fbdc 	.word	0x2005fbdc
 800d4cc:	2005fb60 	.word	0x2005fb60
 800d4d0:	2005fb74 	.word	0x2005fb74
 800d4d4:	2005fab8 	.word	0x2005fab8
 800d4d8:	2005fac0 	.word	0x2005fac0
 800d4dc:	2005fabc 	.word	0x2005fabc
 800d4e0:	2005fb8c 	.word	0x2005fb8c
 800d4e4:	0802960a 	.word	0x0802960a

0800d4e8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800d4e8:	4291      	cmp	r1, r2
{
 800d4ea:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d4ec:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4ee:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800d4f0:	d80a      	bhi.n	800d508 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4f2:	1ad2      	subs	r2, r2, r3
 800d4f4:	6983      	ldr	r3, [r0, #24]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d20d      	bcs.n	800d516 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d4fa:	1d01      	adds	r1, r0, #4
 800d4fc:	4b07      	ldr	r3, [pc, #28]	; (800d51c <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4fe:	6818      	ldr	r0, [r3, #0]
 800d500:	f7fe fa9a 	bl	800ba38 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d504:	2000      	movs	r0, #0
}
 800d506:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d508:	429a      	cmp	r2, r3
 800d50a:	d201      	bcs.n	800d510 <prvInsertTimerInActiveList+0x28>
 800d50c:	4299      	cmp	r1, r3
 800d50e:	d202      	bcs.n	800d516 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d510:	1d01      	adds	r1, r0, #4
 800d512:	4b03      	ldr	r3, [pc, #12]	; (800d520 <prvInsertTimerInActiveList+0x38>)
 800d514:	e7f3      	b.n	800d4fe <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800d516:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d518:	e7f5      	b.n	800d506 <prvInsertTimerInActiveList+0x1e>
 800d51a:	bf00      	nop
 800d51c:	2005fabc 	.word	0x2005fabc
 800d520:	2005fab8 	.word	0x2005fab8

0800d524 <xTimerCreateTimerTask>:
{
 800d524:	b510      	push	{r4, lr}
 800d526:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d528:	f7ff ffaa 	bl	800d480 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d52c:	4b13      	ldr	r3, [pc, #76]	; (800d57c <xTimerCreateTimerTask+0x58>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	b1b3      	cbz	r3, 800d560 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d532:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d534:	aa07      	add	r2, sp, #28
 800d536:	a906      	add	r1, sp, #24
 800d538:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d53a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d53e:	f7fe f967 	bl	800b810 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d542:	9b05      	ldr	r3, [sp, #20]
 800d544:	9a07      	ldr	r2, [sp, #28]
 800d546:	9302      	str	r3, [sp, #8]
 800d548:	9b06      	ldr	r3, [sp, #24]
 800d54a:	490d      	ldr	r1, [pc, #52]	; (800d580 <xTimerCreateTimerTask+0x5c>)
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	2302      	movs	r3, #2
 800d550:	480c      	ldr	r0, [pc, #48]	; (800d584 <xTimerCreateTimerTask+0x60>)
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	4623      	mov	r3, r4
 800d556:	f7ff fb5d 	bl	800cc14 <xTaskCreateStatic>
 800d55a:	4b0b      	ldr	r3, [pc, #44]	; (800d588 <xTimerCreateTimerTask+0x64>)
 800d55c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d55e:	b950      	cbnz	r0, 800d576 <xTimerCreateTimerTask+0x52>
 800d560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d564:	b672      	cpsid	i
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	b662      	cpsie	i
	configASSERT( xReturn );
 800d574:	e7fe      	b.n	800d574 <xTimerCreateTimerTask+0x50>
}
 800d576:	2001      	movs	r0, #1
 800d578:	b008      	add	sp, #32
 800d57a:	bd10      	pop	{r4, pc}
 800d57c:	2005fbdc 	.word	0x2005fbdc
 800d580:	0802960f 	.word	0x0802960f
 800d584:	0800d665 	.word	0x0800d665
 800d588:	2005fbe0 	.word	0x2005fbe0

0800d58c <xTimerGenericCommand>:
{
 800d58c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d58e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800d590:	4604      	mov	r4, r0
{
 800d592:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800d594:	b950      	cbnz	r0, 800d5ac <xTimerGenericCommand+0x20>
 800d596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59a:	b672      	cpsid	i
 800d59c:	f383 8811 	msr	BASEPRI, r3
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	b662      	cpsie	i
 800d5aa:	e7fe      	b.n	800d5aa <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800d5ac:	4d0c      	ldr	r5, [pc, #48]	; (800d5e0 <xTimerGenericCommand+0x54>)
 800d5ae:	6828      	ldr	r0, [r5, #0]
 800d5b0:	b178      	cbz	r0, 800d5d2 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d5b2:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d5b4:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d5b6:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d5ba:	dc0c      	bgt.n	800d5d6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d5bc:	f7ff fe64 	bl	800d288 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d5c0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d5c2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d5c4:	4669      	mov	r1, sp
 800d5c6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d5c8:	bf0c      	ite	eq
 800d5ca:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d5cc:	461a      	movne	r2, r3
 800d5ce:	f7fe fd93 	bl	800c0f8 <xQueueGenericSend>
}
 800d5d2:	b004      	add	sp, #16
 800d5d4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	4669      	mov	r1, sp
 800d5da:	f7fe fe99 	bl	800c310 <xQueueGenericSendFromISR>
 800d5de:	e7f8      	b.n	800d5d2 <xTimerGenericCommand+0x46>
 800d5e0:	2005fbdc 	.word	0x2005fbdc

0800d5e4 <prvSwitchTimerLists>:
{
 800d5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5e6:	4d1d      	ldr	r5, [pc, #116]	; (800d65c <prvSwitchTimerLists+0x78>)
{
 800d5e8:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5ea:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	b92a      	cbnz	r2, 800d5fe <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 800d5f2:	4a1b      	ldr	r2, [pc, #108]	; (800d660 <prvSwitchTimerLists+0x7c>)
 800d5f4:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d5f6:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800d5f8:	6029      	str	r1, [r5, #0]
}
 800d5fa:	b005      	add	sp, #20
 800d5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5fe:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d600:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d602:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d604:	1d21      	adds	r1, r4, #4
 800d606:	4608      	mov	r0, r1
 800d608:	9103      	str	r1, [sp, #12]
 800d60a:	f7fe fa2c 	bl	800ba66 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d60e:	6a23      	ldr	r3, [r4, #32]
 800d610:	4620      	mov	r0, r4
 800d612:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d614:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d618:	9903      	ldr	r1, [sp, #12]
 800d61a:	f013 0f04 	tst.w	r3, #4
 800d61e:	d0e5      	beq.n	800d5ec <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d620:	69a3      	ldr	r3, [r4, #24]
 800d622:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800d624:	429e      	cmp	r6, r3
 800d626:	d205      	bcs.n	800d634 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d628:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d62a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d62c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d62e:	f7fe fa03 	bl	800ba38 <vListInsert>
 800d632:	e7db      	b.n	800d5ec <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d634:	2300      	movs	r3, #0
 800d636:	4632      	mov	r2, r6
 800d638:	4620      	mov	r0, r4
 800d63a:	9700      	str	r7, [sp, #0]
 800d63c:	4619      	mov	r1, r3
 800d63e:	f7ff ffa5 	bl	800d58c <xTimerGenericCommand>
				configASSERT( xResult );
 800d642:	2800      	cmp	r0, #0
 800d644:	d1d2      	bne.n	800d5ec <prvSwitchTimerLists+0x8>
 800d646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64a:	b672      	cpsid	i
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	b662      	cpsie	i
 800d65a:	e7fe      	b.n	800d65a <prvSwitchTimerLists+0x76>
 800d65c:	2005fab8 	.word	0x2005fab8
 800d660:	2005fabc 	.word	0x2005fabc

0800d664 <prvTimerTask>:
{
 800d664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d668:	4f7a      	ldr	r7, [pc, #488]	; (800d854 <prvTimerTask+0x1f0>)
{
 800d66a:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800d66c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800d864 <prvTimerTask+0x200>
 800d670:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	f8d3 b000 	ldr.w	fp, [r3]
 800d678:	f1bb 0f00 	cmp.w	fp, #0
 800d67c:	d028      	beq.n	800d6d0 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d67e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d680:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d682:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 800d686:	4e74      	ldr	r6, [pc, #464]	; (800d858 <prvTimerTask+0x1f4>)
	vTaskSuspendAll();
 800d688:	f7ff fb30 	bl	800ccec <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800d68c:	f7ff fb36 	bl	800ccfc <xTaskGetTickCount>
 800d690:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d692:	6833      	ldr	r3, [r6, #0]
 800d694:	46b0      	mov	r8, r6
 800d696:	4298      	cmp	r0, r3
 800d698:	d31c      	bcc.n	800d6d4 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800d69a:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d69c:	b31c      	cbz	r4, 800d6e6 <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d69e:	4b6f      	ldr	r3, [pc, #444]	; (800d85c <prvTimerTask+0x1f8>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681c      	ldr	r4, [r3, #0]
 800d6a4:	fab4 f484 	clz	r4, r4
 800d6a8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d6aa:	4b6d      	ldr	r3, [pc, #436]	; (800d860 <prvTimerTask+0x1fc>)
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	ebab 0105 	sub.w	r1, fp, r5
 800d6b2:	6818      	ldr	r0, [r3, #0]
 800d6b4:	f7ff f91f 	bl	800c8f6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d6b8:	f7ff fbbe 	bl	800ce38 <xTaskResumeAll>
 800d6bc:	b978      	cbnz	r0, 800d6de <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 800d6be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d6c2:	f8ca 3000 	str.w	r3, [sl]
 800d6c6:	f3bf 8f4f 	dsb	sy
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	e006      	b.n	800d6de <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6d0:	2401      	movs	r4, #1
 800d6d2:	e7d8      	b.n	800d686 <prvTimerTask+0x22>
		prvSwitchTimerLists();
 800d6d4:	f7ff ff86 	bl	800d5e4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800d6d8:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800d6da:	f7ff fbad 	bl	800ce38 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6de:	4e60      	ldr	r6, [pc, #384]	; (800d860 <prvTimerTask+0x1fc>)
 800d6e0:	f04f 0b00 	mov.w	fp, #0
 800d6e4:	e037      	b.n	800d756 <prvTimerTask+0xf2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d6e6:	4583      	cmp	fp, r0
 800d6e8:	d8df      	bhi.n	800d6aa <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 800d6ea:	f7ff fba5 	bl	800ce38 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ee:	f8d9 3000 	ldr.w	r3, [r9]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6f6:	1d30      	adds	r0, r6, #4
 800d6f8:	f7fe f9b5 	bl	800ba66 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6fc:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800d700:	0758      	lsls	r0, r3, #29
 800d702:	d51a      	bpl.n	800d73a <prvTimerTask+0xd6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d704:	69b1      	ldr	r1, [r6, #24]
 800d706:	465b      	mov	r3, fp
 800d708:	462a      	mov	r2, r5
 800d70a:	4630      	mov	r0, r6
 800d70c:	4459      	add	r1, fp
 800d70e:	f7ff feeb 	bl	800d4e8 <prvInsertTimerInActiveList>
 800d712:	b1b0      	cbz	r0, 800d742 <prvTimerTask+0xde>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d714:	4623      	mov	r3, r4
 800d716:	465a      	mov	r2, fp
 800d718:	4621      	mov	r1, r4
 800d71a:	4630      	mov	r0, r6
 800d71c:	9400      	str	r4, [sp, #0]
 800d71e:	f7ff ff35 	bl	800d58c <xTimerGenericCommand>
			configASSERT( xResult );
 800d722:	b970      	cbnz	r0, 800d742 <prvTimerTask+0xde>
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	b672      	cpsid	i
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	b662      	cpsie	i
 800d738:	e7fe      	b.n	800d738 <prvTimerTask+0xd4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d73a:	f023 0301 	bic.w	r3, r3, #1
 800d73e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d742:	6a33      	ldr	r3, [r6, #32]
 800d744:	4630      	mov	r0, r6
 800d746:	4798      	blx	r3
}
 800d748:	e7c9      	b.n	800d6de <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d74a:	9b03      	ldr	r3, [sp, #12]
 800d74c:	9905      	ldr	r1, [sp, #20]
 800d74e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d750:	9b02      	ldr	r3, [sp, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	da0a      	bge.n	800d76c <prvTimerTask+0x108>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d756:	2200      	movs	r2, #0
 800d758:	a902      	add	r1, sp, #8
 800d75a:	6830      	ldr	r0, [r6, #0]
 800d75c:	f7fe fe9e 	bl	800c49c <xQueueReceive>
 800d760:	2800      	cmp	r0, #0
 800d762:	d086      	beq.n	800d672 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d764:	9b02      	ldr	r3, [sp, #8]
 800d766:	9804      	ldr	r0, [sp, #16]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	dbee      	blt.n	800d74a <prvTimerTask+0xe6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d76c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d76e:	6963      	ldr	r3, [r4, #20]
 800d770:	b9a3      	cbnz	r3, 800d79c <prvTimerTask+0x138>
	xTimeNow = xTaskGetTickCount();
 800d772:	f7ff fac3 	bl	800ccfc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800d776:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 800d77a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d77c:	4298      	cmp	r0, r3
 800d77e:	d201      	bcs.n	800d784 <prvTimerTask+0x120>
		prvSwitchTimerLists();
 800d780:	f7ff ff30 	bl	800d5e4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800d784:	9b02      	ldr	r3, [sp, #8]
 800d786:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 800d78a:	2b09      	cmp	r3, #9
 800d78c:	d8e3      	bhi.n	800d756 <prvTimerTask+0xf2>
 800d78e:	e8df f003 	tbb	[pc, r3]
 800d792:	0909      	.short	0x0909
 800d794:	583d3609 	.word	0x583d3609
 800d798:	3d360909 	.word	0x3d360909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d79c:	1d20      	adds	r0, r4, #4
 800d79e:	f7fe f962 	bl	800ba66 <uxListRemove>
 800d7a2:	e7e6      	b.n	800d772 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d7a8:	462a      	mov	r2, r5
 800d7aa:	69a1      	ldr	r1, [r4, #24]
 800d7ac:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7ae:	f043 0301 	orr.w	r3, r3, #1
 800d7b2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d7b6:	9b03      	ldr	r3, [sp, #12]
 800d7b8:	4419      	add	r1, r3
 800d7ba:	f7ff fe95 	bl	800d4e8 <prvInsertTimerInActiveList>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d0c9      	beq.n	800d756 <prvTimerTask+0xf2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7c2:	6a23      	ldr	r3, [r4, #32]
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d7cc:	0759      	lsls	r1, r3, #29
 800d7ce:	d5c2      	bpl.n	800d756 <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d7d0:	69a2      	ldr	r2, [r4, #24]
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9903      	ldr	r1, [sp, #12]
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f8cd b000 	str.w	fp, [sp]
 800d7dc:	440a      	add	r2, r1
 800d7de:	4619      	mov	r1, r3
 800d7e0:	f7ff fed4 	bl	800d58c <xTimerGenericCommand>
							configASSERT( xResult );
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d1b6      	bne.n	800d756 <prvTimerTask+0xf2>
 800d7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ec:	b672      	cpsid	i
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	b662      	cpsie	i
 800d7fc:	e7fe      	b.n	800d7fc <prvTimerTask+0x198>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7fe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d802:	f023 0301 	bic.w	r3, r3, #1
 800d806:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800d80a:	e7a4      	b.n	800d756 <prvTimerTask+0xf2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d80c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d810:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d812:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d816:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d818:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d81c:	b951      	cbnz	r1, 800d834 <prvTimerTask+0x1d0>
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	b672      	cpsid	i
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	b662      	cpsie	i
 800d832:	e7fe      	b.n	800d832 <prvTimerTask+0x1ce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d834:	462b      	mov	r3, r5
 800d836:	462a      	mov	r2, r5
 800d838:	4429      	add	r1, r5
 800d83a:	4620      	mov	r0, r4
 800d83c:	f7ff fe54 	bl	800d4e8 <prvInsertTimerInActiveList>
					break;
 800d840:	e789      	b.n	800d756 <prvTimerTask+0xf2>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d842:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d846:	079a      	lsls	r2, r3, #30
 800d848:	d4db      	bmi.n	800d802 <prvTimerTask+0x19e>
							vPortFree( pxTimer );
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7fe f89e 	bl	800b98c <vPortFree>
 800d850:	e781      	b.n	800d756 <prvTimerTask+0xf2>
 800d852:	bf00      	nop
 800d854:	2005fab8 	.word	0x2005fab8
 800d858:	2005fb88 	.word	0x2005fb88
 800d85c:	2005fabc 	.word	0x2005fabc
 800d860:	2005fbdc 	.word	0x2005fbdc
 800d864:	e000ed04 	.word	0xe000ed04

0800d868 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	b091      	sub	sp, #68	; 0x44
 800d86e:	3080      	adds	r0, #128	; 0x80
 800d870:	9209      	str	r2, [sp, #36]	; 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800d872:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 800d876:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
{  
 800d87a:	910f      	str	r1, [sp, #60]	; 0x3c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800d87c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d880:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800d882:	4b70      	ldr	r3, [pc, #448]	; (800da44 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 800d884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d886:	9207      	str	r2, [sp, #28]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800d888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800d88a:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800d88c:	9204      	str	r2, [sp, #16]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800d88e:	930a      	str	r3, [sp, #40]	; 0x28
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800d890:	0053      	lsls	r3, r2, #1
 800d892:	930b      	str	r3, [sp, #44]	; 0x2c
 800d894:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
 800d898:	9301      	str	r3, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800d89a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800d89e:	4413      	add	r3, r2
 800d8a0:	455b      	cmp	r3, fp
 800d8a2:	d803      	bhi.n	800d8ac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x44>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 800d8a4:	9808      	ldr	r0, [sp, #32]
 800d8a6:	b011      	add	sp, #68	; 0x44
 800d8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800d8ac:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800d8b0:	9b07      	ldr	r3, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800d8b2:	9904      	ldr	r1, [sp, #16]
    currentMCU++;
 800d8b4:	f10b 0b01 	add.w	fp, fp, #1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800d8b8:	9c07      	ldr	r4, [sp, #28]
 800d8ba:	f100 0c80 	add.w	ip, r0, #128	; 0x80
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800d8be:	fbb2 f3f3 	udiv	r3, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800d8c2:	4359      	muls	r1, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800d8c4:	fb04 2313 	mls	r3, r4, r3, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d8ce:	9302      	str	r3, [sp, #8]
    for(i= 0; i <  16; i+=2)
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800d8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8d6:	9a02      	ldr	r2, [sp, #8]
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	f240 80a3 	bls.w	800da24 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1bc>
        pOutAddr = pOutBuffer + refline;
 800d8de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8e0:	eb03 0e02 	add.w	lr, r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800d8e4:	9b04      	ldr	r3, [sp, #16]
 800d8e6:	eb0e 0903 	add.w	r9, lr, r3
        for(k= 0; k<2; k++)
 800d8ea:	f10c 0308 	add.w	r3, ip, #8
 800d8ee:	930c      	str	r3, [sp, #48]	; 0x30
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800d8f0:	9b01      	ldr	r3, [sp, #4]
 800d8f2:	9305      	str	r3, [sp, #20]
          for(j=0; j < 8; j+=2)
 800d8f4:	f10c 33ff 	add.w	r3, ip, #4294967295
 800d8f8:	9e05      	ldr	r6, [sp, #20]
    for(i= 0; i <  16; i+=2)
 800d8fa:	2500      	movs	r5, #0
 800d8fc:	9306      	str	r3, [sp, #24]
 800d8fe:	eb09 0305 	add.w	r3, r9, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800d902:	4f51      	ldr	r7, [pc, #324]	; (800da48 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800d904:	4c51      	ldr	r4, [pc, #324]	; (800da4c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 800d906:	3602      	adds	r6, #2
 800d908:	930d      	str	r3, [sp, #52]	; 0x34
 800d90a:	eb0e 0305 	add.w	r3, lr, r5
            ycomp = (int32_t)(*(pLum +j));
 800d90e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 800d912:	930e      	str	r3, [sp, #56]	; 0x38
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800d914:	9b06      	ldr	r3, [sp, #24]
 800d916:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800d91a:	9306      	str	r3, [sp, #24]
 800d91c:	4b4c      	ldr	r3, [pc, #304]	; (800da50 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 800d91e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800d922:	9b06      	ldr	r3, [sp, #24]
 800d924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d928:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800d92c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d930:	4f48      	ldr	r7, [pc, #288]	; (800da54 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 800d932:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800d936:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d938:	4a47      	ldr	r2, [pc, #284]	; (800da58 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 800d93a:	4414      	add	r4, r2
 800d93c:	4617      	mov	r7, r2
 800d93e:	eb04 0208 	add.w	r2, r4, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d942:	eb07 4323 	add.w	r3, r7, r3, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800d946:	4439      	add	r1, r7
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800d948:	9f0e      	ldr	r7, [sp, #56]	; 0x38
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d94a:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 800d94e:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d952:	eb03 0208 	add.w	r2, r3, r8
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800d956:	4488      	add	r8, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d958:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 800d95c:	f898 8100 	ldrb.w	r8, [r8, #256]	; 0x100
 800d960:	0892      	lsrs	r2, r2, #2
 800d962:	0152      	lsls	r2, r2, #5
 800d964:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 800d968:	ea42 02d8 	orr.w	r2, r2, r8, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800d96c:	f82e 2005 	strh.w	r2, [lr, r5]
            ycomp = (int32_t)(*(pLum +j +1));
 800d970:	f816 8c01 	ldrb.w	r8, [r6, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d974:	eb04 0208 	add.w	r2, r4, r8
 800d978:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d97c:	eb03 0208 	add.w	r2, r3, r8
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800d980:	4488      	add	r8, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d982:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d986:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d98a:	0892      	lsrs	r2, r2, #2
 800d98c:	0152      	lsls	r2, r2, #5
 800d98e:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 800d992:	f898 a100 	ldrb.w	sl, [r8, #256]	; 0x100
 800d996:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800d99a:	807a      	strh	r2, [r7, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800d99c:	f896 8006 	ldrb.w	r8, [r6, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d9a0:	eb04 0208 	add.w	r2, r4, r8
 800d9a4:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d9a8:	eb03 0208 	add.w	r2, r3, r8
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800d9ac:	4488      	add	r8, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d9ae:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d9b2:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d9b6:	0892      	lsrs	r2, r2, #2
 800d9b8:	0152      	lsls	r2, r2, #5
 800d9ba:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 800d9be:	f898 a100 	ldrb.w	sl, [r8, #256]	; 0x100
 800d9c2:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 800d9c6:	f829 2005 	strh.w	r2, [r9, r5]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800d9ca:	3504      	adds	r5, #4
 800d9cc:	79f2      	ldrb	r2, [r6, #7]
          for(j=0; j < 8; j+=2)
 800d9ce:	2d10      	cmp	r5, #16
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d9d0:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d9d2:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800d9d4:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d9d6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d9da:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d9de:	ea4f 0393 	mov.w	r3, r3, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d9e2:	ea4f 04d4 	mov.w	r4, r4, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d9e6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800d9ea:	ea43 24c4 	orr.w	r4, r3, r4, lsl #11
 800d9ee:	f891 3100 	ldrb.w	r3, [r1, #256]	; 0x100
 800d9f2:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800d9f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9f8:	805c      	strh	r4, [r3, #2]
          for(j=0; j < 8; j+=2)
 800d9fa:	d180      	bne.n	800d8fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
          pLum += 64;                      
 800d9fc:	9b05      	ldr	r3, [sp, #20]
 800d9fe:	f10c 0c04 	add.w	ip, ip, #4
 800da02:	f10e 0e10 	add.w	lr, lr, #16
 800da06:	f109 0910 	add.w	r9, r9, #16
 800da0a:	3340      	adds	r3, #64	; 0x40
 800da0c:	9305      	str	r3, [sp, #20]
        for(k= 0; k<2; k++)
 800da0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da10:	4563      	cmp	r3, ip
 800da12:	f47f af6f 	bne.w	800d8f4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8c>
        pLum = pLum - 128 + 16;
 800da16:	9b01      	ldr	r3, [sp, #4]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800da18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        pLum = pLum - 128 + 16;
 800da1a:	3310      	adds	r3, #16
 800da1c:	9301      	str	r3, [sp, #4]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800da1e:	9b02      	ldr	r3, [sp, #8]
 800da20:	4413      	add	r3, r2
 800da22:	9302      	str	r3, [sp, #8]
    for(i= 0; i <  16; i+=2)
 800da24:	9b03      	ldr	r3, [sp, #12]
 800da26:	3302      	adds	r3, #2
 800da28:	2b10      	cmp	r3, #16
 800da2a:	9303      	str	r3, [sp, #12]
 800da2c:	d102      	bne.n	800da34 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800da2e:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800da32:	e72f      	b.n	800d894 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2c>
        pLum = pInBuffer + 128;
 800da34:	9a01      	ldr	r2, [sp, #4]
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	2b08      	cmp	r3, #8
 800da3a:	bf08      	it	eq
 800da3c:	4602      	moveq	r2, r0
 800da3e:	9201      	str	r2, [sp, #4]
 800da40:	e748      	b.n	800d8d4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6c>
 800da42:	bf00      	nop
 800da44:	20060be4 	.word	0x20060be4
 800da48:	200603e4 	.word	0x200603e4
 800da4c:	200607e4 	.word	0x200607e4
 800da50:	2005fbe4 	.word	0x2005fbe4
 800da54:	2005ffe4 	.word	0x2005ffe4
 800da58:	08029617 	.word	0x08029617

0800da5c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800da60:	0a1b      	lsrs	r3, r3, #8
{  
 800da62:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800da64:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800da66:	4b50      	ldr	r3, [pc, #320]	; (800dba8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
{  
 800da68:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800da6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 800da6c:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800da70:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800da72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800da74:	691b      	ldr	r3, [r3, #16]
{  
 800da76:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800da78:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800da7a:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 800da7c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800da80:	4413      	add	r3, r2
 800da82:	4573      	cmp	r3, lr
 800da84:	d803      	bhi.n	800da8e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 800da86:	9805      	ldr	r0, [sp, #20]
 800da88:	b00d      	add	sp, #52	; 0x34
 800da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800da8e:	ea4f 110e 	mov.w	r1, lr, lsl #4
 800da92:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 800da94:	f10e 0e01 	add.w	lr, lr, #1
 800da98:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 800da9c:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800da9e:	fbb1 f2f3 	udiv	r2, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800daa2:	9b03      	ldr	r3, [sp, #12]
 800daa4:	fb03 f402 	mul.w	r4, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800daa8:	9b02      	ldr	r3, [sp, #8]
 800daaa:	fb03 1312 	mls	r3, r3, r2, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dab4:	9300      	str	r3, [sp, #0]
    currentMCU++;
 800dab6:	2308      	movs	r3, #8
 800dab8:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800daba:	9b07      	ldr	r3, [sp, #28]
 800dabc:	9a00      	ldr	r2, [sp, #0]
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d96a      	bls.n	800db98 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13c>
        pOutAddr = pOutBuffer + refline;
 800dac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac4:	f10a 0801 	add.w	r8, sl, #1
 800dac8:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800dacc:	f107 0308 	add.w	r3, r7, #8
 800dad0:	9309      	str	r3, [sp, #36]	; 0x24
 800dad2:	f108 33ff 	add.w	r3, r8, #4294967295
    currentMCU++;
 800dad6:	2400      	movs	r4, #0
 800dad8:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800dada:	1e7b      	subs	r3, r7, #1
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 800dae2:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800dae4:	9b01      	ldr	r3, [sp, #4]
 800dae6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800daea:	9301      	str	r3, [sp, #4]
 800daec:	4b2f      	ldr	r3, [pc, #188]	; (800dbac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800daee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800daf2:	9b01      	ldr	r3, [sp, #4]
 800daf4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800daf8:	4b2d      	ldr	r3, [pc, #180]	; (800dbb0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800dafa:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800dafe:	4b2d      	ldr	r3, [pc, #180]	; (800dbb4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 800db00:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800db04:	4b2c      	ldr	r3, [pc, #176]	; (800dbb8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800db06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
 800db0a:	9b08      	ldr	r3, [sp, #32]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800db0c:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800db0e:	4a2b      	ldr	r2, [pc, #172]	; (800dbbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x160>)
            ycomp = (int32_t)(*(pLum +j));
 800db10:	f813 c014 	ldrb.w	ip, [r3, r4, lsl #1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800db14:	4416      	add	r6, r2
 800db16:	4613      	mov	r3, r2
 800db18:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800db1c:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800db20:	441d      	add	r5, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800db22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800db24:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800db28:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800db2c:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800db2e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800db32:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800db36:	0892      	lsrs	r2, r2, #2
 800db38:	0152      	lsls	r2, r2, #5
 800db3a:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800db3e:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 800db42:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800db46:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 800db4a:	f818 2014 	ldrb.w	r2, [r8, r4, lsl #1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800db4e:	3401      	adds	r4, #1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800db50:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800db52:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800db54:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 800db56:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800db58:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800db5c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800db60:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800db64:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800db68:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800db6c:	ea41 26c6 	orr.w	r6, r1, r6, lsl #11
 800db70:	f895 1100 	ldrb.w	r1, [r5, #256]	; 0x100
 800db74:	ea46 06d1 	orr.w	r6, r6, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800db78:	805e      	strh	r6, [r3, #2]
          for(j=0; j < 8; j+=2)
 800db7a:	d1b0      	bne.n	800dade <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x82>
 800db7c:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 800db7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db80:	f109 0910 	add.w	r9, r9, #16
 800db84:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800db88:	42bb      	cmp	r3, r7
 800db8a:	d1a2      	bne.n	800dad2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x76>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800db8c:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 800db8e:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800db92:	9b03      	ldr	r3, [sp, #12]
 800db94:	441a      	add	r2, r3
 800db96:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 800db98:	9b04      	ldr	r3, [sp, #16]
 800db9a:	3b01      	subs	r3, #1
 800db9c:	9304      	str	r3, [sp, #16]
 800db9e:	d18c      	bne.n	800daba <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800dba0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800dba4:	e76a      	b.n	800da7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 800dba6:	bf00      	nop
 800dba8:	20060be4 	.word	0x20060be4
 800dbac:	2005fbe4 	.word	0x2005fbe4
 800dbb0:	200607e4 	.word	0x200607e4
 800dbb4:	200603e4 	.word	0x200603e4
 800dbb8:	2005ffe4 	.word	0x2005ffe4
 800dbbc:	08029617 	.word	0x08029617

0800dbc0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800dbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800dbc6:	22c0      	movs	r2, #192	; 0xc0
{  
 800dbc8:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 800dbca:	4654      	mov	r4, sl
{  
 800dbcc:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800dbce:	fbb3 f3f2 	udiv	r3, r3, r2
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dbd2:	4a35      	ldr	r2, [pc, #212]	; (800dca8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800dbd4:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dbd6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800dbd8:	9100      	str	r1, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dbda:	6a91      	ldr	r1, [r2, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dbdc:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dbde:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dbe0:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800dbe2:	9b04      	ldr	r3, [sp, #16]
 800dbe4:	eb03 020a 	add.w	r2, r3, sl
 800dbe8:	42a2      	cmp	r2, r4
 800dbea:	d803      	bhi.n	800dbf4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	b009      	add	sp, #36	; 0x24
 800dbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dbf4:	00e5      	lsls	r5, r4, #3
 800dbf6:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;   
 800dbf8:	3401      	adds	r4, #1
    pLum = pInBuffer;
 800dbfa:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dbfc:	fbb5 f1f2 	udiv	r1, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dc00:	9a01      	ldr	r2, [sp, #4]
 800dc02:	fb02 f601 	mul.w	r6, r2, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800dc06:	9a00      	ldr	r2, [sp, #0]
 800dc08:	fb02 5211 	mls	r2, r2, r1, r5
    currentMCU++;   
 800dc0c:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dc0e:	0052      	lsls	r2, r2, #1
    currentMCU++;   
 800dc10:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dc12:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800dc16:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dc1a:	9905      	ldr	r1, [sp, #20]
 800dc1c:	4291      	cmp	r1, r2
 800dc1e:	d93c      	bls.n	800dc9a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xda>
        pOutAddr = pOutBuffer+ refline;
 800dc20:	9907      	ldr	r1, [sp, #28]
 800dc22:	f106 3eff 	add.w	lr, r6, #4294967295
 800dc26:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 800dc28:	f10c 31ff 	add.w	r1, ip, #4294967295
 800dc2c:	9102      	str	r1, [sp, #8]
 800dc2e:	f105 0110 	add.w	r1, r5, #16
 800dc32:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800dc34:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800dc36:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 800dc3a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800dc3e:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dc42:	4b1a      	ldr	r3, [pc, #104]	; (800dcac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 800dc44:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dc46:	4f1a      	ldr	r7, [pc, #104]	; (800dcb0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 800dc48:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800dc4a:	4b1a      	ldr	r3, [pc, #104]	; (800dcb4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dc4c:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 800dc50:	440f      	add	r7, r1
 800dc52:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800dc56:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dc5a:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800dc5e:	4b16      	ldr	r3, [pc, #88]	; (800dcb8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800dc60:	440f      	add	r7, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dc62:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 800dc66:	08ff      	lsrs	r7, r7, #3
 800dc68:	ea47 2bcb 	orr.w	fp, r7, fp, lsl #11
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800dc6c:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 800dc70:	4b12      	ldr	r3, [pc, #72]	; (800dcbc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
 800dc72:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
          for(j=0; j < 8; j++)
 800dc76:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800dc78:	4447      	add	r7, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dc7a:	eb01 4727 	add.w	r7, r1, r7, asr #16
 800dc7e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 800dc82:	08bf      	lsrs	r7, r7, #2
 800dc84:	ea4b 1b47 	orr.w	fp, fp, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
 800dc88:	f825 bb02 	strh.w	fp, [r5], #2
          for(j=0; j < 8; j++)
 800dc8c:	429d      	cmp	r5, r3
 800dc8e:	d1d1      	bne.n	800dc34 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800dc90:	9b01      	ldr	r3, [sp, #4]
 800dc92:	3608      	adds	r6, #8
          pLum += 8;
 800dc94:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800dc98:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 800dc9a:	9b03      	ldr	r3, [sp, #12]
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	9303      	str	r3, [sp, #12]
 800dca0:	d1bb      	bne.n	800dc1a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800dca2:	30c0      	adds	r0, #192	; 0xc0
 800dca4:	e79d      	b.n	800dbe2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800dca6:	bf00      	nop
 800dca8:	20060be4 	.word	0x20060be4
 800dcac:	08029617 	.word	0x08029617
 800dcb0:	200607e4 	.word	0x200607e4
 800dcb4:	2005fbe4 	.word	0x2005fbe4
 800dcb8:	200603e4 	.word	0x200603e4
 800dcbc:	2005ffe4 	.word	0x2005ffe4

0800dcc0 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	b085      	sub	sp, #20
 800dcc6:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800dcc8:	0998      	lsrs	r0, r3, #6
{
 800dcca:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 800dccc:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dcd0:	491a      	ldr	r1, [pc, #104]	; (800dd3c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 800dcd2:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dcd4:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dcd8:	6909      	ldr	r1, [r1, #16]
 800dcda:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800dcdc:	9b03      	ldr	r3, [sp, #12]
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d802      	bhi.n	800dce8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 800dce2:	b005      	add	sp, #20
 800dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dce8:	00d3      	lsls	r3, r2, #3
    pLum = pInBuffer;
 800dcea:	46a4      	mov	ip, r4
    currentMCU++;
 800dcec:	3201      	adds	r2, #1
 800dcee:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dcf0:	fbb3 f1f8 	udiv	r1, r3, r8
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800dcf4:	fb08 3311 	mls	r3, r8, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dcf8:	fb09 f501 	mul.w	r5, r9, r1
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dd02:	9901      	ldr	r1, [sp, #4]
 800dd04:	4299      	cmp	r1, r3
 800dd06:	d914      	bls.n	800dd32 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 800dd08:	9902      	ldr	r1, [sp, #8]
 800dd0a:	46e2      	mov	sl, ip
 800dd0c:	4419      	add	r1, r3
 800dd0e:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 800dd12:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800dd16:	08f5      	lsrs	r5, r6, #3
 800dd18:	08b6      	lsrs	r6, r6, #2
 800dd1a:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 800dd1e:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 800dd22:	432e      	orrs	r6, r5
 800dd24:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 800dd28:	4559      	cmp	r1, fp
 800dd2a:	d1f2      	bne.n	800dd12 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
 800dd2c:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 800dd30:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 800dd32:	3f01      	subs	r7, #1
 800dd34:	d1e5      	bne.n	800dd02 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800dd36:	3440      	adds	r4, #64	; 0x40
 800dd38:	e7d0      	b.n	800dcdc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 800dd3a:	bf00      	nop
 800dd3c:	20060be4 	.word	0x20060be4

0800dd40 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800dd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd44:	b085      	sub	sp, #20
 800dd46:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800dd48:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800dd4a:	0a18      	lsrs	r0, r3, #8
{  
 800dd4c:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800dd4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dd52:	4927      	ldr	r1, [pc, #156]	; (800ddf0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
  while(currentMCU < (numberMCU + BlockIndex))
 800dd54:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dd56:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dd5a:	6909      	ldr	r1, [r1, #16]
 800dd5c:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d802      	bhi.n	800dd6a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800dd64:	b005      	add	sp, #20
 800dd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dd6a:	00d1      	lsls	r1, r2, #3
    pChrom = pInBuffer;
 800dd6c:	46ae      	mov	lr, r5
    currentMCU++;
 800dd6e:	3201      	adds	r2, #1
 800dd70:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800dd74:	fbb1 f3f9 	udiv	r3, r1, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800dd78:	fb09 1113 	mls	r1, r9, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dd7c:	fb0a f403 	mul.w	r4, sl, r3
 800dd80:	0049      	lsls	r1, r1, #1
 800dd82:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dd86:	9b00      	ldr	r3, [sp, #0]
 800dd88:	428b      	cmp	r3, r1
 800dd8a:	d92b      	bls.n	800dde4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
        pOutAddr = pOutBuffer+ refline;        
 800dd8c:	9b02      	ldr	r3, [sp, #8]
 800dd8e:	4674      	mov	r4, lr
 800dd90:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 800dd92:	f106 0310 	add.w	r3, r6, #16
 800dd96:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 800dd98:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 800dd9c:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800dd9e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800dda2:	fb13 f308 	smulbb	r3, r3, r8
 800dda6:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800ddaa:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800ddae:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800ddb2:	fb13 f308 	smulbb	r3, r3, r8
 800ddb6:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800ddba:	109b      	asrs	r3, r3, #2
 800ddbc:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800ddbe:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800ddc2:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 800ddc6:	fb1b f808 	smulbb	r8, fp, r8
 800ddca:	fbb8 f8f7 	udiv	r8, r8, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800ddce:	ea43 03d8 	orr.w	r3, r3, r8, lsr #3
 800ddd2:	b29b      	uxth	r3, r3
          *(__IO uint16_t *)pOutAddr = 
 800ddd4:	f826 3b02 	strh.w	r3, [r6], #2
          for(j=0; j < 8; j++)
 800ddd8:	9b01      	ldr	r3, [sp, #4]
 800ddda:	429e      	cmp	r6, r3
 800dddc:	d1dc      	bne.n	800dd98 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
 800ddde:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800dde2:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 800dde4:	f1bc 0c01 	subs.w	ip, ip, #1
 800dde8:	d1cd      	bne.n	800dd86 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800ddea:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800ddee:	e7b6      	b.n	800dd5e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 800ddf0:	20060be4 	.word	0x20060be4

0800ddf4 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800ddf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800ddf6:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800ddf8:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800ddfa:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800ddfc:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800de00:	4b28      	ldr	r3, [pc, #160]	; (800dea4 <JPEG_GetDecodeColorConvertFunc+0xb0>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800de02:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800de04:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800de06:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800de0a:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800de0c:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800de0e:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800de10:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800de12:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800de14:	d13c      	bne.n	800de90 <JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800de16:	2801      	cmp	r0, #1
 800de18:	d122      	bne.n	800de60 <JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800de1a:	4823      	ldr	r0, [pc, #140]	; (800dea8 <JPEG_GetDecodeColorConvertFunc+0xb4>)
 800de1c:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800de1e:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800de22:	bf18      	it	ne
 800de24:	f1c1 0110 	rsbne	r1, r1, #16
 800de28:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800de2a:	2110      	movs	r1, #16
 800de2c:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 800de2e:	6219      	str	r1, [r3, #32]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800de30:	6959      	ldr	r1, [r3, #20]
 800de32:	4421      	add	r1, r4
 800de34:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800de36:	0061      	lsls	r1, r4, #1
 800de38:	6299      	str	r1, [r3, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800de3a:	69d9      	ldr	r1, [r3, #28]
 800de3c:	fbb4 f0f1 	udiv	r0, r4, r1
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800de40:	fb01 4410 	mls	r4, r1, r0, r4
 800de44:	b104      	cbz	r4, 800de48 <JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800de46:	3001      	adds	r0, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800de48:	6a1c      	ldr	r4, [r3, #32]
 800de4a:	fbb5 f1f4 	udiv	r1, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800de4e:	fb04 5411 	mls	r4, r4, r1, r5
 800de52:	b104      	cbz	r4, 800de56 <JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800de54:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800de56:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 800de58:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800de5a:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800de5c:	6011      	str	r1, [r2, #0]
}
 800de5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800de60:	2802      	cmp	r0, #2
 800de62:	d10b      	bne.n	800de7c <JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800de64:	4811      	ldr	r0, [pc, #68]	; (800deac <JPEG_GetDecodeColorConvertFunc+0xb8>)
 800de66:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800de68:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800de6c:	bf18      	it	ne
 800de6e:	f1c1 0110 	rsbne	r1, r1, #16
 800de72:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800de74:	2110      	movs	r1, #16
 800de76:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800de78:	2108      	movs	r1, #8
 800de7a:	e7d8      	b.n	800de2e <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800de7c:	480c      	ldr	r0, [pc, #48]	; (800deb0 <JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800de7e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800de80:	f014 0107 	ands.w	r1, r4, #7
 800de84:	d001      	beq.n	800de8a <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800de86:	f1c1 0108 	rsb	r1, r1, #8
 800de8a:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800de8c:	2108      	movs	r1, #8
 800de8e:	e7cd      	b.n	800de2c <JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800de90:	b90e      	cbnz	r6, 800de96 <JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800de92:	4808      	ldr	r0, [pc, #32]	; (800deb4 <JPEG_GetDecodeColorConvertFunc+0xc0>)
 800de94:	e7f3      	b.n	800de7e <JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800de96:	2e30      	cmp	r6, #48	; 0x30
 800de98:	d101      	bne.n	800de9e <JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800de9a:	4807      	ldr	r0, [pc, #28]	; (800deb8 <JPEG_GetDecodeColorConvertFunc+0xc4>)
 800de9c:	e7ef      	b.n	800de7e <JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 800de9e:	2001      	movs	r0, #1
 800dea0:	e7dd      	b.n	800de5e <JPEG_GetDecodeColorConvertFunc+0x6a>
 800dea2:	bf00      	nop
 800dea4:	20060be4 	.word	0x20060be4
 800dea8:	0800d869 	.word	0x0800d869
 800deac:	0800da5d 	.word	0x0800da5d
 800deb0:	0800dbc1 	.word	0x0800dbc1
 800deb4:	0800dcc1 	.word	0x0800dcc1
 800deb8:	0800dd41 	.word	0x0800dd41

0800debc <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800debc:	8880      	ldrh	r0, [r0, #4]
 800debe:	4770      	bx	lr

0800dec0 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800dec0:	2300      	movs	r3, #0
 800dec2:	8083      	strh	r3, [r0, #4]
 800dec4:	4770      	bx	lr
	...

0800dec8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800dec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deca:	6803      	ldr	r3, [r0, #0]
 800decc:	460e      	mov	r6, r1
 800dece:	2100      	movs	r1, #0
 800ded0:	4605      	mov	r5, r0
 800ded2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded4:	4798      	blx	r3
 800ded6:	4604      	mov	r4, r0
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	4628      	mov	r0, r5
 800dedc:	1b34      	subs	r4, r6, r4
 800dede:	6a1b      	ldr	r3, [r3, #32]
 800dee0:	b2a4      	uxth	r4, r4
 800dee2:	4798      	blx	r3
 800dee4:	88ab      	ldrh	r3, [r5, #4]
 800dee6:	fbb4 f4f0 	udiv	r4, r4, r0
 800deea:	42a3      	cmp	r3, r4
 800deec:	d805      	bhi.n	800defa <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800deee:	4b0e      	ldr	r3, [pc, #56]	; (800df28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800def0:	211e      	movs	r1, #30
 800def2:	4a0e      	ldr	r2, [pc, #56]	; (800df2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800def4:	480e      	ldr	r0, [pc, #56]	; (800df30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800def6:	f017 fa57 	bl	80253a8 <__assert_func>
 800defa:	682b      	ldr	r3, [r5, #0]
 800defc:	2100      	movs	r1, #0
 800defe:	4628      	mov	r0, r5
 800df00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df02:	4798      	blx	r3
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	4607      	mov	r7, r0
 800df08:	4628      	mov	r0, r5
 800df0a:	6a1b      	ldr	r3, [r3, #32]
 800df0c:	4798      	blx	r3
 800df0e:	1bf3      	subs	r3, r6, r7
 800df10:	b29b      	uxth	r3, r3
 800df12:	fbb3 f2f0 	udiv	r2, r3, r0
 800df16:	fb02 3010 	mls	r0, r2, r0, r3
 800df1a:	b118      	cbz	r0, 800df24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800df1c:	4b05      	ldr	r3, [pc, #20]	; (800df34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800df1e:	211f      	movs	r1, #31
 800df20:	4a02      	ldr	r2, [pc, #8]	; (800df2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800df22:	e7e7      	b.n	800def4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800df24:	4620      	mov	r0, r4
 800df26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df28:	08029917 	.word	0x08029917
 800df2c:	08029a82 	.word	0x08029a82
 800df30:	0802992c 	.word	0x0802992c
 800df34:	0802995a 	.word	0x0802995a

0800df38 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	6803      	ldr	r3, [r0, #0]
 800df3c:	460d      	mov	r5, r1
 800df3e:	4604      	mov	r4, r0
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	4798      	blx	r3
 800df44:	4285      	cmp	r5, r0
 800df46:	d905      	bls.n	800df54 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800df48:	4b0c      	ldr	r3, [pc, #48]	; (800df7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800df4a:	2130      	movs	r1, #48	; 0x30
 800df4c:	4a0c      	ldr	r2, [pc, #48]	; (800df80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800df4e:	480d      	ldr	r0, [pc, #52]	; (800df84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800df50:	f017 fa2a 	bl	80253a8 <__assert_func>
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	4620      	mov	r0, r4
 800df58:	88a5      	ldrh	r5, [r4, #4]
 800df5a:	69db      	ldr	r3, [r3, #28]
 800df5c:	4798      	blx	r3
 800df5e:	4285      	cmp	r5, r0
 800df60:	d303      	bcc.n	800df6a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800df62:	4b09      	ldr	r3, [pc, #36]	; (800df88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800df64:	2131      	movs	r1, #49	; 0x31
 800df66:	4a06      	ldr	r2, [pc, #24]	; (800df80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800df68:	e7f1      	b.n	800df4e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	4620      	mov	r0, r4
 800df6e:	88a1      	ldrh	r1, [r4, #4]
 800df70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df72:	4798      	blx	r3
 800df74:	88a3      	ldrh	r3, [r4, #4]
 800df76:	3301      	adds	r3, #1
 800df78:	80a3      	strh	r3, [r4, #4]
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	080299d4 	.word	0x080299d4
 800df80:	08029ac5 	.word	0x08029ac5
 800df84:	0802992c 	.word	0x0802992c
 800df88:	080299eb 	.word	0x080299eb

0800df8c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800df8c:	b570      	push	{r4, r5, r6, lr}
 800df8e:	6803      	ldr	r3, [r0, #0]
 800df90:	4616      	mov	r6, r2
 800df92:	4604      	mov	r4, r0
 800df94:	460d      	mov	r5, r1
 800df96:	6a1b      	ldr	r3, [r3, #32]
 800df98:	4798      	blx	r3
 800df9a:	4286      	cmp	r6, r0
 800df9c:	d905      	bls.n	800dfaa <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800df9e:	4b06      	ldr	r3, [pc, #24]	; (800dfb8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800dfa0:	213a      	movs	r1, #58	; 0x3a
 800dfa2:	4a06      	ldr	r2, [pc, #24]	; (800dfbc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800dfa4:	4806      	ldr	r0, [pc, #24]	; (800dfc0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800dfa6:	f017 f9ff 	bl	80253a8 <__assert_func>
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	4629      	mov	r1, r5
 800dfae:	4620      	mov	r0, r4
 800dfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfb6:	4718      	bx	r3
 800dfb8:	080299d4 	.word	0x080299d4
 800dfbc:	08029a38 	.word	0x08029a38
 800dfc0:	0802992c 	.word	0x0802992c

0800dfc4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800dfc4:	4770      	bx	lr
	...

0800dfc8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800dfc8:	4a02      	ldr	r2, [pc, #8]	; (800dfd4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800dfca:	6002      	str	r2, [r0, #0]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	8082      	strh	r2, [r0, #4]
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	08029a0c 	.word	0x08029a0c

0800dfd8 <_ZN8touchgfx9Container13getFirstChildEv>:
 800dfd8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800dfda:	4770      	bx	lr

0800dfdc <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800dfdc:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 800dfe0:	4770      	bx	lr

0800dfe2 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800dfe2:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 800dfe6:	4770      	bx	lr

0800dfe8 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800dfe8:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 800dfec:	4770      	bx	lr

0800dfee <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800dfee:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 800dff2:	4770      	bx	lr

0800dff4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800dff4:	b510      	push	{r4, lr}
 800dff6:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800dffa:	600c      	str	r4, [r1, #0]
 800dffc:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800e000:	6011      	str	r1, [r2, #0]
 800e002:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800e006:	801a      	strh	r2, [r3, #0]
 800e008:	9b02      	ldr	r3, [sp, #8]
 800e00a:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 800e00e:	801a      	strh	r2, [r3, #0]
 800e010:	bd10      	pop	{r4, pc}

0800e012 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800e012:	b510      	push	{r4, lr}
 800e014:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800e018:	600c      	str	r4, [r1, #0]
 800e01a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800e01e:	6011      	str	r1, [r2, #0]
 800e020:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800e024:	801a      	strh	r2, [r3, #0]
 800e026:	bd10      	pop	{r4, pc}

0800e028 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800e028:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800e02c:	600b      	str	r3, [r1, #0]
 800e02e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e032:	6013      	str	r3, [r2, #0]
 800e034:	4770      	bx	lr

0800e036 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800e036:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 800e03a:	4770      	bx	lr

0800e03c <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800e03c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800e040:	4770      	bx	lr

0800e042 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800e042:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800e046:	4770      	bx	lr

0800e048 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800e048:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800e04c:	4770      	bx	lr

0800e04e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800e04e:	4770      	bx	lr

0800e050 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800e050:	b510      	push	{r4, lr}
 800e052:	4604      	mov	r4, r0
 800e054:	21b4      	movs	r1, #180	; 0xb4
 800e056:	f016 ffd4 	bl	8025002 <_ZdlPvj>
 800e05a:	4620      	mov	r0, r4
 800e05c:	bd10      	pop	{r4, pc}

0800e05e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800e05e:	b570      	push	{r4, r5, r6, lr}
 800e060:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800e064:	4604      	mov	r4, r0
 800e066:	4616      	mov	r6, r2
 800e068:	428d      	cmp	r5, r1
 800e06a:	bfb8      	it	lt
 800e06c:	460d      	movlt	r5, r1
 800e06e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800e072:	428d      	cmp	r5, r1
 800e074:	bfa8      	it	ge
 800e076:	460d      	movge	r5, r1
 800e078:	b99a      	cbnz	r2, 800e0a2 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800e07a:	6803      	ldr	r3, [r0, #0]
 800e07c:	4629      	mov	r1, r5
 800e07e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e082:	4798      	blx	r3
 800e084:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e088:	b358      	cbz	r0, 800e0e2 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 800e08a:	6803      	ldr	r3, [r0, #0]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	4798      	blx	r3
 800e090:	b338      	cbz	r0, 800e0e2 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 800e092:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e096:	4621      	mov	r1, r4
 800e098:	6803      	ldr	r3, [r0, #0]
 800e09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	4718      	bx	r3
 800e0a2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	dd07      	ble.n	800e0ba <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 800e0aa:	f005 fae1 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	f005 fb16 	bl	80136e0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e0c2:	4798      	blx	r3
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 800e0ca:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800e0ce:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 800e0d2:	f005 facd 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	f005 fad0 	bl	801367c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}

0800e0e4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800e0e4:	b510      	push	{r4, lr}
 800e0e6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	4299      	cmp	r1, r3
 800e0ee:	bfb8      	it	lt
 800e0f0:	4619      	movlt	r1, r3
 800e0f2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e0f6:	4299      	cmp	r1, r3
 800e0f8:	bfa8      	it	ge
 800e0fa:	4619      	movge	r1, r3
 800e0fc:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800e100:	428b      	cmp	r3, r1
 800e102:	d010      	beq.n	800e126 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800e104:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 800e108:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800e10c:	b158      	cbz	r0, 800e126 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800e10e:	6803      	ldr	r3, [r0, #0]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	4798      	blx	r3
 800e114:	b138      	cbz	r0, 800e126 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800e116:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800e11a:	4621      	mov	r1, r4
 800e11c:	6803      	ldr	r3, [r0, #0]
 800e11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	4718      	bx	r3
 800e126:	bd10      	pop	{r4, pc}

0800e128 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800e128:	4291      	cmp	r1, r2
 800e12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e12e:	4604      	mov	r4, r0
 800e130:	460e      	mov	r6, r1
 800e132:	4615      	mov	r5, r2
 800e134:	4698      	mov	r8, r3
 800e136:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800e13a:	db05      	blt.n	800e148 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 800e13c:	4b11      	ldr	r3, [pc, #68]	; (800e184 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 800e13e:	214b      	movs	r1, #75	; 0x4b
 800e140:	4a11      	ldr	r2, [pc, #68]	; (800e188 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 800e142:	4812      	ldr	r0, [pc, #72]	; (800e18c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 800e144:	f017 f930 	bl	80253a8 <__assert_func>
 800e148:	6803      	ldr	r3, [r0, #0]
 800e14a:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 800e14e:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800e152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e156:	4798      	blx	r3
 800e158:	f1b8 0f00 	cmp.w	r8, #0
 800e15c:	d10c      	bne.n	800e178 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 800e15e:	1bad      	subs	r5, r5, r6
 800e160:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 800e164:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 800e168:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 800e16c:	42bb      	cmp	r3, r7
 800e16e:	d806      	bhi.n	800e17e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 800e172:	2158      	movs	r1, #88	; 0x58
 800e174:	4a04      	ldr	r2, [pc, #16]	; (800e188 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 800e176:	e7e4      	b.n	800e142 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 800e178:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 800e17c:	e7f2      	b.n	800e164 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 800e17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e182:	bf00      	nop
 800e184:	08029b03 	.word	0x08029b03
 800e188:	08029c50 	.word	0x08029c50
 800e18c:	08029b0d 	.word	0x08029b0d
 800e190:	08029b64 	.word	0x08029b64

0800e194 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800e194:	b570      	push	{r4, r5, r6, lr}
 800e196:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800e19a:	4604      	mov	r4, r0
 800e19c:	b3a3      	cbz	r3, 800e208 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800e19e:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 800e1ae:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 800e1b2:	b280      	uxth	r0, r0
 800e1b4:	1ad2      	subs	r2, r2, r3
 800e1b6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800e1ba:	b212      	sxth	r2, r2
 800e1bc:	47a8      	blx	r5
 800e1be:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	4401      	add	r1, r0
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e1cc:	4798      	blx	r3
 800e1ce:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	db18      	blt.n	800e208 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800e1d6:	2500      	movs	r5, #0
 800e1d8:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800e1dc:	f005 fa48 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 800e1e0:	4621      	mov	r1, r4
 800e1e2:	f005 fa7d 	bl	80136e0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 800e1e6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e1ea:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800e1ee:	b158      	cbz	r0, 800e208 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800e1f0:	6803      	ldr	r3, [r0, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	4798      	blx	r3
 800e1f6:	b138      	cbz	r0, 800e208 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800e1f8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	6803      	ldr	r3, [r0, #0]
 800e200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	4718      	bx	r3
 800e208:	bd70      	pop	{r4, r5, r6, pc}

0800e20a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800e20a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e20c:	4604      	mov	r4, r0
 800e20e:	460d      	mov	r5, r1
 800e210:	b1a9      	cbz	r1, 800e23e <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800e212:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 800e216:	ab01      	add	r3, sp, #4
 800e218:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 800e21c:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800e220:	1b89      	subs	r1, r1, r6
 800e222:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 800e226:	1a12      	subs	r2, r2, r0
 800e228:	1a38      	subs	r0, r7, r0
 800e22a:	f006 fbb3 	bl	8014994 <_ZN8touchgfx6muldivElllRl>
 800e22e:	4629      	mov	r1, r5
 800e230:	ab01      	add	r3, sp, #4
 800e232:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 800e236:	4430      	add	r0, r6
 800e238:	f006 fbac 	bl	8014994 <_ZN8touchgfx6muldivElllRl>
 800e23c:	b285      	uxth	r5, r0
 800e23e:	4628      	mov	r0, r5
 800e240:	b003      	add	sp, #12
 800e242:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e244 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800e244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e248:	4604      	mov	r4, r0
 800e24a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800e24e:	4698      	mov	r8, r3
 800e250:	460e      	mov	r6, r1
 800e252:	4615      	mov	r5, r2
 800e254:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 800e258:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800e25c:	4619      	mov	r1, r3
 800e25e:	463a      	mov	r2, r7
 800e260:	3058      	adds	r0, #88	; 0x58
 800e262:	f7f7 fc29 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e266:	4446      	add	r6, r8
 800e268:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800e26c:	443d      	add	r5, r7
 800e26e:	42b3      	cmp	r3, r6
 800e270:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e274:	bfb8      	it	lt
 800e276:	8126      	strhlt	r6, [r4, #8]
 800e278:	42ab      	cmp	r3, r5
 800e27a:	bfb8      	it	lt
 800e27c:	8165      	strhlt	r5, [r4, #10]
 800e27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e282 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800e282:	b510      	push	{r4, lr}
 800e284:	4604      	mov	r4, r0
 800e286:	302c      	adds	r0, #44	; 0x2c
 800e288:	f003 fc2f 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800e28c:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 800e290:	4620      	mov	r0, r4
 800e292:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800e296:	f7f7 fc0f 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e29a:	bd10      	pop	{r4, pc}

0800e29c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800e29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e29e:	4604      	mov	r4, r0
 800e2a0:	2500      	movs	r5, #0
 800e2a2:	f7f6 fded 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 800e2a6:	4b24      	ldr	r3, [pc, #144]	; (800e338 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800e2a8:	4626      	mov	r6, r4
 800e2aa:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800e2ae:	2226      	movs	r2, #38	; 0x26
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	62a5      	str	r5, [r4, #40]	; 0x28
 800e2b4:	f846 3b2c 	str.w	r3, [r6], #44
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e2be:	f017 f903 	bl	80254c8 <memset>
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f7f6 fddc 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 800e2c8:	a902      	add	r1, sp, #8
 800e2ca:	4b1c      	ldr	r3, [pc, #112]	; (800e33c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 800e2d2:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800e2d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2d8:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800e2dc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800e2e0:	f003 fc03 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800e2e4:	4638      	mov	r0, r7
 800e2e6:	f7f6 fdcb 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 800e2ea:	4b15      	ldr	r3, [pc, #84]	; (800e340 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	65a3      	str	r3, [r4, #88]	; 0x58
 800e2f2:	2364      	movs	r3, #100	; 0x64
 800e2f4:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800e2f8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800e2fc:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 800e300:	4b10      	ldr	r3, [pc, #64]	; (800e344 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800e302:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 800e306:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800e30a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 800e30e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800e312:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 800e316:	f7f6 fa24 	bl	8004762 <_ZN8touchgfx8Drawable4setXEs>
 800e31a:	4629      	mov	r1, r5
 800e31c:	4630      	mov	r0, r6
 800e31e:	f7f6 fa22 	bl	8004766 <_ZN8touchgfx8Drawable4setYEs>
 800e322:	4631      	mov	r1, r6
 800e324:	4620      	mov	r0, r4
 800e326:	f000 fb6d 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e32a:	4620      	mov	r0, r4
 800e32c:	4639      	mov	r1, r7
 800e32e:	f000 fb69 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e332:	4620      	mov	r0, r4
 800e334:	b003      	add	sp, #12
 800e336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e338:	08029b88 	.word	0x08029b88
 800e33c:	0802afb8 	.word	0x0802afb8
 800e340:	0802a008 	.word	0x0802a008
 800e344:	080150f9 	.word	0x080150f9

0800e348 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 800e348:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 800e34c:	4770      	bx	lr

0800e34e <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 800e34e:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 800e352:	4770      	bx	lr

0800e354 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 800e354:	8101      	strh	r1, [r0, #8]
 800e356:	8781      	strh	r1, [r0, #60]	; 0x3c
 800e358:	4770      	bx	lr

0800e35a <_ZN8touchgfx12DigitalClock9setHeightEs>:
 800e35a:	8141      	strh	r1, [r0, #10]
 800e35c:	87c1      	strh	r1, [r0, #62]	; 0x3e
 800e35e:	4770      	bx	lr

0800e360 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 800e360:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 800e364:	4770      	bx	lr

0800e366 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 800e366:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800e36a:	4770      	bx	lr

0800e36c <_ZNK8touchgfx12DigitalClock8getColorEv>:
 800e36c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800e36e:	4770      	bx	lr

0800e370 <_ZN8touchgfx12DigitalClockD1Ev>:
 800e370:	4770      	bx	lr

0800e372 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 800e372:	6641      	str	r1, [r0, #100]	; 0x64
 800e374:	3034      	adds	r0, #52	; 0x34
 800e376:	f006 b945 	b.w	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

0800e37c <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 800e37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e384:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800e388:	4605      	mov	r5, r0
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d026      	beq.n	800e3dc <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x60>
 800e38e:	6802      	ldr	r2, [r0, #0]
 800e390:	b28c      	uxth	r4, r1
 800e392:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 800e396:	6d56      	ldr	r6, [r2, #84]	; 0x54
 800e398:	4a11      	ldr	r2, [pc, #68]	; (800e3e0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x64>)
 800e39a:	6812      	ldr	r2, [r2, #0]
 800e39c:	b92a      	cbnz	r2, 800e3aa <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x2e>
 800e39e:	4b11      	ldr	r3, [pc, #68]	; (800e3e4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x68>)
 800e3a0:	21ae      	movs	r1, #174	; 0xae
 800e3a2:	4a11      	ldr	r2, [pc, #68]	; (800e3e8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 800e3a4:	4811      	ldr	r0, [pc, #68]	; (800e3ec <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x70>)
 800e3a6:	f016 ffff 	bl	80253a8 <__assert_func>
 800e3aa:	4911      	ldr	r1, [pc, #68]	; (800e3f0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x74>)
 800e3ac:	8809      	ldrh	r1, [r1, #0]
 800e3ae:	4299      	cmp	r1, r3
 800e3b0:	d803      	bhi.n	800e3ba <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x3e>
 800e3b2:	4b10      	ldr	r3, [pc, #64]	; (800e3f4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x78>)
 800e3b4:	21af      	movs	r1, #175	; 0xaf
 800e3b6:	4a0c      	ldr	r2, [pc, #48]	; (800e3e8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 800e3b8:	e7f4      	b.n	800e3a4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x28>
 800e3ba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e3be:	4b0e      	ldr	r3, [pc, #56]	; (800e3f8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x7c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e3c6:	6803      	ldr	r3, [r0, #0]
 800e3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ca:	4798      	blx	r3
 800e3cc:	1a22      	subs	r2, r4, r0
 800e3ce:	4639      	mov	r1, r7
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	4633      	mov	r3, r6
 800e3d4:	b212      	sxth	r2, r2
 800e3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3da:	4718      	bx	r3
 800e3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e0:	20060ca0 	.word	0x20060ca0
 800e3e4:	08028d75 	.word	0x08028d75
 800e3e8:	08029dbc 	.word	0x08029dbc
 800e3ec:	08028e03 	.word	0x08028e03
 800e3f0:	20060ca4 	.word	0x20060ca4
 800e3f4:	08028e2c 	.word	0x08028e2c
 800e3f8:	20060ca8 	.word	0x20060ca8

0800e3fc <_ZN8touchgfx12DigitalClockD0Ev>:
 800e3fc:	b510      	push	{r4, lr}
 800e3fe:	4604      	mov	r4, r0
 800e400:	218c      	movs	r1, #140	; 0x8c
 800e402:	f016 fdfe 	bl	8025002 <_ZdlPvj>
 800e406:	4620      	mov	r0, r4
 800e408:	bd10      	pop	{r4, pc}

0800e40a <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 800e40a:	b510      	push	{r4, lr}
 800e40c:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800e410:	4620      	mov	r0, r4
 800e412:	f002 ffe4 	bl	80113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800e416:	4620      	mov	r0, r4
 800e418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e41c:	f006 b8f2 	b.w	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>

0800e420 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 800e420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e424:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800e428:	b085      	sub	sp, #20
 800e42a:	4604      	mov	r4, r0
 800e42c:	bb03      	cbnz	r3, 800e470 <_ZN8touchgfx12DigitalClock11updateClockEv+0x50>
 800e42e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e432:	f100 0574 	add.w	r5, r0, #116	; 0x74
 800e436:	4a3f      	ldr	r2, [pc, #252]	; (800e534 <_ZN8touchgfx12DigitalClock11updateClockEv+0x114>)
 800e438:	4e3f      	ldr	r6, [pc, #252]	; (800e538 <_ZN8touchgfx12DigitalClock11updateClockEv+0x118>)
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	bf08      	it	eq
 800e43e:	4616      	moveq	r6, r2
 800e440:	f000 f969 	bl	800e716 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800e444:	4607      	mov	r7, r0
 800e446:	4620      	mov	r0, r4
 800e448:	f000 f978 	bl	800e73c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800e44c:	4680      	mov	r8, r0
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 f96d 	bl	800e72e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800e454:	2800      	cmp	r0, #0
 800e456:	4632      	mov	r2, r6
 800e458:	f04f 010c 	mov.w	r1, #12
 800e45c:	bf14      	ite	ne
 800e45e:	2341      	movne	r3, #65	; 0x41
 800e460:	2350      	moveq	r3, #80	; 0x50
 800e462:	4628      	mov	r0, r5
 800e464:	e9cd 8300 	strd	r8, r3, [sp]
 800e468:	463b      	mov	r3, r7
 800e46a:	f008 f993 	bl	8016794 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800e46e:	e016      	b.n	800e49e <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 800e470:	2b01      	cmp	r3, #1
 800e472:	d11b      	bne.n	800e4ac <_ZN8touchgfx12DigitalClock11updateClockEv+0x8c>
 800e474:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e478:	4a30      	ldr	r2, [pc, #192]	; (800e53c <_ZN8touchgfx12DigitalClock11updateClockEv+0x11c>)
 800e47a:	4d31      	ldr	r5, [pc, #196]	; (800e540 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	bf08      	it	eq
 800e480:	4615      	moveq	r5, r2
 800e482:	f000 f945 	bl	800e710 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800e486:	4606      	mov	r6, r0
 800e488:	4620      	mov	r0, r4
 800e48a:	f000 f957 	bl	800e73c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800e48e:	462a      	mov	r2, r5
 800e490:	9000      	str	r0, [sp, #0]
 800e492:	4633      	mov	r3, r6
 800e494:	210c      	movs	r1, #12
 800e496:	f104 0074 	add.w	r0, r4, #116	; 0x74
 800e49a:	f008 f97b 	bl	8016794 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800e49e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e4a2:	b005      	add	sp, #20
 800e4a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4a8:	f006 b8ac 	b.w	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d125      	bne.n	800e4fc <_ZN8touchgfx12DigitalClock11updateClockEv+0xdc>
 800e4b0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e4b4:	f100 0574 	add.w	r5, r0, #116	; 0x74
 800e4b8:	4a22      	ldr	r2, [pc, #136]	; (800e544 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 800e4ba:	4e23      	ldr	r6, [pc, #140]	; (800e548 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	bf08      	it	eq
 800e4c0:	4616      	moveq	r6, r2
 800e4c2:	f000 f928 	bl	800e716 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800e4c6:	4607      	mov	r7, r0
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f000 f937 	bl	800e73c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800e4ce:	4680      	mov	r8, r0
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f000 f936 	bl	800e742 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800e4d6:	4681      	mov	r9, r0
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f000 f928 	bl	800e72e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	f8cd 8000 	str.w	r8, [sp]
 800e4e4:	4632      	mov	r2, r6
 800e4e6:	bf14      	ite	ne
 800e4e8:	2341      	movne	r3, #65	; 0x41
 800e4ea:	2350      	moveq	r3, #80	; 0x50
 800e4ec:	210c      	movs	r1, #12
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e4f4:	463b      	mov	r3, r7
 800e4f6:	f008 f94d 	bl	8016794 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800e4fa:	e7d0      	b.n	800e49e <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 800e4fc:	2b03      	cmp	r3, #3
 800e4fe:	d1ce      	bne.n	800e49e <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 800e500:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e504:	4a11      	ldr	r2, [pc, #68]	; (800e54c <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 800e506:	4d12      	ldr	r5, [pc, #72]	; (800e550 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 800e508:	2b00      	cmp	r3, #0
 800e50a:	bf08      	it	eq
 800e50c:	4615      	moveq	r5, r2
 800e50e:	f000 f8ff 	bl	800e710 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800e512:	4606      	mov	r6, r0
 800e514:	4620      	mov	r0, r4
 800e516:	f000 f911 	bl	800e73c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800e51a:	4607      	mov	r7, r0
 800e51c:	4620      	mov	r0, r4
 800e51e:	f000 f910 	bl	800e742 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800e522:	4633      	mov	r3, r6
 800e524:	462a      	mov	r2, r5
 800e526:	210c      	movs	r1, #12
 800e528:	e9cd 7000 	strd	r7, r0, [sp]
 800e52c:	f104 0074 	add.w	r0, r4, #116	; 0x74
 800e530:	e79b      	b.n	800e46a <_ZN8touchgfx12DigitalClock11updateClockEv+0x4a>
 800e532:	bf00      	nop
 800e534:	08029ca9 	.word	0x08029ca9
 800e538:	08029cd3 	.word	0x08029cd3
 800e53c:	08029cb5 	.word	0x08029cb5
 800e540:	08029cf3 	.word	0x08029cf3
 800e544:	08029cd0 	.word	0x08029cd0
 800e548:	08029cbd 	.word	0x08029cbd
 800e54c:	08029cf0 	.word	0x08029cf0
 800e550:	08029ce1 	.word	0x08029ce1

0800e554 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800e554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e55a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e55c:	4606      	mov	r6, r0
 800e55e:	4299      	cmp	r1, r3
 800e560:	d02a      	beq.n	800e5b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 800e562:	4b16      	ldr	r3, [pc, #88]	; (800e5bc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	b92b      	cbnz	r3, 800e574 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 800e568:	4b15      	ldr	r3, [pc, #84]	; (800e5c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 800e56a:	21ae      	movs	r1, #174	; 0xae
 800e56c:	4a15      	ldr	r2, [pc, #84]	; (800e5c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e56e:	4816      	ldr	r0, [pc, #88]	; (800e5c8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 800e570:	f016 ff1a 	bl	80253a8 <__assert_func>
 800e574:	4a15      	ldr	r2, [pc, #84]	; (800e5cc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 800e576:	8812      	ldrh	r2, [r2, #0]
 800e578:	428a      	cmp	r2, r1
 800e57a:	d803      	bhi.n	800e584 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 800e57c:	4b14      	ldr	r3, [pc, #80]	; (800e5d0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 800e57e:	21af      	movs	r1, #175	; 0xaf
 800e580:	4a10      	ldr	r2, [pc, #64]	; (800e5c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e582:	e7f4      	b.n	800e56e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 800e584:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e588:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e58c:	4b11      	ldr	r3, [pc, #68]	; (800e5d4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 800e58e:	7854      	ldrb	r4, [r2, #1]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800e596:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800e59a:	682b      	ldr	r3, [r5, #0]
 800e59c:	69df      	ldr	r7, [r3, #28]
 800e59e:	4b0e      	ldr	r3, [pc, #56]	; (800e5d8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 800e5a0:	6818      	ldr	r0, [r3, #0]
 800e5a2:	f7f7 fcb3 	bl	8005f0c <_ZNK8touchgfx5Texts7getTextEt>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	4621      	mov	r1, r4
 800e5ac:	9300      	str	r3, [sp, #0]
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800e5b2:	47b8      	blx	r7
 800e5b4:	b003      	add	sp, #12
 800e5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	e7fb      	b.n	800e5b4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 800e5bc:	20060ca0 	.word	0x20060ca0
 800e5c0:	08028d75 	.word	0x08028d75
 800e5c4:	08029dbc 	.word	0x08029dbc
 800e5c8:	08028e03 	.word	0x08028e03
 800e5cc:	20060ca4 	.word	0x20060ca4
 800e5d0:	08028e2c 	.word	0x08028e2c
 800e5d4:	20060ca8 	.word	0x20060ca8
 800e5d8:	20060cac 	.word	0x20060cac

0800e5dc <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 800e5dc:	b508      	push	{r3, lr}
 800e5de:	3034      	adds	r0, #52	; 0x34
 800e5e0:	f7ff ffb8 	bl	800e554 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 800e5e4:	bd08      	pop	{r3, pc}
	...

0800e5e8 <_ZN8touchgfx12DigitalClockC1Ev>:
 800e5e8:	b510      	push	{r4, lr}
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	f000 f874 	bl	800e6d8 <_ZN8touchgfx13AbstractClockC1Ev>
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	4b1d      	ldr	r3, [pc, #116]	; (800e668 <_ZN8touchgfx12DigitalClockC1Ev+0x80>)
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800e5fa:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800e5fe:	4a1b      	ldr	r2, [pc, #108]	; (800e66c <_ZN8touchgfx12DigitalClockC1Ev+0x84>)
 800e600:	6023      	str	r3, [r4, #0]
 800e602:	2303      	movs	r3, #3
 800e604:	65e2      	str	r2, [r4, #92]	; 0x5c
 800e606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e60a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800e60e:	2300      	movs	r3, #0
 800e610:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 800e614:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800e618:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800e61c:	66a2      	str	r2, [r4, #104]	; 0x68
 800e61e:	4a14      	ldr	r2, [pc, #80]	; (800e670 <_ZN8touchgfx12DigitalClockC1Ev+0x88>)
 800e620:	8723      	strh	r3, [r4, #56]	; 0x38
 800e622:	6362      	str	r2, [r4, #52]	; 0x34
 800e624:	4622      	mov	r2, r4
 800e626:	8763      	strh	r3, [r4, #58]	; 0x3a
 800e628:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e62a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e62c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800e630:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800e634:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 800e638:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800e63c:	6523      	str	r3, [r4, #80]	; 0x50
 800e63e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e642:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e646:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800e64a:	6663      	str	r3, [r4, #100]	; 0x64
 800e64c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 800e650:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 800e654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e658:	f822 3f74 	strh.w	r3, [r2, #116]!
 800e65c:	6722      	str	r2, [r4, #112]	; 0x70
 800e65e:	f000 f9d1 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e662:	4620      	mov	r0, r4
 800e664:	bd10      	pop	{r4, pc}
 800e666:	bf00      	nop
 800e668:	08029d08 	.word	0x08029d08
 800e66c:	080286dc 	.word	0x080286dc
 800e670:	0802af10 	.word	0x0802af10

0800e674 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 800e674:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 800e678:	4770      	bx	lr

0800e67a <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 800e67a:	b470      	push	{r4, r5, r6}
 800e67c:	2518      	movs	r5, #24
 800e67e:	fbb1 f6f5 	udiv	r6, r1, r5
 800e682:	fb06 1115 	mls	r1, r6, r5, r1
 800e686:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 800e68a:	213c      	movs	r1, #60	; 0x3c
 800e68c:	fbb2 f5f1 	udiv	r5, r2, r1
 800e690:	fb05 2211 	mls	r2, r5, r1, r2
 800e694:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 800e698:	fbb3 f2f1 	udiv	r2, r3, r1
 800e69c:	fb02 3311 	mls	r3, r2, r1, r3
 800e6a0:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 800e6a4:	6803      	ldr	r3, [r0, #0]
 800e6a6:	bc70      	pop	{r4, r5, r6}
 800e6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6ac:	4718      	bx	r3

0800e6ae <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 800e6ae:	b4f0      	push	{r4, r5, r6, r7}
 800e6b0:	6804      	ldr	r4, [r0, #0]
 800e6b2:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800e6b6:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800e6ba:	240c      	movs	r4, #12
 800e6bc:	2e00      	cmp	r6, #0
 800e6be:	46ac      	mov	ip, r5
 800e6c0:	fbb1 f7f4 	udiv	r7, r1, r4
 800e6c4:	fb07 1114 	mls	r1, r7, r4, r1
 800e6c8:	bf18      	it	ne
 800e6ca:	2400      	movne	r4, #0
 800e6cc:	fa54 f181 	uxtab	r1, r4, r1
 800e6d0:	bcf0      	pop	{r4, r5, r6, r7}
 800e6d2:	b2c9      	uxtb	r1, r1
 800e6d4:	4760      	bx	ip
	...

0800e6d8 <_ZN8touchgfx13AbstractClockC1Ev>:
 800e6d8:	2101      	movs	r1, #1
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800e6e0:	490a      	ldr	r1, [pc, #40]	; (800e70c <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 800e6e2:	8082      	strh	r2, [r0, #4]
 800e6e4:	80c2      	strh	r2, [r0, #6]
 800e6e6:	8102      	strh	r2, [r0, #8]
 800e6e8:	8142      	strh	r2, [r0, #10]
 800e6ea:	8182      	strh	r2, [r0, #12]
 800e6ec:	81c2      	strh	r2, [r0, #14]
 800e6ee:	8202      	strh	r2, [r0, #16]
 800e6f0:	8242      	strh	r2, [r0, #18]
 800e6f2:	61c2      	str	r2, [r0, #28]
 800e6f4:	8402      	strh	r2, [r0, #32]
 800e6f6:	8442      	strh	r2, [r0, #34]	; 0x22
 800e6f8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800e6fc:	6001      	str	r1, [r0, #0]
 800e6fe:	6282      	str	r2, [r0, #40]	; 0x28
 800e700:	8582      	strh	r2, [r0, #44]	; 0x2c
 800e702:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 800e706:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e70a:	4770      	bx	lr
 800e70c:	08029df4 	.word	0x08029df4

0800e710 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 800e710:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800e714:	4770      	bx	lr

0800e716 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 800e716:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800e71a:	220c      	movs	r2, #12
 800e71c:	f100 030b 	add.w	r3, r0, #11
 800e720:	fb93 f0f2 	sdiv	r0, r3, r2
 800e724:	fb02 3010 	mls	r0, r2, r0, r3
 800e728:	3001      	adds	r0, #1
 800e72a:	b2c0      	uxtb	r0, r0
 800e72c:	4770      	bx	lr

0800e72e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 800e72e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800e732:	280b      	cmp	r0, #11
 800e734:	bf8c      	ite	hi
 800e736:	2000      	movhi	r0, #0
 800e738:	2001      	movls	r0, #1
 800e73a:	4770      	bx	lr

0800e73c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 800e73c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 800e740:	4770      	bx	lr

0800e742 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 800e742:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 800e746:	4770      	bx	lr

0800e748 <_ZNK8touchgfx11ModalWindow18getBackgroundWidthEv>:
 800e748:	f8b0 008c 	ldrh.w	r0, [r0, #140]	; 0x8c
 800e74c:	4770      	bx	lr

0800e74e <_ZNK8touchgfx11ModalWindow19getBackgroundHeightEv>:
 800e74e:	f8b0 008e 	ldrh.w	r0, [r0, #142]	; 0x8e
 800e752:	4770      	bx	lr

0800e754 <_ZNK8touchgfx11ModalWindow13getShadeAlphaEv>:
 800e754:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
 800e758:	4770      	bx	lr

0800e75a <_ZNK8touchgfx11ModalWindow13getShadeColorEv>:
 800e75a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800e75c:	4770      	bx	lr

0800e75e <_ZN8touchgfx11ModalWindow4showEv>:
 800e75e:	2201      	movs	r2, #1
 800e760:	6803      	ldr	r3, [r0, #0]
 800e762:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800e766:	695b      	ldr	r3, [r3, #20]
 800e768:	4718      	bx	r3

0800e76a <_ZN8touchgfx11ModalWindow4hideEv>:
 800e76a:	2200      	movs	r2, #0
 800e76c:	6803      	ldr	r3, [r0, #0]
 800e76e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	4718      	bx	r3

0800e776 <_ZN8touchgfx11ModalWindowD1Ev>:
 800e776:	4770      	bx	lr

0800e778 <_ZN8touchgfx11ModalWindow3addERNS_8DrawableE>:
 800e778:	3058      	adds	r0, #88	; 0x58
 800e77a:	f000 b943 	b.w	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>

0800e77e <_ZN8touchgfx11ModalWindow13setShadeColorENS_9colortypeE>:
 800e77e:	6541      	str	r1, [r0, #84]	; 0x54
 800e780:	302c      	adds	r0, #44	; 0x2c
 800e782:	f005 bf3f 	b.w	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>

0800e786 <_ZN8touchgfx11ModalWindow13setShadeAlphaEh>:
 800e786:	f880 1052 	strb.w	r1, [r0, #82]	; 0x52
 800e78a:	302c      	adds	r0, #44	; 0x2c
 800e78c:	f005 bf3a 	b.w	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>

0800e790 <_ZN8touchgfx11ModalWindow6removeERNS_8DrawableE>:
 800e790:	3058      	adds	r0, #88	; 0x58
 800e792:	f000 b905 	b.w	800e9a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>

0800e796 <_ZN8touchgfx11ModalWindowD0Ev>:
 800e796:	b510      	push	{r4, lr}
 800e798:	4604      	mov	r4, r0
 800e79a:	21b0      	movs	r1, #176	; 0xb0
 800e79c:	f016 fc31 	bl	8025002 <_ZdlPvj>
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	bd10      	pop	{r4, pc}

0800e7a4 <_ZN8touchgfx11ModalWindow13setBackgroundERKtss>:
 800e7a4:	b570      	push	{r4, r5, r6, lr}
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	461e      	mov	r6, r3
 800e7aa:	4615      	mov	r5, r2
 800e7ac:	f854 3b58 	ldr.w	r3, [r4], #88
 800e7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7b4:	4798      	blx	r3
 800e7b6:	4632      	mov	r2, r6
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f7f6 fb72 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 800e7c0:	bd70      	pop	{r4, r5, r6, pc}

0800e7c2 <_ZN8touchgfx11ModalWindow13setBackgroundERKt>:
 800e7c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c4:	f100 0584 	add.w	r5, r0, #132	; 0x84
 800e7c8:	880b      	ldrh	r3, [r1, #0]
 800e7ca:	a902      	add	r1, sp, #8
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	f821 3d04 	strh.w	r3, [r1, #-4]!
 800e7d4:	f003 f989 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800e7d8:	2200      	movs	r2, #0
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f104 0558 	add.w	r5, r4, #88	; 0x58
 800e7e0:	4611      	mov	r1, r2
 800e7e2:	f7f6 fb5f 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 800e7e6:	f9b4 608c 	ldrsh.w	r6, [r4, #140]	; 0x8c
 800e7ea:	f9b4 708e 	ldrsh.w	r7, [r4, #142]	; 0x8e
 800e7ee:	2302      	movs	r3, #2
 800e7f0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e7fa:	1bd2      	subs	r2, r2, r7
 800e7fc:	1b89      	subs	r1, r1, r6
 800e7fe:	fb92 f2f3 	sdiv	r2, r2, r3
 800e802:	fb91 f1f3 	sdiv	r1, r1, r3
 800e806:	b212      	sxth	r2, r2
 800e808:	b209      	sxth	r1, r1
 800e80a:	f7f6 fb4b 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 800e80e:	463a      	mov	r2, r7
 800e810:	4631      	mov	r1, r6
 800e812:	4628      	mov	r0, r5
 800e814:	f7f7 f950 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	4620      	mov	r0, r4
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	4798      	blx	r3
 800e820:	b003      	add	sp, #12
 800e822:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e824 <_ZN8touchgfx11ModalWindowC1Ev>:
 800e824:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e828:	4604      	mov	r4, r0
 800e82a:	2600      	movs	r6, #0
 800e82c:	f7f6 fb28 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 800e830:	f04f 0a26 	mov.w	sl, #38	; 0x26
 800e834:	4625      	mov	r5, r4
 800e836:	4b35      	ldr	r3, [pc, #212]	; (800e90c <_ZN8touchgfx11ModalWindowC1Ev+0xe8>)
 800e838:	4652      	mov	r2, sl
 800e83a:	4631      	mov	r1, r6
 800e83c:	62a6      	str	r6, [r4, #40]	; 0x28
 800e83e:	f104 0858 	add.w	r8, r4, #88	; 0x58
 800e842:	f845 3b2c 	str.w	r3, [r5], #44
 800e846:	4628      	mov	r0, r5
 800e848:	f016 fe3e 	bl	80254c8 <memset>
 800e84c:	4628      	mov	r0, r5
 800e84e:	f7f6 fb17 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 800e852:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e856:	4b2e      	ldr	r3, [pc, #184]	; (800e910 <_ZN8touchgfx11ModalWindowC1Ev+0xec>)
 800e858:	4640      	mov	r0, r8
 800e85a:	f884 9052 	strb.w	r9, [r4, #82]	; 0x52
 800e85e:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800e862:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e864:	6566      	str	r6, [r4, #84]	; 0x54
 800e866:	f7f6 fb0b 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 800e86a:	4b2a      	ldr	r3, [pc, #168]	; (800e914 <_ZN8touchgfx11ModalWindowC1Ev+0xf0>)
 800e86c:	4652      	mov	r2, sl
 800e86e:	4631      	mov	r1, r6
 800e870:	65a3      	str	r3, [r4, #88]	; 0x58
 800e872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e876:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 800e87a:	4638      	mov	r0, r7
 800e87c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e880:	f016 fe22 	bl	80254c8 <memset>
 800e884:	4638      	mov	r0, r7
 800e886:	f7f6 fafb 	bl	8004e80 <_ZN8touchgfx8DrawableC1Ev>
 800e88a:	a902      	add	r1, sp, #8
 800e88c:	4b22      	ldr	r3, [pc, #136]	; (800e918 <_ZN8touchgfx11ModalWindowC1Ev+0xf4>)
 800e88e:	4638      	mov	r0, r7
 800e890:	f884 90ac 	strb.w	r9, [r4, #172]	; 0xac
 800e894:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800e898:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800e89c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
 800e8a0:	f003 f923 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800e8a4:	4b1d      	ldr	r3, [pc, #116]	; (800e91c <_ZN8touchgfx11ModalWindowC1Ev+0xf8>)
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e8ac:	4b1c      	ldr	r3, [pc, #112]	; (800e920 <_ZN8touchgfx11ModalWindowC1Ev+0xfc>)
 800e8ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e8b2:	f7f7 f901 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e8b6:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800e8ba:	f9b4 a00a 	ldrsh.w	sl, [r4, #10]
 800e8be:	4632      	mov	r2, r6
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	f7f6 faee 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 800e8c8:	4652      	mov	r2, sl
 800e8ca:	4649      	mov	r1, r9
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	f7f7 f8f3 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e8d2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	6563      	str	r3, [r4, #84]	; 0x54
 800e8da:	2301      	movs	r3, #1
 800e8dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800e8e0:	2360      	movs	r3, #96	; 0x60
 800e8e2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800e8e6:	f005 fe8d 	bl	8014604 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f000 f889 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e8f2:	4641      	mov	r1, r8
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f000 f885 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e8fa:	4640      	mov	r0, r8
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	f000 f881 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e902:	4620      	mov	r0, r4
 800e904:	b002      	add	sp, #8
 800e906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e90a:	bf00      	nop
 800e90c:	08029e8c 	.word	0x08029e8c
 800e910:	0802ac44 	.word	0x0802ac44
 800e914:	0802a008 	.word	0x0802a008
 800e918:	0802afb8 	.word	0x0802afb8
 800e91c:	20060c26 	.word	0x20060c26
 800e920:	20060c24 	.word	0x20060c24

0800e924 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800e924:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e926:	2000      	movs	r0, #0
 800e928:	b12b      	cbz	r3, 800e936 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e92a:	b920      	cbnz	r0, 800e936 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e92c:	1a5a      	subs	r2, r3, r1
 800e92e:	699b      	ldr	r3, [r3, #24]
 800e930:	4250      	negs	r0, r2
 800e932:	4150      	adcs	r0, r2
 800e934:	e7f8      	b.n	800e928 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800e936:	4770      	bx	lr

0800e938 <_ZN8touchgfx9Container9removeAllEv>:
 800e938:	2200      	movs	r2, #0
 800e93a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e93c:	b123      	cbz	r3, 800e948 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800e93e:	6999      	ldr	r1, [r3, #24]
 800e940:	6281      	str	r1, [r0, #40]	; 0x28
 800e942:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800e946:	e7f8      	b.n	800e93a <_ZN8touchgfx9Container9removeAllEv+0x2>
 800e948:	4770      	bx	lr

0800e94a <_ZN8touchgfx9Container6unlinkEv>:
 800e94a:	2300      	movs	r3, #0
 800e94c:	6283      	str	r3, [r0, #40]	; 0x28
 800e94e:	4770      	bx	lr

0800e950 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800e950:	2200      	movs	r2, #0
 800e952:	8002      	strh	r2, [r0, #0]
 800e954:	8042      	strh	r2, [r0, #2]
 800e956:	8082      	strh	r2, [r0, #4]
 800e958:	80c2      	strh	r2, [r0, #6]
 800e95a:	4770      	bx	lr

0800e95c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800e95c:	b570      	push	{r4, r5, r6, lr}
 800e95e:	460d      	mov	r5, r1
 800e960:	4616      	mov	r6, r2
 800e962:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e964:	b13c      	cbz	r4, 800e976 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800e966:	6823      	ldr	r3, [r4, #0]
 800e968:	4620      	mov	r0, r4
 800e96a:	4632      	mov	r2, r6
 800e96c:	4629      	mov	r1, r5
 800e96e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e970:	4798      	blx	r3
 800e972:	69a4      	ldr	r4, [r4, #24]
 800e974:	e7f6      	b.n	800e964 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800e976:	bd70      	pop	{r4, r5, r6, pc}

0800e978 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800e978:	b538      	push	{r3, r4, r5, lr}
 800e97a:	460d      	mov	r5, r1
 800e97c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e97e:	b134      	cbz	r4, 800e98e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800e980:	682b      	ldr	r3, [r5, #0]
 800e982:	4621      	mov	r1, r4
 800e984:	4628      	mov	r0, r5
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	4798      	blx	r3
 800e98a:	69a4      	ldr	r4, [r4, #24]
 800e98c:	e7f7      	b.n	800e97e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800e98e:	bd38      	pop	{r3, r4, r5, pc}

0800e990 <_ZN8touchgfx9ContainerD1Ev>:
 800e990:	4770      	bx	lr

0800e992 <_ZN8touchgfx9ContainerD0Ev>:
 800e992:	b510      	push	{r4, lr}
 800e994:	4604      	mov	r4, r0
 800e996:	212c      	movs	r1, #44	; 0x2c
 800e998:	f016 fb33 	bl	8025002 <_ZdlPvj>
 800e99c:	4620      	mov	r0, r4
 800e99e:	bd10      	pop	{r4, pc}

0800e9a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800e9a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e9a2:	b19b      	cbz	r3, 800e9cc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e9a4:	428b      	cmp	r3, r1
 800e9a6:	d109      	bne.n	800e9bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800e9a8:	699a      	ldr	r2, [r3, #24]
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	6159      	str	r1, [r3, #20]
 800e9ae:	6282      	str	r2, [r0, #40]	; 0x28
 800e9b0:	b902      	cbnz	r2, 800e9b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800e9b2:	4770      	bx	lr
 800e9b4:	6199      	str	r1, [r3, #24]
 800e9b6:	4770      	bx	lr
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	b13a      	cbz	r2, 800e9cc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e9bc:	699a      	ldr	r2, [r3, #24]
 800e9be:	428a      	cmp	r2, r1
 800e9c0:	d1fa      	bne.n	800e9b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800e9c2:	698a      	ldr	r2, [r1, #24]
 800e9c4:	619a      	str	r2, [r3, #24]
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800e9cc:	4770      	bx	lr

0800e9ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800e9ce:	b410      	push	{r4}
 800e9d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	b92b      	cbnz	r3, 800e9e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800e9d6:	6803      	ldr	r3, [r0, #0]
 800e9d8:	4611      	mov	r1, r2
 800e9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9e0:	4718      	bx	r3
 800e9e2:	b941      	cbnz	r1, 800e9f6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800e9e4:	6193      	str	r3, [r2, #24]
 800e9e6:	6282      	str	r2, [r0, #40]	; 0x28
 800e9e8:	6154      	str	r4, [r2, #20]
 800e9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d0f9      	beq.n	800e9ea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800e9f6:	4299      	cmp	r1, r3
 800e9f8:	6998      	ldr	r0, [r3, #24]
 800e9fa:	d1f9      	bne.n	800e9f0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800e9fc:	6190      	str	r0, [r2, #24]
 800e9fe:	618a      	str	r2, [r1, #24]
 800ea00:	e7f2      	b.n	800e9e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ea04:	4288      	cmp	r0, r1
 800ea06:	b508      	push	{r3, lr}
 800ea08:	d105      	bne.n	800ea16 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800ea0a:	4b11      	ldr	r3, [pc, #68]	; (800ea50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800ea0c:	2123      	movs	r1, #35	; 0x23
 800ea0e:	4a11      	ldr	r2, [pc, #68]	; (800ea54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800ea10:	4811      	ldr	r0, [pc, #68]	; (800ea58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800ea12:	f016 fcc9 	bl	80253a8 <__assert_func>
 800ea16:	694b      	ldr	r3, [r1, #20]
 800ea18:	b11b      	cbz	r3, 800ea22 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800ea1a:	4b10      	ldr	r3, [pc, #64]	; (800ea5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800ea1c:	2124      	movs	r1, #36	; 0x24
 800ea1e:	4a0d      	ldr	r2, [pc, #52]	; (800ea54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800ea20:	e7f6      	b.n	800ea10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800ea22:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800ea26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ea28:	b913      	cbnz	r3, 800ea30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800ea2a:	6281      	str	r1, [r0, #40]	; 0x28
 800ea2c:	bd08      	pop	{r3, pc}
 800ea2e:	4613      	mov	r3, r2
 800ea30:	699a      	ldr	r2, [r3, #24]
 800ea32:	b12a      	cbz	r2, 800ea40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800ea34:	428b      	cmp	r3, r1
 800ea36:	d1fa      	bne.n	800ea2e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800ea38:	4b09      	ldr	r3, [pc, #36]	; (800ea60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800ea3a:	2135      	movs	r1, #53	; 0x35
 800ea3c:	4a05      	ldr	r2, [pc, #20]	; (800ea54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800ea3e:	e7e7      	b.n	800ea10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800ea40:	428b      	cmp	r3, r1
 800ea42:	d103      	bne.n	800ea4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800ea44:	4b06      	ldr	r3, [pc, #24]	; (800ea60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800ea46:	2138      	movs	r1, #56	; 0x38
 800ea48:	4a02      	ldr	r2, [pc, #8]	; (800ea54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800ea4a:	e7e1      	b.n	800ea10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800ea4c:	6199      	str	r1, [r3, #24]
 800ea4e:	e7ed      	b.n	800ea2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800ea50:	08029f38 	.word	0x08029f38
 800ea54:	0802a08c 	.word	0x0802a08c
 800ea58:	08029f64 	.word	0x08029f64
 800ea5c:	08029f97 	.word	0x08029f97
 800ea60:	08029fcd 	.word	0x08029fcd

0800ea64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea68:	461f      	mov	r7, r3
 800ea6a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ea6e:	460d      	mov	r5, r1
 800ea70:	4616      	mov	r6, r2
 800ea72:	b103      	cbz	r3, 800ea76 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ea74:	6038      	str	r0, [r7, #0]
 800ea76:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ea78:	b314      	cbz	r4, 800eac0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ea7a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ea7e:	b1eb      	cbz	r3, 800eabc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ea80:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ea84:	428d      	cmp	r5, r1
 800ea86:	db19      	blt.n	800eabc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ea88:	b289      	uxth	r1, r1
 800ea8a:	8923      	ldrh	r3, [r4, #8]
 800ea8c:	440b      	add	r3, r1
 800ea8e:	b21b      	sxth	r3, r3
 800ea90:	429d      	cmp	r5, r3
 800ea92:	da13      	bge.n	800eabc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ea94:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ea98:	4296      	cmp	r6, r2
 800ea9a:	db0f      	blt.n	800eabc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ea9c:	b292      	uxth	r2, r2
 800ea9e:	8963      	ldrh	r3, [r4, #10]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	b21b      	sxth	r3, r3
 800eaa4:	429e      	cmp	r6, r3
 800eaa6:	da09      	bge.n	800eabc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800eaa8:	6823      	ldr	r3, [r4, #0]
 800eaaa:	1ab2      	subs	r2, r6, r2
 800eaac:	1a69      	subs	r1, r5, r1
 800eaae:	4620      	mov	r0, r4
 800eab0:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800eab4:	b212      	sxth	r2, r2
 800eab6:	463b      	mov	r3, r7
 800eab8:	b209      	sxth	r1, r1
 800eaba:	47c0      	blx	r8
 800eabc:	69a4      	ldr	r4, [r4, #24]
 800eabe:	e7db      	b.n	800ea78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800eac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eac4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800eac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	4c6d      	ldr	r4, [pc, #436]	; (800ec80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800eaca:	b0a1      	sub	sp, #132	; 0x84
 800eacc:	4606      	mov	r6, r0
 800eace:	6824      	ldr	r4, [r4, #0]
 800ead0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800ead2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800ead6:	2400      	movs	r4, #0
 800ead8:	9303      	str	r3, [sp, #12]
 800eada:	802c      	strh	r4, [r5, #0]
 800eadc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800eade:	802c      	strh	r4, [r5, #0]
 800eae0:	601c      	str	r4, [r3, #0]
 800eae2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800eae6:	f7ff ffbd 	bl	800ea64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800eaea:	f1b9 0f03 	cmp.w	r9, #3
 800eaee:	f340 80c1 	ble.w	800ec74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800eaf2:	4631      	mov	r1, r6
 800eaf4:	a80c      	add	r0, sp, #48	; 0x30
 800eaf6:	f005 fe1d 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eafa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800eafe:	9306      	str	r3, [sp, #24]
 800eb00:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800eb04:	9307      	str	r3, [sp, #28]
 800eb06:	9b03      	ldr	r3, [sp, #12]
 800eb08:	f8d3 a000 	ldr.w	sl, [r3]
 800eb0c:	f1ba 0f00 	cmp.w	sl, #0
 800eb10:	f000 80b3 	beq.w	800ec7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800eb14:	4651      	mov	r1, sl
 800eb16:	a810      	add	r0, sp, #64	; 0x40
 800eb18:	f005 fe0c 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eb1c:	2002      	movs	r0, #2
 800eb1e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800eb22:	9b01      	ldr	r3, [sp, #4]
 800eb24:	9a06      	ldr	r2, [sp, #24]
 800eb26:	fb91 f1f0 	sdiv	r1, r1, r0
 800eb2a:	189d      	adds	r5, r3, r2
 800eb2c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800eb30:	9a07      	ldr	r2, [sp, #28]
 800eb32:	4419      	add	r1, r3
 800eb34:	9b02      	ldr	r3, [sp, #8]
 800eb36:	4413      	add	r3, r2
 800eb38:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800eb3c:	1a6d      	subs	r5, r5, r1
 800eb3e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800eb42:	fb92 f2f0 	sdiv	r2, r2, r0
 800eb46:	440a      	add	r2, r1
 800eb48:	1a9b      	subs	r3, r3, r2
 800eb4a:	435b      	muls	r3, r3
 800eb4c:	fb05 3505 	mla	r5, r5, r5, r3
 800eb50:	4f4c      	ldr	r7, [pc, #304]	; (800ec84 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800eb52:	ac10      	add	r4, sp, #64	; 0x40
 800eb54:	f1b9 0f0c 	cmp.w	r9, #12
 800eb58:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eb5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eb5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eb62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb64:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800eb68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eb6c:	f04f 0303 	mov.w	r3, #3
 800eb70:	bfd8      	it	le
 800eb72:	f109 32ff 	addle.w	r2, r9, #4294967295
 800eb76:	f04f 0400 	mov.w	r4, #0
 800eb7a:	f8cd 9000 	str.w	r9, [sp]
 800eb7e:	bfcc      	ite	gt
 800eb80:	4698      	movgt	r8, r3
 800eb82:	fb92 f8f3 	sdivle	r8, r2, r3
 800eb86:	1c63      	adds	r3, r4, #1
 800eb88:	aa10      	add	r2, sp, #64	; 0x40
 800eb8a:	f004 0401 	and.w	r4, r4, #1
 800eb8e:	f04f 0b00 	mov.w	fp, #0
 800eb92:	9308      	str	r3, [sp, #32]
 800eb94:	9b00      	ldr	r3, [sp, #0]
 800eb96:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800eb9a:	fb93 f3f8 	sdiv	r3, r3, r8
 800eb9e:	3404      	adds	r4, #4
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	9304      	str	r3, [sp, #16]
 800eba4:	9a04      	ldr	r2, [sp, #16]
 800eba6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ebaa:	fb13 f302 	smulbb	r3, r3, r2
 800ebae:	9a01      	ldr	r2, [sp, #4]
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	1899      	adds	r1, r3, r2
 800ebb4:	9305      	str	r3, [sp, #20]
 800ebb6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ebba:	b209      	sxth	r1, r1
 800ebbc:	4299      	cmp	r1, r3
 800ebbe:	db4d      	blt.n	800ec5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ebc0:	8932      	ldrh	r2, [r6, #8]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	b21b      	sxth	r3, r3
 800ebc6:	4299      	cmp	r1, r3
 800ebc8:	da48      	bge.n	800ec5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ebca:	9b04      	ldr	r3, [sp, #16]
 800ebcc:	6827      	ldr	r7, [r4, #0]
 800ebce:	fb17 f703 	smulbb	r7, r7, r3
 800ebd2:	9b02      	ldr	r3, [sp, #8]
 800ebd4:	b2bf      	uxth	r7, r7
 800ebd6:	18fa      	adds	r2, r7, r3
 800ebd8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ebdc:	b212      	sxth	r2, r2
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	db3c      	blt.n	800ec5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ebe2:	8970      	ldrh	r0, [r6, #10]
 800ebe4:	4403      	add	r3, r0
 800ebe6:	b21b      	sxth	r3, r3
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	da37      	bge.n	800ec5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ebec:	2300      	movs	r3, #0
 800ebee:	4630      	mov	r0, r6
 800ebf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebf2:	ab0b      	add	r3, sp, #44	; 0x2c
 800ebf4:	f7ff ff36 	bl	800ea64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ebf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebfa:	b37a      	cbz	r2, 800ec5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ebfc:	4552      	cmp	r2, sl
 800ebfe:	d02d      	beq.n	800ec5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ec00:	4611      	mov	r1, r2
 800ec02:	a80e      	add	r0, sp, #56	; 0x38
 800ec04:	9209      	str	r2, [sp, #36]	; 0x24
 800ec06:	f005 fd95 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ec0a:	f04f 0e02 	mov.w	lr, #2
 800ec0e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800ec12:	9a06      	ldr	r2, [sp, #24]
 800ec14:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800ec18:	9b01      	ldr	r3, [sp, #4]
 800ec1a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800ec1e:	4413      	add	r3, r2
 800ec20:	9a07      	ldr	r2, [sp, #28]
 800ec22:	fb91 f1fe 	sdiv	r1, r1, lr
 800ec26:	fb9c fcfe 	sdiv	ip, ip, lr
 800ec2a:	4401      	add	r1, r0
 800ec2c:	1a58      	subs	r0, r3, r1
 800ec2e:	9b02      	ldr	r3, [sp, #8]
 800ec30:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800ec34:	4413      	add	r3, r2
 800ec36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec38:	448c      	add	ip, r1
 800ec3a:	eba3 030c 	sub.w	r3, r3, ip
 800ec3e:	435b      	muls	r3, r3
 800ec40:	fb00 3300 	mla	r3, r0, r0, r3
 800ec44:	42ab      	cmp	r3, r5
 800ec46:	d208      	bcs.n	800ec5a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800ec48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec4a:	461d      	mov	r5, r3
 800ec4c:	9803      	ldr	r0, [sp, #12]
 800ec4e:	6001      	str	r1, [r0, #0]
 800ec50:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ec52:	9805      	ldr	r0, [sp, #20]
 800ec54:	8008      	strh	r0, [r1, #0]
 800ec56:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ec58:	800f      	strh	r7, [r1, #0]
 800ec5a:	4692      	mov	sl, r2
 800ec5c:	f10b 0b01 	add.w	fp, fp, #1
 800ec60:	3408      	adds	r4, #8
 800ec62:	f1bb 0f04 	cmp.w	fp, #4
 800ec66:	d19d      	bne.n	800eba4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800ec68:	9b00      	ldr	r3, [sp, #0]
 800ec6a:	9c08      	ldr	r4, [sp, #32]
 800ec6c:	444b      	add	r3, r9
 800ec6e:	4544      	cmp	r4, r8
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	d188      	bne.n	800eb86 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800ec74:	b021      	add	sp, #132	; 0x84
 800ec76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7a:	f04f 35ff 	mov.w	r5, #4294967295
 800ec7e:	e767      	b.n	800eb50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800ec80:	20060c30 	.word	0x20060c30
 800ec84:	080264d8 	.word	0x080264d8

0800ec88 <_ZN8touchgfx4RectaNERKS0_>:
 800ec88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec8c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ec90:	888c      	ldrh	r4, [r1, #4]
 800ec92:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ec96:	443c      	add	r4, r7
 800ec98:	b2a4      	uxth	r4, r4
 800ec9a:	fa0f f884 	sxth.w	r8, r4
 800ec9e:	45c1      	cmp	r9, r8
 800eca0:	da2f      	bge.n	800ed02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800eca2:	8882      	ldrh	r2, [r0, #4]
 800eca4:	444a      	add	r2, r9
 800eca6:	b292      	uxth	r2, r2
 800eca8:	fa0f fe82 	sxth.w	lr, r2
 800ecac:	4577      	cmp	r7, lr
 800ecae:	da28      	bge.n	800ed02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ecb0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ecb4:	88cb      	ldrh	r3, [r1, #6]
 800ecb6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800ecba:	442b      	add	r3, r5
 800ecbc:	b21b      	sxth	r3, r3
 800ecbe:	429e      	cmp	r6, r3
 800ecc0:	da1f      	bge.n	800ed02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ecc2:	88c3      	ldrh	r3, [r0, #6]
 800ecc4:	4433      	add	r3, r6
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	fa0f fc83 	sxth.w	ip, r3
 800eccc:	4565      	cmp	r5, ip
 800ecce:	da18      	bge.n	800ed02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ecd0:	454f      	cmp	r7, r9
 800ecd2:	bfb8      	it	lt
 800ecd4:	464f      	movlt	r7, r9
 800ecd6:	42b5      	cmp	r5, r6
 800ecd8:	bfb8      	it	lt
 800ecda:	4635      	movlt	r5, r6
 800ecdc:	45f0      	cmp	r8, lr
 800ecde:	bfd8      	it	le
 800ece0:	4622      	movle	r2, r4
 800ece2:	1bd2      	subs	r2, r2, r7
 800ece4:	8082      	strh	r2, [r0, #4]
 800ece6:	884a      	ldrh	r2, [r1, #2]
 800ece8:	88c9      	ldrh	r1, [r1, #6]
 800ecea:	8007      	strh	r7, [r0, #0]
 800ecec:	440a      	add	r2, r1
 800ecee:	8045      	strh	r5, [r0, #2]
 800ecf0:	b292      	uxth	r2, r2
 800ecf2:	b211      	sxth	r1, r2
 800ecf4:	458c      	cmp	ip, r1
 800ecf6:	bfa8      	it	ge
 800ecf8:	4613      	movge	r3, r2
 800ecfa:	1b5b      	subs	r3, r3, r5
 800ecfc:	80c3      	strh	r3, [r0, #6]
 800ecfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed02:	2300      	movs	r3, #0
 800ed04:	8003      	strh	r3, [r0, #0]
 800ed06:	8043      	strh	r3, [r0, #2]
 800ed08:	8083      	strh	r3, [r0, #4]
 800ed0a:	80c3      	strh	r3, [r0, #6]
 800ed0c:	e7f7      	b.n	800ecfe <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ed0e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	dd06      	ble.n	800ed24 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800ed16:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	bfcc      	ite	gt
 800ed1e:	2000      	movgt	r0, #0
 800ed20:	2001      	movle	r0, #1
 800ed22:	4770      	bx	lr
 800ed24:	2001      	movs	r0, #1
 800ed26:	4770      	bx	lr

0800ed28 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ed28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	4604      	mov	r4, r0
 800ed30:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800ed32:	8003      	strh	r3, [r0, #0]
 800ed34:	8043      	strh	r3, [r0, #2]
 800ed36:	8083      	strh	r3, [r0, #4]
 800ed38:	80c3      	strh	r3, [r0, #6]
 800ed3a:	2d00      	cmp	r5, #0
 800ed3c:	d040      	beq.n	800edc0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ed3e:	1d28      	adds	r0, r5, #4
 800ed40:	f7ff ffe5 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed44:	b988      	cbnz	r0, 800ed6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ed46:	4620      	mov	r0, r4
 800ed48:	f7ff ffe1 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed4c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ed50:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ed54:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ed58:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ed5c:	b138      	cbz	r0, 800ed6e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ed5e:	8022      	strh	r2, [r4, #0]
 800ed60:	8063      	strh	r3, [r4, #2]
 800ed62:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ed66:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ed6a:	69ad      	ldr	r5, [r5, #24]
 800ed6c:	e7e5      	b.n	800ed3a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ed6e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ed72:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ed76:	4290      	cmp	r0, r2
 800ed78:	4607      	mov	r7, r0
 800ed7a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800ed7e:	460e      	mov	r6, r1
 800ed80:	bfa8      	it	ge
 800ed82:	4617      	movge	r7, r2
 800ed84:	4299      	cmp	r1, r3
 800ed86:	4472      	add	r2, lr
 800ed88:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ed8c:	bfa8      	it	ge
 800ed8e:	461e      	movge	r6, r3
 800ed90:	4440      	add	r0, r8
 800ed92:	4471      	add	r1, lr
 800ed94:	4463      	add	r3, ip
 800ed96:	b200      	sxth	r0, r0
 800ed98:	8027      	strh	r7, [r4, #0]
 800ed9a:	b212      	sxth	r2, r2
 800ed9c:	8066      	strh	r6, [r4, #2]
 800ed9e:	b209      	sxth	r1, r1
 800eda0:	b21b      	sxth	r3, r3
 800eda2:	4290      	cmp	r0, r2
 800eda4:	bfac      	ite	ge
 800eda6:	ebc7 0200 	rsbge	r2, r7, r0
 800edaa:	ebc7 0202 	rsblt	r2, r7, r2
 800edae:	4299      	cmp	r1, r3
 800edb0:	bfac      	ite	ge
 800edb2:	ebc6 0301 	rsbge	r3, r6, r1
 800edb6:	ebc6 0303 	rsblt	r3, r6, r3
 800edba:	80a2      	strh	r2, [r4, #4]
 800edbc:	80e3      	strh	r3, [r4, #6]
 800edbe:	e7d4      	b.n	800ed6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800edc0:	4620      	mov	r0, r4
 800edc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800edc6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800edc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800edca:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800edce:	b383      	cbz	r3, 800ee32 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800edd0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800edd2:	b374      	cbz	r4, 800ee32 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800edd4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800edd8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800eddc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800ede0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800ede4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ede8:	b303      	cbz	r3, 800ee2c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800edea:	4668      	mov	r0, sp
 800edec:	1d21      	adds	r1, r4, #4
 800edee:	f8ad 5000 	strh.w	r5, [sp]
 800edf2:	f8ad 6002 	strh.w	r6, [sp, #2]
 800edf6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800edfa:	f8ad 8006 	strh.w	r8, [sp, #6]
 800edfe:	f7ff ff43 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 800ee02:	4668      	mov	r0, sp
 800ee04:	f7ff ff83 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ee08:	b980      	cbnz	r0, 800ee2c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ee0a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ee0e:	4669      	mov	r1, sp
 800ee10:	88a2      	ldrh	r2, [r4, #4]
 800ee12:	4620      	mov	r0, r4
 800ee14:	1a9b      	subs	r3, r3, r2
 800ee16:	88e2      	ldrh	r2, [r4, #6]
 800ee18:	f8ad 3000 	strh.w	r3, [sp]
 800ee1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ee20:	1a9b      	subs	r3, r3, r2
 800ee22:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	4798      	blx	r3
 800ee2c:	69a4      	ldr	r4, [r4, #24]
 800ee2e:	2c00      	cmp	r4, #0
 800ee30:	d1d8      	bne.n	800ede4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ee32:	b002      	add	sp, #8
 800ee34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee38 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800ee38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee3a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ee3e:	460d      	mov	r5, r1
 800ee40:	4616      	mov	r6, r2
 800ee42:	b323      	cbz	r3, 800ee8e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ee44:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ee46:	b314      	cbz	r4, 800ee8e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ee48:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ee4c:	b1eb      	cbz	r3, 800ee8a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ee4e:	6828      	ldr	r0, [r5, #0]
 800ee50:	466b      	mov	r3, sp
 800ee52:	6869      	ldr	r1, [r5, #4]
 800ee54:	c303      	stmia	r3!, {r0, r1}
 800ee56:	4668      	mov	r0, sp
 800ee58:	1d21      	adds	r1, r4, #4
 800ee5a:	f7ff ff15 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 800ee5e:	4668      	mov	r0, sp
 800ee60:	f7ff ff55 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ee64:	b988      	cbnz	r0, 800ee8a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ee66:	f8bd 3000 	ldrh.w	r3, [sp]
 800ee6a:	4669      	mov	r1, sp
 800ee6c:	88a2      	ldrh	r2, [r4, #4]
 800ee6e:	4620      	mov	r0, r4
 800ee70:	1a9b      	subs	r3, r3, r2
 800ee72:	88e2      	ldrh	r2, [r4, #6]
 800ee74:	f8ad 3000 	strh.w	r3, [sp]
 800ee78:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ee7c:	1a9b      	subs	r3, r3, r2
 800ee7e:	4632      	mov	r2, r6
 800ee80:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ee84:	6823      	ldr	r3, [r4, #0]
 800ee86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee88:	4798      	blx	r3
 800ee8a:	69a4      	ldr	r4, [r4, #24]
 800ee8c:	e7db      	b.n	800ee46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800ee8e:	b002      	add	sp, #8
 800ee90:	bd70      	pop	{r4, r5, r6, pc}

0800ee92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800ee92:	6803      	ldr	r3, [r0, #0]
 800ee94:	b513      	push	{r0, r1, r4, lr}
 800ee96:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	e9cd 3300 	strd	r3, r3, [sp]
 800eea0:	466b      	mov	r3, sp
 800eea2:	47a0      	blx	r4
 800eea4:	b002      	add	sp, #8
 800eea6:	bd10      	pop	{r4, pc}

0800eea8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800eea8:	2301      	movs	r3, #1
 800eeaa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800eeae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800eeb2:	4770      	bx	lr

0800eeb4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800eeba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800eebe:	4770      	bx	lr

0800eec0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800eec0:	6843      	ldr	r3, [r0, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	725a      	strb	r2, [r3, #9]
 800eec6:	6840      	ldr	r0, [r0, #4]
 800eec8:	6803      	ldr	r3, [r0, #0]
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	4718      	bx	r3

0800eece <_ZN8touchgfx3HAL8flushDMAEv>:
 800eece:	6840      	ldr	r0, [r0, #4]
 800eed0:	6803      	ldr	r3, [r0, #0]
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	4718      	bx	r3

0800eed6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800eed6:	b530      	push	{r4, r5, lr}
 800eed8:	b08b      	sub	sp, #44	; 0x2c
 800eeda:	6804      	ldr	r4, [r0, #0]
 800eedc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800eee0:	9509      	str	r5, [sp, #36]	; 0x24
 800eee2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800eee6:	9508      	str	r5, [sp, #32]
 800eee8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800eeec:	9507      	str	r5, [sp, #28]
 800eeee:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800eef2:	9506      	str	r5, [sp, #24]
 800eef4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800eef8:	9505      	str	r5, [sp, #20]
 800eefa:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800eefe:	9504      	str	r5, [sp, #16]
 800ef00:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800ef04:	9503      	str	r5, [sp, #12]
 800ef06:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ef0a:	9502      	str	r5, [sp, #8]
 800ef0c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800ef10:	e9cd 3500 	strd	r3, r5, [sp]
 800ef14:	4613      	mov	r3, r2
 800ef16:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800ef18:	2200      	movs	r2, #0
 800ef1a:	47a0      	blx	r4
 800ef1c:	b00b      	add	sp, #44	; 0x2c
 800ef1e:	bd30      	pop	{r4, r5, pc}

0800ef20 <_ZN8touchgfx3HAL10beginFrameEv>:
 800ef20:	4b04      	ldr	r3, [pc, #16]	; (800ef34 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	b123      	cbz	r3, 800ef30 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800ef26:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800ef2a:	f080 0001 	eor.w	r0, r0, #1
 800ef2e:	4770      	bx	lr
 800ef30:	2001      	movs	r0, #1
 800ef32:	4770      	bx	lr
 800ef34:	20060c2e 	.word	0x20060c2e

0800ef38 <_ZN8touchgfx3HAL8endFrameEv>:
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	6840      	ldr	r0, [r0, #4]
 800ef3e:	6803      	ldr	r3, [r0, #0]
 800ef40:	689b      	ldr	r3, [r3, #8]
 800ef42:	4798      	blx	r3
 800ef44:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800ef48:	b113      	cbz	r3, 800ef50 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ef50:	bd10      	pop	{r4, pc}

0800ef52 <_ZN8touchgfx3HAL10initializeEv>:
 800ef52:	b510      	push	{r4, lr}
 800ef54:	4604      	mov	r4, r0
 800ef56:	f7f2 fedf 	bl	8001d18 <_ZN8touchgfx10OSWrappers10initializeEv>
 800ef5a:	6860      	ldr	r0, [r4, #4]
 800ef5c:	6803      	ldr	r3, [r0, #0]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	4798      	blx	r3
 800ef62:	68e0      	ldr	r0, [r4, #12]
 800ef64:	6803      	ldr	r3, [r0, #0]
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	4798      	blx	r3
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef74:	4718      	bx	r3
	...

0800ef78 <_ZN8touchgfx3HAL4tickEv>:
 800ef78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ef7a:	6803      	ldr	r3, [r0, #0]
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	4d5c      	ldr	r5, [pc, #368]	; (800f0f0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800ef80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ef84:	4798      	blx	r3
 800ef86:	2800      	cmp	r0, #0
 800ef88:	f000 8097 	beq.w	800f0ba <_ZN8touchgfx3HAL4tickEv+0x142>
 800ef8c:	2001      	movs	r0, #1
 800ef8e:	2600      	movs	r6, #0
 800ef90:	f7f1 ff08 	bl	8000da4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ef94:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800ef98:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800ef9c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800efa0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800efa4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800efa8:	b133      	cbz	r3, 800efb8 <_ZN8touchgfx3HAL4tickEv+0x40>
 800efaa:	6823      	ldr	r3, [r4, #0]
 800efac:	4620      	mov	r0, r4
 800efae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800efb2:	4798      	blx	r3
 800efb4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800efb8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800efbc:	2601      	movs	r6, #1
 800efbe:	6862      	ldr	r2, [r4, #4]
 800efc0:	f083 0301 	eor.w	r3, r3, #1
 800efc4:	702e      	strb	r6, [r5, #0]
 800efc6:	7253      	strb	r3, [r2, #9]
 800efc8:	f004 fb52 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 800efcc:	6803      	ldr	r3, [r0, #0]
 800efce:	4631      	mov	r1, r6
 800efd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd2:	4798      	blx	r3
 800efd4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800efd8:	b90b      	cbnz	r3, 800efde <_ZN8touchgfx3HAL4tickEv+0x66>
 800efda:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800efde:	f004 fb47 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 800efe2:	6803      	ldr	r3, [r0, #0]
 800efe4:	695b      	ldr	r3, [r3, #20]
 800efe6:	4798      	blx	r3
 800efe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efea:	6803      	ldr	r3, [r0, #0]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	4798      	blx	r3
 800eff0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800eff4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800eff8:	3b01      	subs	r3, #1
 800effa:	b2db      	uxtb	r3, r3
 800effc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f000:	b10a      	cbz	r2, 800f006 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1eb      	bne.n	800efde <_ZN8touchgfx3HAL4tickEv+0x66>
 800f006:	4a3b      	ldr	r2, [pc, #236]	; (800f0f4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800f008:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800f00c:	7813      	ldrb	r3, [r2, #0]
 800f00e:	3301      	adds	r3, #1
 800f010:	b25b      	sxtb	r3, r3
 800f012:	4299      	cmp	r1, r3
 800f014:	7013      	strb	r3, [r2, #0]
 800f016:	dc10      	bgt.n	800f03a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800f018:	2300      	movs	r3, #0
 800f01a:	68e0      	ldr	r0, [r4, #12]
 800f01c:	a902      	add	r1, sp, #8
 800f01e:	7013      	strb	r3, [r2, #0]
 800f020:	aa03      	add	r2, sp, #12
 800f022:	6803      	ldr	r3, [r0, #0]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	4798      	blx	r3
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d051      	beq.n	800f0d2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800f02e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f032:	4620      	mov	r0, r4
 800f034:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f038:	4798      	blx	r3
 800f03a:	2300      	movs	r3, #0
 800f03c:	6960      	ldr	r0, [r4, #20]
 800f03e:	f88d 3007 	strb.w	r3, [sp, #7]
 800f042:	b158      	cbz	r0, 800f05c <_ZN8touchgfx3HAL4tickEv+0xe4>
 800f044:	6803      	ldr	r3, [r0, #0]
 800f046:	f10d 0107 	add.w	r1, sp, #7
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	4798      	blx	r3
 800f04e:	b128      	cbz	r0, 800f05c <_ZN8touchgfx3HAL4tickEv+0xe4>
 800f050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f052:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f056:	6803      	ldr	r3, [r0, #0]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	4798      	blx	r3
 800f05c:	f104 001c 	add.w	r0, r4, #28
 800f060:	f013 fc0c 	bl	802287c <_ZN8touchgfx8Gestures4tickEv>
 800f064:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800f068:	b30b      	cbz	r3, 800f0ae <_ZN8touchgfx3HAL4tickEv+0x136>
 800f06a:	6920      	ldr	r0, [r4, #16]
 800f06c:	6803      	ldr	r3, [r0, #0]
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	4798      	blx	r3
 800f072:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f074:	4606      	mov	r6, r0
 800f076:	b903      	cbnz	r3, 800f07a <_ZN8touchgfx3HAL4tickEv+0x102>
 800f078:	6720      	str	r0, [r4, #112]	; 0x70
 800f07a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f07c:	4a1e      	ldr	r2, [pc, #120]	; (800f0f8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800f07e:	1af3      	subs	r3, r6, r3
 800f080:	4293      	cmp	r3, r2
 800f082:	d914      	bls.n	800f0ae <_ZN8touchgfx3HAL4tickEv+0x136>
 800f084:	6920      	ldr	r0, [r4, #16]
 800f086:	6803      	ldr	r3, [r0, #0]
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	4798      	blx	r3
 800f08c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f08e:	2264      	movs	r2, #100	; 0x64
 800f090:	1af3      	subs	r3, r6, r3
 800f092:	fbb3 f3f2 	udiv	r3, r3, r2
 800f096:	fbb0 f0f3 	udiv	r0, r0, r3
 800f09a:	2800      	cmp	r0, #0
 800f09c:	dc1e      	bgt.n	800f0dc <_ZN8touchgfx3HAL4tickEv+0x164>
 800f09e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800f0a2:	6920      	ldr	r0, [r4, #16]
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	6803      	ldr	r3, [r0, #0]
 800f0a8:	69db      	ldr	r3, [r3, #28]
 800f0aa:	4798      	blx	r3
 800f0ac:	6726      	str	r6, [r4, #112]	; 0x70
 800f0ae:	f004 fadf 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 800f0b2:	6803      	ldr	r3, [r0, #0]
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0b8:	4798      	blx	r3
 800f0ba:	6823      	ldr	r3, [r4, #0]
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f0c2:	4798      	blx	r3
 800f0c4:	2001      	movs	r0, #1
 800f0c6:	f7f1 fe85 	bl	8000dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	702b      	strb	r3, [r5, #0]
 800f0ce:	b004      	add	sp, #16
 800f0d0:	bd70      	pop	{r4, r5, r6, pc}
 800f0d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	4798      	blx	r3
 800f0da:	e7ae      	b.n	800f03a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800f0dc:	2863      	cmp	r0, #99	; 0x63
 800f0de:	bfcb      	itete	gt
 800f0e0:	2300      	movgt	r3, #0
 800f0e2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800f0e6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800f0ea:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800f0ee:	e7d8      	b.n	800f0a2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800f0f0:	20060c34 	.word	0x20060c34
 800f0f4:	20060c35 	.word	0x20060c35
 800f0f8:	05f5e100 	.word	0x05f5e100

0800f0fc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f0fc:	f7f2 be3c 	b.w	8001d78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f100 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f100:	6581      	str	r1, [r0, #88]	; 0x58
 800f102:	301c      	adds	r0, #28
 800f104:	f013 bbb8 	b.w	8022878 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f108 <_ZN8touchgfx3HAL5touchEll>:
 800f108:	b530      	push	{r4, r5, lr}
 800f10a:	b087      	sub	sp, #28
 800f10c:	4604      	mov	r4, r0
 800f10e:	a804      	add	r0, sp, #16
 800f110:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f114:	f004 f868 	bl	80131e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800f118:	9b04      	ldr	r3, [sp, #16]
 800f11a:	a906      	add	r1, sp, #24
 800f11c:	a803      	add	r0, sp, #12
 800f11e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f122:	9b05      	ldr	r3, [sp, #20]
 800f124:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800f128:	f004 f8b0 	bl	801328c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800f12c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800f130:	f104 001c 	add.w	r0, r4, #28
 800f134:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f138:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f13c:	b189      	cbz	r1, 800f162 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800f13e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	4613      	mov	r3, r2
 800f146:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800f14a:	462a      	mov	r2, r5
 800f14c:	f013 fba4 	bl	8022898 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800f150:	b128      	cbz	r0, 800f15e <_ZN8touchgfx3HAL5touchEll+0x56>
 800f152:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f156:	65e3      	str	r3, [r4, #92]	; 0x5c
 800f158:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f15c:	6623      	str	r3, [r4, #96]	; 0x60
 800f15e:	b007      	add	sp, #28
 800f160:	bd30      	pop	{r4, r5, pc}
 800f162:	f013 fbdd 	bl	8022920 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f166:	2301      	movs	r3, #1
 800f168:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800f16c:	e7f1      	b.n	800f152 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800f16e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800f16e:	b510      	push	{r4, lr}
 800f170:	2b00      	cmp	r3, #0
 800f172:	d046      	beq.n	800f202 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f174:	ea81 0002 	eor.w	r0, r1, r2
 800f178:	07c4      	lsls	r4, r0, #31
 800f17a:	d508      	bpl.n	800f18e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800f17c:	440b      	add	r3, r1
 800f17e:	3a01      	subs	r2, #1
 800f180:	428b      	cmp	r3, r1
 800f182:	d93e      	bls.n	800f202 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f184:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f188:	f801 0b01 	strb.w	r0, [r1], #1
 800f18c:	e7f8      	b.n	800f180 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800f18e:	07d0      	lsls	r0, r2, #31
 800f190:	bf42      	ittt	mi
 800f192:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800f196:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f19a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d911      	bls.n	800f1c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f1a2:	ea81 0402 	eor.w	r4, r1, r2
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	07a4      	lsls	r4, r4, #30
 800f1aa:	d022      	beq.n	800f1f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800f1ac:	f023 0401 	bic.w	r4, r3, #1
 800f1b0:	440c      	add	r4, r1
 800f1b2:	428c      	cmp	r4, r1
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	d904      	bls.n	800f1c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800f1b8:	8812      	ldrh	r2, [r2, #0]
 800f1ba:	3002      	adds	r0, #2
 800f1bc:	f821 2b02 	strh.w	r2, [r1], #2
 800f1c0:	e7f7      	b.n	800f1b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800f1c2:	f003 0301 	and.w	r3, r3, #1
 800f1c6:	f023 0003 	bic.w	r0, r3, #3
 800f1ca:	4408      	add	r0, r1
 800f1cc:	4288      	cmp	r0, r1
 800f1ce:	4614      	mov	r4, r2
 800f1d0:	d904      	bls.n	800f1dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800f1d2:	6824      	ldr	r4, [r4, #0]
 800f1d4:	3204      	adds	r2, #4
 800f1d6:	f841 4b04 	str.w	r4, [r1], #4
 800f1da:	e7f7      	b.n	800f1cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800f1dc:	f003 0303 	and.w	r3, r3, #3
 800f1e0:	3a01      	subs	r2, #1
 800f1e2:	440b      	add	r3, r1
 800f1e4:	428b      	cmp	r3, r1
 800f1e6:	d90c      	bls.n	800f202 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f1e8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f1ec:	f801 0b01 	strb.w	r0, [r1], #1
 800f1f0:	e7f8      	b.n	800f1e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800f1f2:	0790      	lsls	r0, r2, #30
 800f1f4:	d0e7      	beq.n	800f1c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f1f6:	f832 0b02 	ldrh.w	r0, [r2], #2
 800f1fa:	3b02      	subs	r3, #2
 800f1fc:	f821 0b02 	strh.w	r0, [r1], #2
 800f200:	e7e1      	b.n	800f1c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f202:	2001      	movs	r0, #1
 800f204:	bd10      	pop	{r4, pc}

0800f206 <_ZN8touchgfx3HAL7noTouchEv>:
 800f206:	b510      	push	{r4, lr}
 800f208:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800f20c:	4604      	mov	r4, r0
 800f20e:	b153      	cbz	r3, 800f226 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800f210:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800f214:	2101      	movs	r1, #1
 800f216:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800f21a:	301c      	adds	r0, #28
 800f21c:	f013 fb80 	bl	8022920 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f220:	2300      	movs	r3, #0
 800f222:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800f226:	bd10      	pop	{r4, pc}

0800f228 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800f228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f22c:	4604      	mov	r4, r0
 800f22e:	6980      	ldr	r0, [r0, #24]
 800f230:	b085      	sub	sp, #20
 800f232:	460f      	mov	r7, r1
 800f234:	4690      	mov	r8, r2
 800f236:	4699      	mov	r9, r3
 800f238:	b930      	cbnz	r0, 800f248 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800f23a:	4b1c      	ldr	r3, [pc, #112]	; (800f2ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800f23c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800f240:	4a1b      	ldr	r2, [pc, #108]	; (800f2b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800f242:	481c      	ldr	r0, [pc, #112]	; (800f2b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800f244:	f016 f8b0 	bl	80253a8 <__assert_func>
 800f248:	ad04      	add	r5, sp, #16
 800f24a:	2600      	movs	r6, #0
 800f24c:	f845 6d04 	str.w	r6, [r5, #-4]!
 800f250:	6806      	ldr	r6, [r0, #0]
 800f252:	9501      	str	r5, [sp, #4]
 800f254:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800f258:	9500      	str	r5, [sp, #0]
 800f25a:	6835      	ldr	r5, [r6, #0]
 800f25c:	47a8      	blx	r5
 800f25e:	4d16      	ldr	r5, [pc, #88]	; (800f2b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800f260:	4606      	mov	r6, r0
 800f262:	f8a5 9000 	strh.w	r9, [r5]
 800f266:	f7f5 fb27 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800f26a:	6803      	ldr	r3, [r0, #0]
 800f26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26e:	4798      	blx	r3
 800f270:	2801      	cmp	r0, #1
 800f272:	d012      	beq.n	800f29a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800f274:	d306      	bcc.n	800f284 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800f276:	280d      	cmp	r0, #13
 800f278:	d80b      	bhi.n	800f292 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800f27a:	4b10      	ldr	r3, [pc, #64]	; (800f2bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800f27c:	f240 1167 	movw	r1, #359	; 0x167
 800f280:	4a0b      	ldr	r2, [pc, #44]	; (800f2b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800f282:	e7de      	b.n	800f242 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800f284:	882b      	ldrh	r3, [r5, #0]
 800f286:	fb08 7203 	mla	r2, r8, r3, r7
 800f28a:	9b03      	ldr	r3, [sp, #12]
 800f28c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800f290:	63e3      	str	r3, [r4, #60]	; 0x3c
 800f292:	4630      	mov	r0, r6
 800f294:	b005      	add	sp, #20
 800f296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f29a:	882a      	ldrh	r2, [r5, #0]
 800f29c:	9b03      	ldr	r3, [sp, #12]
 800f29e:	fb08 7202 	mla	r2, r8, r2, r7
 800f2a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f2a6:	1a9a      	subs	r2, r3, r2
 800f2a8:	63e2      	str	r2, [r4, #60]	; 0x3c
 800f2aa:	e7f2      	b.n	800f292 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800f2ac:	0802a234 	.word	0x0802a234
 800f2b0:	0802a4f2 	.word	0x0802a4f2
 800f2b4:	0802a279 	.word	0x0802a279
 800f2b8:	20060c2a 	.word	0x20060c2a
 800f2bc:	0802a29f 	.word	0x0802a29f

0800f2c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800f2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2c2:	b08b      	sub	sp, #44	; 0x2c
 800f2c4:	4617      	mov	r7, r2
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	460e      	mov	r6, r1
 800f2ca:	461d      	mov	r5, r3
 800f2cc:	f7f5 faf4 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800f2d0:	6803      	ldr	r3, [r0, #0]
 800f2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d4:	4798      	blx	r3
 800f2d6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800f2da:	9007      	str	r0, [sp, #28]
 800f2dc:	4631      	mov	r1, r6
 800f2de:	6822      	ldr	r2, [r4, #0]
 800f2e0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f2e4:	4b0c      	ldr	r3, [pc, #48]	; (800f318 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	9306      	str	r3, [sp, #24]
 800f2ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800f2f0:	9305      	str	r3, [sp, #20]
 800f2f2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f2f6:	9304      	str	r3, [sp, #16]
 800f2f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f2fc:	9303      	str	r3, [sp, #12]
 800f2fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f302:	9302      	str	r3, [sp, #8]
 800f304:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f308:	e9cd 5300 	strd	r5, r3, [sp]
 800f30c:	463b      	mov	r3, r7
 800f30e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800f310:	2200      	movs	r2, #0
 800f312:	47a8      	blx	r5
 800f314:	b00b      	add	sp, #44	; 0x2c
 800f316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f318:	20060c2a 	.word	0x20060c2a

0800f31c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800f31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f320:	4698      	mov	r8, r3
 800f322:	6803      	ldr	r3, [r0, #0]
 800f324:	b08b      	sub	sp, #44	; 0x2c
 800f326:	4617      	mov	r7, r2
 800f328:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800f32a:	460e      	mov	r6, r1
 800f32c:	4b13      	ldr	r3, [pc, #76]	; (800f37c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800f32e:	4604      	mov	r4, r0
 800f330:	f8b3 9000 	ldrh.w	r9, [r3]
 800f334:	f7f5 fac0 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800f338:	6803      	ldr	r3, [r0, #0]
 800f33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33c:	4798      	blx	r3
 800f33e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f342:	2200      	movs	r2, #0
 800f344:	4631      	mov	r1, r6
 800f346:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f34a:	2302      	movs	r3, #2
 800f34c:	4620      	mov	r0, r4
 800f34e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800f352:	2301      	movs	r3, #1
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800f35a:	9304      	str	r3, [sp, #16]
 800f35c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800f360:	9303      	str	r3, [sp, #12]
 800f362:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f366:	9302      	str	r3, [sp, #8]
 800f368:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f36c:	e9cd 8300 	strd	r8, r3, [sp]
 800f370:	463b      	mov	r3, r7
 800f372:	47a8      	blx	r5
 800f374:	b00b      	add	sp, #44	; 0x2c
 800f376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f37a:	bf00      	nop
 800f37c:	20060c2a 	.word	0x20060c2a

0800f380 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800f380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f384:	4698      	mov	r8, r3
 800f386:	6803      	ldr	r3, [r0, #0]
 800f388:	b087      	sub	sp, #28
 800f38a:	460e      	mov	r6, r1
 800f38c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800f38e:	4617      	mov	r7, r2
 800f390:	4b0f      	ldr	r3, [pc, #60]	; (800f3d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800f392:	4604      	mov	r4, r0
 800f394:	f8b3 9000 	ldrh.w	r9, [r3]
 800f398:	f7f5 fa8e 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800f39c:	6803      	ldr	r3, [r0, #0]
 800f39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a0:	4798      	blx	r3
 800f3a2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800f3a6:	463a      	mov	r2, r7
 800f3a8:	4631      	mov	r1, r6
 800f3aa:	f8cd 900c 	str.w	r9, [sp, #12]
 800f3ae:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800f3b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	9302      	str	r3, [sp, #8]
 800f3ba:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800f3be:	9301      	str	r3, [sp, #4]
 800f3c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f3c4:	9300      	str	r3, [sp, #0]
 800f3c6:	4643      	mov	r3, r8
 800f3c8:	47a8      	blx	r5
 800f3ca:	b007      	add	sp, #28
 800f3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3d0:	20060c2a 	.word	0x20060c2a

0800f3d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	4604      	mov	r4, r0
 800f3da:	b08f      	sub	sp, #60	; 0x3c
 800f3dc:	4610      	mov	r0, r2
 800f3de:	460d      	mov	r5, r1
 800f3e0:	4691      	mov	r9, r2
 800f3e2:	461e      	mov	r6, r3
 800f3e4:	f007 f9fc 	bl	80167e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	f000 809c 	beq.w	800f526 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f8df b194 	ldr.w	fp, [pc, #404]	; 800f588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800f3f6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3fc:	4798      	blx	r3
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	4620      	mov	r0, r4
 800f402:	f8df a188 	ldr.w	sl, [pc, #392]	; 800f58c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800f406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f408:	4798      	blx	r3
 800f40a:	f8bb 3000 	ldrh.w	r3, [fp]
 800f40e:	4f5b      	ldr	r7, [pc, #364]	; (800f57c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800f410:	9301      	str	r3, [sp, #4]
 800f412:	f8ba 3000 	ldrh.w	r3, [sl]
 800f416:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800f41a:	4640      	mov	r0, r8
 800f41c:	9302      	str	r3, [sp, #8]
 800f41e:	883b      	ldrh	r3, [r7, #0]
 800f420:	9303      	str	r3, [sp, #12]
 800f422:	4b57      	ldr	r3, [pc, #348]	; (800f580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f424:	881a      	ldrh	r2, [r3, #0]
 800f426:	9305      	str	r3, [sp, #20]
 800f428:	9204      	str	r2, [sp, #16]
 800f42a:	f007 fa93 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f42e:	8038      	strh	r0, [r7, #0]
 800f430:	4640      	mov	r0, r8
 800f432:	f007 fac9 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f436:	9b05      	ldr	r3, [sp, #20]
 800f438:	8018      	strh	r0, [r3, #0]
 800f43a:	4b52      	ldr	r3, [pc, #328]	; (800f584 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d174      	bne.n	800f52c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800f442:	883b      	ldrh	r3, [r7, #0]
 800f444:	f8aa 0000 	strh.w	r0, [sl]
 800f448:	f8ab 3000 	strh.w	r3, [fp]
 800f44c:	4648      	mov	r0, r9
 800f44e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800f452:	f007 f9c5 	bl	80167e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f456:	2200      	movs	r2, #0
 800f458:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800f45c:	4611      	mov	r1, r2
 800f45e:	4628      	mov	r0, r5
 800f460:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800f464:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800f468:	f7f5 fd1c 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 800f46c:	2301      	movs	r3, #1
 800f46e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800f472:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800f476:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	dd5c      	ble.n	800f538 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800f47e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f482:	2b00      	cmp	r3, #0
 800f484:	dd58      	ble.n	800f538 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800f486:	462a      	mov	r2, r5
 800f488:	ab0a      	add	r3, sp, #40	; 0x28
 800f48a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f48e:	6851      	ldr	r1, [r2, #4]
 800f490:	c303      	stmia	r3!, {r0, r1}
 800f492:	4631      	mov	r1, r6
 800f494:	a80a      	add	r0, sp, #40	; 0x28
 800f496:	f7ff fbf7 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 800f49a:	4b38      	ldr	r3, [pc, #224]	; (800f57c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800f49c:	2100      	movs	r1, #0
 800f49e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f4a2:	4b37      	ldr	r3, [pc, #220]	; (800f580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f4a4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800f4a8:	aa0a      	add	r2, sp, #40	; 0x28
 800f4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4ae:	910c      	str	r1, [sp, #48]	; 0x30
 800f4b0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800f4b4:	ab08      	add	r3, sp, #32
 800f4b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	a90c      	add	r1, sp, #48	; 0x30
 800f4c2:	f7ff fbe1 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 800f4c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d13c      	bne.n	800f546 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800f4d2:	2600      	movs	r6, #0
 800f4d4:	696b      	ldr	r3, [r5, #20]
 800f4d6:	a908      	add	r1, sp, #32
 800f4d8:	682a      	ldr	r2, [r5, #0]
 800f4da:	4628      	mov	r0, r5
 800f4dc:	9305      	str	r3, [sp, #20]
 800f4de:	616e      	str	r6, [r5, #20]
 800f4e0:	6892      	ldr	r2, [r2, #8]
 800f4e2:	4790      	blx	r2
 800f4e4:	9b05      	ldr	r3, [sp, #20]
 800f4e6:	4652      	mov	r2, sl
 800f4e8:	4649      	mov	r1, r9
 800f4ea:	616b      	str	r3, [r5, #20]
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800f4f2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800f4f6:	f7f5 fcd5 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 800f4fa:	9a01      	ldr	r2, [sp, #4]
 800f4fc:	4b22      	ldr	r3, [pc, #136]	; (800f588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800f4fe:	4620      	mov	r0, r4
 800f500:	801a      	strh	r2, [r3, #0]
 800f502:	9a02      	ldr	r2, [sp, #8]
 800f504:	4b21      	ldr	r3, [pc, #132]	; (800f58c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800f506:	801a      	strh	r2, [r3, #0]
 800f508:	9a03      	ldr	r2, [sp, #12]
 800f50a:	4b1c      	ldr	r3, [pc, #112]	; (800f57c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800f50c:	801a      	strh	r2, [r3, #0]
 800f50e:	4b1c      	ldr	r3, [pc, #112]	; (800f580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f510:	9a04      	ldr	r2, [sp, #16]
 800f512:	801a      	strh	r2, [r3, #0]
 800f514:	6823      	ldr	r3, [r4, #0]
 800f516:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800f51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f51c:	4798      	blx	r3
 800f51e:	6823      	ldr	r3, [r4, #0]
 800f520:	4620      	mov	r0, r4
 800f522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f524:	4798      	blx	r3
 800f526:	b00f      	add	sp, #60	; 0x3c
 800f528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52c:	883b      	ldrh	r3, [r7, #0]
 800f52e:	f8ab 0000 	strh.w	r0, [fp]
 800f532:	f8aa 3000 	strh.w	r3, [sl]
 800f536:	e789      	b.n	800f44c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800f538:	462a      	mov	r2, r5
 800f53a:	ab0a      	add	r3, sp, #40	; 0x28
 800f53c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f540:	6851      	ldr	r1, [r2, #4]
 800f542:	c303      	stmia	r3!, {r0, r1}
 800f544:	e7a9      	b.n	800f49a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800f546:	a807      	add	r0, sp, #28
 800f548:	f007 fb96 	bl	8016c78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f54c:	4606      	mov	r6, r0
 800f54e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800f550:	6803      	ldr	r3, [r0, #0]
 800f552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f554:	4798      	blx	r3
 800f556:	4286      	cmp	r6, r0
 800f558:	d1b8      	bne.n	800f4cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800f55a:	f7f5 f9ad 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800f55e:	6803      	ldr	r3, [r0, #0]
 800f560:	4606      	mov	r6, r0
 800f562:	a807      	add	r0, sp, #28
 800f564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f566:	9305      	str	r3, [sp, #20]
 800f568:	f007 fb86 	bl	8016c78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f56c:	9b05      	ldr	r3, [sp, #20]
 800f56e:	4601      	mov	r1, r0
 800f570:	4630      	mov	r0, r6
 800f572:	4798      	blx	r3
 800f574:	f080 0001 	eor.w	r0, r0, #1
 800f578:	b2c0      	uxtb	r0, r0
 800f57a:	e7a8      	b.n	800f4ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800f57c:	20060c24 	.word	0x20060c24
 800f580:	20060c26 	.word	0x20060c26
 800f584:	20060c28 	.word	0x20060c28
 800f588:	20060c2a 	.word	0x20060c2a
 800f58c:	20060c2c 	.word	0x20060c2c

0800f590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800f590:	4b07      	ldr	r3, [pc, #28]	; (800f5b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800f592:	b510      	push	{r4, lr}
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	4604      	mov	r4, r0
 800f598:	b13b      	cbz	r3, 800f5aa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f59a:	6803      	ldr	r3, [r0, #0]
 800f59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f59e:	4798      	blx	r3
 800f5a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f5a2:	4283      	cmp	r3, r0
 800f5a4:	d101      	bne.n	800f5aa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f5a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800f5a8:	bd10      	pop	{r4, pc}
 800f5aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f5ac:	e7fc      	b.n	800f5a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800f5ae:	bf00      	nop
 800f5b0:	20060c2e 	.word	0x20060c2e

0800f5b4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800f5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b8:	b088      	sub	sp, #32
 800f5ba:	4692      	mov	sl, r2
 800f5bc:	461d      	mov	r5, r3
 800f5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5c2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800f5c6:	2400      	movs	r4, #0
 800f5c8:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800f5cc:	4606      	mov	r6, r0
 800f5ce:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800f5d2:	fb09 a505 	mla	r5, r9, r5, sl
 800f5d6:	9403      	str	r4, [sp, #12]
 800f5d8:	f8ad 8014 	strh.w	r8, [sp, #20]
 800f5dc:	f8ad 7016 	strh.w	r7, [sp, #22]
 800f5e0:	f88d 401c 	strb.w	r4, [sp, #28]
 800f5e4:	e9cd 3100 	strd	r3, r1, [sp]
 800f5e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f5ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f5f0:	f7ff ffce 	bl	800f590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f5f4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f5f8:	f8ad 901a 	strh.w	r9, [sp, #26]
 800f5fc:	f88d 401e 	strb.w	r4, [sp, #30]
 800f600:	9504      	str	r5, [sp, #16]
 800f602:	f88d 401d 	strb.w	r4, [sp, #29]
 800f606:	f88d 401f 	strb.w	r4, [sp, #31]
 800f60a:	f1b8 0f00 	cmp.w	r8, #0
 800f60e:	d000      	beq.n	800f612 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800f610:	b937      	cbnz	r7, 800f620 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800f612:	4b0d      	ldr	r3, [pc, #52]	; (800f648 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800f614:	f240 210b 	movw	r1, #523	; 0x20b
 800f618:	4a0c      	ldr	r2, [pc, #48]	; (800f64c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800f61a:	480d      	ldr	r0, [pc, #52]	; (800f650 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800f61c:	f015 fec4 	bl	80253a8 <__assert_func>
 800f620:	6833      	ldr	r3, [r6, #0]
 800f622:	4630      	mov	r0, r6
 800f624:	9c00      	ldr	r4, [sp, #0]
 800f626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f628:	4798      	blx	r3
 800f62a:	4220      	tst	r0, r4
 800f62c:	d104      	bne.n	800f638 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800f62e:	4b09      	ldr	r3, [pc, #36]	; (800f654 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800f630:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800f634:	4a05      	ldr	r2, [pc, #20]	; (800f64c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800f636:	e7f0      	b.n	800f61a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800f638:	6870      	ldr	r0, [r6, #4]
 800f63a:	4669      	mov	r1, sp
 800f63c:	6803      	ldr	r3, [r0, #0]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	4798      	blx	r3
 800f642:	b008      	add	sp, #32
 800f644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f648:	0802a0c7 	.word	0x0802a0c7
 800f64c:	0802a327 	.word	0x0802a327
 800f650:	0802a279 	.word	0x0802a279
 800f654:	0802a0ff 	.word	0x0802a0ff

0800f658 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800f658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	b089      	sub	sp, #36	; 0x24
 800f65e:	4693      	mov	fp, r2
 800f660:	461d      	mov	r5, r3
 800f662:	2400      	movs	r4, #0
 800f664:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800f668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f66c:	468a      	mov	sl, r1
 800f66e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800f672:	fb09 b505 	mla	r5, r9, r5, fp
 800f676:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800f67a:	4606      	mov	r6, r0
 800f67c:	9403      	str	r4, [sp, #12]
 800f67e:	e9cd 3400 	strd	r3, r4, [sp]
 800f682:	f7ff ff85 	bl	800f590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f686:	f8ad 8014 	strh.w	r8, [sp, #20]
 800f68a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f68e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800f692:	f8ad 4018 	strh.w	r4, [sp, #24]
 800f696:	9504      	str	r5, [sp, #16]
 800f698:	f8ad 901a 	strh.w	r9, [sp, #26]
 800f69c:	f8cd a00c 	str.w	sl, [sp, #12]
 800f6a0:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f6a4:	f88d 401e 	strb.w	r4, [sp, #30]
 800f6a8:	f88d 401f 	strb.w	r4, [sp, #31]
 800f6ac:	f1b8 0f00 	cmp.w	r8, #0
 800f6b0:	d000      	beq.n	800f6b4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800f6b2:	b937      	cbnz	r7, 800f6c2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800f6b4:	4b0d      	ldr	r3, [pc, #52]	; (800f6ec <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800f6b6:	f240 2121 	movw	r1, #545	; 0x221
 800f6ba:	4a0d      	ldr	r2, [pc, #52]	; (800f6f0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800f6bc:	480d      	ldr	r0, [pc, #52]	; (800f6f4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800f6be:	f015 fe73 	bl	80253a8 <__assert_func>
 800f6c2:	6833      	ldr	r3, [r6, #0]
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	9c00      	ldr	r4, [sp, #0]
 800f6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ca:	4798      	blx	r3
 800f6cc:	4220      	tst	r0, r4
 800f6ce:	d104      	bne.n	800f6da <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800f6d0:	4b09      	ldr	r3, [pc, #36]	; (800f6f8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800f6d2:	f240 2122 	movw	r1, #546	; 0x222
 800f6d6:	4a06      	ldr	r2, [pc, #24]	; (800f6f0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800f6d8:	e7f0      	b.n	800f6bc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800f6da:	6870      	ldr	r0, [r6, #4]
 800f6dc:	4669      	mov	r1, sp
 800f6de:	6803      	ldr	r3, [r0, #0]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	4798      	blx	r3
 800f6e4:	b009      	add	sp, #36	; 0x24
 800f6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ea:	bf00      	nop
 800f6ec:	0802a144 	.word	0x0802a144
 800f6f0:	0802a39d 	.word	0x0802a39d
 800f6f4:	0802a279 	.word	0x0802a279
 800f6f8:	0802a17c 	.word	0x0802a17c

0800f6fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800f6fc:	b508      	push	{r3, lr}
 800f6fe:	290d      	cmp	r1, #13
 800f700:	d817      	bhi.n	800f732 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800f702:	e8df f001 	tbb	[pc, r1]
 800f706:	090b      	.short	0x090b
 800f708:	0d0d0d07 	.word	0x0d0d0d07
 800f70c:	1414140d 	.word	0x1414140d
 800f710:	0d0d1414 	.word	0x0d0d1414
 800f714:	2020      	movs	r0, #32
 800f716:	bd08      	pop	{r3, pc}
 800f718:	2018      	movs	r0, #24
 800f71a:	e7fc      	b.n	800f716 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800f71c:	2010      	movs	r0, #16
 800f71e:	e7fa      	b.n	800f716 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800f720:	4b05      	ldr	r3, [pc, #20]	; (800f738 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800f722:	f240 2182 	movw	r1, #642	; 0x282
 800f726:	4a05      	ldr	r2, [pc, #20]	; (800f73c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800f728:	4805      	ldr	r0, [pc, #20]	; (800f740 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800f72a:	f015 fe3d 	bl	80253a8 <__assert_func>
 800f72e:	2008      	movs	r0, #8
 800f730:	e7f1      	b.n	800f716 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800f732:	2000      	movs	r0, #0
 800f734:	e7ef      	b.n	800f716 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800f736:	bf00      	nop
 800f738:	0802a2f5 	.word	0x0802a2f5
 800f73c:	0802a6c8 	.word	0x0802a6c8
 800f740:	0802a279 	.word	0x0802a279

0800f744 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	460d      	mov	r5, r1
 800f748:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800f74c:	4616      	mov	r6, r2
 800f74e:	461c      	mov	r4, r3
 800f750:	f7ff ffd4 	bl	800f6fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800f754:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f758:	10c0      	asrs	r0, r0, #3
 800f75a:	fb06 5101 	mla	r1, r6, r1, r5
 800f75e:	fb00 4001 	mla	r0, r0, r1, r4
 800f762:	bd70      	pop	{r4, r5, r6, pc}

0800f764 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800f764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f768:	b08a      	sub	sp, #40	; 0x28
 800f76a:	f04f 0c00 	mov.w	ip, #0
 800f76e:	4604      	mov	r4, r0
 800f770:	469a      	mov	sl, r3
 800f772:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800f776:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800f77a:	2d0b      	cmp	r5, #11
 800f77c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800f780:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f784:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800f788:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800f78c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800f790:	f8cd c014 	str.w	ip, [sp, #20]
 800f794:	d12d      	bne.n	800f7f2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800f796:	2080      	movs	r0, #128	; 0x80
 800f798:	9204      	str	r2, [sp, #16]
 800f79a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800f79e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f7a2:	f8ad 2020 	strh.w	r2, [sp, #32]
 800f7a6:	f8ad 701c 	strh.w	r7, [sp, #28]
 800f7aa:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f7ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f7ff feec 	bl	800f590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f7b8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800f7bc:	4603      	mov	r3, r0
 800f7be:	4651      	mov	r1, sl
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	e9cd 9800 	strd	r9, r8, [sp]
 800f7c6:	f7ff ffbd 	bl	800f744 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800f7ca:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800f7ce:	9006      	str	r0, [sp, #24]
 800f7d0:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800f7d4:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800f7d8:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800f7dc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800f7e0:	b107      	cbz	r7, 800f7e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800f7e2:	b9d6      	cbnz	r6, 800f81a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800f7e4:	4b17      	ldr	r3, [pc, #92]	; (800f844 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800f7e6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800f7ea:	4a17      	ldr	r2, [pc, #92]	; (800f848 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800f7ec:	4817      	ldr	r0, [pc, #92]	; (800f84c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800f7ee:	f015 fddb 	bl	80253a8 <__assert_func>
 800f7f2:	2d02      	cmp	r5, #2
 800f7f4:	d108      	bne.n	800f808 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800f7f6:	2bff      	cmp	r3, #255	; 0xff
 800f7f8:	d104      	bne.n	800f804 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	bf14      	ite	ne
 800f7fe:	2040      	movne	r0, #64	; 0x40
 800f800:	2020      	moveq	r0, #32
 800f802:	e7c9      	b.n	800f798 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800f804:	2040      	movs	r0, #64	; 0x40
 800f806:	e7c7      	b.n	800f798 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800f808:	2bff      	cmp	r3, #255	; 0xff
 800f80a:	d104      	bne.n	800f816 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	bf14      	ite	ne
 800f810:	2004      	movne	r0, #4
 800f812:	2001      	moveq	r0, #1
 800f814:	e7c0      	b.n	800f798 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800f816:	2004      	movs	r0, #4
 800f818:	e7be      	b.n	800f798 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800f81a:	6823      	ldr	r3, [r4, #0]
 800f81c:	4620      	mov	r0, r4
 800f81e:	9d02      	ldr	r5, [sp, #8]
 800f820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f822:	4798      	blx	r3
 800f824:	4228      	tst	r0, r5
 800f826:	d104      	bne.n	800f832 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800f828:	4b09      	ldr	r3, [pc, #36]	; (800f850 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800f82a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800f82e:	4a06      	ldr	r2, [pc, #24]	; (800f848 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800f830:	e7dc      	b.n	800f7ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800f832:	6860      	ldr	r0, [r4, #4]
 800f834:	a902      	add	r1, sp, #8
 800f836:	6803      	ldr	r3, [r0, #0]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	4798      	blx	r3
 800f83c:	b00a      	add	sp, #40	; 0x28
 800f83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f842:	bf00      	nop
 800f844:	0802a0c7 	.word	0x0802a0c7
 800f848:	0802a556 	.word	0x0802a556
 800f84c:	0802a279 	.word	0x0802a279
 800f850:	0802a0ff 	.word	0x0802a0ff

0800f854 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800f854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f858:	b08b      	sub	sp, #44	; 0x2c
 800f85a:	469b      	mov	fp, r3
 800f85c:	4604      	mov	r4, r0
 800f85e:	4692      	mov	sl, r2
 800f860:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800f864:	2600      	movs	r6, #0
 800f866:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800f86a:	4689      	mov	r9, r1
 800f86c:	2fff      	cmp	r7, #255	; 0xff
 800f86e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800f872:	9605      	str	r6, [sp, #20]
 800f874:	bf14      	ite	ne
 800f876:	2308      	movne	r3, #8
 800f878:	2302      	moveq	r3, #2
 800f87a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800f87e:	f7ff fe87 	bl	800f590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f882:	465a      	mov	r2, fp
 800f884:	4603      	mov	r3, r0
 800f886:	4651      	mov	r1, sl
 800f888:	4620      	mov	r0, r4
 800f88a:	e9cd 8500 	strd	r8, r5, [sp]
 800f88e:	f7ff ff59 	bl	800f744 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800f892:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800f896:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800f89a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f89e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800f8a2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800f8a6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f8aa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800f8ae:	9d02      	ldr	r5, [sp, #8]
 800f8b0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800f8b4:	6823      	ldr	r3, [r4, #0]
 800f8b6:	9006      	str	r0, [sp, #24]
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f8ad 6020 	strh.w	r6, [sp, #32]
 800f8be:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800f8c2:	f8cd 9014 	str.w	r9, [sp, #20]
 800f8c6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800f8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8cc:	4798      	blx	r3
 800f8ce:	4228      	tst	r0, r5
 800f8d0:	d106      	bne.n	800f8e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800f8d2:	4b07      	ldr	r3, [pc, #28]	; (800f8f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800f8d4:	f240 2137 	movw	r1, #567	; 0x237
 800f8d8:	4a06      	ldr	r2, [pc, #24]	; (800f8f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800f8da:	4807      	ldr	r0, [pc, #28]	; (800f8f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800f8dc:	f015 fd64 	bl	80253a8 <__assert_func>
 800f8e0:	6860      	ldr	r0, [r4, #4]
 800f8e2:	a902      	add	r1, sp, #8
 800f8e4:	6803      	ldr	r3, [r0, #0]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	4798      	blx	r3
 800f8ea:	b00b      	add	sp, #44	; 0x2c
 800f8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f0:	0802a0ff 	.word	0x0802a0ff
 800f8f4:	0802a62d 	.word	0x0802a62d
 800f8f8:	0802a279 	.word	0x0802a279

0800f8fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800f8fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f900:	461f      	mov	r7, r3
 800f902:	4b0b      	ldr	r3, [pc, #44]	; (800f930 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800f904:	460d      	mov	r5, r1
 800f906:	4616      	mov	r6, r2
 800f908:	f8b3 8000 	ldrh.w	r8, [r3]
 800f90c:	4604      	mov	r4, r0
 800f90e:	f7f4 ffd3 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800f912:	6803      	ldr	r3, [r0, #0]
 800f914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f916:	4798      	blx	r3
 800f918:	463b      	mov	r3, r7
 800f91a:	4632      	mov	r2, r6
 800f91c:	4629      	mov	r1, r5
 800f91e:	e9cd 8000 	strd	r8, r0, [sp]
 800f922:	4620      	mov	r0, r4
 800f924:	f7ff ff0e 	bl	800f744 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800f928:	b002      	add	sp, #8
 800f92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f92e:	bf00      	nop
 800f930:	20060c2a 	.word	0x20060c2a

0800f934 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800f934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f938:	4698      	mov	r8, r3
 800f93a:	b088      	sub	sp, #32
 800f93c:	2300      	movs	r3, #0
 800f93e:	4617      	mov	r7, r2
 800f940:	4604      	mov	r4, r0
 800f942:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800f946:	9303      	str	r3, [sp, #12]
 800f948:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f94c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800f950:	f8ad 6014 	strh.w	r6, [sp, #20]
 800f954:	f8ad 5016 	strh.w	r5, [sp, #22]
 800f958:	e9cd 3100 	strd	r3, r1, [sp]
 800f95c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f960:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f964:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800f968:	f88d 301c 	strb.w	r3, [sp, #28]
 800f96c:	f7ff fe10 	bl	800f590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f970:	4642      	mov	r2, r8
 800f972:	4603      	mov	r3, r0
 800f974:	4639      	mov	r1, r7
 800f976:	4620      	mov	r0, r4
 800f978:	f7ff ffc0 	bl	800f8fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f97c:	4b18      	ldr	r3, [pc, #96]	; (800f9e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800f97e:	9004      	str	r0, [sp, #16]
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f986:	f7f4 ff97 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800f98a:	6803      	ldr	r3, [r0, #0]
 800f98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98e:	4798      	blx	r3
 800f990:	f88d 001e 	strb.w	r0, [sp, #30]
 800f994:	f88d 001d 	strb.w	r0, [sp, #29]
 800f998:	b106      	cbz	r6, 800f99c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800f99a:	b935      	cbnz	r5, 800f9aa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800f99c:	4b11      	ldr	r3, [pc, #68]	; (800f9e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800f99e:	f240 11f1 	movw	r1, #497	; 0x1f1
 800f9a2:	4a11      	ldr	r2, [pc, #68]	; (800f9e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800f9a4:	4811      	ldr	r0, [pc, #68]	; (800f9ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800f9a6:	f015 fcff 	bl	80253a8 <__assert_func>
 800f9aa:	6823      	ldr	r3, [r4, #0]
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	9d00      	ldr	r5, [sp, #0]
 800f9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b2:	4798      	blx	r3
 800f9b4:	4228      	tst	r0, r5
 800f9b6:	d104      	bne.n	800f9c2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800f9b8:	4b0d      	ldr	r3, [pc, #52]	; (800f9f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800f9ba:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800f9be:	4a0a      	ldr	r2, [pc, #40]	; (800f9e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800f9c0:	e7f0      	b.n	800f9a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800f9c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9c4:	4669      	mov	r1, sp
 800f9c6:	6860      	ldr	r0, [r4, #4]
 800f9c8:	9303      	str	r3, [sp, #12]
 800f9ca:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800f9ce:	f88d 301f 	strb.w	r3, [sp, #31]
 800f9d2:	6803      	ldr	r3, [r0, #0]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	4798      	blx	r3
 800f9d8:	b008      	add	sp, #32
 800f9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9de:	bf00      	nop
 800f9e0:	20060c2a 	.word	0x20060c2a
 800f9e4:	0802a0c7 	.word	0x0802a0c7
 800f9e8:	0802a402 	.word	0x0802a402
 800f9ec:	0802a279 	.word	0x0802a279
 800f9f0:	0802a0ff 	.word	0x0802a0ff

0800f9f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800f9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9f6:	b08b      	sub	sp, #44	; 0x2c
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	466b      	mov	r3, sp
 800f9fc:	e883 0006 	stmia.w	r3, {r1, r2}
 800fa00:	4b20      	ldr	r3, [pc, #128]	; (800fa84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	b933      	cbnz	r3, 800fa14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800fa06:	4b20      	ldr	r3, [pc, #128]	; (800fa88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800fa08:	f44f 7112 	mov.w	r1, #584	; 0x248
 800fa0c:	4a1f      	ldr	r2, [pc, #124]	; (800fa8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800fa0e:	4820      	ldr	r0, [pc, #128]	; (800fa90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800fa10:	f015 fcca 	bl	80253a8 <__assert_func>
 800fa14:	2301      	movs	r3, #1
 800fa16:	2500      	movs	r5, #0
 800fa18:	f8bd 6000 	ldrh.w	r6, [sp]
 800fa1c:	9302      	str	r3, [sp, #8]
 800fa1e:	6803      	ldr	r3, [r0, #0]
 800fa20:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800fa24:	9505      	str	r5, [sp, #20]
 800fa26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa28:	4798      	blx	r3
 800fa2a:	463a      	mov	r2, r7
 800fa2c:	4631      	mov	r1, r6
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4620      	mov	r0, r4
 800fa32:	f7ff ff63 	bl	800f8fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fa36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa38:	9003      	str	r0, [sp, #12]
 800fa3a:	9306      	str	r3, [sp, #24]
 800fa3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fa40:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fa44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fa48:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fa4c:	4b11      	ldr	r3, [pc, #68]	; (800fa94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800fa4e:	881b      	ldrh	r3, [r3, #0]
 800fa50:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fa54:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fa58:	f7f4 ff2e 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800fa5c:	6803      	ldr	r3, [r0, #0]
 800fa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa60:	4798      	blx	r3
 800fa62:	23ff      	movs	r3, #255	; 0xff
 800fa64:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800fa68:	a902      	add	r1, sp, #8
 800fa6a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800fa6e:	6860      	ldr	r0, [r4, #4]
 800fa70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800fa74:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800fa78:	6803      	ldr	r3, [r0, #0]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	4798      	blx	r3
 800fa7e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800fa80:	b00b      	add	sp, #44	; 0x2c
 800fa82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa84:	20060c2f 	.word	0x20060c2f
 800fa88:	0802a1c6 	.word	0x0802a1c6
 800fa8c:	0802a4ac 	.word	0x0802a4ac
 800fa90:	0802a279 	.word	0x0802a279
 800fa94:	20060c2a 	.word	0x20060c2a

0800fa98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800fa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa9c:	b08a      	sub	sp, #40	; 0x28
 800fa9e:	2600      	movs	r6, #0
 800faa0:	4604      	mov	r4, r0
 800faa2:	466d      	mov	r5, sp
 800faa4:	9605      	str	r6, [sp, #20]
 800faa6:	e885 0006 	stmia.w	r5, {r1, r2}
 800faaa:	461d      	mov	r5, r3
 800faac:	2301      	movs	r3, #1
 800faae:	f8bd 7000 	ldrh.w	r7, [sp]
 800fab2:	9302      	str	r3, [sp, #8]
 800fab4:	6803      	ldr	r3, [r0, #0]
 800fab6:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800faba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fabc:	4798      	blx	r3
 800fabe:	4642      	mov	r2, r8
 800fac0:	4639      	mov	r1, r7
 800fac2:	4603      	mov	r3, r0
 800fac4:	4620      	mov	r0, r4
 800fac6:	f7ff ff19 	bl	800f8fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800faca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800face:	9003      	str	r0, [sp, #12]
 800fad0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fad4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fad8:	9506      	str	r5, [sp, #24]
 800fada:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fade:	4b0f      	ldr	r3, [pc, #60]	; (800fb1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800fae0:	881b      	ldrh	r3, [r3, #0]
 800fae2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fae6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fae8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800faec:	f7f4 fee4 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 800faf0:	6803      	ldr	r3, [r0, #0]
 800faf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf4:	4798      	blx	r3
 800faf6:	23ff      	movs	r3, #255	; 0xff
 800faf8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800fafc:	a902      	add	r1, sp, #8
 800fafe:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800fb02:	6860      	ldr	r0, [r4, #4]
 800fb04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800fb08:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800fb0c:	6803      	ldr	r3, [r0, #0]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	4798      	blx	r3
 800fb12:	4628      	mov	r0, r5
 800fb14:	b00a      	add	sp, #40	; 0x28
 800fb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20060c2a 	.word	0x20060c2a

0800fb20 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800fb20:	b570      	push	{r4, r5, r6, lr}
 800fb22:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800fb26:	4604      	mov	r4, r0
 800fb28:	b19b      	cbz	r3, 800fb52 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800fb2a:	2002      	movs	r0, #2
 800fb2c:	f7f1 f96a 	bl	8000e04 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800fb30:	2300      	movs	r3, #0
 800fb32:	4620      	mov	r0, r4
 800fb34:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800fb38:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800fb42:	f7ff fd25 	bl	800f590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fb46:	4601      	mov	r1, r0
 800fb48:	4620      	mov	r0, r4
 800fb4a:	462b      	mov	r3, r5
 800fb4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb50:	4718      	bx	r3
 800fb52:	bd70      	pop	{r4, r5, r6, pc}

0800fb54 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	4605      	mov	r5, r0
 800fb58:	460c      	mov	r4, r1
 800fb5a:	2003      	movs	r0, #3
 800fb5c:	b149      	cbz	r1, 800fb72 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800fb5e:	f7f1 f921 	bl	8000da4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800fb62:	6928      	ldr	r0, [r5, #16]
 800fb64:	b168      	cbz	r0, 800fb82 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800fb66:	6803      	ldr	r3, [r0, #0]
 800fb68:	2101      	movs	r1, #1
 800fb6a:	695b      	ldr	r3, [r3, #20]
 800fb6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb70:	4718      	bx	r3
 800fb72:	f7f1 f92f 	bl	8000dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800fb76:	6928      	ldr	r0, [r5, #16]
 800fb78:	b118      	cbz	r0, 800fb82 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800fb7a:	6803      	ldr	r3, [r0, #0]
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	695b      	ldr	r3, [r3, #20]
 800fb80:	e7f4      	b.n	800fb6c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800fb82:	bd70      	pop	{r4, r5, r6, pc}

0800fb84 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	460d      	mov	r5, r1
 800fb8e:	428a      	cmp	r2, r1
 800fb90:	d008      	beq.n	800fba4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800fb92:	2a01      	cmp	r2, #1
 800fb94:	6803      	ldr	r3, [r0, #0]
 800fb96:	d106      	bne.n	800fba6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800fb98:	b929      	cbnz	r1, 800fba6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800fb9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800fb9e:	4798      	blx	r3
 800fba0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800fba4:	bd38      	pop	{r3, r4, r5, pc}
 800fba6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800fbaa:	4620      	mov	r0, r4
 800fbac:	e7f7      	b.n	800fb9e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800fbb0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800fbb0:	4b0d      	ldr	r3, [pc, #52]	; (800fbe8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800fbb2:	b510      	push	{r4, lr}
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	b95b      	cbnz	r3, 800fbd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fbba:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800fbbe:	2b02      	cmp	r3, #2
 800fbc0:	d007      	beq.n	800fbd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fbc2:	6840      	ldr	r0, [r0, #4]
 800fbc4:	f000 f93a 	bl	800fe3c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800fbc8:	b118      	cbz	r0, 800fbd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fbca:	6862      	ldr	r2, [r4, #4]
 800fbcc:	7a53      	ldrb	r3, [r2, #9]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0fc      	beq.n	800fbcc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800fbd2:	f7f2 f8c9 	bl	8001d68 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	2100      	movs	r1, #0
 800fbda:	f7ff ffd3 	bl	800fb84 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f7ff fcd6 	bl	800f590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fbe4:	bd10      	pop	{r4, pc}
 800fbe6:	bf00      	nop
 800fbe8:	20060c2e 	.word	0x20060c2e

0800fbec <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800fbec:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800fbf0:	1a13      	subs	r3, r2, r0
 800fbf2:	4258      	negs	r0, r3
 800fbf4:	4158      	adcs	r0, r3
 800fbf6:	4770      	bx	lr

0800fbf8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800fbf8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800fbfc:	1a9b      	subs	r3, r3, r2
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	bfdc      	itt	le
 800fc02:	6882      	ldrle	r2, [r0, #8]
 800fc04:	189b      	addle	r3, r3, r2
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	bfcc      	ite	gt
 800fc0a:	2000      	movgt	r0, #0
 800fc0c:	2001      	movle	r0, #1
 800fc0e:	4770      	bx	lr

0800fc10 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800fc10:	6902      	ldr	r2, [r0, #16]
 800fc12:	6840      	ldr	r0, [r0, #4]
 800fc14:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800fc18:	4770      	bx	lr

0800fc1a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800fc1a:	6803      	ldr	r3, [r0, #0]
 800fc1c:	691b      	ldr	r3, [r3, #16]
 800fc1e:	4718      	bx	r3

0800fc20 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800fc20:	4770      	bx	lr

0800fc22 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800fc22:	4770      	bx	lr

0800fc24 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800fc24:	4770      	bx	lr
	...

0800fc28 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800fc28:	2301      	movs	r3, #1
 800fc2a:	b570      	push	{r4, r5, r6, lr}
 800fc2c:	7203      	strb	r3, [r0, #8]
 800fc2e:	4604      	mov	r4, r0
 800fc30:	6840      	ldr	r0, [r0, #4]
 800fc32:	6803      	ldr	r3, [r0, #0]
 800fc34:	699b      	ldr	r3, [r3, #24]
 800fc36:	4798      	blx	r3
 800fc38:	6803      	ldr	r3, [r0, #0]
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	2b40      	cmp	r3, #64	; 0x40
 800fc3e:	d039      	beq.n	800fcb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800fc40:	d815      	bhi.n	800fc6e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800fc42:	2b04      	cmp	r3, #4
 800fc44:	d022      	beq.n	800fc8c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800fc46:	d808      	bhi.n	800fc5a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d033      	beq.n	800fcb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	d108      	bne.n	800fc62 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800fc50:	6823      	ldr	r3, [r4, #0]
 800fc52:	4620      	mov	r0, r4
 800fc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc56:	4798      	blx	r3
 800fc58:	e025      	b.n	800fca6 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800fc5a:	2b08      	cmp	r3, #8
 800fc5c:	d01e      	beq.n	800fc9c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800fc5e:	2b20      	cmp	r3, #32
 800fc60:	d028      	beq.n	800fcb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800fc62:	4b17      	ldr	r3, [pc, #92]	; (800fcc0 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800fc64:	218b      	movs	r1, #139	; 0x8b
 800fc66:	4a17      	ldr	r2, [pc, #92]	; (800fcc4 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800fc68:	4817      	ldr	r0, [pc, #92]	; (800fcc8 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800fc6a:	f015 fb9d 	bl	80253a8 <__assert_func>
 800fc6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc72:	d01f      	beq.n	800fcb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800fc74:	d804      	bhi.n	800fc80 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800fc76:	2b80      	cmp	r3, #128	; 0x80
 800fc78:	d01c      	beq.n	800fcb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800fc7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc7e:	e7ef      	b.n	800fc60 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800fc80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc84:	d016      	beq.n	800fcb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800fc86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc8a:	e7e0      	b.n	800fc4e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800fc8c:	6823      	ldr	r3, [r4, #0]
 800fc8e:	7f01      	ldrb	r1, [r0, #28]
 800fc90:	4620      	mov	r0, r4
 800fc92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc94:	4798      	blx	r3
 800fc96:	6823      	ldr	r3, [r4, #0]
 800fc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc9a:	e006      	b.n	800fcaa <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	7f01      	ldrb	r1, [r0, #28]
 800fca0:	4620      	mov	r0, r4
 800fca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca4:	4798      	blx	r3
 800fca6:	6823      	ldr	r3, [r4, #0]
 800fca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcaa:	4629      	mov	r1, r5
 800fcac:	4620      	mov	r0, r4
 800fcae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcb2:	4718      	bx	r3
 800fcb4:	6823      	ldr	r3, [r4, #0]
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcba:	4798      	blx	r3
 800fcbc:	e7eb      	b.n	800fc96 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800fcbe:	bf00      	nop
 800fcc0:	0802a711 	.word	0x0802a711
 800fcc4:	0802a7d0 	.word	0x0802a7d0
 800fcc8:	0802a736 	.word	0x0802a736

0800fccc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800fccc:	b570      	push	{r4, r5, r6, lr}
 800fcce:	4604      	mov	r4, r0
 800fcd0:	460e      	mov	r6, r1
 800fcd2:	6860      	ldr	r0, [r4, #4]
 800fcd4:	6803      	ldr	r3, [r0, #0]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	4798      	blx	r3
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d1f9      	bne.n	800fcd2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800fcde:	4d0d      	ldr	r5, [pc, #52]	; (800fd14 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800fce0:	6828      	ldr	r0, [r5, #0]
 800fce2:	6803      	ldr	r3, [r0, #0]
 800fce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fce6:	4798      	blx	r3
 800fce8:	f7f2 f84c 	bl	8001d84 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800fcec:	6828      	ldr	r0, [r5, #0]
 800fcee:	2101      	movs	r1, #1
 800fcf0:	f7ff ff48 	bl	800fb84 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fcf4:	6860      	ldr	r0, [r4, #4]
 800fcf6:	4631      	mov	r1, r6
 800fcf8:	6803      	ldr	r3, [r0, #0]
 800fcfa:	689b      	ldr	r3, [r3, #8]
 800fcfc:	4798      	blx	r3
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	4620      	mov	r0, r4
 800fd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd04:	4798      	blx	r3
 800fd06:	6828      	ldr	r0, [r5, #0]
 800fd08:	6803      	ldr	r3, [r0, #0]
 800fd0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd10:	4718      	bx	r3
 800fd12:	bf00      	nop
 800fd14:	20060c30 	.word	0x20060c30

0800fd18 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800fd18:	b508      	push	{r3, lr}
 800fd1a:	f7f2 f825 	bl	8001d68 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fd1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fd22:	f7f2 b829 	b.w	8001d78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800fd26 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fd26:	b510      	push	{r4, lr}
 800fd28:	4604      	mov	r4, r0
 800fd2a:	2114      	movs	r1, #20
 800fd2c:	f015 f969 	bl	8025002 <_ZdlPvj>
 800fd30:	4620      	mov	r0, r4
 800fd32:	bd10      	pop	{r4, pc}

0800fd34 <_ZN8touchgfx13DMA_Interface5startEv>:
 800fd34:	b510      	push	{r4, lr}
 800fd36:	4604      	mov	r4, r0
 800fd38:	6840      	ldr	r0, [r0, #4]
 800fd3a:	6803      	ldr	r3, [r0, #0]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	4798      	blx	r3
 800fd40:	b948      	cbnz	r0, 800fd56 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800fd42:	7a63      	ldrb	r3, [r4, #9]
 800fd44:	b13b      	cbz	r3, 800fd56 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800fd46:	7a23      	ldrb	r3, [r4, #8]
 800fd48:	b92b      	cbnz	r3, 800fd56 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd54:	4718      	bx	r3
 800fd56:	bd10      	pop	{r4, pc}

0800fd58 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800fd5e:	4606      	mov	r6, r0
 800fd60:	1a9b      	subs	r3, r3, r2
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	bfdc      	itt	le
 800fd66:	6880      	ldrle	r0, [r0, #8]
 800fd68:	181b      	addle	r3, r3, r0
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	dd13      	ble.n	800fd96 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800fd6e:	6874      	ldr	r4, [r6, #4]
 800fd70:	460d      	mov	r5, r1
 800fd72:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800fd76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fd7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fd82:	68f3      	ldr	r3, [r6, #12]
 800fd84:	68b2      	ldr	r2, [r6, #8]
 800fd86:	f3bf 8f5b 	dmb	ish
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	bfd8      	it	le
 800fd90:	1a9b      	suble	r3, r3, r2
 800fd92:	60f3      	str	r3, [r6, #12]
 800fd94:	bd70      	pop	{r4, r5, r6, pc}
 800fd96:	4b03      	ldr	r3, [pc, #12]	; (800fda4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800fd98:	2139      	movs	r1, #57	; 0x39
 800fd9a:	4a03      	ldr	r2, [pc, #12]	; (800fda8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800fd9c:	4803      	ldr	r0, [pc, #12]	; (800fdac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800fd9e:	f015 fb03 	bl	80253a8 <__assert_func>
 800fda2:	bf00      	nop
 800fda4:	0802a75c 	.word	0x0802a75c
 800fda8:	0802a800 	.word	0x0802a800
 800fdac:	0802a736 	.word	0x0802a736

0800fdb0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800fdb0:	b510      	push	{r4, lr}
 800fdb2:	6803      	ldr	r3, [r0, #0]
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4798      	blx	r3
 800fdba:	b128      	cbz	r0, 800fdc8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800fdbc:	4b07      	ldr	r3, [pc, #28]	; (800fddc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800fdbe:	213f      	movs	r1, #63	; 0x3f
 800fdc0:	4a07      	ldr	r2, [pc, #28]	; (800fde0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800fdc2:	4808      	ldr	r0, [pc, #32]	; (800fde4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800fdc4:	f015 faf0 	bl	80253a8 <__assert_func>
 800fdc8:	6923      	ldr	r3, [r4, #16]
 800fdca:	68a2      	ldr	r2, [r4, #8]
 800fdcc:	f3bf 8f5b 	dmb	ish
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	bfd8      	it	le
 800fdd6:	1a9b      	suble	r3, r3, r2
 800fdd8:	6123      	str	r3, [r4, #16]
 800fdda:	bd10      	pop	{r4, pc}
 800fddc:	0802a77f 	.word	0x0802a77f
 800fde0:	0802a84e 	.word	0x0802a84e
 800fde4:	0802a736 	.word	0x0802a736

0800fde8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800fde8:	b570      	push	{r4, r5, r6, lr}
 800fdea:	4604      	mov	r4, r0
 800fdec:	6840      	ldr	r0, [r0, #4]
 800fdee:	6803      	ldr	r3, [r0, #0]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4798      	blx	r3
 800fdf4:	4605      	mov	r5, r0
 800fdf6:	b930      	cbnz	r0, 800fe06 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800fdf8:	7a23      	ldrb	r3, [r4, #8]
 800fdfa:	b123      	cbz	r3, 800fe06 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800fdfc:	6860      	ldr	r0, [r4, #4]
 800fdfe:	6803      	ldr	r3, [r0, #0]
 800fe00:	695b      	ldr	r3, [r3, #20]
 800fe02:	4798      	blx	r3
 800fe04:	7225      	strb	r5, [r4, #8]
 800fe06:	6860      	ldr	r0, [r4, #4]
 800fe08:	6803      	ldr	r3, [r0, #0]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	4798      	blx	r3
 800fe0e:	b928      	cbnz	r0, 800fe1c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800fe10:	6823      	ldr	r3, [r4, #0]
 800fe12:	4620      	mov	r0, r4
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe1a:	4718      	bx	r3
 800fe1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe20:	f7f1 bfb8 	b.w	8001d94 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800fe24 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800fe24:	b510      	push	{r4, lr}
 800fe26:	6082      	str	r2, [r0, #8]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	4c03      	ldr	r4, [pc, #12]	; (800fe38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800fe2c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800fe30:	e9c0 4100 	strd	r4, r1, [r0]
 800fe34:	bd10      	pop	{r4, pc}
 800fe36:	bf00      	nop
 800fe38:	0802a7b4 	.word	0x0802a7b4

0800fe3c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800fe3c:	6840      	ldr	r0, [r0, #4]
 800fe3e:	6803      	ldr	r3, [r0, #0]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	4718      	bx	r3

0800fe44 <_ZN8touchgfx21AbstractPainterRGB56510renderInitEv>:
 800fe44:	2001      	movs	r0, #1
 800fe46:	4770      	bx	lr

0800fe48 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh>:
 800fe48:	4413      	add	r3, r2
 800fe4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800fe52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe54:	4d43      	ldr	r5, [pc, #268]	; (800ff64 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x11c>)
 800fe56:	eb01 0e43 	add.w	lr, r1, r3, lsl #1
 800fe5a:	6943      	ldr	r3, [r0, #20]
 800fe5c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800fe60:	095c      	lsrs	r4, r3, #5
 800fe62:	ea05 2213 	and.w	r2, r5, r3, lsr #8
 800fe66:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800fe6a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800fe6e:	4322      	orrs	r2, r4
 800fe70:	7a04      	ldrb	r4, [r0, #8]
 800fe72:	431a      	orrs	r2, r3
 800fe74:	2cff      	cmp	r4, #255	; 0xff
 800fe76:	b292      	uxth	r2, r2
 800fe78:	d017      	beq.n	800feaa <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x62>
 800fe7a:	ea02 0305 	and.w	r3, r2, r5
 800fe7e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800fe82:	f402 6afc 	and.w	sl, r2, #2016	; 0x7e0
 800fe86:	f002 0b1f 	and.w	fp, r2, #31
 800fe8a:	9301      	str	r3, [sp, #4]
 800fe8c:	7a04      	ldrb	r4, [r0, #8]
 800fe8e:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fe92:	4363      	muls	r3, r4
 800fe94:	1c5c      	adds	r4, r3, #1
 800fe96:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 800fe9a:	121b      	asrs	r3, r3, #8
 800fe9c:	2bff      	cmp	r3, #255	; 0xff
 800fe9e:	d13e      	bne.n	800ff1e <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0xd6>
 800fea0:	800a      	strh	r2, [r1, #0]
 800fea2:	3102      	adds	r1, #2
 800fea4:	458e      	cmp	lr, r1
 800fea6:	d8f1      	bhi.n	800fe8c <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x44>
 800fea8:	e00d      	b.n	800fec6 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x7e>
 800feaa:	ea02 0605 	and.w	r6, r2, r5
 800feae:	f402 67fc 	and.w	r7, r2, #2016	; 0x7e0
 800feb2:	f002 0c1f 	and.w	ip, r2, #31
 800feb6:	f818 0b01 	ldrb.w	r0, [r8], #1
 800feba:	28ff      	cmp	r0, #255	; 0xff
 800febc:	d106      	bne.n	800fecc <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x84>
 800febe:	800a      	strh	r2, [r1, #0]
 800fec0:	3102      	adds	r1, #2
 800fec2:	458e      	cmp	lr, r1
 800fec4:	d8f7      	bhi.n	800feb6 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x6e>
 800fec6:	b003      	add	sp, #12
 800fec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fecc:	f8b1 a000 	ldrh.w	sl, [r1]
 800fed0:	ea6f 0900 	mvn.w	r9, r0
 800fed4:	ea0a 0305 	and.w	r3, sl, r5
 800fed8:	fa5f f989 	uxtb.w	r9, r9
 800fedc:	fb09 f303 	mul.w	r3, r9, r3
 800fee0:	fb00 3306 	mla	r3, r0, r6, r3
 800fee4:	fb93 f3f4 	sdiv	r3, r3, r4
 800fee8:	ea03 0b05 	and.w	fp, r3, r5
 800feec:	f40a 63fc 	and.w	r3, sl, #2016	; 0x7e0
 800fef0:	f00a 0a1f 	and.w	sl, sl, #31
 800fef4:	fb09 f303 	mul.w	r3, r9, r3
 800fef8:	fb09 f90a 	mul.w	r9, r9, sl
 800fefc:	fb00 3307 	mla	r3, r0, r7, r3
 800ff00:	fb00 900c 	mla	r0, r0, ip, r9
 800ff04:	fb93 f3f4 	sdiv	r3, r3, r4
 800ff08:	fb90 f0f4 	sdiv	r0, r0, r4
 800ff0c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800ff10:	f000 001f 	and.w	r0, r0, #31
 800ff14:	ea4b 0303 	orr.w	r3, fp, r3
 800ff18:	4303      	orrs	r3, r0
 800ff1a:	800b      	strh	r3, [r1, #0]
 800ff1c:	e7d0      	b.n	800fec0 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x78>
 800ff1e:	f8b1 c000 	ldrh.w	ip, [r1]
 800ff22:	43df      	mvns	r7, r3
 800ff24:	9c01      	ldr	r4, [sp, #4]
 800ff26:	b2ff      	uxtb	r7, r7
 800ff28:	ea0c 0605 	and.w	r6, ip, r5
 800ff2c:	437e      	muls	r6, r7
 800ff2e:	fb03 6604 	mla	r6, r3, r4, r6
 800ff32:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 800ff36:	437c      	muls	r4, r7
 800ff38:	fb03 440a 	mla	r4, r3, sl, r4
 800ff3c:	fb96 f6f9 	sdiv	r6, r6, r9
 800ff40:	fb94 f4f9 	sdiv	r4, r4, r9
 800ff44:	402e      	ands	r6, r5
 800ff46:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800ff4a:	4334      	orrs	r4, r6
 800ff4c:	f00c 061f 	and.w	r6, ip, #31
 800ff50:	437e      	muls	r6, r7
 800ff52:	fb03 660b 	mla	r6, r3, fp, r6
 800ff56:	fb96 f6f9 	sdiv	r6, r6, r9
 800ff5a:	f006 061f 	and.w	r6, r6, #31
 800ff5e:	4334      	orrs	r4, r6
 800ff60:	800c      	strh	r4, [r1, #0]
 800ff62:	e79e      	b.n	800fea2 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x5a>
 800ff64:	fffff800 	.word	0xfffff800

0800ff68 <_ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_>:
 800ff68:	b510      	push	{r4, lr}
 800ff6a:	8ac4      	ldrh	r4, [r0, #22]
 800ff6c:	700c      	strb	r4, [r1, #0]
 800ff6e:	6941      	ldr	r1, [r0, #20]
 800ff70:	0a09      	lsrs	r1, r1, #8
 800ff72:	7011      	strb	r1, [r2, #0]
 800ff74:	6942      	ldr	r2, [r0, #20]
 800ff76:	2001      	movs	r0, #1
 800ff78:	701a      	strb	r2, [r3, #0]
 800ff7a:	22ff      	movs	r2, #255	; 0xff
 800ff7c:	9b02      	ldr	r3, [sp, #8]
 800ff7e:	701a      	strb	r2, [r3, #0]
 800ff80:	bd10      	pop	{r4, pc}

0800ff82 <_ZN8touchgfx13PainterRGB565D1Ev>:
 800ff82:	4770      	bx	lr

0800ff84 <_ZN8touchgfx13PainterRGB565D0Ev>:
 800ff84:	b510      	push	{r4, lr}
 800ff86:	4604      	mov	r4, r0
 800ff88:	2118      	movs	r1, #24
 800ff8a:	f015 f83a 	bl	8025002 <_ZdlPvj>
 800ff8e:	4620      	mov	r0, r4
 800ff90:	bd10      	pop	{r4, pc}

0800ff92 <_ZN8touchgfx21AbstractPainterRGB56510renderNextERhS1_S1_S1_>:
 800ff92:	2000      	movs	r0, #0
 800ff94:	4770      	bx	lr

0800ff96 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh>:
 800ff96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff9a:	4616      	mov	r6, r2
 800ff9c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800ffa0:	b085      	sub	sp, #20
 800ffa2:	4698      	mov	r8, r3
 800ffa4:	4432      	add	r2, r6
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffaa:	460d      	mov	r5, r1
 800ffac:	60c2      	str	r2, [r0, #12]
 800ffae:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800ffb2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ffb4:	441a      	add	r2, r3
 800ffb6:	6803      	ldr	r3, [r0, #0]
 800ffb8:	6102      	str	r2, [r0, #16]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	4798      	blx	r3
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d03a      	beq.n	8010038 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xa2>
 800ffc2:	4446      	add	r6, r8
 800ffc4:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 800ffc8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ffca:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 800ffce:	6823      	ldr	r3, [r4, #0]
 800ffd0:	f10d 020f 	add.w	r2, sp, #15
 800ffd4:	a903      	add	r1, sp, #12
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	9200      	str	r2, [sp, #0]
 800ffda:	f10d 020d 	add.w	r2, sp, #13
 800ffde:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ffe2:	f10d 030e 	add.w	r3, sp, #14
 800ffe6:	47c0      	blx	r8
 800ffe8:	b1f8      	cbz	r0, 801002a <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x94>
 800ffea:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ffee:	7a20      	ldrb	r0, [r4, #8]
 800fff0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800fff4:	4358      	muls	r0, r3
 800fff6:	f89d c00e 	ldrb.w	ip, [sp, #14]
 800fffa:	1c43      	adds	r3, r0, #1
 800fffc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8010000:	7838      	ldrb	r0, [r7, #0]
 8010002:	121b      	asrs	r3, r3, #8
 8010004:	fb10 f003 	smulbb	r0, r0, r3
 8010008:	b283      	uxth	r3, r0
 801000a:	1c58      	adds	r0, r3, #1
 801000c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8010010:	6823      	ldr	r3, [r4, #0]
 8010012:	1200      	asrs	r0, r0, #8
 8010014:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8010018:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801001c:	28ff      	cmp	r0, #255	; 0xff
 801001e:	d10e      	bne.n	801003e <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xa8>
 8010020:	f8cd c000 	str.w	ip, [sp]
 8010024:	4629      	mov	r1, r5
 8010026:	4620      	mov	r0, r4
 8010028:	47c0      	blx	r8
 801002a:	68e3      	ldr	r3, [r4, #12]
 801002c:	3502      	adds	r5, #2
 801002e:	3701      	adds	r7, #1
 8010030:	3301      	adds	r3, #1
 8010032:	42ae      	cmp	r6, r5
 8010034:	60e3      	str	r3, [r4, #12]
 8010036:	d8ca      	bhi.n	800ffce <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x38>
 8010038:	b005      	add	sp, #20
 801003a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801003e:	8829      	ldrh	r1, [r5, #0]
 8010040:	fa1f fe80 	uxth.w	lr, r0
 8010044:	43c0      	mvns	r0, r0
 8010046:	fb12 f20e 	smulbb	r2, r2, lr
 801004a:	ea4f 2921 	mov.w	r9, r1, asr #8
 801004e:	fb13 f30e 	smulbb	r3, r3, lr
 8010052:	b2c0      	uxtb	r0, r0
 8010054:	fb1c fc0e 	smulbb	ip, ip, lr
 8010058:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801005c:	fb09 2200 	mla	r2, r9, r0, r2
 8010060:	ea4f 09e1 	mov.w	r9, r1, asr #3
 8010064:	00c9      	lsls	r1, r1, #3
 8010066:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801006a:	b292      	uxth	r2, r2
 801006c:	b2c9      	uxtb	r1, r1
 801006e:	fb09 3300 	mla	r3, r9, r0, r3
 8010072:	fb01 c000 	mla	r0, r1, r0, ip
 8010076:	b29b      	uxth	r3, r3
 8010078:	b280      	uxth	r0, r0
 801007a:	1c59      	adds	r1, r3, #1
 801007c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8010080:	1c51      	adds	r1, r2, #1
 8010082:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010086:	1c41      	adds	r1, r0, #1
 8010088:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801008c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8010090:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010094:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8010098:	9000      	str	r0, [sp, #0]
 801009a:	e7c3      	b.n	8010024 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x8e>

0801009c <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh>:
 801009c:	00db      	lsls	r3, r3, #3
 801009e:	f89d 0000 	ldrb.w	r0, [sp]
 80100a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80100a6:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80100aa:	4803      	ldr	r0, [pc, #12]	; (80100b8 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh+0x1c>)
 80100ac:	ea00 2202 	and.w	r2, r0, r2, lsl #8
 80100b0:	4313      	orrs	r3, r2
 80100b2:	800b      	strh	r3, [r1, #0]
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	fffff800 	.word	0xfffff800

080100bc <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
 80100bc:	4770      	bx	lr

080100be <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 80100be:	b510      	push	{r4, lr}
 80100c0:	4604      	mov	r4, r0
 80100c2:	2114      	movs	r1, #20
 80100c4:	f014 ff9d 	bl	8025002 <_ZdlPvj>
 80100c8:	4620      	mov	r0, r4
 80100ca:	bd10      	pop	{r4, pc}

080100cc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80100cc:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80100d0:	4770      	bx	lr

080100d2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80100d2:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80100d6:	4770      	bx	lr

080100d8 <_ZN8touchgfx6CircleD1Ev>:
 80100d8:	4770      	bx	lr

080100da <_ZN8touchgfx6CircleD0Ev>:
 80100da:	b510      	push	{r4, lr}
 80100dc:	4604      	mov	r4, r0
 80100de:	214c      	movs	r1, #76	; 0x4c
 80100e0:	f014 ff8f 	bl	8025002 <_ZdlPvj>
 80100e4:	4620      	mov	r0, r4
 80100e6:	bd10      	pop	{r4, pc}

080100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80100e8:	b507      	push	{r0, r1, r2, lr}
 80100ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80100ee:	ab01      	add	r3, sp, #4
 80100f0:	6809      	ldr	r1, [r1, #0]
 80100f2:	6800      	ldr	r0, [r0, #0]
 80100f4:	f004 fc4e 	bl	8014994 <_ZN8touchgfx6muldivElllRl>
 80100f8:	b003      	add	sp, #12
 80100fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010100 <_ZN8touchgfx7CWRUtil4sineEi>:
 8010100:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010104:	fb90 f3f2 	sdiv	r3, r0, r2
 8010108:	fb03 0312 	mls	r3, r3, r2, r0
 801010c:	4413      	add	r3, r2
 801010e:	fb93 f0f2 	sdiv	r0, r3, r2
 8010112:	fb02 3010 	mls	r0, r2, r0, r3
 8010116:	4b0a      	ldr	r3, [pc, #40]	; (8010140 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8010118:	285a      	cmp	r0, #90	; 0x5a
 801011a:	dc02      	bgt.n	8010122 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801011c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8010120:	4770      	bx	lr
 8010122:	28b4      	cmp	r0, #180	; 0xb4
 8010124:	dc02      	bgt.n	801012c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8010126:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801012a:	e7f7      	b.n	801011c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801012c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8010130:	bfd4      	ite	le
 8010132:	38b4      	suble	r0, #180	; 0xb4
 8010134:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8010138:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801013c:	4240      	negs	r0, r0
 801013e:	4770      	bx	lr
 8010140:	0802a8c0 	.word	0x0802a8c0

08010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8010144:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8010148:	fb90 f3f2 	sdiv	r3, r0, r2
 801014c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801014e:	fb03 0012 	mls	r0, r3, r2, r0
 8010152:	4410      	add	r0, r2
 8010154:	fb90 f4f2 	sdiv	r4, r0, r2
 8010158:	fb02 0414 	mls	r4, r2, r4, r0
 801015c:	f004 061f 	and.w	r6, r4, #31
 8010160:	1164      	asrs	r4, r4, #5
 8010162:	4620      	mov	r0, r4
 8010164:	f7ff ffcc 	bl	8010100 <_ZN8touchgfx7CWRUtil4sineEi>
 8010168:	4605      	mov	r5, r0
 801016a:	b90e      	cbnz	r6, 8010170 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 801016c:	b002      	add	sp, #8
 801016e:	bd70      	pop	{r4, r5, r6, pc}
 8010170:	1c60      	adds	r0, r4, #1
 8010172:	f7ff ffc5 	bl	8010100 <_ZN8touchgfx7CWRUtil4sineEi>
 8010176:	ab01      	add	r3, sp, #4
 8010178:	2220      	movs	r2, #32
 801017a:	4631      	mov	r1, r6
 801017c:	1b40      	subs	r0, r0, r5
 801017e:	f004 fc09 	bl	8014994 <_ZN8touchgfx6muldivElllRl>
 8010182:	4428      	add	r0, r5
 8010184:	e7f2      	b.n	801016c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08010186 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8010186:	b508      	push	{r3, lr}
 8010188:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 801018c:	f7ff ffda 	bl	8010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8010190:	bd08      	pop	{r3, pc}
	...

08010194 <_ZN8touchgfx6CircleC1Ev>:
 8010194:	b510      	push	{r4, lr}
 8010196:	4604      	mov	r4, r0
 8010198:	f000 fce8 	bl	8010b6c <_ZN8touchgfx12CanvasWidgetC1Ev>
 801019c:	4b08      	ldr	r3, [pc, #32]	; (80101c0 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 801019e:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80101a2:	4620      	mov	r0, r4
 80101a4:	6023      	str	r3, [r4, #0]
 80101a6:	2300      	movs	r3, #0
 80101a8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 80101ac:	f24b 4205 	movw	r2, #46085	; 0xb405
 80101b0:	60a3      	str	r3, [r4, #8]
 80101b2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80101b6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80101ba:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 80101be:	bd10      	pop	{r4, pc}
 80101c0:	0802a980 	.word	0x0802a980

080101c4 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 80101c4:	29b4      	cmp	r1, #180	; 0xb4
 80101c6:	bfa8      	it	ge
 80101c8:	21b4      	movge	r1, #180	; 0xb4
 80101ca:	2901      	cmp	r1, #1
 80101cc:	bfb8      	it	lt
 80101ce:	2101      	movlt	r1, #1
 80101d0:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
 80101d4:	4770      	bx	lr

080101d6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80101d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101da:	4606      	mov	r6, r0
 80101dc:	6810      	ldr	r0, [r2, #0]
 80101de:	4698      	mov	r8, r3
 80101e0:	4691      	mov	r9, r2
 80101e2:	460f      	mov	r7, r1
 80101e4:	f7ff ffae 	bl	8010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80101e8:	a902      	add	r1, sp, #8
 80101ea:	2402      	movs	r4, #2
 80101ec:	f841 0d08 	str.w	r0, [r1, #-8]!
 80101f0:	4640      	mov	r0, r8
 80101f2:	f7ff ff79 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80101f6:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80101f8:	fb90 f0f4 	sdiv	r0, r0, r4
 80101fc:	4405      	add	r5, r0
 80101fe:	f8d9 0000 	ldr.w	r0, [r9]
 8010202:	f7ff ffc0 	bl	8010186 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8010206:	a902      	add	r1, sp, #8
 8010208:	f841 0d04 	str.w	r0, [r1, #-4]!
 801020c:	4640      	mov	r0, r8
 801020e:	f7ff ff6b 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010212:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8010214:	4629      	mov	r1, r5
 8010216:	fb90 f0f4 	sdiv	r0, r0, r4
 801021a:	1a12      	subs	r2, r2, r0
 801021c:	4638      	mov	r0, r7
 801021e:	f012 fdfc 	bl	8022e1a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8010222:	b003      	add	sp, #12
 8010224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010228 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8010228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801022c:	9e08      	ldr	r6, [sp, #32]
 801022e:	4698      	mov	r8, r3
 8010230:	4615      	mov	r5, r2
 8010232:	460f      	mov	r7, r1
 8010234:	6830      	ldr	r0, [r6, #0]
 8010236:	2402      	movs	r4, #2
 8010238:	f7ff ff84 	bl	8010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801023c:	a902      	add	r1, sp, #8
 801023e:	f841 0d08 	str.w	r0, [r1, #-8]!
 8010242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010244:	f7ff ff50 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010248:	682d      	ldr	r5, [r5, #0]
 801024a:	fb90 f0f4 	sdiv	r0, r0, r4
 801024e:	4405      	add	r5, r0
 8010250:	6830      	ldr	r0, [r6, #0]
 8010252:	f7ff ff98 	bl	8010186 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8010256:	a902      	add	r1, sp, #8
 8010258:	f841 0d04 	str.w	r0, [r1, #-4]!
 801025c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801025e:	f7ff ff43 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010262:	f8d8 2000 	ldr.w	r2, [r8]
 8010266:	4629      	mov	r1, r5
 8010268:	fb90 f0f4 	sdiv	r0, r0, r4
 801026c:	1a12      	subs	r2, r2, r0
 801026e:	4638      	mov	r0, r7
 8010270:	f012 fd62 	bl	8022d38 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8010274:	b002      	add	sp, #8
 8010276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801027a <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 801027a:	b513      	push	{r0, r1, r4, lr}
 801027c:	e9cd 2300 	strd	r2, r3, [sp]
 8010280:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8010284:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8010288:	f7ff ffce 	bl	8010228 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801028c:	b002      	add	sp, #8
 801028e:	bd10      	pop	{r4, pc}

08010290 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8010290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010292:	680e      	ldr	r6, [r1, #0]
 8010294:	681f      	ldr	r7, [r3, #0]
 8010296:	9807      	ldr	r0, [sp, #28]
 8010298:	42be      	cmp	r6, r7
 801029a:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 801029e:	bfb8      	it	lt
 80102a0:	601e      	strlt	r6, [r3, #0]
 80102a2:	680b      	ldr	r3, [r1, #0]
 80102a4:	6829      	ldr	r1, [r5, #0]
 80102a6:	428b      	cmp	r3, r1
 80102a8:	bfc8      	it	gt
 80102aa:	602b      	strgt	r3, [r5, #0]
 80102ac:	6813      	ldr	r3, [r2, #0]
 80102ae:	6821      	ldr	r1, [r4, #0]
 80102b0:	428b      	cmp	r3, r1
 80102b2:	bfb8      	it	lt
 80102b4:	6023      	strlt	r3, [r4, #0]
 80102b6:	6813      	ldr	r3, [r2, #0]
 80102b8:	6802      	ldr	r2, [r0, #0]
 80102ba:	4293      	cmp	r3, r2
 80102bc:	bfc8      	it	gt
 80102be:	6003      	strgt	r3, [r0, #0]
 80102c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102c2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 80102c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102c6:	b089      	sub	sp, #36	; 0x24
 80102c8:	4690      	mov	r8, r2
 80102ca:	4606      	mov	r6, r0
 80102cc:	2402      	movs	r4, #2
 80102ce:	ad08      	add	r5, sp, #32
 80102d0:	6808      	ldr	r0, [r1, #0]
 80102d2:	461f      	mov	r7, r3
 80102d4:	4689      	mov	r9, r1
 80102d6:	f7ff ff35 	bl	8010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80102da:	f845 0d04 	str.w	r0, [r5, #-4]!
 80102de:	4640      	mov	r0, r8
 80102e0:	4629      	mov	r1, r5
 80102e2:	f7ff ff01 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80102e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80102e8:	fb90 f0f4 	sdiv	r0, r0, r4
 80102ec:	4418      	add	r0, r3
 80102ee:	9005      	str	r0, [sp, #20]
 80102f0:	f8d9 0000 	ldr.w	r0, [r9]
 80102f4:	f7ff ff47 	bl	8010186 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80102f8:	4629      	mov	r1, r5
 80102fa:	9007      	str	r0, [sp, #28]
 80102fc:	4640      	mov	r0, r8
 80102fe:	f7ff fef3 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010304:	aa08      	add	r2, sp, #32
 8010306:	a905      	add	r1, sp, #20
 8010308:	fb90 f0f4 	sdiv	r0, r0, r4
 801030c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 801030e:	1a24      	subs	r4, r4, r0
 8010310:	4630      	mov	r0, r6
 8010312:	f842 4d08 	str.w	r4, [r2, #-8]!
 8010316:	9302      	str	r3, [sp, #8]
 8010318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801031a:	9301      	str	r3, [sp, #4]
 801031c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	463b      	mov	r3, r7
 8010322:	f7ff ffb5 	bl	8010290 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8010326:	b009      	add	sp, #36	; 0x24
 8010328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801032c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 801032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	4291      	cmp	r1, r2
 8010332:	b08d      	sub	sp, #52	; 0x34
 8010334:	461e      	mov	r6, r3
 8010336:	4604      	mov	r4, r0
 8010338:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801033c:	ad0c      	add	r5, sp, #48	; 0x30
 801033e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8010342:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8010346:	bfc8      	it	gt
 8010348:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 801034c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010350:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8010354:	1a9b      	subs	r3, r3, r2
 8010356:	a907      	add	r1, sp, #28
 8010358:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801035c:	bfa2      	ittt	ge
 801035e:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8010362:	2200      	movge	r2, #0
 8010364:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8010368:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801036a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801036c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010370:	f845 3d04 	str.w	r3, [r5, #-4]!
 8010374:	4633      	mov	r3, r6
 8010376:	462a      	mov	r2, r5
 8010378:	9700      	str	r7, [sp, #0]
 801037a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801037e:	f7ff ffa0 	bl	80102c2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8010382:	9b07      	ldr	r3, [sp, #28]
 8010384:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8010388:	f103 0120 	add.w	r1, r3, #32
 801038c:	fb91 f3f0 	sdiv	r3, r1, r0
 8010390:	fb00 1313 	mls	r3, r0, r3, r1
 8010394:	1ac3      	subs	r3, r0, r3
 8010396:	fb93 f2f0 	sdiv	r2, r3, r0
 801039a:	fb00 3312 	mls	r3, r0, r2, r3
 801039e:	440b      	add	r3, r1
 80103a0:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 80103a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103a6:	9906      	ldr	r1, [sp, #24]
 80103a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103aa:	4291      	cmp	r1, r2
 80103ac:	db11      	blt.n	80103d2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 80103ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80103b0:	4651      	mov	r1, sl
 80103b2:	9700      	str	r7, [sp, #0]
 80103b4:	4620      	mov	r0, r4
 80103b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80103ba:	462a      	mov	r2, r5
 80103bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80103be:	4633      	mov	r3, r6
 80103c0:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80103c4:	f7ff ff7d 	bl	80102c2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80103c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ca:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80103ce:	9309      	str	r3, [sp, #36]	; 0x24
 80103d0:	e7e8      	b.n	80103a4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 80103d2:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 80103d6:	4291      	cmp	r1, r2
 80103d8:	dd0c      	ble.n	80103f4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 80103da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80103dc:	a906      	add	r1, sp, #24
 80103de:	9700      	str	r7, [sp, #0]
 80103e0:	4620      	mov	r0, r4
 80103e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80103e6:	462a      	mov	r2, r5
 80103e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80103ea:	4633      	mov	r3, r6
 80103ec:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80103f0:	f7ff ff67 	bl	80102c2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80103f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f040 8097 	bne.w	801052a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 80103fc:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8010400:	1a52      	subs	r2, r2, r1
 8010402:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8010406:	da0a      	bge.n	801041e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8010408:	462a      	mov	r2, r5
 801040a:	a90a      	add	r1, sp, #40	; 0x28
 801040c:	9700      	str	r7, [sp, #0]
 801040e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8010412:	4633      	mov	r3, r6
 8010414:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8010418:	4620      	mov	r0, r4
 801041a:	f7ff ff52 	bl	80102c2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801041e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8010422:	2bb3      	cmp	r3, #179	; 0xb3
 8010424:	d87e      	bhi.n	8010524 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8010426:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 801042a:	1a1b      	subs	r3, r3, r0
 801042c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8010430:	da78      	bge.n	8010524 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8010432:	ad0c      	add	r5, sp, #48	; 0x30
 8010434:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8010438:	f7ff fe84 	bl	8010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801043c:	f04f 0a02 	mov.w	sl, #2
 8010440:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010444:	4658      	mov	r0, fp
 8010446:	4629      	mov	r1, r5
 8010448:	f7ff fe4e 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801044c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801044e:	18c3      	adds	r3, r0, r3
 8010450:	9807      	ldr	r0, [sp, #28]
 8010452:	9305      	str	r3, [sp, #20]
 8010454:	f7ff fe97 	bl	8010186 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8010458:	4629      	mov	r1, r5
 801045a:	900b      	str	r0, [sp, #44]	; 0x2c
 801045c:	4658      	mov	r0, fp
 801045e:	f7ff fe43 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010464:	9a05      	ldr	r2, [sp, #20]
 8010466:	a90a      	add	r1, sp, #40	; 0x28
 8010468:	1a1b      	subs	r3, r3, r0
 801046a:	9700      	str	r7, [sp, #0]
 801046c:	4620      	mov	r0, r4
 801046e:	9304      	str	r3, [sp, #16]
 8010470:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010472:	fb93 f3fa 	sdiv	r3, r3, sl
 8010476:	1ad2      	subs	r2, r2, r3
 8010478:	920a      	str	r2, [sp, #40]	; 0x28
 801047a:	9a04      	ldr	r2, [sp, #16]
 801047c:	1ad3      	subs	r3, r2, r3
 801047e:	462a      	mov	r2, r5
 8010480:	930b      	str	r3, [sp, #44]	; 0x2c
 8010482:	4633      	mov	r3, r6
 8010484:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8010488:	f7ff ff02 	bl	8010290 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801048c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801048e:	9a05      	ldr	r2, [sp, #20]
 8010490:	a90a      	add	r1, sp, #40	; 0x28
 8010492:	4620      	mov	r0, r4
 8010494:	9700      	str	r7, [sp, #0]
 8010496:	fb93 f3fa 	sdiv	r3, r3, sl
 801049a:	189a      	adds	r2, r3, r2
 801049c:	920a      	str	r2, [sp, #40]	; 0x28
 801049e:	9a04      	ldr	r2, [sp, #16]
 80104a0:	4413      	add	r3, r2
 80104a2:	462a      	mov	r2, r5
 80104a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80104a6:	4633      	mov	r3, r6
 80104a8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80104ac:	f7ff fef0 	bl	8010290 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80104b0:	9806      	ldr	r0, [sp, #24]
 80104b2:	f7ff fe47 	bl	8010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80104b6:	4629      	mov	r1, r5
 80104b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80104ba:	4658      	mov	r0, fp
 80104bc:	f7ff fe14 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80104c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80104c2:	18c3      	adds	r3, r0, r3
 80104c4:	9806      	ldr	r0, [sp, #24]
 80104c6:	9304      	str	r3, [sp, #16]
 80104c8:	f7ff fe5d 	bl	8010186 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80104cc:	4629      	mov	r1, r5
 80104ce:	900b      	str	r0, [sp, #44]	; 0x2c
 80104d0:	4658      	mov	r0, fp
 80104d2:	f7ff fe09 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80104d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104d8:	9a04      	ldr	r2, [sp, #16]
 80104da:	a90a      	add	r1, sp, #40	; 0x28
 80104dc:	eba3 0b00 	sub.w	fp, r3, r0
 80104e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104e2:	4620      	mov	r0, r4
 80104e4:	9700      	str	r7, [sp, #0]
 80104e6:	fb93 f3fa 	sdiv	r3, r3, sl
 80104ea:	1ad2      	subs	r2, r2, r3
 80104ec:	ebab 0303 	sub.w	r3, fp, r3
 80104f0:	920a      	str	r2, [sp, #40]	; 0x28
 80104f2:	462a      	mov	r2, r5
 80104f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80104f6:	4633      	mov	r3, r6
 80104f8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80104fc:	f7ff fec8 	bl	8010290 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8010500:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010502:	9700      	str	r7, [sp, #0]
 8010504:	462a      	mov	r2, r5
 8010506:	a90a      	add	r1, sp, #40	; 0x28
 8010508:	4620      	mov	r0, r4
 801050a:	fb93 fafa 	sdiv	sl, r3, sl
 801050e:	9b04      	ldr	r3, [sp, #16]
 8010510:	4453      	add	r3, sl
 8010512:	930a      	str	r3, [sp, #40]	; 0x28
 8010514:	eb0a 030b 	add.w	r3, sl, fp
 8010518:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801051c:	930b      	str	r3, [sp, #44]	; 0x2c
 801051e:	4633      	mov	r3, r6
 8010520:	f7ff feb6 	bl	8010290 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8010524:	b00d      	add	sp, #52	; 0x34
 8010526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801052c:	a907      	add	r1, sp, #28
 801052e:	9700      	str	r7, [sp, #0]
 8010530:	4620      	mov	r0, r4
 8010532:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8010536:	462a      	mov	r2, r5
 8010538:	930b      	str	r3, [sp, #44]	; 0x2c
 801053a:	4633      	mov	r3, r6
 801053c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8010540:	f7ff febf 	bl	80102c2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8010544:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010546:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010548:	a906      	add	r1, sp, #24
 801054a:	9700      	str	r7, [sp, #0]
 801054c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8010550:	462a      	mov	r2, r5
 8010552:	930b      	str	r3, [sp, #44]	; 0x2c
 8010554:	4633      	mov	r3, r6
 8010556:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801055a:	e75d      	b.n	8010418 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0801055c <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801055c:	b530      	push	{r4, r5, lr}
 801055e:	4604      	mov	r4, r0
 8010560:	4608      	mov	r0, r1
 8010562:	4611      	mov	r1, r2
 8010564:	461a      	mov	r2, r3
 8010566:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801056a:	b089      	sub	sp, #36	; 0x24
 801056c:	2500      	movs	r5, #0
 801056e:	015b      	lsls	r3, r3, #5
 8010570:	9505      	str	r5, [sp, #20]
 8010572:	9304      	str	r3, [sp, #16]
 8010574:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010578:	015b      	lsls	r3, r3, #5
 801057a:	e9cd 3506 	strd	r3, r5, [sp, #24]
 801057e:	ab07      	add	r3, sp, #28
 8010580:	2520      	movs	r5, #32
 8010582:	9302      	str	r3, [sp, #8]
 8010584:	ab06      	add	r3, sp, #24
 8010586:	9301      	str	r3, [sp, #4]
 8010588:	ab05      	add	r3, sp, #20
 801058a:	9300      	str	r3, [sp, #0]
 801058c:	ab04      	add	r3, sp, #16
 801058e:	f7ff fecd 	bl	801032c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8010592:	9a04      	ldr	r2, [sp, #16]
 8010594:	9805      	ldr	r0, [sp, #20]
 8010596:	9b06      	ldr	r3, [sp, #24]
 8010598:	9907      	ldr	r1, [sp, #28]
 801059a:	fb92 f2f5 	sdiv	r2, r2, r5
 801059e:	fb90 f0f5 	sdiv	r0, r0, r5
 80105a2:	fb93 f3f5 	sdiv	r3, r3, r5
 80105a6:	fb91 f1f5 	sdiv	r1, r1, r5
 80105aa:	b292      	uxth	r2, r2
 80105ac:	3002      	adds	r0, #2
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	3102      	adds	r1, #2
 80105b2:	1a80      	subs	r0, r0, r2
 80105b4:	3a01      	subs	r2, #1
 80105b6:	1ac9      	subs	r1, r1, r3
 80105b8:	3b01      	subs	r3, #1
 80105ba:	80a0      	strh	r0, [r4, #4]
 80105bc:	4620      	mov	r0, r4
 80105be:	8022      	strh	r2, [r4, #0]
 80105c0:	8063      	strh	r3, [r4, #2]
 80105c2:	80e1      	strh	r1, [r4, #6]
 80105c4:	b009      	add	sp, #36	; 0x24
 80105c6:	bd30      	pop	{r4, r5, pc}

080105c8 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 80105c8:	b510      	push	{r4, lr}
 80105ca:	4604      	mov	r4, r0
 80105cc:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 80105d0:	f7ff ffc4 	bl	801055c <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80105d4:	4620      	mov	r0, r4
 80105d6:	bd10      	pop	{r4, pc}

080105d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 80105d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105da:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 80105de:	4606      	mov	r6, r0
 80105e0:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 80105e4:	42a5      	cmp	r5, r4
 80105e6:	6813      	ldr	r3, [r2, #0]
 80105e8:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80105ec:	da2b      	bge.n	8010646 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 80105ee:	42a3      	cmp	r3, r4
 80105f0:	dd14      	ble.n	801061c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 80105f2:	b168      	cbz	r0, 8010610 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80105f4:	4267      	negs	r7, r4
 80105f6:	fb97 f2f0 	sdiv	r2, r7, r0
 80105fa:	fb00 7212 	mls	r2, r0, r2, r7
 80105fe:	1a82      	subs	r2, r0, r2
 8010600:	fb92 f7f0 	sdiv	r7, r2, r0
 8010604:	fb00 2017 	mls	r0, r0, r7, r2
 8010608:	1a24      	subs	r4, r4, r0
 801060a:	42ac      	cmp	r4, r5
 801060c:	bfb8      	it	lt
 801060e:	462c      	movlt	r4, r5
 8010610:	4630      	mov	r0, r6
 8010612:	4622      	mov	r2, r4
 8010614:	f7ff ffa2 	bl	801055c <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8010618:	4630      	mov	r0, r6
 801061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801061c:	42ab      	cmp	r3, r5
 801061e:	dd0e      	ble.n	801063e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8010620:	b168      	cbz	r0, 801063e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8010622:	425f      	negs	r7, r3
 8010624:	fb97 f2f0 	sdiv	r2, r7, r0
 8010628:	fb00 7212 	mls	r2, r0, r2, r7
 801062c:	1a82      	subs	r2, r0, r2
 801062e:	fb92 f7f0 	sdiv	r7, r2, r0
 8010632:	fb00 2017 	mls	r0, r0, r7, r2
 8010636:	1a1b      	subs	r3, r3, r0
 8010638:	42ab      	cmp	r3, r5
 801063a:	bfb8      	it	lt
 801063c:	462b      	movlt	r3, r5
 801063e:	4622      	mov	r2, r4
 8010640:	461c      	mov	r4, r3
 8010642:	4613      	mov	r3, r2
 8010644:	e7e4      	b.n	8010610 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8010646:	42a3      	cmp	r3, r4
 8010648:	da10      	bge.n	801066c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 801064a:	b148      	cbz	r0, 8010660 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 801064c:	fb94 f2f0 	sdiv	r2, r4, r0
 8010650:	fb00 4212 	mls	r2, r0, r2, r4
 8010654:	1a82      	subs	r2, r0, r2
 8010656:	fb92 f7f0 	sdiv	r7, r2, r0
 801065a:	fb00 2017 	mls	r0, r0, r7, r2
 801065e:	4404      	add	r4, r0
 8010660:	42a5      	cmp	r5, r4
 8010662:	bfa8      	it	ge
 8010664:	4625      	movge	r5, r4
 8010666:	461c      	mov	r4, r3
 8010668:	462b      	mov	r3, r5
 801066a:	e7d1      	b.n	8010610 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801066c:	42ab      	cmp	r3, r5
 801066e:	dacf      	bge.n	8010610 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8010670:	2800      	cmp	r0, #0
 8010672:	d0cd      	beq.n	8010610 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8010674:	fb93 f2f0 	sdiv	r2, r3, r0
 8010678:	fb00 3212 	mls	r2, r0, r2, r3
 801067c:	1a82      	subs	r2, r0, r2
 801067e:	fb92 f7f0 	sdiv	r7, r2, r0
 8010682:	fb00 2017 	mls	r0, r0, r7, r2
 8010686:	4403      	add	r3, r0
 8010688:	42ab      	cmp	r3, r5
 801068a:	bfa8      	it	ge
 801068c:	462b      	movge	r3, r5
 801068e:	e7bf      	b.n	8010610 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08010690 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8010690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8010696:	b0ba      	sub	sp, #232	; 0xe8
 8010698:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801069a:	4604      	mov	r4, r0
 801069c:	9303      	str	r3, [sp, #12]
 801069e:	460f      	mov	r7, r1
 80106a0:	429a      	cmp	r2, r3
 80106a2:	9204      	str	r2, [sp, #16]
 80106a4:	ae0a      	add	r6, sp, #40	; 0x28
 80106a6:	bfb8      	it	lt
 80106a8:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 80106ac:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80106b0:	1a9b      	subs	r3, r3, r2
 80106b2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80106b6:	bfa2      	ittt	ge
 80106b8:	2200      	movge	r2, #0
 80106ba:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80106be:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 80106c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106c4:	2a00      	cmp	r2, #0
 80106c6:	d131      	bne.n	801072c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 80106c8:	463a      	mov	r2, r7
 80106ca:	4621      	mov	r1, r4
 80106cc:	a80b      	add	r0, sp, #44	; 0x2c
 80106ce:	f012 f9d9 	bl	8022a84 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80106d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80106d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106d6:	9205      	str	r2, [sp, #20]
 80106d8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80106dc:	9306      	str	r3, [sp, #24]
 80106de:	dc6f      	bgt.n	80107c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 80106e0:	9b03      	ldr	r3, [sp, #12]
 80106e2:	a90b      	add	r1, sp, #44	; 0x2c
 80106e4:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 80106e8:	4620      	mov	r0, r4
 80106ea:	9307      	str	r3, [sp, #28]
 80106ec:	016d      	lsls	r5, r5, #5
 80106ee:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80106f2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80106f6:	aa07      	add	r2, sp, #28
 80106f8:	930a      	str	r3, [sp, #40]	; 0x28
 80106fa:	4633      	mov	r3, r6
 80106fc:	f7ff fd6b 	bl	80101d6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8010700:	9f07      	ldr	r7, [sp, #28]
 8010702:	2d00      	cmp	r5, #0
 8010704:	d165      	bne.n	80107d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8010706:	3720      	adds	r7, #32
 8010708:	4639      	mov	r1, r7
 801070a:	9a04      	ldr	r2, [sp, #16]
 801070c:	9b06      	ldr	r3, [sp, #24]
 801070e:	442f      	add	r7, r5
 8010710:	4291      	cmp	r1, r2
 8010712:	dc6b      	bgt.n	80107ec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8010714:	9a05      	ldr	r2, [sp, #20]
 8010716:	4620      	mov	r0, r4
 8010718:	9107      	str	r1, [sp, #28]
 801071a:	a90b      	add	r1, sp, #44	; 0x2c
 801071c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010720:	aa07      	add	r2, sp, #28
 8010722:	930a      	str	r3, [sp, #40]	; 0x28
 8010724:	4633      	mov	r3, r6
 8010726:	f7ff fda8 	bl	801027a <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801072a:	e7ed      	b.n	8010708 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 801072c:	f9b1 c000 	ldrsh.w	ip, [r1]
 8010730:	88bd      	ldrh	r5, [r7, #4]
 8010732:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8010736:	4465      	add	r5, ip
 8010738:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 801073c:	b22d      	sxth	r5, r5
 801073e:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8010742:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8010746:	2d00      	cmp	r5, #0
 8010748:	bfb8      	it	lt
 801074a:	426d      	neglt	r5, r5
 801074c:	2b00      	cmp	r3, #0
 801074e:	bfb8      	it	lt
 8010750:	425b      	neglt	r3, r3
 8010752:	429d      	cmp	r5, r3
 8010754:	bfb8      	it	lt
 8010756:	461d      	movlt	r5, r3
 8010758:	88fb      	ldrh	r3, [r7, #6]
 801075a:	4403      	add	r3, r0
 801075c:	116d      	asrs	r5, r5, #5
 801075e:	b21b      	sxth	r3, r3
 8010760:	3501      	adds	r5, #1
 8010762:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8010766:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 801076a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801076e:	2b00      	cmp	r3, #0
 8010770:	f100 0001 	add.w	r0, r0, #1
 8010774:	bfb8      	it	lt
 8010776:	425b      	neglt	r3, r3
 8010778:	2900      	cmp	r1, #0
 801077a:	ea4f 0060 	mov.w	r0, r0, asr #1
 801077e:	bfb8      	it	lt
 8010780:	4249      	neglt	r1, r1
 8010782:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8010786:	428b      	cmp	r3, r1
 8010788:	bfb8      	it	lt
 801078a:	460b      	movlt	r3, r1
 801078c:	115b      	asrs	r3, r3, #5
 801078e:	3301      	adds	r3, #1
 8010790:	435b      	muls	r3, r3
 8010792:	fb05 3505 	mla	r5, r5, r5, r3
 8010796:	2302      	movs	r3, #2
 8010798:	fb92 f2f3 	sdiv	r2, r2, r3
 801079c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801079e:	1a9a      	subs	r2, r3, r2
 80107a0:	920a      	str	r2, [sp, #40]	; 0x28
 80107a2:	f7ff fcad 	bl	8010100 <_ZN8touchgfx7CWRUtil4sineEi>
 80107a6:	a90b      	add	r1, sp, #44	; 0x2c
 80107a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80107aa:	4630      	mov	r0, r6
 80107ac:	f7ff fc9c 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80107b0:	2320      	movs	r3, #32
 80107b2:	fb90 f0f3 	sdiv	r0, r0, r3
 80107b6:	4340      	muls	r0, r0
 80107b8:	42a8      	cmp	r0, r5
 80107ba:	dd85      	ble.n	80106c8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80107bc:	2401      	movs	r4, #1
 80107be:	e037      	b.n	8010830 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a0>
 80107c0:	2102      	movs	r1, #2
 80107c2:	fb93 f3f1 	sdiv	r3, r3, r1
 80107c6:	4413      	add	r3, r2
 80107c8:	9306      	str	r3, [sp, #24]
 80107ca:	fb93 f3f1 	sdiv	r3, r3, r1
 80107ce:	9305      	str	r3, [sp, #20]
 80107d0:	e786      	b.n	80106e0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 80107d2:	f107 0320 	add.w	r3, r7, #32
 80107d6:	fb93 f7f5 	sdiv	r7, r3, r5
 80107da:	fb05 3717 	mls	r7, r5, r7, r3
 80107de:	1bea      	subs	r2, r5, r7
 80107e0:	fb92 f7f5 	sdiv	r7, r2, r5
 80107e4:	fb05 2717 	mls	r7, r5, r7, r2
 80107e8:	441f      	add	r7, r3
 80107ea:	e78d      	b.n	8010708 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80107ec:	9907      	ldr	r1, [sp, #28]
 80107ee:	428a      	cmp	r2, r1
 80107f0:	dd09      	ble.n	8010806 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 80107f2:	9a05      	ldr	r2, [sp, #20]
 80107f4:	a90b      	add	r1, sp, #44	; 0x2c
 80107f6:	4620      	mov	r0, r4
 80107f8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80107fc:	aa04      	add	r2, sp, #16
 80107fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010800:	4633      	mov	r3, r6
 8010802:	f7ff fd3a 	bl	801027a <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8010806:	9a06      	ldr	r2, [sp, #24]
 8010808:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 801080c:	1ac3      	subs	r3, r0, r3
 801080e:	b99a      	cbnz	r2, 8010838 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a8>
 8010810:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8010814:	da04      	bge.n	8010820 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8010816:	a80b      	add	r0, sp, #44	; 0x2c
 8010818:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 801081c:	f012 fa8c 	bl	8022d38 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8010820:	21ff      	movs	r1, #255	; 0xff
 8010822:	a80b      	add	r0, sp, #44	; 0x2c
 8010824:	f012 fbfd 	bl	8023022 <_ZN8touchgfx6Canvas6renderEh>
 8010828:	4604      	mov	r4, r0
 801082a:	a80b      	add	r0, sp, #44	; 0x2c
 801082c:	f012 fc38 	bl	80230a0 <_ZN8touchgfx6CanvasD1Ev>
 8010830:	4620      	mov	r0, r4
 8010832:	b03a      	add	sp, #232	; 0xe8
 8010834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010838:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 801083c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8010840:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8010844:	da2b      	bge.n	801089e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8010846:	f7ff fc7d 	bl	8010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801084a:	4631      	mov	r1, r6
 801084c:	900a      	str	r0, [sp, #40]	; 0x28
 801084e:	a805      	add	r0, sp, #20
 8010850:	f7ff fc4a 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010854:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010856:	f10d 0818 	add.w	r8, sp, #24
 801085a:	4418      	add	r0, r3
 801085c:	9008      	str	r0, [sp, #32]
 801085e:	9804      	ldr	r0, [sp, #16]
 8010860:	f7ff fc91 	bl	8010186 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8010864:	4631      	mov	r1, r6
 8010866:	900a      	str	r0, [sp, #40]	; 0x28
 8010868:	a805      	add	r0, sp, #20
 801086a:	f7ff fc3d 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801086e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010870:	1a18      	subs	r0, r3, r0
 8010872:	9b04      	ldr	r3, [sp, #16]
 8010874:	443b      	add	r3, r7
 8010876:	9009      	str	r0, [sp, #36]	; 0x24
 8010878:	930a      	str	r3, [sp, #40]	; 0x28
 801087a:	9b04      	ldr	r3, [sp, #16]
 801087c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801087e:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8010882:	4293      	cmp	r3, r2
 8010884:	dd0b      	ble.n	801089e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8010886:	ab09      	add	r3, sp, #36	; 0x24
 8010888:	aa08      	add	r2, sp, #32
 801088a:	a90b      	add	r1, sp, #44	; 0x2c
 801088c:	4620      	mov	r0, r4
 801088e:	e9cd 6800 	strd	r6, r8, [sp]
 8010892:	f7ff fcc9 	bl	8010228 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8010896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010898:	443b      	add	r3, r7
 801089a:	930a      	str	r3, [sp, #40]	; 0x28
 801089c:	e7ed      	b.n	801087a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 801089e:	9a04      	ldr	r2, [sp, #16]
 80108a0:	9b07      	ldr	r3, [sp, #28]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	dd0a      	ble.n	80108bc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 80108a6:	a90b      	add	r1, sp, #44	; 0x2c
 80108a8:	4620      	mov	r0, r4
 80108aa:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80108ae:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80108b2:	aa04      	add	r2, sp, #16
 80108b4:	930a      	str	r3, [sp, #40]	; 0x28
 80108b6:	4633      	mov	r3, r6
 80108b8:	f7ff fcdf 	bl	801027a <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80108bc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80108c0:	4642      	mov	r2, r8
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	eba8 0805 	sub.w	r8, r8, r5
 80108c8:	429a      	cmp	r2, r3
 80108ca:	db0c      	blt.n	80108e6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x256>
 80108cc:	9207      	str	r2, [sp, #28]
 80108ce:	a90b      	add	r1, sp, #44	; 0x2c
 80108d0:	4620      	mov	r0, r4
 80108d2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80108d6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80108da:	aa07      	add	r2, sp, #28
 80108dc:	930a      	str	r3, [sp, #40]	; 0x28
 80108de:	4633      	mov	r3, r6
 80108e0:	f7ff fccb 	bl	801027a <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80108e4:	e7ec      	b.n	80108c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 80108e6:	9a07      	ldr	r2, [sp, #28]
 80108e8:	4293      	cmp	r3, r2
 80108ea:	da0a      	bge.n	8010902 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x272>
 80108ec:	a90b      	add	r1, sp, #44	; 0x2c
 80108ee:	4620      	mov	r0, r4
 80108f0:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80108f4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80108f8:	aa03      	add	r2, sp, #12
 80108fa:	930a      	str	r3, [sp, #40]	; 0x28
 80108fc:	4633      	mov	r3, r6
 80108fe:	f7ff fcbc 	bl	801027a <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8010902:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8010906:	1a1b      	subs	r3, r3, r0
 8010908:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801090c:	da88      	bge.n	8010820 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 801090e:	f7ff fc19 	bl	8010144 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8010912:	4631      	mov	r1, r6
 8010914:	900a      	str	r0, [sp, #40]	; 0x28
 8010916:	a805      	add	r0, sp, #20
 8010918:	f7ff fbe6 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801091c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801091e:	ad06      	add	r5, sp, #24
 8010920:	4418      	add	r0, r3
 8010922:	9008      	str	r0, [sp, #32]
 8010924:	9803      	ldr	r0, [sp, #12]
 8010926:	f7ff fc2e 	bl	8010186 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801092a:	4631      	mov	r1, r6
 801092c:	900a      	str	r0, [sp, #40]	; 0x28
 801092e:	a805      	add	r0, sp, #20
 8010930:	f7ff fbda 	bl	80100e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010936:	1a18      	subs	r0, r3, r0
 8010938:	9b03      	ldr	r3, [sp, #12]
 801093a:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 801093e:	9009      	str	r0, [sp, #36]	; 0x24
 8010940:	443b      	add	r3, r7
 8010942:	930a      	str	r3, [sp, #40]	; 0x28
 8010944:	9a03      	ldr	r2, [sp, #12]
 8010946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010948:	429a      	cmp	r2, r3
 801094a:	f77f af69 	ble.w	8010820 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 801094e:	ab09      	add	r3, sp, #36	; 0x24
 8010950:	aa08      	add	r2, sp, #32
 8010952:	a90b      	add	r1, sp, #44	; 0x2c
 8010954:	4620      	mov	r0, r4
 8010956:	e9cd 6500 	strd	r6, r5, [sp]
 801095a:	f7ff fc65 	bl	8010228 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801095e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010960:	443b      	add	r3, r7
 8010962:	930a      	str	r3, [sp, #40]	; 0x28
 8010964:	e7ee      	b.n	8010944 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b4>

08010966 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8010966:	6281      	str	r1, [r0, #40]	; 0x28
 8010968:	4770      	bx	lr

0801096a <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801096a:	b510      	push	{r4, lr}
 801096c:	2200      	movs	r2, #0
 801096e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8010972:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8010976:	8002      	strh	r2, [r0, #0]
 8010978:	8042      	strh	r2, [r0, #2]
 801097a:	8084      	strh	r4, [r0, #4]
 801097c:	80c1      	strh	r1, [r0, #6]
 801097e:	bd10      	pop	{r4, pc}

08010980 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8010980:	2200      	movs	r2, #0
 8010982:	8002      	strh	r2, [r0, #0]
 8010984:	8042      	strh	r2, [r0, #2]
 8010986:	8082      	strh	r2, [r0, #4]
 8010988:	80c2      	strh	r2, [r0, #6]
 801098a:	4770      	bx	lr

0801098c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801098c:	b508      	push	{r3, lr}
 801098e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010990:	b928      	cbnz	r0, 801099e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8010992:	4b03      	ldr	r3, [pc, #12]	; (80109a0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8010994:	2126      	movs	r1, #38	; 0x26
 8010996:	4a03      	ldr	r2, [pc, #12]	; (80109a4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8010998:	4803      	ldr	r0, [pc, #12]	; (80109a8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801099a:	f014 fd05 	bl	80253a8 <__assert_func>
 801099e:	bd08      	pop	{r3, pc}
 80109a0:	0802a9f4 	.word	0x0802a9f4
 80109a4:	0802aad4 	.word	0x0802aad4
 80109a8:	0802aa1b 	.word	0x0802aa1b

080109ac <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80109ac:	b510      	push	{r4, lr}
 80109ae:	f9b1 4000 	ldrsh.w	r4, [r1]
 80109b2:	888a      	ldrh	r2, [r1, #4]
 80109b4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80109b8:	4422      	add	r2, r4
 80109ba:	b212      	sxth	r2, r2
 80109bc:	4293      	cmp	r3, r2
 80109be:	da15      	bge.n	80109ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80109c0:	8882      	ldrh	r2, [r0, #4]
 80109c2:	4413      	add	r3, r2
 80109c4:	b21b      	sxth	r3, r3
 80109c6:	429c      	cmp	r4, r3
 80109c8:	da10      	bge.n	80109ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80109ca:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80109ce:	88c9      	ldrh	r1, [r1, #6]
 80109d0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80109d4:	4419      	add	r1, r3
 80109d6:	b209      	sxth	r1, r1
 80109d8:	428a      	cmp	r2, r1
 80109da:	da07      	bge.n	80109ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80109dc:	88c0      	ldrh	r0, [r0, #6]
 80109de:	4410      	add	r0, r2
 80109e0:	b200      	sxth	r0, r0
 80109e2:	4283      	cmp	r3, r0
 80109e4:	bfac      	ite	ge
 80109e6:	2000      	movge	r0, #0
 80109e8:	2001      	movlt	r0, #1
 80109ea:	bd10      	pop	{r4, pc}
 80109ec:	2000      	movs	r0, #0
 80109ee:	e7fc      	b.n	80109ea <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080109f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80109f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f4:	b08b      	sub	sp, #44	; 0x2c
 80109f6:	4604      	mov	r4, r0
 80109f8:	6808      	ldr	r0, [r1, #0]
 80109fa:	f04f 0a00 	mov.w	sl, #0
 80109fe:	6849      	ldr	r1, [r1, #4]
 8010a00:	ab04      	add	r3, sp, #16
 8010a02:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8010a06:	c303      	stmia	r3!, {r0, r1}
 8010a08:	4b35      	ldr	r3, [pc, #212]	; (8010ae0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8010a0a:	4621      	mov	r1, r4
 8010a0c:	a806      	add	r0, sp, #24
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a16:	bf1f      	itttt	ne
 8010a18:	f10d 090e 	addne.w	r9, sp, #14
 8010a1c:	ae05      	addne	r6, sp, #20
 8010a1e:	f10d 0516 	addne.w	r5, sp, #22
 8010a22:	f10d 0812 	addne.w	r8, sp, #18
 8010a26:	bf01      	itttt	eq
 8010a28:	f10d 0916 	addeq.w	r9, sp, #22
 8010a2c:	f10d 060e 	addeq.w	r6, sp, #14
 8010a30:	ad05      	addeq	r5, sp, #20
 8010a32:	f10d 0810 	addeq.w	r8, sp, #16
 8010a36:	4798      	blx	r3
 8010a38:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010a3c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d042      	beq.n	8010aca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8010a44:	4293      	cmp	r3, r2
 8010a46:	bfa8      	it	ge
 8010a48:	4613      	movge	r3, r2
 8010a4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010a4e:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8010a52:	2f00      	cmp	r7, #0
 8010a54:	dd21      	ble.n	8010a9a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8010a56:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8010a5a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8010a5e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8010a62:	f9b9 3000 	ldrsh.w	r3, [r9]
 8010a66:	f8ad 0020 	strh.w	r0, [sp, #32]
 8010a6a:	a808      	add	r0, sp, #32
 8010a6c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8010a70:	a906      	add	r1, sp, #24
 8010a72:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8010a76:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010a7a:	f7ff ff97 	bl	80109ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010a7e:	9001      	str	r0, [sp, #4]
 8010a80:	b1d0      	cbz	r0, 8010ab8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8010a82:	6822      	ldr	r2, [r4, #0]
 8010a84:	a908      	add	r1, sp, #32
 8010a86:	4620      	mov	r0, r4
 8010a88:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8010a8a:	4790      	blx	r2
 8010a8c:	b9a0      	cbnz	r0, 8010ab8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8010a8e:	107f      	asrs	r7, r7, #1
 8010a90:	9b01      	ldr	r3, [sp, #4]
 8010a92:	f8ad 700e 	strh.w	r7, [sp, #14]
 8010a96:	469a      	mov	sl, r3
 8010a98:	e7d9      	b.n	8010a4e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8010a9a:	d10d      	bne.n	8010ab8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010aa2:	f8b8 2000 	ldrh.w	r2, [r8]
 8010aa6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8010aaa:	440a      	add	r2, r1
 8010aac:	f8a8 2000 	strh.w	r2, [r8]
 8010ab0:	882b      	ldrh	r3, [r5, #0]
 8010ab2:	1a5b      	subs	r3, r3, r1
 8010ab4:	802b      	strh	r3, [r5, #0]
 8010ab6:	e7bf      	b.n	8010a38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8010ab8:	f1ba 0f00 	cmp.w	sl, #0
 8010abc:	d0f1      	beq.n	8010aa2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8010abe:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8010ac2:	455b      	cmp	r3, fp
 8010ac4:	bf08      	it	eq
 8010ac6:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8010ac8:	e7eb      	b.n	8010aa2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8010aca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	bf04      	itt	eq
 8010ad2:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8010ad6:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8010ad8:	b00b      	add	sp, #44	; 0x2c
 8010ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ade:	bf00      	nop
 8010ae0:	20060c28 	.word	0x20060c28

08010ae4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8010ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ae6:	b085      	sub	sp, #20
 8010ae8:	6803      	ldr	r3, [r0, #0]
 8010aea:	4604      	mov	r4, r0
 8010aec:	4601      	mov	r1, r0
 8010aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010af0:	4668      	mov	r0, sp
 8010af2:	4798      	blx	r3
 8010af4:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8010af8:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8010afc:	2300      	movs	r3, #0
 8010afe:	a902      	add	r1, sp, #8
 8010b00:	4668      	mov	r0, sp
 8010b02:	9302      	str	r3, [sp, #8]
 8010b04:	f8ad 600c 	strh.w	r6, [sp, #12]
 8010b08:	f8ad 500e 	strh.w	r5, [sp, #14]
 8010b0c:	f7ff ff4e 	bl	80109ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010b10:	b340      	cbz	r0, 8010b64 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 8010b12:	f9bd 2000 	ldrsh.w	r2, [sp]
 8010b16:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8010b1a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8010b1e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8010b22:	443a      	add	r2, r7
 8010b24:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8010b28:	f8ad 0000 	strh.w	r0, [sp]
 8010b2c:	b292      	uxth	r2, r2
 8010b2e:	f8ad 1002 	strh.w	r1, [sp, #2]
 8010b32:	b217      	sxth	r7, r2
 8010b34:	42be      	cmp	r6, r7
 8010b36:	bfd8      	it	le
 8010b38:	b2b2      	uxthle	r2, r6
 8010b3a:	1a12      	subs	r2, r2, r0
 8010b3c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010b40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010b44:	4413      	add	r3, r2
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	b21a      	sxth	r2, r3
 8010b4a:	4295      	cmp	r5, r2
 8010b4c:	bfd8      	it	le
 8010b4e:	b2ab      	uxthle	r3, r5
 8010b50:	1a5b      	subs	r3, r3, r1
 8010b52:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010b56:	6823      	ldr	r3, [r4, #0]
 8010b58:	4669      	mov	r1, sp
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	4798      	blx	r3
 8010b60:	b005      	add	sp, #20
 8010b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b64:	e9cd 0000 	strd	r0, r0, [sp]
 8010b68:	e7f5      	b.n	8010b56 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08010b6c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	2101      	movs	r1, #1
 8010b70:	8082      	strh	r2, [r0, #4]
 8010b72:	80c2      	strh	r2, [r0, #6]
 8010b74:	8102      	strh	r2, [r0, #8]
 8010b76:	8142      	strh	r2, [r0, #10]
 8010b78:	8182      	strh	r2, [r0, #12]
 8010b7a:	81c2      	strh	r2, [r0, #14]
 8010b7c:	8202      	strh	r2, [r0, #16]
 8010b7e:	8242      	strh	r2, [r0, #18]
 8010b80:	61c2      	str	r2, [r0, #28]
 8010b82:	8402      	strh	r2, [r0, #32]
 8010b84:	8442      	strh	r2, [r0, #34]	; 0x22
 8010b86:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8010b8a:	6282      	str	r2, [r0, #40]	; 0x28
 8010b8c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8010b90:	4905      	ldr	r1, [pc, #20]	; (8010ba8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8010b92:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010b96:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010b9a:	6001      	str	r1, [r0, #0]
 8010b9c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8010b9e:	22ff      	movs	r2, #255	; 0xff
 8010ba0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	0802aa60 	.word	0x0802aa60

08010bac <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 8010bac:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8010bb0:	4770      	bx	lr

08010bb2 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8010bb2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8010bb6:	4770      	bx	lr

08010bb8 <_ZN8touchgfx13ScalableImageD1Ev>:
 8010bb8:	4770      	bx	lr

08010bba <_ZN8touchgfx13ScalableImageD0Ev>:
 8010bba:	b510      	push	{r4, lr}
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	212c      	movs	r1, #44	; 0x2c
 8010bc0:	f014 fa1f 	bl	8025002 <_ZdlPvj>
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	bd10      	pop	{r4, pc}

08010bc8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8010bc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010bca:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010bce:	4605      	mov	r5, r0
 8010bd0:	2bff      	cmp	r3, #255	; 0xff
 8010bd2:	d007      	beq.n	8010be4 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	802b      	strh	r3, [r5, #0]
 8010bd8:	806b      	strh	r3, [r5, #2]
 8010bda:	80ab      	strh	r3, [r5, #4]
 8010bdc:	80eb      	strh	r3, [r5, #6]
 8010bde:	4628      	mov	r0, r5
 8010be0:	b004      	add	sp, #16
 8010be2:	bd70      	pop	{r4, r5, r6, pc}
 8010be4:	f101 0426 	add.w	r4, r1, #38	; 0x26
 8010be8:	4668      	mov	r0, sp
 8010bea:	4621      	mov	r1, r4
 8010bec:	f005 ff26 	bl	8016a3c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010bf0:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	f005 fead 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010bfa:	4286      	cmp	r6, r0
 8010bfc:	d1ea      	bne.n	8010bd4 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 8010bfe:	4621      	mov	r1, r4
 8010c00:	a802      	add	r0, sp, #8
 8010c02:	f005 ff1b 	bl	8016a3c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010c06:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	f005 fedc 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010c10:	4286      	cmp	r6, r0
 8010c12:	d1df      	bne.n	8010bd4 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 8010c14:	4621      	mov	r1, r4
 8010c16:	4628      	mov	r0, r5
 8010c18:	f005 ff10 	bl	8016a3c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010c1c:	e7df      	b.n	8010bde <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>
	...

08010c20 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	2300      	movs	r3, #0
 8010c24:	2501      	movs	r5, #1
 8010c26:	4604      	mov	r4, r0
 8010c28:	8083      	strh	r3, [r0, #4]
 8010c2a:	80c3      	strh	r3, [r0, #6]
 8010c2c:	8103      	strh	r3, [r0, #8]
 8010c2e:	8143      	strh	r3, [r0, #10]
 8010c30:	8183      	strh	r3, [r0, #12]
 8010c32:	81c3      	strh	r3, [r0, #14]
 8010c34:	8203      	strh	r3, [r0, #16]
 8010c36:	8243      	strh	r3, [r0, #18]
 8010c38:	61c3      	str	r3, [r0, #28]
 8010c3a:	8403      	strh	r3, [r0, #32]
 8010c3c:	8443      	strh	r3, [r0, #34]	; 0x22
 8010c3e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8010c42:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8010c46:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8010c4a:	4b07      	ldr	r3, [pc, #28]	; (8010c68 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8010c4c:	6003      	str	r3, [r0, #0]
 8010c4e:	880b      	ldrh	r3, [r1, #0]
 8010c50:	84c3      	strh	r3, [r0, #38]	; 0x26
 8010c52:	23ff      	movs	r3, #255	; 0xff
 8010c54:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8010c58:	f000 ff47 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010c5c:	4b03      	ldr	r3, [pc, #12]	; (8010c6c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8010c5e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8010c62:	4620      	mov	r0, r4
 8010c64:	6023      	str	r3, [r4, #0]
 8010c66:	bd38      	pop	{r3, r4, r5, pc}
 8010c68:	0802afb8 	.word	0x0802afb8
 8010c6c:	0802ab2c 	.word	0x0802ab2c

08010c70 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8010c70:	4603      	mov	r3, r0
 8010c72:	3026      	adds	r0, #38	; 0x26
 8010c74:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010c78:	b90b      	cbnz	r3, 8010c7e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8010c7a:	f003 be00 	b.w	801487e <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8010c7e:	f003 be0e 	b.w	801489e <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08010c84 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8010c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c88:	4604      	mov	r4, r0
 8010c8a:	469b      	mov	fp, r3
 8010c8c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8010c90:	b0b3      	sub	sp, #204	; 0xcc
 8010c92:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010c96:	f9b1 6000 	ldrsh.w	r6, [r1]
 8010c9a:	8888      	ldrh	r0, [r1, #4]
 8010c9c:	9206      	str	r2, [sp, #24]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	4430      	add	r0, r6
 8010ca2:	9211      	str	r2, [sp, #68]	; 0x44
 8010ca4:	b280      	uxth	r0, r0
 8010ca6:	fa0f fe80 	sxth.w	lr, r0
 8010caa:	4596      	cmp	lr, r2
 8010cac:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 8010cb0:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 8010cb4:	f340 811a 	ble.w	8010eec <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010cb8:	45b4      	cmp	ip, r6
 8010cba:	f340 8117 	ble.w	8010eec <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010cbe:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010cc2:	88ca      	ldrh	r2, [r1, #6]
 8010cc4:	442a      	add	r2, r5
 8010cc6:	b292      	uxth	r2, r2
 8010cc8:	b211      	sxth	r1, r2
 8010cca:	2900      	cmp	r1, #0
 8010ccc:	f340 810e 	ble.w	8010eec <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010cd0:	42ab      	cmp	r3, r5
 8010cd2:	f340 810b 	ble.w	8010eec <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010cd6:	45f4      	cmp	ip, lr
 8010cd8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8010cdc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8010ce0:	bfb8      	it	lt
 8010ce2:	fa1f f08c 	uxthlt.w	r0, ip
 8010ce6:	428b      	cmp	r3, r1
 8010ce8:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8010cec:	bfb8      	it	lt
 8010cee:	b29a      	uxthlt	r2, r3
 8010cf0:	1b80      	subs	r0, r0, r6
 8010cf2:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8010cf6:	1b52      	subs	r2, r2, r5
 8010cf8:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8010cfc:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8010d00:	ab11      	add	r3, sp, #68	; 0x44
 8010d02:	ad13      	add	r5, sp, #76	; 0x4c
 8010d04:	6822      	ldr	r2, [r4, #0]
 8010d06:	1d26      	adds	r6, r4, #4
 8010d08:	9307      	str	r3, [sp, #28]
 8010d0a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010d0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010d10:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d14:	4629      	mov	r1, r5
 8010d16:	4620      	mov	r0, r4
 8010d18:	4790      	blx	r2
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	a815      	add	r0, sp, #84	; 0x54
 8010d1e:	f003 fd09 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010d22:	a815      	add	r0, sp, #84	; 0x54
 8010d24:	f002 fae0 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010d28:	9b07      	ldr	r3, [sp, #28]
 8010d2a:	4631      	mov	r1, r6
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f002 fb1f 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010d32:	4628      	mov	r0, r5
 8010d34:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8010d38:	f002 fad6 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	f005 ff11 	bl	8016b64 <_ZNK8touchgfx6Bitmap7getDataEv>
 8010d42:	9007      	str	r0, [sp, #28]
 8010d44:	2800      	cmp	r0, #0
 8010d46:	f000 80ce 	beq.w	8010ee6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 8010d4a:	f8db 2000 	ldr.w	r2, [fp]
 8010d4e:	a90d      	add	r1, sp, #52	; 0x34
 8010d50:	a809      	add	r0, sp, #36	; 0x24
 8010d52:	9209      	str	r2, [sp, #36]	; 0x24
 8010d54:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010d58:	920a      	str	r2, [sp, #40]	; 0x28
 8010d5a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8010d5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010d60:	f8db 200c 	ldr.w	r2, [fp, #12]
 8010d64:	920c      	str	r2, [sp, #48]	; 0x30
 8010d66:	f8da 2000 	ldr.w	r2, [sl]
 8010d6a:	920d      	str	r2, [sp, #52]	; 0x34
 8010d6c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010d70:	920e      	str	r2, [sp, #56]	; 0x38
 8010d72:	f8da 2008 	ldr.w	r2, [sl, #8]
 8010d76:	920f      	str	r2, [sp, #60]	; 0x3c
 8010d78:	f8da 200c 	ldr.w	r2, [sl, #12]
 8010d7c:	9210      	str	r2, [sp, #64]	; 0x40
 8010d7e:	4632      	mov	r2, r6
 8010d80:	f002 fada 	bl	8013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010d84:	4632      	mov	r2, r6
 8010d86:	a90e      	add	r1, sp, #56	; 0x38
 8010d88:	a80a      	add	r0, sp, #40	; 0x28
 8010d8a:	f002 fad5 	bl	8013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010d8e:	4632      	mov	r2, r6
 8010d90:	a90f      	add	r1, sp, #60	; 0x3c
 8010d92:	a80b      	add	r0, sp, #44	; 0x2c
 8010d94:	f002 fad0 	bl	8013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010d98:	4632      	mov	r2, r6
 8010d9a:	a910      	add	r1, sp, #64	; 0x40
 8010d9c:	a80c      	add	r0, sp, #48	; 0x30
 8010d9e:	f002 facb 	bl	8013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010da2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8010da6:	edd7 3a00 	vldr	s7, [r7]
 8010daa:	eef0 6a67 	vmov.f32	s13, s15
 8010dae:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8010db2:	ed97 5a01 	vldr	s10, [r7, #4]
 8010db6:	eeb0 7a67 	vmov.f32	s14, s15
 8010dba:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010dbe:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8010dc2:	edd9 2a00 	vldr	s5, [r9]
 8010dc6:	eeb0 6a67 	vmov.f32	s12, s15
 8010dca:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8010dce:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8010dd2:	ed98 3a00 	vldr	s6, [r8]
 8010dd6:	ed99 4a01 	vldr	s8, [r9, #4]
 8010dda:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010dde:	edd8 4a01 	vldr	s9, [r8, #4]
 8010de2:	edd9 5a02 	vldr	s11, [r9, #8]
 8010de6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8010dea:	ee16 6a10 	vmov	r6, s12
 8010dee:	eeb0 6a67 	vmov.f32	s12, s15
 8010df2:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8010df6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8010dfa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010dfe:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8010e02:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 8010e06:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 8010e0a:	ee16 0a10 	vmov	r0, s12
 8010e0e:	eeb0 6a67 	vmov.f32	s12, s15
 8010e12:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8010e16:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 8010e1a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010e1e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8010e22:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 8010e26:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 8010e2a:	ee16 1a10 	vmov	r1, s12
 8010e2e:	eeb0 6a67 	vmov.f32	s12, s15
 8010e32:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8010e36:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 8010e3a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010e3e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8010e42:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8010e46:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010e4a:	68ff      	ldr	r7, [r7, #12]
 8010e4c:	ee16 2a10 	vmov	r2, s12
 8010e50:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8010e54:	9624      	str	r6, [sp, #144]	; 0x90
 8010e56:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8010e5a:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8010e5e:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8010e62:	4628      	mov	r0, r5
 8010e64:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8010e68:	9b06      	ldr	r3, [sp, #24]
 8010e6a:	922d      	str	r2, [sp, #180]	; 0xb4
 8010e6c:	4a21      	ldr	r2, [pc, #132]	; (8010ef4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 8010e6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010e70:	8812      	ldrh	r2, [r2, #0]
 8010e72:	9b07      	ldr	r3, [sp, #28]
 8010e74:	9218      	str	r2, [sp, #96]	; 0x60
 8010e76:	9319      	str	r3, [sp, #100]	; 0x64
 8010e78:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8010e7c:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8010e80:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8010e84:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8010e88:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8010e8c:	9731      	str	r7, [sp, #196]	; 0xc4
 8010e8e:	f005 fe9b 	bl	8016bc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8010e92:	901a      	str	r0, [sp, #104]	; 0x68
 8010e94:	4628      	mov	r0, r5
 8010e96:	f005 fd5d 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010e9a:	901b      	str	r0, [sp, #108]	; 0x6c
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	f005 fd93 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010ea2:	901c      	str	r0, [sp, #112]	; 0x70
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	f005 fd55 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010eaa:	4b13      	ldr	r3, [pc, #76]	; (8010ef8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 8010eac:	901d      	str	r0, [sp, #116]	; 0x74
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010eb4:	b10a      	cbz	r2, 8010eba <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 8010eb6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8010eb8:	b905      	cbnz	r5, 8010ebc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 8010eba:	689d      	ldr	r5, [r3, #8]
 8010ebc:	682b      	ldr	r3, [r5, #0]
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8010ec2:	f7ff fed5 	bl	8010c70 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8010ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010eca:	aa1e      	add	r2, sp, #120	; 0x78
 8010ecc:	a917      	add	r1, sp, #92	; 0x5c
 8010ece:	9304      	str	r3, [sp, #16]
 8010ed0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010ed4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010ed8:	ab13      	add	r3, sp, #76	; 0x4c
 8010eda:	4628      	mov	r0, r5
 8010edc:	9301      	str	r3, [sp, #4]
 8010ede:	ab15      	add	r3, sp, #84	; 0x54
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	ab19      	add	r3, sp, #100	; 0x64
 8010ee4:	47b0      	blx	r6
 8010ee6:	b033      	add	sp, #204	; 0xcc
 8010ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eec:	2300      	movs	r3, #0
 8010eee:	9312      	str	r3, [sp, #72]	; 0x48
 8010ef0:	e706      	b.n	8010d00 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 8010ef2:	bf00      	nop
 8010ef4:	20060c2a 	.word	0x20060c2a
 8010ef8:	20060c30 	.word	0x20060c30

08010efc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8010efc:	b570      	push	{r4, r5, r6, lr}
 8010efe:	ed2d 8b04 	vpush	{d8-d9}
 8010f02:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8010f06:	b098      	sub	sp, #96	; 0x60
 8010f08:	4604      	mov	r4, r0
 8010f0a:	460e      	mov	r6, r1
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d065      	beq.n	8010fdc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8010f10:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010f14:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8010f18:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8010ff8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8010f1c:	ee09 3a10 	vmov	s18, r3
 8010f20:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010f24:	4628      	mov	r0, r5
 8010f26:	ee08 3a90 	vmov	s17, r3
 8010f2a:	4b34      	ldr	r3, [pc, #208]	; (8010ffc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8010f2c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8010f30:	930c      	str	r3, [sp, #48]	; 0x30
 8010f32:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8010f36:	930d      	str	r3, [sp, #52]	; 0x34
 8010f38:	930e      	str	r3, [sp, #56]	; 0x38
 8010f3a:	ee39 9a08 	vadd.f32	s18, s18, s16
 8010f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f40:	f005 fd08 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f44:	ee07 0a90 	vmov	s15, r0
 8010f48:	4628      	mov	r0, r5
 8010f4a:	ee78 8a88 	vadd.f32	s17, s17, s16
 8010f4e:	eef8 9a67 	vcvt.f32.u32	s19, s15
 8010f52:	f005 fd39 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010f56:	4b2a      	ldr	r3, [pc, #168]	; (8011000 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8010f58:	ee07 0a90 	vmov	s15, r0
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010f62:	eef0 7a48 	vmov.f32	s15, s16
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d13c      	bne.n	8010fe4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 8010f6a:	eef0 6a69 	vmov.f32	s13, s19
 8010f6e:	ee19 3a90 	vmov	r3, s19
 8010f72:	eeb0 6a47 	vmov.f32	s12, s14
 8010f76:	eef0 5a47 	vmov.f32	s11, s14
 8010f7a:	eef0 9a48 	vmov.f32	s19, s16
 8010f7e:	eeb0 7a48 	vmov.f32	s14, s16
 8010f82:	9314      	str	r3, [sp, #80]	; 0x50
 8010f84:	ab14      	add	r3, sp, #80	; 0x50
 8010f86:	2200      	movs	r2, #0
 8010f88:	4631      	mov	r1, r6
 8010f8a:	9303      	str	r3, [sp, #12]
 8010f8c:	ab10      	add	r3, sp, #64	; 0x40
 8010f8e:	4620      	mov	r0, r4
 8010f90:	edcd 7a04 	vstr	s15, [sp, #16]
 8010f94:	9302      	str	r3, [sp, #8]
 8010f96:	ab0c      	add	r3, sp, #48	; 0x30
 8010f98:	ed8d 9a05 	vstr	s18, [sp, #20]
 8010f9c:	9301      	str	r3, [sp, #4]
 8010f9e:	ab08      	add	r3, sp, #32
 8010fa0:	ed8d 9a06 	vstr	s18, [sp, #24]
 8010fa4:	9300      	str	r3, [sp, #0]
 8010fa6:	ab04      	add	r3, sp, #16
 8010fa8:	edcd 7a07 	vstr	s15, [sp, #28]
 8010fac:	edcd 7a08 	vstr	s15, [sp, #32]
 8010fb0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8010fb4:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8010fb8:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 8010fbc:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8010fc0:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 8010fc4:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 8010fc8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8010fcc:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8010fd0:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 8010fd4:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 8010fd8:	f7ff fe54 	bl	8010c84 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8010fdc:	b018      	add	sp, #96	; 0x60
 8010fde:	ecbd 8b04 	vpop	{d8-d9}
 8010fe2:	bd70      	pop	{r4, r5, r6, pc}
 8010fe4:	eef0 6a47 	vmov.f32	s13, s14
 8010fe8:	ee18 3a10 	vmov	r3, s16
 8010fec:	eef0 5a69 	vmov.f32	s11, s19
 8010ff0:	eeb0 6a48 	vmov.f32	s12, s16
 8010ff4:	e7c5      	b.n	8010f82 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 8010ff6:	bf00      	nop
 8010ff8:	00000000 	.word	0x00000000
 8010ffc:	42c80000 	.word	0x42c80000
 8011000:	20060c28 	.word	0x20060c28

08011004 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8011004:	2200      	movs	r2, #0
 8011006:	8002      	strh	r2, [r0, #0]
 8011008:	8042      	strh	r2, [r0, #2]
 801100a:	8082      	strh	r2, [r0, #4]
 801100c:	80c2      	strh	r2, [r0, #6]
 801100e:	4770      	bx	lr

08011010 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8011010:	b570      	push	{r4, r5, r6, lr}
 8011012:	6803      	ldr	r3, [r0, #0]
 8011014:	4604      	mov	r4, r0
 8011016:	4615      	mov	r5, r2
 8011018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101a:	4798      	blx	r3
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	4629      	mov	r1, r5
 8011020:	4620      	mov	r0, r4
 8011022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011028:	4718      	bx	r3

0801102a <_ZN8touchgfx8TextAreaD1Ev>:
 801102a:	4770      	bx	lr

0801102c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801102c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801102e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011032:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8011034:	4299      	cmp	r1, r3
 8011036:	d029      	beq.n	801108c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8011038:	4b15      	ldr	r3, [pc, #84]	; (8011090 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	b92b      	cbnz	r3, 801104a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801103e:	4b15      	ldr	r3, [pc, #84]	; (8011094 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8011040:	21ae      	movs	r1, #174	; 0xae
 8011042:	4a15      	ldr	r2, [pc, #84]	; (8011098 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8011044:	4815      	ldr	r0, [pc, #84]	; (801109c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8011046:	f014 f9af 	bl	80253a8 <__assert_func>
 801104a:	4a15      	ldr	r2, [pc, #84]	; (80110a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801104c:	8812      	ldrh	r2, [r2, #0]
 801104e:	428a      	cmp	r2, r1
 8011050:	d803      	bhi.n	801105a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8011052:	4b14      	ldr	r3, [pc, #80]	; (80110a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8011054:	21af      	movs	r1, #175	; 0xaf
 8011056:	4a10      	ldr	r2, [pc, #64]	; (8011098 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8011058:	e7f4      	b.n	8011044 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801105a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801105e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8011062:	4b11      	ldr	r3, [pc, #68]	; (80110a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8011064:	7854      	ldrb	r4, [r2, #1]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801106c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8011070:	682b      	ldr	r3, [r5, #0]
 8011072:	69de      	ldr	r6, [r3, #28]
 8011074:	4b0d      	ldr	r3, [pc, #52]	; (80110ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8011076:	6818      	ldr	r0, [r3, #0]
 8011078:	f7f4 ff48 	bl	8005f0c <_ZNK8touchgfx5Texts7getTextEt>
 801107c:	2300      	movs	r3, #0
 801107e:	4602      	mov	r2, r0
 8011080:	4621      	mov	r1, r4
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	4628      	mov	r0, r5
 8011086:	47b0      	blx	r6
 8011088:	b002      	add	sp, #8
 801108a:	bd70      	pop	{r4, r5, r6, pc}
 801108c:	2000      	movs	r0, #0
 801108e:	e7fb      	b.n	8011088 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8011090:	20060ca0 	.word	0x20060ca0
 8011094:	08028d75 	.word	0x08028d75
 8011098:	0802ac0c 	.word	0x0802ac0c
 801109c:	08028e03 	.word	0x08028e03
 80110a0:	20060ca4 	.word	0x20060ca4
 80110a4:	08028e2c 	.word	0x08028e2c
 80110a8:	20060ca8 	.word	0x20060ca8
 80110ac:	20060cac 	.word	0x20060cac

080110b0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80110b0:	b570      	push	{r4, r5, r6, lr}
 80110b2:	6803      	ldr	r3, [r0, #0]
 80110b4:	4604      	mov	r4, r0
 80110b6:	b28d      	uxth	r5, r1
 80110b8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80110ba:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80110bc:	4b10      	ldr	r3, [pc, #64]	; (8011100 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	b92b      	cbnz	r3, 80110ce <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80110c2:	4b10      	ldr	r3, [pc, #64]	; (8011104 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80110c4:	21ae      	movs	r1, #174	; 0xae
 80110c6:	4a10      	ldr	r2, [pc, #64]	; (8011108 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80110c8:	4810      	ldr	r0, [pc, #64]	; (801110c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80110ca:	f014 f96d 	bl	80253a8 <__assert_func>
 80110ce:	4910      	ldr	r1, [pc, #64]	; (8011110 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80110d0:	8809      	ldrh	r1, [r1, #0]
 80110d2:	4291      	cmp	r1, r2
 80110d4:	d803      	bhi.n	80110de <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80110d6:	4b0f      	ldr	r3, [pc, #60]	; (8011114 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80110d8:	21af      	movs	r1, #175	; 0xaf
 80110da:	4a0b      	ldr	r2, [pc, #44]	; (8011108 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80110dc:	e7f4      	b.n	80110c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80110de:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80110e2:	4b0d      	ldr	r3, [pc, #52]	; (8011118 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80110ea:	6803      	ldr	r3, [r0, #0]
 80110ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ee:	4798      	blx	r3
 80110f0:	1a29      	subs	r1, r5, r0
 80110f2:	4633      	mov	r3, r6
 80110f4:	4620      	mov	r0, r4
 80110f6:	b209      	sxth	r1, r1
 80110f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110fc:	4718      	bx	r3
 80110fe:	bf00      	nop
 8011100:	20060ca0 	.word	0x20060ca0
 8011104:	08028d75 	.word	0x08028d75
 8011108:	0802ac0c 	.word	0x0802ac0c
 801110c:	08028e03 	.word	0x08028e03
 8011110:	20060ca4 	.word	0x20060ca4
 8011114:	08028e2c 	.word	0x08028e2c
 8011118:	20060ca8 	.word	0x20060ca8

0801111c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011124:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8011126:	b08c      	sub	sp, #48	; 0x30
 8011128:	4604      	mov	r4, r0
 801112a:	4293      	cmp	r3, r2
 801112c:	4688      	mov	r8, r1
 801112e:	d05f      	beq.n	80111f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8011130:	4e31      	ldr	r6, [pc, #196]	; (80111f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8011132:	6832      	ldr	r2, [r6, #0]
 8011134:	b92a      	cbnz	r2, 8011142 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8011136:	4b31      	ldr	r3, [pc, #196]	; (80111fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8011138:	21ae      	movs	r1, #174	; 0xae
 801113a:	4a31      	ldr	r2, [pc, #196]	; (8011200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801113c:	4831      	ldr	r0, [pc, #196]	; (8011204 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801113e:	f014 f933 	bl	80253a8 <__assert_func>
 8011142:	4d31      	ldr	r5, [pc, #196]	; (8011208 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8011144:	8829      	ldrh	r1, [r5, #0]
 8011146:	4299      	cmp	r1, r3
 8011148:	d803      	bhi.n	8011152 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801114a:	4b30      	ldr	r3, [pc, #192]	; (801120c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801114c:	21af      	movs	r1, #175	; 0xaf
 801114e:	4a2c      	ldr	r2, [pc, #176]	; (8011200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8011150:	e7f4      	b.n	801113c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8011152:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8011156:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801115a:	4b2d      	ldr	r3, [pc, #180]	; (8011210 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011162:	2a00      	cmp	r2, #0
 8011164:	d044      	beq.n	80111f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8011166:	784b      	ldrb	r3, [r1, #1]
 8011168:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801116c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8011170:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011174:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8011178:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801117c:	4b25      	ldr	r3, [pc, #148]	; (8011214 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801117e:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8011188:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801118c:	9207      	str	r2, [sp, #28]
 801118e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011190:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011194:	f88d a020 	strb.w	sl, [sp, #32]
 8011198:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801119c:	9009      	str	r0, [sp, #36]	; 0x24
 801119e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80111a2:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80111a6:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80111aa:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80111ae:	b10a      	cbz	r2, 80111b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80111b0:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80111b2:	b907      	cbnz	r7, 80111b6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80111b4:	689f      	ldr	r7, [r3, #8]
 80111b6:	f10d 0914 	add.w	r9, sp, #20
 80111ba:	4621      	mov	r1, r4
 80111bc:	4648      	mov	r0, r9
 80111be:	f003 fab9 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111c2:	6833      	ldr	r3, [r6, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d0b6      	beq.n	8011136 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80111c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80111ca:	882b      	ldrh	r3, [r5, #0]
 80111cc:	428b      	cmp	r3, r1
 80111ce:	d9bc      	bls.n	801114a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80111d0:	4b11      	ldr	r3, [pc, #68]	; (8011218 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80111d2:	6818      	ldr	r0, [r3, #0]
 80111d4:	f7f4 fe9a 	bl	8005f0c <_ZNK8touchgfx5Texts7getTextEt>
 80111d8:	2300      	movs	r3, #0
 80111da:	9001      	str	r0, [sp, #4]
 80111dc:	4638      	mov	r0, r7
 80111de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80111e2:	ab07      	add	r3, sp, #28
 80111e4:	9300      	str	r3, [sp, #0]
 80111e6:	4643      	mov	r3, r8
 80111e8:	e899 0006 	ldmia.w	r9, {r1, r2}
 80111ec:	f7f4 fe40 	bl	8005e70 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80111f0:	b00c      	add	sp, #48	; 0x30
 80111f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111f6:	bf00      	nop
 80111f8:	20060ca0 	.word	0x20060ca0
 80111fc:	08028d75 	.word	0x08028d75
 8011200:	0802ac0c 	.word	0x0802ac0c
 8011204:	08028e03 	.word	0x08028e03
 8011208:	20060ca4 	.word	0x20060ca4
 801120c:	08028e2c 	.word	0x08028e2c
 8011210:	20060ca8 	.word	0x20060ca8
 8011214:	20060c30 	.word	0x20060c30
 8011218:	20060cac 	.word	0x20060cac

0801121c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801121c:	b40e      	push	{r1, r2, r3}
 801121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011226:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8011228:	b09c      	sub	sp, #112	; 0x70
 801122a:	4604      	mov	r4, r0
 801122c:	4293      	cmp	r3, r2
 801122e:	d06b      	beq.n	8011308 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8011230:	aa26      	add	r2, sp, #152	; 0x98
 8011232:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801131c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8011236:	9202      	str	r2, [sp, #8]
 8011238:	f8da 2000 	ldr.w	r2, [sl]
 801123c:	b92a      	cbnz	r2, 801124a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801123e:	4b33      	ldr	r3, [pc, #204]	; (801130c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8011240:	21ae      	movs	r1, #174	; 0xae
 8011242:	4a33      	ldr	r2, [pc, #204]	; (8011310 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8011244:	4833      	ldr	r0, [pc, #204]	; (8011314 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8011246:	f014 f8af 	bl	80253a8 <__assert_func>
 801124a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8011320 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 801124e:	f8b8 1000 	ldrh.w	r1, [r8]
 8011252:	4299      	cmp	r1, r3
 8011254:	d803      	bhi.n	801125e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8011256:	4b30      	ldr	r3, [pc, #192]	; (8011318 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8011258:	21af      	movs	r1, #175	; 0xaf
 801125a:	4a2d      	ldr	r2, [pc, #180]	; (8011310 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801125c:	e7f2      	b.n	8011244 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801125e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8011324 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8011262:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011266:	f8d9 3000 	ldr.w	r3, [r9]
 801126a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801126e:	682b      	ldr	r3, [r5, #0]
 8011270:	4628      	mov	r0, r5
 8011272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011274:	4798      	blx	r3
 8011276:	4606      	mov	r6, r0
 8011278:	b207      	sxth	r7, r0
 801127a:	a803      	add	r0, sp, #12
 801127c:	f003 ff69 	bl	8015152 <_ZN8touchgfx12TextProviderC1Ev>
 8011280:	682b      	ldr	r3, [r5, #0]
 8011282:	4628      	mov	r0, r5
 8011284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011286:	4798      	blx	r3
 8011288:	682b      	ldr	r3, [r5, #0]
 801128a:	4683      	mov	fp, r0
 801128c:	4628      	mov	r0, r5
 801128e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011290:	4798      	blx	r3
 8011292:	465b      	mov	r3, fp
 8011294:	9000      	str	r0, [sp, #0]
 8011296:	a803      	add	r0, sp, #12
 8011298:	9925      	ldr	r1, [sp, #148]	; 0x94
 801129a:	9a02      	ldr	r2, [sp, #8]
 801129c:	f003 ffac 	bl	80151f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80112a0:	f8da 3000 	ldr.w	r3, [sl]
 80112a4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d0c8      	beq.n	801123e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80112ac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80112ae:	f8b8 0000 	ldrh.w	r0, [r8]
 80112b2:	4290      	cmp	r0, r2
 80112b4:	d9cf      	bls.n	8011256 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80112b6:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 80112ba:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80112be:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80112c2:	786a      	ldrb	r2, [r5, #1]
 80112c4:	8925      	ldrh	r5, [r4, #8]
 80112c6:	f8d9 3000 	ldr.w	r3, [r9]
 80112ca:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80112ce:	eba5 050c 	sub.w	r5, r5, ip
 80112d2:	b22d      	sxth	r5, r5
 80112d4:	9500      	str	r5, [sp, #0]
 80112d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80112da:	a803      	add	r0, sp, #12
 80112dc:	f001 fd1f 	bl	8012d1e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80112e0:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80112e4:	b203      	sxth	r3, r0
 80112e6:	18b9      	adds	r1, r7, r2
 80112e8:	2900      	cmp	r1, #0
 80112ea:	dd0b      	ble.n	8011304 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 80112ec:	3b01      	subs	r3, #1
 80112ee:	fb13 f302 	smulbb	r3, r3, r2
 80112f2:	fb16 3300 	smlabb	r3, r6, r0, r3
 80112f6:	b21f      	sxth	r7, r3
 80112f8:	4638      	mov	r0, r7
 80112fa:	b01c      	add	sp, #112	; 0x70
 80112fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011300:	b003      	add	sp, #12
 8011302:	4770      	bx	lr
 8011304:	2b00      	cmp	r3, #0
 8011306:	dcf7      	bgt.n	80112f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8011308:	2700      	movs	r7, #0
 801130a:	e7f5      	b.n	80112f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801130c:	08028d75 	.word	0x08028d75
 8011310:	0802ac0c 	.word	0x0802ac0c
 8011314:	08028e03 	.word	0x08028e03
 8011318:	08028e2c 	.word	0x08028e2c
 801131c:	20060ca0 	.word	0x20060ca0
 8011320:	20060ca4 	.word	0x20060ca4
 8011324:	20060ca8 	.word	0x20060ca8

08011328 <_ZN8touchgfx8TextAreaD0Ev>:
 8011328:	b510      	push	{r4, lr}
 801132a:	4604      	mov	r4, r0
 801132c:	213c      	movs	r1, #60	; 0x3c
 801132e:	f013 fe68 	bl	8025002 <_ZdlPvj>
 8011332:	4620      	mov	r0, r4
 8011334:	bd10      	pop	{r4, pc}
	...

08011338 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8011338:	b570      	push	{r4, r5, r6, lr}
 801133a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801133e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8011340:	4604      	mov	r4, r0
 8011342:	4299      	cmp	r1, r3
 8011344:	d01e      	beq.n	8011384 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8011346:	6803      	ldr	r3, [r0, #0]
 8011348:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801134a:	4b0f      	ldr	r3, [pc, #60]	; (8011388 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	b92b      	cbnz	r3, 801135c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8011350:	4b0e      	ldr	r3, [pc, #56]	; (801138c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8011352:	21ae      	movs	r1, #174	; 0xae
 8011354:	4a0e      	ldr	r2, [pc, #56]	; (8011390 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8011356:	480f      	ldr	r0, [pc, #60]	; (8011394 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8011358:	f014 f826 	bl	80253a8 <__assert_func>
 801135c:	4b0e      	ldr	r3, [pc, #56]	; (8011398 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801135e:	881b      	ldrh	r3, [r3, #0]
 8011360:	428b      	cmp	r3, r1
 8011362:	d803      	bhi.n	801136c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8011364:	4b0d      	ldr	r3, [pc, #52]	; (801139c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8011366:	21af      	movs	r1, #175	; 0xaf
 8011368:	4a09      	ldr	r2, [pc, #36]	; (8011390 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801136a:	e7f4      	b.n	8011356 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801136c:	4b0c      	ldr	r3, [pc, #48]	; (80113a0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801136e:	6818      	ldr	r0, [r3, #0]
 8011370:	f7f4 fdcc 	bl	8005f0c <_ZNK8touchgfx5Texts7getTextEt>
 8011374:	2300      	movs	r3, #0
 8011376:	4601      	mov	r1, r0
 8011378:	46ac      	mov	ip, r5
 801137a:	4620      	mov	r0, r4
 801137c:	461a      	mov	r2, r3
 801137e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011382:	4760      	bx	ip
 8011384:	2000      	movs	r0, #0
 8011386:	bd70      	pop	{r4, r5, r6, pc}
 8011388:	20060ca0 	.word	0x20060ca0
 801138c:	08028d75 	.word	0x08028d75
 8011390:	0802ac0c 	.word	0x0802ac0c
 8011394:	08028e03 	.word	0x08028e03
 8011398:	20060ca4 	.word	0x20060ca4
 801139c:	08028e2c 	.word	0x08028e2c
 80113a0:	20060cac 	.word	0x20060cac

080113a4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80113a4:	b538      	push	{r3, r4, r5, lr}
 80113a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113aa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80113ac:	4604      	mov	r4, r0
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d014      	beq.n	80113dc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80113b2:	6803      	ldr	r3, [r0, #0]
 80113b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113b6:	4798      	blx	r3
 80113b8:	6823      	ldr	r3, [r4, #0]
 80113ba:	4605      	mov	r5, r0
 80113bc:	4620      	mov	r0, r4
 80113be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113c0:	4798      	blx	r3
 80113c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80113c6:	b22d      	sxth	r5, r5
 80113c8:	4601      	mov	r1, r0
 80113ca:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80113ce:	bf06      	itte	eq
 80113d0:	4602      	moveq	r2, r0
 80113d2:	4629      	moveq	r1, r5
 80113d4:	462a      	movne	r2, r5
 80113d6:	4620      	mov	r0, r4
 80113d8:	f7f4 fb6e 	bl	8005ab8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80113dc:	bd38      	pop	{r3, r4, r5, pc}

080113de <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80113de:	888a      	ldrh	r2, [r1, #4]
 80113e0:	8582      	strh	r2, [r0, #44]	; 0x2c
 80113e2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80113e6:	b922      	cbnz	r2, 80113f2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 80113e8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80113ec:	b90b      	cbnz	r3, 80113f2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 80113ee:	f7ff bfd9 	b.w	80113a4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80113f2:	4770      	bx	lr

080113f4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80113f4:	2300      	movs	r3, #0
 80113f6:	8083      	strh	r3, [r0, #4]
 80113f8:	80c3      	strh	r3, [r0, #6]
 80113fa:	8003      	strh	r3, [r0, #0]
 80113fc:	8043      	strh	r3, [r0, #2]
 80113fe:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8011402:	2bff      	cmp	r3, #255	; 0xff
 8011404:	bf01      	itttt	eq
 8011406:	890b      	ldrheq	r3, [r1, #8]
 8011408:	8083      	strheq	r3, [r0, #4]
 801140a:	894b      	ldrheq	r3, [r1, #10]
 801140c:	80c3      	strheq	r3, [r0, #6]
 801140e:	4770      	bx	lr

08011410 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011412:	4604      	mov	r4, r0
 8011414:	466b      	mov	r3, sp
 8011416:	6808      	ldr	r0, [r1, #0]
 8011418:	6849      	ldr	r1, [r1, #4]
 801141a:	c303      	stmia	r3!, {r0, r1}
 801141c:	6823      	ldr	r3, [r4, #0]
 801141e:	4669      	mov	r1, sp
 8011420:	4620      	mov	r0, r4
 8011422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011424:	4798      	blx	r3
 8011426:	4b08      	ldr	r3, [pc, #32]	; (8011448 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801142e:	b10a      	cbz	r2, 8011434 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011430:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011432:	b900      	cbnz	r0, 8011436 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011434:	6898      	ldr	r0, [r3, #8]
 8011436:	6803      	ldr	r3, [r0, #0]
 8011438:	4669      	mov	r1, sp
 801143a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801143c:	699d      	ldr	r5, [r3, #24]
 801143e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8011442:	47a8      	blx	r5
 8011444:	b003      	add	sp, #12
 8011446:	bd30      	pop	{r4, r5, pc}
 8011448:	20060c30 	.word	0x20060c30

0801144c <_ZN8touchgfx3BoxD1Ev>:
 801144c:	4770      	bx	lr

0801144e <_ZN8touchgfx3BoxD0Ev>:
 801144e:	b510      	push	{r4, lr}
 8011450:	4604      	mov	r4, r0
 8011452:	212c      	movs	r1, #44	; 0x2c
 8011454:	f013 fdd5 	bl	8025002 <_ZdlPvj>
 8011458:	4620      	mov	r0, r4
 801145a:	bd10      	pop	{r4, pc}

0801145c <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801145c:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 8011460:	600b      	str	r3, [r1, #0]
 8011462:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 8011466:	6013      	str	r3, [r2, #0]
 8011468:	4770      	bx	lr

0801146a <_ZN8touchgfx5Gauge8setWidthEs>:
 801146a:	8101      	strh	r1, [r0, #8]
 801146c:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 8011470:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 8011474:	4770      	bx	lr

08011476 <_ZN8touchgfx5Gauge9setHeightEs>:
 8011476:	8141      	strh	r1, [r0, #10]
 8011478:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801147c:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 8011480:	4770      	bx	lr

08011482 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8011482:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 8011486:	4770      	bx	lr

08011488 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 8011488:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801148c:	4770      	bx	lr

0801148e <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801148e:	4770      	bx	lr

08011490 <_ZN8touchgfx5GaugeD1Ev>:
 8011490:	4770      	bx	lr

08011492 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8011492:	b538      	push	{r3, r4, r5, lr}
 8011494:	4604      	mov	r4, r0
 8011496:	460d      	mov	r5, r1
 8011498:	f7fc fdd3 	bl	800e042 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801149c:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 80114a0:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
 80114a4:	bd38      	pop	{r3, r4, r5, pc}

080114a6 <_ZN8touchgfx5GaugeD0Ev>:
 80114a6:	b510      	push	{r4, lr}
 80114a8:	4604      	mov	r4, r0
 80114aa:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80114ae:	f013 fda8 	bl	8025002 <_ZdlPvj>
 80114b2:	4620      	mov	r0, r4
 80114b4:	bd10      	pop	{r4, pc}
	...

080114b8 <_ZN8touchgfx5GaugeC1Ev>:
 80114b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114ba:	4604      	mov	r4, r0
 80114bc:	f7fc feee 	bl	800e29c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80114c0:	4b18      	ldr	r3, [pc, #96]	; (8011524 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 80114c2:	a902      	add	r1, sp, #8
 80114c4:	4626      	mov	r6, r4
 80114c6:	2500      	movs	r5, #0
 80114c8:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 80114cc:	f846 3bb4 	str.w	r3, [r6], #180
 80114d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114d4:	4630      	mov	r0, r6
 80114d6:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80114da:	f011 febd 	bl	8023258 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 80114de:	2301      	movs	r3, #1
 80114e0:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 80114e4:	4638      	mov	r0, r7
 80114e6:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 80114ea:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 80114ee:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 80114f2:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 80114f6:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 80114fa:	f7fe fe4b 	bl	8010194 <_ZN8touchgfx6CircleC1Ev>
 80114fe:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8011502:	4620      	mov	r0, r4
 8011504:	f7fd fa4c 	bl	800e9a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8011508:	4639      	mov	r1, r7
 801150a:	4620      	mov	r0, r4
 801150c:	f7fd fa7a 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011510:	4620      	mov	r0, r4
 8011512:	4631      	mov	r1, r6
 8011514:	f7fd fa76 	bl	800ea04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011518:	4620      	mov	r0, r4
 801151a:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801151e:	b003      	add	sp, #12
 8011520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011522:	bf00      	nop
 8011524:	0802acec 	.word	0x0802acec

08011528 <_ZN8touchgfx5Gauge14setArcPositionEssss>:
 8011528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801152c:	f500 75ac 	add.w	r5, r0, #344	; 0x158
 8011530:	4604      	mov	r4, r0
 8011532:	460e      	mov	r6, r1
 8011534:	4617      	mov	r7, r2
 8011536:	4628      	mov	r0, r5
 8011538:	4698      	mov	r8, r3
 801153a:	f7f3 fcb3 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 801153e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8011542:	4641      	mov	r1, r8
 8011544:	4628      	mov	r0, r5
 8011546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011548:	4790      	blx	r2
 801154a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 801154e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8011552:	4628      	mov	r0, r5
 8011554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011556:	4798      	blx	r3
 8011558:	f9b4 2152 	ldrsh.w	r2, [r4, #338]	; 0x152
 801155c:	f9b4 1150 	ldrsh.w	r1, [r4, #336]	; 0x150
 8011560:	1bd2      	subs	r2, r2, r7
 8011562:	1b89      	subs	r1, r1, r6
 8011564:	0152      	lsls	r2, r2, #5
 8011566:	0149      	lsls	r1, r1, #5
 8011568:	3210      	adds	r2, #16
 801156a:	3110      	adds	r1, #16
 801156c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8011570:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8011574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011578 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8011578:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801157c:	4770      	bx	lr

0801157e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801157e:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 8011582:	4770      	bx	lr

08011584 <_ZN8touchgfx5Gauge13setArcVisibleEb>:
 8011584:	f880 117d 	strb.w	r1, [r0, #381]	; 0x17d
 8011588:	4770      	bx	lr

0801158a <_ZN8touchgfx5Gauge6getArcEv>:
 801158a:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 801158e:	4770      	bx	lr

08011590 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	8902      	ldrh	r2, [r0, #8]
 8011594:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 8011598:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801159c:	4604      	mov	r4, r0
 801159e:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 80115a2:	2200      	movs	r2, #0
 80115a4:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 80115a8:	4628      	mov	r0, r5
 80115aa:	4611      	mov	r1, r2
 80115ac:	f7f3 fc7a 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 80115b0:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 80115b4:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 80115b8:	4628      	mov	r0, r5
 80115ba:	1a9b      	subs	r3, r3, r2
 80115bc:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 80115c0:	ee07 3a90 	vmov	s15, r3
 80115c4:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 80115c8:	1a9b      	subs	r3, r3, r2
 80115ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115ce:	ee07 3a10 	vmov	s14, r3
 80115d2:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 80115d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80115da:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 80115de:	f011 fe87 	bl	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80115e2:	4b16      	ldr	r3, [pc, #88]	; (801163c <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 80115e4:	4628      	mov	r0, r5
 80115e6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 80115ea:	f011 fe81 	bl	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80115ee:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 80115f2:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 80115f6:	4628      	mov	r0, r5
 80115f8:	ee07 3a90 	vmov	s15, r3
 80115fc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8011600:	ee07 2a10 	vmov	s14, r2
 8011604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011608:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801160c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011610:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 8011614:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 8011618:	f011 fe6a 	bl	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801161c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8011620:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8011624:	4628      	mov	r0, r5
 8011626:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 801162a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 801162e:	f011 fe5f 	bl	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8011632:	2301      	movs	r3, #1
 8011634:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 8011638:	bd38      	pop	{r3, r4, r5, pc}
 801163a:	bf00      	nop
 801163c:	43960000 	.word	0x43960000

08011640 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 8011640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011642:	4604      	mov	r4, r0
 8011644:	a802      	add	r0, sp, #8
 8011646:	4616      	mov	r6, r2
 8011648:	461d      	mov	r5, r3
 801164a:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801164e:	4601      	mov	r1, r0
 8011650:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8011654:	f011 ffa2 	bl	802359c <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 8011658:	4620      	mov	r0, r4
 801165a:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 801165e:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 8011662:	f7ff ff95 	bl	8011590 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8011666:	b002      	add	sp, #8
 8011668:	bd70      	pop	{r4, r5, r6, pc}

0801166a <_ZN8touchgfx5Gauge9setCenterEii>:
 801166a:	b570      	push	{r4, r5, r6, lr}
 801166c:	4606      	mov	r6, r0
 801166e:	460d      	mov	r5, r1
 8011670:	4614      	mov	r4, r2
 8011672:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 8011676:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801167a:	f7ff ff89 	bl	8011590 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801167e:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 8011682:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 8011686:	1aa4      	subs	r4, r4, r2
 8011688:	1a6d      	subs	r5, r5, r1
 801168a:	0164      	lsls	r4, r4, #5
 801168c:	016d      	lsls	r5, r5, #5
 801168e:	3410      	adds	r4, #16
 8011690:	3510      	adds	r5, #16
 8011692:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
 8011696:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
 801169a:	bd70      	pop	{r4, r5, r6, pc}

0801169c <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801169c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801169e:	0149      	lsls	r1, r1, #5
 80116a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80116a2:	4604      	mov	r4, r0
 80116a4:	4299      	cmp	r1, r3
 80116a6:	9101      	str	r1, [sp, #4]
 80116a8:	d00b      	beq.n	80116c2 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 80116aa:	4601      	mov	r1, r0
 80116ac:	aa01      	add	r2, sp, #4
 80116ae:	a802      	add	r0, sp, #8
 80116b0:	f7fe ff92 	bl	80105d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 80116b4:	9b01      	ldr	r3, [sp, #4]
 80116b6:	a902      	add	r1, sp, #8
 80116b8:	4620      	mov	r0, r4
 80116ba:	6423      	str	r3, [r4, #64]	; 0x40
 80116bc:	6823      	ldr	r3, [r4, #0]
 80116be:	691b      	ldr	r3, [r3, #16]
 80116c0:	4798      	blx	r3
 80116c2:	b004      	add	sp, #16
 80116c4:	bd10      	pop	{r4, pc}
	...

080116c8 <_ZN8touchgfx5Gauge8setValueEi>:
 80116c8:	b570      	push	{r4, r5, r6, lr}
 80116ca:	4604      	mov	r4, r0
 80116cc:	f7fc fd0a 	bl	800e0e4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80116d0:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 80116d4:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 80116d8:	4620      	mov	r0, r4
 80116da:	429a      	cmp	r2, r3
 80116dc:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 80116e0:	bfac      	ite	ge
 80116e2:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 80116e6:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 80116ea:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 80116ee:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80116f2:	1ac9      	subs	r1, r1, r3
 80116f4:	2900      	cmp	r1, #0
 80116f6:	bfb8      	it	lt
 80116f8:	4249      	neglt	r1, r1
 80116fa:	b289      	uxth	r1, r1
 80116fc:	f7fc fd85 	bl	800e20a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8011700:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8011704:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8011708:	4605      	mov	r5, r0
 801170a:	eddf 6a18 	vldr	s13, [pc, #96]	; 801176c <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801170e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8011712:	429a      	cmp	r2, r3
 8011714:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8011770 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 8011718:	da15      	bge.n	8011746 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801171a:	1b5b      	subs	r3, r3, r5
 801171c:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 8011720:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 8011724:	ee07 3a90 	vmov	s15, r3
 8011728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801172c:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8011730:	ee21 1a07 	vmul.f32	s2, s2, s14
 8011734:	f012 f818 	bl	8023768 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8011738:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801173c:	1b49      	subs	r1, r1, r5
 801173e:	4630      	mov	r0, r6
 8011740:	f7ff ffac 	bl	801169c <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 8011744:	bd70      	pop	{r4, r5, r6, pc}
 8011746:	442b      	add	r3, r5
 8011748:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801174c:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 8011750:	ee07 3a90 	vmov	s15, r3
 8011754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011758:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801175c:	ee21 1a07 	vmul.f32	s2, s2, s14
 8011760:	f012 f802 	bl	8023768 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8011764:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8011768:	4429      	add	r1, r5
 801176a:	e7e8      	b.n	801173e <_ZN8touchgfx5Gauge8setValueEi+0x76>
 801176c:	43340000 	.word	0x43340000
 8011770:	40490fdb 	.word	0x40490fdb

08011774 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 8011774:	4291      	cmp	r1, r2
 8011776:	b510      	push	{r4, lr}
 8011778:	4604      	mov	r4, r0
 801177a:	d105      	bne.n	8011788 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 801177c:	4b0b      	ldr	r3, [pc, #44]	; (80117ac <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 801177e:	215e      	movs	r1, #94	; 0x5e
 8011780:	4a0b      	ldr	r2, [pc, #44]	; (80117b0 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 8011782:	480c      	ldr	r0, [pc, #48]	; (80117b4 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 8011784:	f013 fe10 	bl	80253a8 <__assert_func>
 8011788:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801178c:	0149      	lsls	r1, r1, #5
 801178e:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 8011792:	0152      	lsls	r2, r2, #5
 8011794:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
 8011798:	f8c0 2198 	str.w	r2, [r0, #408]	; 0x198
 801179c:	f7fc fc4e 	bl	800e03c <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 80117a0:	4601      	mov	r1, r0
 80117a2:	4620      	mov	r0, r4
 80117a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117a8:	f7ff bf8e 	b.w	80116c8 <_ZN8touchgfx5Gauge8setValueEi>
 80117ac:	0802aca0 	.word	0x0802aca0
 80117b0:	0802adc8 	.word	0x0802adc8
 80117b4:	0802acb7 	.word	0x0802acb7

080117b8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80117b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80117bc:	4770      	bx	lr

080117be <_ZN8touchgfx6ButtonD1Ev>:
 80117be:	4770      	bx	lr

080117c0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80117c0:	b570      	push	{r4, r5, r6, lr}
 80117c2:	880b      	ldrh	r3, [r1, #0]
 80117c4:	4605      	mov	r5, r0
 80117c6:	4604      	mov	r4, r0
 80117c8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80117ca:	8813      	ldrh	r3, [r2, #0]
 80117cc:	f825 3f30 	strh.w	r3, [r5, #48]!
 80117d0:	4628      	mov	r0, r5
 80117d2:	f005 f8bf 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80117d6:	4606      	mov	r6, r0
 80117d8:	4628      	mov	r0, r5
 80117da:	f005 f8f5 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	4605      	mov	r5, r0
 80117e2:	b231      	sxth	r1, r6
 80117e4:	4620      	mov	r0, r4
 80117e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117e8:	4798      	blx	r3
 80117ea:	6823      	ldr	r3, [r4, #0]
 80117ec:	b229      	sxth	r1, r5
 80117ee:	4620      	mov	r0, r4
 80117f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117f6:	4718      	bx	r3

080117f8 <_ZN8touchgfx6ButtonD0Ev>:
 80117f8:	b510      	push	{r4, lr}
 80117fa:	4604      	mov	r4, r0
 80117fc:	2134      	movs	r1, #52	; 0x34
 80117fe:	f013 fc00 	bl	8025002 <_ZdlPvj>
 8011802:	4620      	mov	r0, r4
 8011804:	bd10      	pop	{r4, pc}

08011806 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8011806:	b510      	push	{r4, lr}
 8011808:	4604      	mov	r4, r0
 801180a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801180c:	b150      	cbz	r0, 8011824 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801180e:	6803      	ldr	r3, [r0, #0]
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	4798      	blx	r3
 8011814:	b130      	cbz	r0, 8011824 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011816:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011818:	4621      	mov	r1, r4
 801181a:	6803      	ldr	r3, [r0, #0]
 801181c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	4718      	bx	r3
 8011824:	bd10      	pop	{r4, pc}

08011826 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8011826:	b510      	push	{r4, lr}
 8011828:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801182c:	4604      	mov	r4, r0
 801182e:	2bff      	cmp	r3, #255	; 0xff
 8011830:	d006      	beq.n	8011840 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8011832:	2300      	movs	r3, #0
 8011834:	8003      	strh	r3, [r0, #0]
 8011836:	8043      	strh	r3, [r0, #2]
 8011838:	8083      	strh	r3, [r0, #4]
 801183a:	80c3      	strh	r3, [r0, #6]
 801183c:	4620      	mov	r0, r4
 801183e:	bd10      	pop	{r4, pc}
 8011840:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8011844:	b11b      	cbz	r3, 801184e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8011846:	3130      	adds	r1, #48	; 0x30
 8011848:	f005 f8f8 	bl	8016a3c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801184c:	e7f6      	b.n	801183c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801184e:	312e      	adds	r1, #46	; 0x2e
 8011850:	e7fa      	b.n	8011848 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08011854 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8011854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011858:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801185c:	b08a      	sub	sp, #40	; 0x28
 801185e:	4604      	mov	r4, r0
 8011860:	4688      	mov	r8, r1
 8011862:	2b00      	cmp	r3, #0
 8011864:	d044      	beq.n	80118f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8011866:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8011868:	a805      	add	r0, sp, #20
 801186a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801186e:	f005 f871 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011872:	4605      	mov	r5, r0
 8011874:	b206      	sxth	r6, r0
 8011876:	a805      	add	r0, sp, #20
 8011878:	f005 f8a6 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801187c:	f9b8 2000 	ldrsh.w	r2, [r8]
 8011880:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8011884:	2300      	movs	r3, #0
 8011886:	fa0f fc80 	sxth.w	ip, r0
 801188a:	4417      	add	r7, r2
 801188c:	9306      	str	r3, [sp, #24]
 801188e:	b2bf      	uxth	r7, r7
 8011890:	fa0f fe87 	sxth.w	lr, r7
 8011894:	459e      	cmp	lr, r3
 8011896:	dd2d      	ble.n	80118f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8011898:	4296      	cmp	r6, r2
 801189a:	dd2b      	ble.n	80118f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801189c:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80118a0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80118a4:	4419      	add	r1, r3
 80118a6:	b289      	uxth	r1, r1
 80118a8:	fa0f f881 	sxth.w	r8, r1
 80118ac:	f1b8 0f00 	cmp.w	r8, #0
 80118b0:	dd20      	ble.n	80118f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80118b2:	459c      	cmp	ip, r3
 80118b4:	dd1e      	ble.n	80118f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80118b6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80118ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80118be:	4576      	cmp	r6, lr
 80118c0:	bfa8      	it	ge
 80118c2:	463d      	movge	r5, r7
 80118c4:	45c4      	cmp	ip, r8
 80118c6:	bfa8      	it	ge
 80118c8:	4608      	movge	r0, r1
 80118ca:	f8ad 2018 	strh.w	r2, [sp, #24]
 80118ce:	1aad      	subs	r5, r5, r2
 80118d0:	1ac0      	subs	r0, r0, r3
 80118d2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80118d6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80118da:	f8ad 001e 	strh.w	r0, [sp, #30]
 80118de:	4b1f      	ldr	r3, [pc, #124]	; (801195c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	b953      	cbnz	r3, 80118fa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 80118e4:	4b1e      	ldr	r3, [pc, #120]	; (8011960 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 80118e6:	2187      	movs	r1, #135	; 0x87
 80118e8:	4a1e      	ldr	r2, [pc, #120]	; (8011964 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80118ea:	481f      	ldr	r0, [pc, #124]	; (8011968 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80118ec:	f013 fd5c 	bl	80253a8 <__assert_func>
 80118f0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80118f2:	e7b9      	b.n	8011868 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80118f4:	2300      	movs	r3, #0
 80118f6:	9307      	str	r3, [sp, #28]
 80118f8:	e7f1      	b.n	80118de <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80118fa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80118fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011902:	429a      	cmp	r2, r3
 8011904:	d026      	beq.n	8011954 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8011906:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	dd22      	ble.n	8011954 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801190e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011912:	2b00      	cmp	r3, #0
 8011914:	dd1e      	ble.n	8011954 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8011916:	2300      	movs	r3, #0
 8011918:	a908      	add	r1, sp, #32
 801191a:	4620      	mov	r0, r4
 801191c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011920:	6823      	ldr	r3, [r4, #0]
 8011922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011924:	4798      	blx	r3
 8011926:	4b11      	ldr	r3, [pc, #68]	; (801196c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801192e:	b10a      	cbz	r2, 8011934 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8011930:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011932:	b900      	cbnz	r0, 8011936 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8011934:	6898      	ldr	r0, [r3, #8]
 8011936:	2501      	movs	r5, #1
 8011938:	6801      	ldr	r1, [r0, #0]
 801193a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801193e:	9502      	str	r5, [sp, #8]
 8011940:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8011944:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011948:	9401      	str	r4, [sp, #4]
 801194a:	ac06      	add	r4, sp, #24
 801194c:	9400      	str	r4, [sp, #0]
 801194e:	688c      	ldr	r4, [r1, #8]
 8011950:	a905      	add	r1, sp, #20
 8011952:	47a0      	blx	r4
 8011954:	b00a      	add	sp, #40	; 0x28
 8011956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801195a:	bf00      	nop
 801195c:	20060cd8 	.word	0x20060cd8
 8011960:	0802ae01 	.word	0x0802ae01
 8011964:	0802aed4 	.word	0x0802aed4
 8011968:	0802ae3d 	.word	0x0802ae3d
 801196c:	20060c30 	.word	0x20060c30

08011970 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 8011970:	4770      	bx	lr
	...

08011974 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8011974:	b570      	push	{r4, r5, r6, lr}
 8011976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801197a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801197c:	4604      	mov	r4, r0
 801197e:	4299      	cmp	r1, r3
 8011980:	d01e      	beq.n	80119c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8011982:	6803      	ldr	r3, [r0, #0]
 8011984:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8011986:	4b0f      	ldr	r3, [pc, #60]	; (80119c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	b92b      	cbnz	r3, 8011998 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801198c:	4b0e      	ldr	r3, [pc, #56]	; (80119c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801198e:	21ae      	movs	r1, #174	; 0xae
 8011990:	4a0e      	ldr	r2, [pc, #56]	; (80119cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8011992:	480f      	ldr	r0, [pc, #60]	; (80119d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8011994:	f013 fd08 	bl	80253a8 <__assert_func>
 8011998:	4b0e      	ldr	r3, [pc, #56]	; (80119d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801199a:	881b      	ldrh	r3, [r3, #0]
 801199c:	428b      	cmp	r3, r1
 801199e:	d803      	bhi.n	80119a8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 80119a0:	4b0d      	ldr	r3, [pc, #52]	; (80119d8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 80119a2:	21af      	movs	r1, #175	; 0xaf
 80119a4:	4a09      	ldr	r2, [pc, #36]	; (80119cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80119a6:	e7f4      	b.n	8011992 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 80119a8:	4b0c      	ldr	r3, [pc, #48]	; (80119dc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 80119aa:	6818      	ldr	r0, [r3, #0]
 80119ac:	f7f4 faae 	bl	8005f0c <_ZNK8touchgfx5Texts7getTextEt>
 80119b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80119b2:	4601      	mov	r1, r0
 80119b4:	46ac      	mov	ip, r5
 80119b6:	4620      	mov	r0, r4
 80119b8:	2300      	movs	r3, #0
 80119ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119be:	4760      	bx	ip
 80119c0:	2000      	movs	r0, #0
 80119c2:	bd70      	pop	{r4, r5, r6, pc}
 80119c4:	20060ca0 	.word	0x20060ca0
 80119c8:	08028d75 	.word	0x08028d75
 80119cc:	0802af80 	.word	0x0802af80
 80119d0:	08028e03 	.word	0x08028e03
 80119d4:	20060ca4 	.word	0x20060ca4
 80119d8:	08028e2c 	.word	0x08028e2c
 80119dc:	20060cac 	.word	0x20060cac

080119e0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80119e0:	b510      	push	{r4, lr}
 80119e2:	4604      	mov	r4, r0
 80119e4:	2140      	movs	r1, #64	; 0x40
 80119e6:	f013 fb0c 	bl	8025002 <_ZdlPvj>
 80119ea:	4620      	mov	r0, r4
 80119ec:	bd10      	pop	{r4, pc}
	...

080119f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 80119f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119f8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80119fa:	b08c      	sub	sp, #48	; 0x30
 80119fc:	4604      	mov	r4, r0
 80119fe:	4293      	cmp	r3, r2
 8011a00:	460e      	mov	r6, r1
 8011a02:	d05d      	beq.n	8011ac0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8011a04:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8011ae4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8011a08:	f8d8 2000 	ldr.w	r2, [r8]
 8011a0c:	b92a      	cbnz	r2, 8011a1a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8011a0e:	4b2e      	ldr	r3, [pc, #184]	; (8011ac8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8011a10:	21ae      	movs	r1, #174	; 0xae
 8011a12:	4a2e      	ldr	r2, [pc, #184]	; (8011acc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8011a14:	482e      	ldr	r0, [pc, #184]	; (8011ad0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8011a16:	f013 fcc7 	bl	80253a8 <__assert_func>
 8011a1a:	4f2e      	ldr	r7, [pc, #184]	; (8011ad4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8011a1c:	8839      	ldrh	r1, [r7, #0]
 8011a1e:	4299      	cmp	r1, r3
 8011a20:	d803      	bhi.n	8011a2a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8011a22:	4b2d      	ldr	r3, [pc, #180]	; (8011ad8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8011a24:	21af      	movs	r1, #175	; 0xaf
 8011a26:	4a29      	ldr	r2, [pc, #164]	; (8011acc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8011a28:	e7f4      	b.n	8011a14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8011a2a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8011a2e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011a32:	4b2a      	ldr	r3, [pc, #168]	; (8011adc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011a3a:	2a00      	cmp	r2, #0
 8011a3c:	d040      	beq.n	8011ac0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8011a3e:	784b      	ldrb	r3, [r1, #1]
 8011a40:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8011a44:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8011a48:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8011a4c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8011a50:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011a54:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8011a58:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8011a5c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8011a60:	ad05      	add	r5, sp, #20
 8011a62:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011a64:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8011a68:	9207      	str	r2, [sp, #28]
 8011a6a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8011a6e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8011a72:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8011a76:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8011a7a:	f88d a020 	strb.w	sl, [sp, #32]
 8011a7e:	9009      	str	r0, [sp, #36]	; 0x24
 8011a80:	f7f2 ff1a 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 8011a84:	4621      	mov	r1, r4
 8011a86:	4681      	mov	r9, r0
 8011a88:	4628      	mov	r0, r5
 8011a8a:	f002 fe53 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d0bb      	beq.n	8011a0e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8011a96:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8011a98:	883b      	ldrh	r3, [r7, #0]
 8011a9a:	428b      	cmp	r3, r1
 8011a9c:	d9c1      	bls.n	8011a22 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8011a9e:	4b10      	ldr	r3, [pc, #64]	; (8011ae0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8011aa0:	6818      	ldr	r0, [r3, #0]
 8011aa2:	f7f4 fa33 	bl	8005f0c <_ZNK8touchgfx5Texts7getTextEt>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	9303      	str	r3, [sp, #12]
 8011aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011aac:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8011ab0:	ab07      	add	r3, sp, #28
 8011ab2:	4648      	mov	r0, r9
 8011ab4:	9300      	str	r3, [sp, #0]
 8011ab6:	4633      	mov	r3, r6
 8011ab8:	e895 0006 	ldmia.w	r5, {r1, r2}
 8011abc:	f7f4 f9d8 	bl	8005e70 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011ac0:	b00c      	add	sp, #48	; 0x30
 8011ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ac6:	bf00      	nop
 8011ac8:	08028d75 	.word	0x08028d75
 8011acc:	0802af80 	.word	0x0802af80
 8011ad0:	08028e03 	.word	0x08028e03
 8011ad4:	20060ca4 	.word	0x20060ca4
 8011ad8:	08028e2c 	.word	0x08028e2c
 8011adc:	20060ca8 	.word	0x20060ca8
 8011ae0:	20060cac 	.word	0x20060cac
 8011ae4:	20060ca0 	.word	0x20060ca0

08011ae8 <_ZN8touchgfx5ImageD1Ev>:
 8011ae8:	4770      	bx	lr

08011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011aea:	b570      	push	{r4, r5, r6, lr}
 8011aec:	880b      	ldrh	r3, [r1, #0]
 8011aee:	460d      	mov	r5, r1
 8011af0:	4604      	mov	r4, r0
 8011af2:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011af4:	4608      	mov	r0, r1
 8011af6:	f004 ff2d 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011afa:	4606      	mov	r6, r0
 8011afc:	4628      	mov	r0, r5
 8011afe:	f004 ff63 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011b02:	6823      	ldr	r3, [r4, #0]
 8011b04:	4605      	mov	r5, r0
 8011b06:	b231      	sxth	r1, r6
 8011b08:	4620      	mov	r0, r4
 8011b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b0c:	4798      	blx	r3
 8011b0e:	6823      	ldr	r3, [r4, #0]
 8011b10:	b229      	sxth	r1, r5
 8011b12:	4620      	mov	r0, r4
 8011b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b1a:	4718      	bx	r3

08011b1c <_ZN8touchgfx5ImageD0Ev>:
 8011b1c:	b510      	push	{r4, lr}
 8011b1e:	4604      	mov	r4, r0
 8011b20:	212c      	movs	r1, #44	; 0x2c
 8011b22:	f013 fa6e 	bl	8025002 <_ZdlPvj>
 8011b26:	4620      	mov	r0, r4
 8011b28:	bd10      	pop	{r4, pc}

08011b2a <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011b2a:	b510      	push	{r4, lr}
 8011b2c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8011b30:	4604      	mov	r4, r0
 8011b32:	2bff      	cmp	r3, #255	; 0xff
 8011b34:	d006      	beq.n	8011b44 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8011b36:	2300      	movs	r3, #0
 8011b38:	8003      	strh	r3, [r0, #0]
 8011b3a:	8043      	strh	r3, [r0, #2]
 8011b3c:	8083      	strh	r3, [r0, #4]
 8011b3e:	80c3      	strh	r3, [r0, #6]
 8011b40:	4620      	mov	r0, r4
 8011b42:	bd10      	pop	{r4, pc}
 8011b44:	3126      	adds	r1, #38	; 0x26
 8011b46:	f004 ff79 	bl	8016a3c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011b4a:	e7f9      	b.n	8011b40 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011b4c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b50:	4604      	mov	r4, r0
 8011b52:	b088      	sub	sp, #32
 8011b54:	2500      	movs	r5, #0
 8011b56:	460f      	mov	r7, r1
 8011b58:	f854 3b26 	ldr.w	r3, [r4], #38
 8011b5c:	a904      	add	r1, sp, #16
 8011b5e:	4606      	mov	r6, r0
 8011b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011b66:	4798      	blx	r3
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f004 fef3 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011b6e:	4680      	mov	r8, r0
 8011b70:	4620      	mov	r0, r4
 8011b72:	f004 ff29 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011b76:	9506      	str	r5, [sp, #24]
 8011b78:	ad06      	add	r5, sp, #24
 8011b7a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011b7e:	4639      	mov	r1, r7
 8011b80:	f8ad 801c 	strh.w	r8, [sp, #28]
 8011b84:	4628      	mov	r0, r5
 8011b86:	f7fd f87f 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8011b8a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	dd19      	ble.n	8011bc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011b92:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	dd15      	ble.n	8011bc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011b9a:	4b0c      	ldr	r3, [pc, #48]	; (8011bcc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011ba2:	b10a      	cbz	r2, 8011ba8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011ba4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011ba6:	b900      	cbnz	r0, 8011baa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011ba8:	6898      	ldr	r0, [r3, #8]
 8011baa:	2701      	movs	r7, #1
 8011bac:	6801      	ldr	r1, [r0, #0]
 8011bae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011bb2:	9702      	str	r7, [sp, #8]
 8011bb4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8011bb8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011bbc:	e9cd 5600 	strd	r5, r6, [sp]
 8011bc0:	688d      	ldr	r5, [r1, #8]
 8011bc2:	4621      	mov	r1, r4
 8011bc4:	47a8      	blx	r5
 8011bc6:	b008      	add	sp, #32
 8011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bcc:	20060c30 	.word	0x20060c30

08011bd0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8011bd0:	4b02      	ldr	r3, [pc, #8]	; (8011bdc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8011bd2:	6018      	str	r0, [r3, #0]
 8011bd4:	4b02      	ldr	r3, [pc, #8]	; (8011be0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8011bd6:	6019      	str	r1, [r3, #0]
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	20060c38 	.word	0x20060c38
 8011be0:	20060c4c 	.word	0x20060c4c

08011be4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8011be4:	b538      	push	{r3, r4, r5, lr}
 8011be6:	4c2b      	ldr	r4, [pc, #172]	; (8011c94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8011be8:	4b2b      	ldr	r3, [pc, #172]	; (8011c98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8011bea:	6821      	ldr	r1, [r4, #0]
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	4281      	cmp	r1, r0
 8011bf0:	4d2a      	ldr	r5, [pc, #168]	; (8011c9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8011bf2:	492b      	ldr	r1, [pc, #172]	; (8011ca0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8011bf4:	d108      	bne.n	8011c08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8011bf6:	682b      	ldr	r3, [r5, #0]
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d105      	bne.n	8011c08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8011bfc:	6808      	ldr	r0, [r1, #0]
 8011bfe:	280f      	cmp	r0, #15
 8011c00:	bf94      	ite	ls
 8011c02:	2000      	movls	r0, #0
 8011c04:	2001      	movhi	r0, #1
 8011c06:	bd38      	pop	{r3, r4, r5, pc}
 8011c08:	4b26      	ldr	r3, [pc, #152]	; (8011ca4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8011c0a:	6020      	str	r0, [r4, #0]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	602a      	str	r2, [r5, #0]
 8011c10:	4298      	cmp	r0, r3
 8011c12:	d905      	bls.n	8011c20 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8011c14:	4b24      	ldr	r3, [pc, #144]	; (8011ca8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8011c16:	2137      	movs	r1, #55	; 0x37
 8011c18:	4a24      	ldr	r2, [pc, #144]	; (8011cac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8011c1a:	4825      	ldr	r0, [pc, #148]	; (8011cb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8011c1c:	f013 fbc4 	bl	80253a8 <__assert_func>
 8011c20:	f010 0403 	ands.w	r4, r0, #3
 8011c24:	bf1f      	itttt	ne
 8011c26:	f1c4 0504 	rsbne	r5, r4, #4
 8011c2a:	3b04      	subne	r3, #4
 8011c2c:	1952      	addne	r2, r2, r5
 8011c2e:	191b      	addne	r3, r3, r4
 8011c30:	4d20      	ldr	r5, [pc, #128]	; (8011cb4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8011c32:	4402      	add	r2, r0
 8011c34:	1a1b      	subs	r3, r3, r0
 8011c36:	3001      	adds	r0, #1
 8011c38:	602a      	str	r2, [r5, #0]
 8011c3a:	f020 0401 	bic.w	r4, r0, #1
 8011c3e:	42a3      	cmp	r3, r4
 8011c40:	d203      	bcs.n	8011c4a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8011c42:	4b19      	ldr	r3, [pc, #100]	; (8011ca8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8011c44:	214a      	movs	r1, #74	; 0x4a
 8011c46:	4a19      	ldr	r2, [pc, #100]	; (8011cac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8011c48:	e7e7      	b.n	8011c1a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8011c4a:	f010 0002 	ands.w	r0, r0, #2
 8011c4e:	bf1f      	itttt	ne
 8011c50:	f1c0 0504 	rsbne	r5, r0, #4
 8011c54:	1952      	addne	r2, r2, r5
 8011c56:	1f05      	subne	r5, r0, #4
 8011c58:	195b      	addne	r3, r3, r5
 8011c5a:	4422      	add	r2, r4
 8011c5c:	4d16      	ldr	r5, [pc, #88]	; (8011cb8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8011c5e:	1b1b      	subs	r3, r3, r4
 8011c60:	602a      	str	r2, [r5, #0]
 8011c62:	429c      	cmp	r4, r3
 8011c64:	d903      	bls.n	8011c6e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8011c66:	4b10      	ldr	r3, [pc, #64]	; (8011ca8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8011c68:	215d      	movs	r1, #93	; 0x5d
 8011c6a:	4a10      	ldr	r2, [pc, #64]	; (8011cac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8011c6c:	e7d5      	b.n	8011c1a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8011c6e:	b120      	cbz	r0, 8011c7a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8011c70:	f1c0 0504 	rsb	r5, r0, #4
 8011c74:	3804      	subs	r0, #4
 8011c76:	442a      	add	r2, r5
 8011c78:	4403      	add	r3, r0
 8011c7a:	1b1b      	subs	r3, r3, r4
 8011c7c:	4422      	add	r2, r4
 8011c7e:	480f      	ldr	r0, [pc, #60]	; (8011cbc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8011c80:	2b0f      	cmp	r3, #15
 8011c82:	600b      	str	r3, [r1, #0]
 8011c84:	6002      	str	r2, [r0, #0]
 8011c86:	d803      	bhi.n	8011c90 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8011c88:	4b0d      	ldr	r3, [pc, #52]	; (8011cc0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8011c8a:	2170      	movs	r1, #112	; 0x70
 8011c8c:	4a07      	ldr	r2, [pc, #28]	; (8011cac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8011c8e:	e7c4      	b.n	8011c1a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8011c90:	2001      	movs	r0, #1
 8011c92:	e7b8      	b.n	8011c06 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8011c94:	20060c40 	.word	0x20060c40
 8011c98:	20060c38 	.word	0x20060c38
 8011c9c:	20060c48 	.word	0x20060c48
 8011ca0:	20060c50 	.word	0x20060c50
 8011ca4:	20060c4c 	.word	0x20060c4c
 8011ca8:	0802b018 	.word	0x0802b018
 8011cac:	0802b0e0 	.word	0x0802b0e0
 8011cb0:	0802b051 	.word	0x0802b051
 8011cb4:	20060c54 	.word	0x20060c54
 8011cb8:	20060c44 	.word	0x20060c44
 8011cbc:	20060c3c 	.word	0x20060c3c
 8011cc0:	0802b09b 	.word	0x0802b09b

08011cc4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8011cc4:	4b04      	ldr	r3, [pc, #16]	; (8011cd8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8011cc6:	6818      	ldr	r0, [r3, #0]
 8011cc8:	b120      	cbz	r0, 8011cd4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8011cca:	4b04      	ldr	r3, [pc, #16]	; (8011cdc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8011ccc:	6818      	ldr	r0, [r3, #0]
 8011cce:	3000      	adds	r0, #0
 8011cd0:	bf18      	it	ne
 8011cd2:	2001      	movne	r0, #1
 8011cd4:	4770      	bx	lr
 8011cd6:	bf00      	nop
 8011cd8:	20060c38 	.word	0x20060c38
 8011cdc:	20060c4c 	.word	0x20060c4c

08011ce0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8011ce0:	4b01      	ldr	r3, [pc, #4]	; (8011ce8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8011ce2:	6818      	ldr	r0, [r3, #0]
 8011ce4:	4770      	bx	lr
 8011ce6:	bf00      	nop
 8011ce8:	20060c40 	.word	0x20060c40

08011cec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8011cec:	4b01      	ldr	r3, [pc, #4]	; (8011cf4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8011cee:	6818      	ldr	r0, [r3, #0]
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	20060c48 	.word	0x20060c48

08011cf8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8011cf8:	4b01      	ldr	r3, [pc, #4]	; (8011d00 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8011cfa:	6818      	ldr	r0, [r3, #0]
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop
 8011d00:	20060c54 	.word	0x20060c54

08011d04 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8011d04:	4b01      	ldr	r3, [pc, #4]	; (8011d0c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8011d06:	6818      	ldr	r0, [r3, #0]
 8011d08:	4770      	bx	lr
 8011d0a:	bf00      	nop
 8011d0c:	20060c44 	.word	0x20060c44

08011d10 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8011d10:	4b01      	ldr	r3, [pc, #4]	; (8011d18 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8011d12:	6818      	ldr	r0, [r3, #0]
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	20060c3c 	.word	0x20060c3c

08011d1c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8011d1c:	4b01      	ldr	r3, [pc, #4]	; (8011d24 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8011d1e:	6818      	ldr	r0, [r3, #0]
 8011d20:	4770      	bx	lr
 8011d22:	bf00      	nop
 8011d24:	20060c50 	.word	0x20060c50

08011d28 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011d28:	b510      	push	{r4, lr}
 8011d2a:	6803      	ldr	r3, [r0, #0]
 8011d2c:	460c      	mov	r4, r1
 8011d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d30:	4798      	blx	r3
 8011d32:	1b03      	subs	r3, r0, r4
 8011d34:	4258      	negs	r0, r3
 8011d36:	4158      	adcs	r0, r3
 8011d38:	bd10      	pop	{r4, pc}
	...

08011d3c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011d3c:	4b01      	ldr	r3, [pc, #4]	; (8011d44 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8011d3e:	6019      	str	r1, [r3, #0]
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	20060c58 	.word	0x20060c58

08011d48 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4c:	4696      	mov	lr, r2
 8011d4e:	b097      	sub	sp, #92	; 0x5c
 8011d50:	4605      	mov	r5, r0
 8011d52:	4614      	mov	r4, r2
 8011d54:	460e      	mov	r6, r1
 8011d56:	461f      	mov	r7, r3
 8011d58:	f10d 0c1c 	add.w	ip, sp, #28
 8011d5c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8011d60:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8011d64:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8011d68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d70:	f8de 3000 	ldr.w	r3, [lr]
 8011d74:	f104 0e14 	add.w	lr, r4, #20
 8011d78:	f8cc 3000 	str.w	r3, [ip]
 8011d7c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011d80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d88:	f8de 3000 	ldr.w	r3, [lr]
 8011d8c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8011d90:	f8cc 3000 	str.w	r3, [ip]
 8011d94:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011d98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011da0:	f8de 3000 	ldr.w	r3, [lr]
 8011da4:	4631      	mov	r1, r6
 8011da6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011da8:	4628      	mov	r0, r5
 8011daa:	f8cc 3000 	str.w	r3, [ip]
 8011dae:	682b      	ldr	r3, [r5, #0]
 8011db0:	9201      	str	r2, [sp, #4]
 8011db2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011db4:	f8cd 8008 	str.w	r8, [sp, #8]
 8011db8:	9200      	str	r2, [sp, #0]
 8011dba:	aa07      	add	r2, sp, #28
 8011dbc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011dc0:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8011dc4:	463b      	mov	r3, r7
 8011dc6:	47d8      	blx	fp
 8011dc8:	46a6      	mov	lr, r4
 8011dca:	f10d 0c1c 	add.w	ip, sp, #28
 8011dce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011dd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011dd6:	f8de 3000 	ldr.w	r3, [lr]
 8011dda:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8011dde:	343c      	adds	r4, #60	; 0x3c
 8011de0:	f8cc 3000 	str.w	r3, [ip]
 8011de4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011de8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011dec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011df0:	f8de 3000 	ldr.w	r3, [lr]
 8011df4:	f8cc 3000 	str.w	r3, [ip]
 8011df8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011dfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e02:	6823      	ldr	r3, [r4, #0]
 8011e04:	4631      	mov	r1, r6
 8011e06:	4628      	mov	r0, r5
 8011e08:	f8cc 3000 	str.w	r3, [ip]
 8011e0c:	682b      	ldr	r3, [r5, #0]
 8011e0e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011e12:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011e14:	f8cd 8008 	str.w	r8, [sp, #8]
 8011e18:	9201      	str	r2, [sp, #4]
 8011e1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011e1c:	9200      	str	r2, [sp, #0]
 8011e1e:	aa07      	add	r2, sp, #28
 8011e20:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8011e22:	463b      	mov	r3, r7
 8011e24:	47a0      	blx	r4
 8011e26:	b017      	add	sp, #92	; 0x5c
 8011e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e2c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e30:	b08d      	sub	sp, #52	; 0x34
 8011e32:	4688      	mov	r8, r1
 8011e34:	f8d3 c000 	ldr.w	ip, [r3]
 8011e38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011e3a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8011e3e:	680f      	ldr	r7, [r1, #0]
 8011e40:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8011e44:	eba7 070c 	sub.w	r7, r7, ip
 8011e48:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8011e4c:	edd3 6a07 	vldr	s13, [r3, #28]
 8011e50:	42bc      	cmp	r4, r7
 8011e52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e54:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8011e58:	bfa8      	it	ge
 8011e5a:	463c      	movge	r4, r7
 8011e5c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011e60:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011e64:	ee07 4a90 	vmov	s15, r4
 8011e68:	eb09 0e0c 	add.w	lr, r9, ip
 8011e6c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8011e70:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011e74:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011e78:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8011e7c:	4571      	cmp	r1, lr
 8011e7e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011e82:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011e86:	ee25 5a27 	vmul.f32	s10, s10, s15
 8011e8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011e8e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8011e92:	ee32 1a05 	vadd.f32	s2, s4, s10
 8011e96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011e9a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8011e9e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011ea2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011ea6:	f340 808c 	ble.w	8011fc2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8011eaa:	eba1 060e 	sub.w	r6, r1, lr
 8011eae:	fb96 f5f4 	sdiv	r5, r6, r4
 8011eb2:	ee07 5a10 	vmov	s14, r5
 8011eb6:	2d00      	cmp	r5, #0
 8011eb8:	fb04 6615 	mls	r6, r4, r5, r6
 8011ebc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011ec0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011ec4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011ec8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8011ecc:	dd12      	ble.n	8011ef4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8011ece:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011ed2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011ed6:	ee31 2a45 	vsub.f32	s4, s2, s10
 8011eda:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee2:	bf14      	ite	ne
 8011ee4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011ee8:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011eec:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011ef0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011ef4:	fb05 f204 	mul.w	r2, r5, r4
 8011ef8:	1abf      	subs	r7, r7, r2
 8011efa:	4494      	add	ip, r2
 8011efc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011f00:	4411      	add	r1, r2
 8011f02:	eb09 020c 	add.w	r2, r9, ip
 8011f06:	b209      	sxth	r1, r1
 8011f08:	443a      	add	r2, r7
 8011f0a:	428a      	cmp	r2, r1
 8011f0c:	bfc4      	itt	gt
 8011f0e:	eba1 0209 	subgt.w	r2, r1, r9
 8011f12:	eba2 070c 	subgt.w	r7, r2, ip
 8011f16:	2f00      	cmp	r7, #0
 8011f18:	dd50      	ble.n	8011fbc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8011f1a:	fb97 f1f4 	sdiv	r1, r7, r4
 8011f1e:	fb04 7211 	mls	r2, r4, r1, r7
 8011f22:	b90a      	cbnz	r2, 8011f28 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011f24:	3901      	subs	r1, #1
 8011f26:	4622      	mov	r2, r4
 8011f28:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011f2c:	6840      	ldr	r0, [r0, #4]
 8011f2e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8011f32:	44b6      	add	lr, r6
 8011f34:	f8d0 a000 	ldr.w	sl, [r0]
 8011f38:	2900      	cmp	r1, #0
 8011f3a:	bfcc      	ite	gt
 8011f3c:	46a1      	movgt	r9, r4
 8011f3e:	4691      	movle	r9, r2
 8011f40:	900b      	str	r0, [sp, #44]	; 0x2c
 8011f42:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011f44:	fb04 e505 	mla	r5, r4, r5, lr
 8011f48:	eef0 6a42 	vmov.f32	s13, s4
 8011f4c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011f50:	9008      	str	r0, [sp, #32]
 8011f52:	eeb0 7a61 	vmov.f32	s14, s3
 8011f56:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011f58:	695b      	ldr	r3, [r3, #20]
 8011f5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011f5e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011f62:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011f66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011f68:	445b      	add	r3, fp
 8011f6a:	9307      	str	r3, [sp, #28]
 8011f6c:	ee16 3a90 	vmov	r3, s13
 8011f70:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011f74:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011f78:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011f7c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011f80:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011f84:	ee17 7a90 	vmov	r7, s15
 8011f88:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011f8c:	fb97 f7f4 	sdiv	r7, r7, r4
 8011f90:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011f94:	ee17 ca90 	vmov	ip, s15
 8011f98:	fb9c fcf4 	sdiv	ip, ip, r4
 8011f9c:	fb0c 3306 	mla	r3, ip, r6, r3
 8011fa0:	9302      	str	r3, [sp, #8]
 8011fa2:	ee17 3a10 	vmov	r3, s14
 8011fa6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8011faa:	fb07 3706 	mla	r7, r7, r6, r3
 8011fae:	eba9 0306 	sub.w	r3, r9, r6
 8011fb2:	e9cd 4700 	strd	r4, r7, [sp]
 8011fb6:	f8da 4008 	ldr.w	r4, [sl, #8]
 8011fba:	47a0      	blx	r4
 8011fbc:	b00d      	add	sp, #52	; 0x34
 8011fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc2:	2500      	movs	r5, #0
 8011fc4:	462e      	mov	r6, r5
 8011fc6:	e799      	b.n	8011efc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011fc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fcc:	b0db      	sub	sp, #364	; 0x16c
 8011fce:	461d      	mov	r5, r3
 8011fd0:	4614      	mov	r4, r2
 8011fd2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8011fd6:	910f      	str	r1, [sp, #60]	; 0x3c
 8011fd8:	4629      	mov	r1, r5
 8011fda:	930a      	str	r3, [sp, #40]	; 0x28
 8011fdc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8011fe0:	9009      	str	r0, [sp, #36]	; 0x24
 8011fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fe4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8011fe8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8011fec:	9310      	str	r3, [sp, #64]	; 0x40
 8011fee:	6803      	ldr	r3, [r0, #0]
 8011ff0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8011ff2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ff6:	47b8      	blx	r7
 8011ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ffa:	6058      	str	r0, [r3, #4]
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	f000 83a1 	beq.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012002:	682b      	ldr	r3, [r5, #0]
 8012004:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012008:	ed94 7a02 	vldr	s14, [r4, #8]
 801200c:	9314      	str	r3, [sp, #80]	; 0x50
 801200e:	686b      	ldr	r3, [r5, #4]
 8012010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012014:	9315      	str	r3, [sp, #84]	; 0x54
 8012016:	4bc1      	ldr	r3, [pc, #772]	; (801231c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012018:	7819      	ldrb	r1, [r3, #0]
 801201a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801201e:	2900      	cmp	r1, #0
 8012020:	bf16      	itet	ne
 8012022:	4619      	movne	r1, r3
 8012024:	4611      	moveq	r1, r2
 8012026:	4613      	movne	r3, r2
 8012028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202c:	9116      	str	r1, [sp, #88]	; 0x58
 801202e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8012032:	f240 8387 	bls.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012036:	ed94 7a07 	vldr	s14, [r4, #28]
 801203a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012042:	f240 837f 	bls.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012046:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801204a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012052:	f240 8377 	bls.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012056:	6822      	ldr	r2, [r4, #0]
 8012058:	4bb1      	ldr	r3, [pc, #708]	; (8012320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801205a:	429a      	cmp	r2, r3
 801205c:	f2c0 8372 	blt.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012060:	49b0      	ldr	r1, [pc, #704]	; (8012324 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8012062:	6963      	ldr	r3, [r4, #20]
 8012064:	428a      	cmp	r2, r1
 8012066:	f300 836d 	bgt.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801206a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801206e:	48ae      	ldr	r0, [pc, #696]	; (8012328 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8012070:	33ff      	adds	r3, #255	; 0xff
 8012072:	4283      	cmp	r3, r0
 8012074:	f200 8366 	bhi.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012078:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801207a:	4dac      	ldr	r5, [pc, #688]	; (801232c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801207c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012080:	33ff      	adds	r3, #255	; 0xff
 8012082:	42ab      	cmp	r3, r5
 8012084:	f200 835e 	bhi.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012088:	6862      	ldr	r2, [r4, #4]
 801208a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801208e:	33ff      	adds	r3, #255	; 0xff
 8012090:	4283      	cmp	r3, r0
 8012092:	f200 8357 	bhi.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012096:	69a1      	ldr	r1, [r4, #24]
 8012098:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801209c:	33ff      	adds	r3, #255	; 0xff
 801209e:	4283      	cmp	r3, r0
 80120a0:	f200 8350 	bhi.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80120a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80120a6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80120aa:	30ff      	adds	r0, #255	; 0xff
 80120ac:	42a8      	cmp	r0, r5
 80120ae:	f200 8349 	bhi.w	8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80120b2:	428a      	cmp	r2, r1
 80120b4:	f280 8110 	bge.w	80122d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80120b8:	429a      	cmp	r2, r3
 80120ba:	f300 8119 	bgt.w	80122f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80120be:	4299      	cmp	r1, r3
 80120c0:	f280 811d 	bge.w	80122fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80120c4:	2502      	movs	r5, #2
 80120c6:	2701      	movs	r7, #1
 80120c8:	46a9      	mov	r9, r5
 80120ca:	46b8      	mov	r8, r7
 80120cc:	f04f 0a00 	mov.w	sl, #0
 80120d0:	4621      	mov	r1, r4
 80120d2:	a849      	add	r0, sp, #292	; 0x124
 80120d4:	f003 fe0c 	bl	8015cf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80120d8:	4622      	mov	r2, r4
 80120da:	4653      	mov	r3, sl
 80120dc:	a949      	add	r1, sp, #292	; 0x124
 80120de:	f8cd 9000 	str.w	r9, [sp]
 80120e2:	a819      	add	r0, sp, #100	; 0x64
 80120e4:	f003 ff34 	bl	8015f50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80120e8:	4622      	mov	r2, r4
 80120ea:	4653      	mov	r3, sl
 80120ec:	a949      	add	r1, sp, #292	; 0x124
 80120ee:	f8cd 8000 	str.w	r8, [sp]
 80120f2:	a829      	add	r0, sp, #164	; 0xa4
 80120f4:	f003 ff2c 	bl	8015f50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80120f8:	4643      	mov	r3, r8
 80120fa:	4622      	mov	r2, r4
 80120fc:	a949      	add	r1, sp, #292	; 0x124
 80120fe:	f8cd 9000 	str.w	r9, [sp]
 8012102:	a839      	add	r0, sp, #228	; 0xe4
 8012104:	f003 ff24 	bl	8015f50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012108:	42af      	cmp	r7, r5
 801210a:	af12      	add	r7, sp, #72	; 0x48
 801210c:	bfb7      	itett	lt
 801210e:	2300      	movlt	r3, #0
 8012110:	2301      	movge	r3, #1
 8012112:	ad29      	addlt	r5, sp, #164	; 0xa4
 8012114:	ac19      	addlt	r4, sp, #100	; 0x64
 8012116:	bfb1      	iteee	lt
 8012118:	930e      	strlt	r3, [sp, #56]	; 0x38
 801211a:	ad19      	addge	r5, sp, #100	; 0x64
 801211c:	930e      	strge	r3, [sp, #56]	; 0x38
 801211e:	ac29      	addge	r4, sp, #164	; 0xa4
 8012120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012122:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012126:	e887 0003 	stmia.w	r7, {r0, r1}
 801212a:	b928      	cbnz	r0, 8012138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801212c:	4b80      	ldr	r3, [pc, #512]	; (8012330 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801212e:	6818      	ldr	r0, [r3, #0]
 8012130:	6803      	ldr	r3, [r0, #0]
 8012132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012134:	4798      	blx	r3
 8012136:	6038      	str	r0, [r7, #0]
 8012138:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801213a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801213e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012142:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8012144:	930c      	str	r3, [sp, #48]	; 0x30
 8012146:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012148:	6963      	ldr	r3, [r4, #20]
 801214a:	440b      	add	r3, r1
 801214c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012150:	4408      	add	r0, r1
 8012152:	b200      	sxth	r0, r0
 8012154:	4283      	cmp	r3, r0
 8012156:	900d      	str	r0, [sp, #52]	; 0x34
 8012158:	f280 80dd 	bge.w	8012316 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801215c:	428b      	cmp	r3, r1
 801215e:	da08      	bge.n	8012172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012160:	2a00      	cmp	r2, #0
 8012162:	dd06      	ble.n	8012172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012164:	1acb      	subs	r3, r1, r3
 8012166:	429a      	cmp	r2, r3
 8012168:	f2c0 80e4 	blt.w	8012334 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801216c:	2b00      	cmp	r3, #0
 801216e:	f300 80e2 	bgt.w	8012336 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8012172:	6967      	ldr	r7, [r4, #20]
 8012174:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801217a:	443b      	add	r3, r7
 801217c:	461f      	mov	r7, r3
 801217e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012180:	1bdf      	subs	r7, r3, r7
 8012182:	4297      	cmp	r7, r2
 8012184:	bfa8      	it	ge
 8012186:	4617      	movge	r7, r2
 8012188:	2f00      	cmp	r7, #0
 801218a:	f340 8166 	ble.w	801245a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801218e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012190:	6829      	ldr	r1, [r5, #0]
 8012192:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012196:	f9bb 3000 	ldrsh.w	r3, [fp]
 801219a:	4411      	add	r1, r2
 801219c:	6820      	ldr	r0, [r4, #0]
 801219e:	4299      	cmp	r1, r3
 80121a0:	dd1a      	ble.n	80121d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80121a2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80121a6:	4402      	add	r2, r0
 80121a8:	440b      	add	r3, r1
 80121aa:	b21b      	sxth	r3, r3
 80121ac:	429a      	cmp	r2, r3
 80121ae:	dc13      	bgt.n	80121d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80121b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80121b2:	a912      	add	r1, sp, #72	; 0x48
 80121b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	9206      	str	r2, [sp, #24]
 80121bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121be:	9500      	str	r5, [sp, #0]
 80121c0:	9205      	str	r2, [sp, #20]
 80121c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121c4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80121c8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80121ca:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80121ce:	aa49      	add	r2, sp, #292	; 0x124
 80121d0:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 80121d4:	4623      	mov	r3, r4
 80121d6:	47c8      	blx	r9
 80121d8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80121dc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80121e0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80121e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121e8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80121ec:	68a1      	ldr	r1, [r4, #8]
 80121ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121f2:	ed94 6a08 	vldr	s12, [r4, #32]
 80121f6:	edd4 6a07 	vldr	s13, [r4, #28]
 80121fa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80121fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012202:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012206:	e9d4 2300 	ldrd	r2, r3, [r4]
 801220a:	edc4 6a07 	vstr	s13, [r4, #28]
 801220e:	441a      	add	r2, r3
 8012210:	6963      	ldr	r3, [r4, #20]
 8012212:	3301      	adds	r3, #1
 8012214:	6022      	str	r2, [r4, #0]
 8012216:	6163      	str	r3, [r4, #20]
 8012218:	69a3      	ldr	r3, [r4, #24]
 801221a:	3b01      	subs	r3, #1
 801221c:	61a3      	str	r3, [r4, #24]
 801221e:	6923      	ldr	r3, [r4, #16]
 8012220:	440b      	add	r3, r1
 8012222:	68e1      	ldr	r1, [r4, #12]
 8012224:	428b      	cmp	r3, r1
 8012226:	6123      	str	r3, [r4, #16]
 8012228:	db15      	blt.n	8012256 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801222a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801222e:	3201      	adds	r2, #1
 8012230:	1a5b      	subs	r3, r3, r1
 8012232:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012236:	6022      	str	r2, [r4, #0]
 8012238:	6123      	str	r3, [r4, #16]
 801223a:	edc4 6a07 	vstr	s13, [r4, #28]
 801223e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012242:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012246:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801224a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801224e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012252:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012256:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801225a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801225e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012266:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801226a:	68a9      	ldr	r1, [r5, #8]
 801226c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012270:	ed95 6a08 	vldr	s12, [r5, #32]
 8012274:	edd5 6a07 	vldr	s13, [r5, #28]
 8012278:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801227c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012280:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012284:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012288:	edc5 6a07 	vstr	s13, [r5, #28]
 801228c:	441a      	add	r2, r3
 801228e:	696b      	ldr	r3, [r5, #20]
 8012290:	3301      	adds	r3, #1
 8012292:	602a      	str	r2, [r5, #0]
 8012294:	616b      	str	r3, [r5, #20]
 8012296:	69ab      	ldr	r3, [r5, #24]
 8012298:	3b01      	subs	r3, #1
 801229a:	61ab      	str	r3, [r5, #24]
 801229c:	692b      	ldr	r3, [r5, #16]
 801229e:	440b      	add	r3, r1
 80122a0:	68e9      	ldr	r1, [r5, #12]
 80122a2:	428b      	cmp	r3, r1
 80122a4:	612b      	str	r3, [r5, #16]
 80122a6:	db15      	blt.n	80122d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80122a8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80122ac:	3201      	adds	r2, #1
 80122ae:	1a5b      	subs	r3, r3, r1
 80122b0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80122b4:	602a      	str	r2, [r5, #0]
 80122b6:	612b      	str	r3, [r5, #16]
 80122b8:	edc5 6a07 	vstr	s13, [r5, #28]
 80122bc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80122c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80122c4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80122c8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80122cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122d0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80122d4:	3f01      	subs	r7, #1
 80122d6:	e757      	b.n	8012188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80122d8:	4299      	cmp	r1, r3
 80122da:	dc13      	bgt.n	8012304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80122dc:	429a      	cmp	r2, r3
 80122de:	da14      	bge.n	801230a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80122e0:	2502      	movs	r5, #2
 80122e2:	2703      	movs	r7, #3
 80122e4:	f04f 0800 	mov.w	r8, #0
 80122e8:	46a9      	mov	r9, r5
 80122ea:	f04f 0a01 	mov.w	sl, #1
 80122ee:	e6ef      	b.n	80120d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80122f0:	2501      	movs	r5, #1
 80122f2:	2700      	movs	r7, #0
 80122f4:	46a9      	mov	r9, r5
 80122f6:	46b8      	mov	r8, r7
 80122f8:	f04f 0a02 	mov.w	sl, #2
 80122fc:	e6e8      	b.n	80120d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80122fe:	2501      	movs	r5, #1
 8012300:	2702      	movs	r7, #2
 8012302:	e6e1      	b.n	80120c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8012304:	2500      	movs	r5, #0
 8012306:	2701      	movs	r7, #1
 8012308:	e7f4      	b.n	80122f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801230a:	2702      	movs	r7, #2
 801230c:	2503      	movs	r5, #3
 801230e:	f04f 0900 	mov.w	r9, #0
 8012312:	46b8      	mov	r8, r7
 8012314:	e7e9      	b.n	80122ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8012316:	4613      	mov	r3, r2
 8012318:	e728      	b.n	801216c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801231a:	bf00      	nop
 801231c:	20060c28 	.word	0x20060c28
 8012320:	fffd8f01 	.word	0xfffd8f01
 8012324:	00027100 	.word	0x00027100
 8012328:	0004e1ff 	.word	0x0004e1ff
 801232c:	0004e1fe 	.word	0x0004e1fe
 8012330:	20060c30 	.word	0x20060c30
 8012334:	4613      	mov	r3, r2
 8012336:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012338:	469e      	mov	lr, r3
 801233a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801233c:	469c      	mov	ip, r3
 801233e:	9111      	str	r1, [sp, #68]	; 0x44
 8012340:	f04f 0900 	mov.w	r9, #0
 8012344:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8012348:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801234c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8012350:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8012354:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8012358:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801235c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8012360:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8012364:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8012368:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801236c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8012370:	f1bc 0f00 	cmp.w	ip, #0
 8012374:	d147      	bne.n	8012406 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012376:	eb03 0c07 	add.w	ip, r3, r7
 801237a:	1ad7      	subs	r7, r2, r3
 801237c:	f1b9 0f00 	cmp.w	r9, #0
 8012380:	d009      	beq.n	8012396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012382:	9029      	str	r0, [sp, #164]	; 0xa4
 8012384:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8012388:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801238c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8012390:	912d      	str	r1, [sp, #180]	; 0xb4
 8012392:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8012396:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012398:	f04f 0800 	mov.w	r8, #0
 801239c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80123a0:	9111      	str	r1, [sp, #68]	; 0x44
 80123a2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80123a6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80123aa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80123ae:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80123b2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80123b6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80123ba:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80123be:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80123c2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80123c6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80123ca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80123ce:	f1be 0f00 	cmp.w	lr, #0
 80123d2:	d031      	beq.n	8012438 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80123d4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80123d6:	4450      	add	r0, sl
 80123d8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80123dc:	4431      	add	r1, r6
 80123de:	ee37 7a04 	vadd.f32	s14, s14, s8
 80123e2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80123e6:	4549      	cmp	r1, r9
 80123e8:	db08      	blt.n	80123fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80123ea:	ee77 7a85 	vadd.f32	s15, s15, s10
 80123ee:	3001      	adds	r0, #1
 80123f0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80123f4:	eba1 0109 	sub.w	r1, r1, r9
 80123f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80123fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012400:	f04f 0801 	mov.w	r8, #1
 8012404:	e7e3      	b.n	80123ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8012406:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012408:	4450      	add	r0, sl
 801240a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801240e:	4431      	add	r1, r6
 8012410:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012414:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012418:	4541      	cmp	r1, r8
 801241a:	db08      	blt.n	801242e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801241c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012420:	3001      	adds	r0, #1
 8012422:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012426:	eba1 0108 	sub.w	r1, r1, r8
 801242a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801242e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012432:	f04f 0901 	mov.w	r9, #1
 8012436:	e79b      	b.n	8012370 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012438:	449c      	add	ip, r3
 801243a:	1aff      	subs	r7, r7, r3
 801243c:	f1b8 0f00 	cmp.w	r8, #0
 8012440:	d009      	beq.n	8012456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8012442:	9019      	str	r0, [sp, #100]	; 0x64
 8012444:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012448:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801244c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012450:	911d      	str	r1, [sp, #116]	; 0x74
 8012452:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012456:	1ad2      	subs	r2, r2, r3
 8012458:	e68b      	b.n	8012172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801245a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801245c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801245e:	2b00      	cmp	r3, #0
 8012460:	f000 80d1 	beq.w	8012606 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012464:	ad19      	add	r5, sp, #100	; 0x64
 8012466:	ac39      	add	r4, sp, #228	; 0xe4
 8012468:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801246a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801246e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012472:	930c      	str	r3, [sp, #48]	; 0x30
 8012474:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012476:	6963      	ldr	r3, [r4, #20]
 8012478:	440b      	add	r3, r1
 801247a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801247e:	4408      	add	r0, r1
 8012480:	b200      	sxth	r0, r0
 8012482:	4283      	cmp	r3, r0
 8012484:	900d      	str	r0, [sp, #52]	; 0x34
 8012486:	f280 80c1 	bge.w	801260c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801248a:	428b      	cmp	r3, r1
 801248c:	da08      	bge.n	80124a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801248e:	2a00      	cmp	r2, #0
 8012490:	dd06      	ble.n	80124a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012492:	1acb      	subs	r3, r1, r3
 8012494:	429a      	cmp	r2, r3
 8012496:	f2c0 80bb 	blt.w	8012610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801249a:	2b00      	cmp	r3, #0
 801249c:	f300 80b9 	bgt.w	8012612 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80124a0:	6967      	ldr	r7, [r4, #20]
 80124a2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80124a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124a8:	443b      	add	r3, r7
 80124aa:	461f      	mov	r7, r3
 80124ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124ae:	1bdf      	subs	r7, r3, r7
 80124b0:	4297      	cmp	r7, r2
 80124b2:	bfa8      	it	ge
 80124b4:	4617      	movge	r7, r2
 80124b6:	2f00      	cmp	r7, #0
 80124b8:	f340 813c 	ble.w	8012734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80124bc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80124be:	6829      	ldr	r1, [r5, #0]
 80124c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124c4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80124c8:	4411      	add	r1, r2
 80124ca:	6820      	ldr	r0, [r4, #0]
 80124cc:	4299      	cmp	r1, r3
 80124ce:	dd1a      	ble.n	8012506 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80124d0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80124d4:	4402      	add	r2, r0
 80124d6:	440b      	add	r3, r1
 80124d8:	b21b      	sxth	r3, r3
 80124da:	429a      	cmp	r2, r3
 80124dc:	dc13      	bgt.n	8012506 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80124de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80124e0:	a912      	add	r1, sp, #72	; 0x48
 80124e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	9206      	str	r2, [sp, #24]
 80124ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124ec:	9500      	str	r5, [sp, #0]
 80124ee:	9205      	str	r2, [sp, #20]
 80124f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124f2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80124f6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80124f8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80124fc:	aa49      	add	r2, sp, #292	; 0x124
 80124fe:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8012502:	4623      	mov	r3, r4
 8012504:	47c8      	blx	r9
 8012506:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801250a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801250e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012512:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012516:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801251a:	68a1      	ldr	r1, [r4, #8]
 801251c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012520:	ed94 6a08 	vldr	s12, [r4, #32]
 8012524:	edd4 6a07 	vldr	s13, [r4, #28]
 8012528:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801252c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012530:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012534:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012538:	edc4 6a07 	vstr	s13, [r4, #28]
 801253c:	441a      	add	r2, r3
 801253e:	6963      	ldr	r3, [r4, #20]
 8012540:	3301      	adds	r3, #1
 8012542:	6022      	str	r2, [r4, #0]
 8012544:	6163      	str	r3, [r4, #20]
 8012546:	69a3      	ldr	r3, [r4, #24]
 8012548:	3b01      	subs	r3, #1
 801254a:	61a3      	str	r3, [r4, #24]
 801254c:	6923      	ldr	r3, [r4, #16]
 801254e:	440b      	add	r3, r1
 8012550:	68e1      	ldr	r1, [r4, #12]
 8012552:	428b      	cmp	r3, r1
 8012554:	6123      	str	r3, [r4, #16]
 8012556:	db15      	blt.n	8012584 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012558:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801255c:	3201      	adds	r2, #1
 801255e:	1a5b      	subs	r3, r3, r1
 8012560:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012564:	6022      	str	r2, [r4, #0]
 8012566:	6123      	str	r3, [r4, #16]
 8012568:	edc4 6a07 	vstr	s13, [r4, #28]
 801256c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012570:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012574:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012578:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012580:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012584:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012588:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801258c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012594:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012598:	68a9      	ldr	r1, [r5, #8]
 801259a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801259e:	ed95 6a08 	vldr	s12, [r5, #32]
 80125a2:	edd5 6a07 	vldr	s13, [r5, #28]
 80125a6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80125aa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80125ae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80125b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80125b6:	edc5 6a07 	vstr	s13, [r5, #28]
 80125ba:	441a      	add	r2, r3
 80125bc:	696b      	ldr	r3, [r5, #20]
 80125be:	3301      	adds	r3, #1
 80125c0:	602a      	str	r2, [r5, #0]
 80125c2:	616b      	str	r3, [r5, #20]
 80125c4:	69ab      	ldr	r3, [r5, #24]
 80125c6:	3b01      	subs	r3, #1
 80125c8:	61ab      	str	r3, [r5, #24]
 80125ca:	692b      	ldr	r3, [r5, #16]
 80125cc:	440b      	add	r3, r1
 80125ce:	68e9      	ldr	r1, [r5, #12]
 80125d0:	428b      	cmp	r3, r1
 80125d2:	612b      	str	r3, [r5, #16]
 80125d4:	db15      	blt.n	8012602 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80125d6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80125da:	3201      	adds	r2, #1
 80125dc:	1a5b      	subs	r3, r3, r1
 80125de:	ee76 6a26 	vadd.f32	s13, s12, s13
 80125e2:	602a      	str	r2, [r5, #0]
 80125e4:	612b      	str	r3, [r5, #16]
 80125e6:	edc5 6a07 	vstr	s13, [r5, #28]
 80125ea:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80125ee:	ee36 7a87 	vadd.f32	s14, s13, s14
 80125f2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80125f6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80125fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125fe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012602:	3f01      	subs	r7, #1
 8012604:	e757      	b.n	80124b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012606:	ad39      	add	r5, sp, #228	; 0xe4
 8012608:	ac19      	add	r4, sp, #100	; 0x64
 801260a:	e72d      	b.n	8012468 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801260c:	4613      	mov	r3, r2
 801260e:	e744      	b.n	801249a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012610:	4613      	mov	r3, r2
 8012612:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8012614:	469e      	mov	lr, r3
 8012616:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801261a:	461f      	mov	r7, r3
 801261c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8012620:	f04f 0900 	mov.w	r9, #0
 8012624:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8012628:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801262c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8012630:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8012634:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8012638:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801263a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801263e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8012642:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8012646:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801264a:	960e      	str	r6, [sp, #56]	; 0x38
 801264c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8012650:	2f00      	cmp	r7, #0
 8012652:	d146      	bne.n	80126e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012654:	449c      	add	ip, r3
 8012656:	1ad7      	subs	r7, r2, r3
 8012658:	f1b9 0f00 	cmp.w	r9, #0
 801265c:	d009      	beq.n	8012672 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801265e:	9039      	str	r0, [sp, #228]	; 0xe4
 8012660:	913d      	str	r1, [sp, #244]	; 0xf4
 8012662:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8012666:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801266a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801266e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8012672:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012674:	f04f 0800 	mov.w	r8, #0
 8012678:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801267c:	910e      	str	r1, [sp, #56]	; 0x38
 801267e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012682:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8012686:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801268a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801268e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012692:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8012696:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801269a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801269e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80126a2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80126a6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80126aa:	f1be 0f00 	cmp.w	lr, #0
 80126ae:	d030      	beq.n	8012712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80126b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80126b2:	4450      	add	r0, sl
 80126b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80126b8:	4431      	add	r1, r6
 80126ba:	ee37 7a04 	vadd.f32	s14, s14, s8
 80126be:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80126c2:	4549      	cmp	r1, r9
 80126c4:	db08      	blt.n	80126d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80126c6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80126ca:	3001      	adds	r0, #1
 80126cc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80126d0:	eba1 0109 	sub.w	r1, r1, r9
 80126d4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80126d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80126dc:	f04f 0801 	mov.w	r8, #1
 80126e0:	e7e3      	b.n	80126aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80126e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80126e4:	4450      	add	r0, sl
 80126e6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80126ea:	4431      	add	r1, r6
 80126ec:	ee77 7a84 	vadd.f32	s15, s15, s8
 80126f0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80126f4:	4541      	cmp	r1, r8
 80126f6:	db08      	blt.n	801270a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80126f8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80126fc:	3001      	adds	r0, #1
 80126fe:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012702:	eba1 0108 	sub.w	r1, r1, r8
 8012706:	ee77 7a86 	vadd.f32	s15, s15, s12
 801270a:	3f01      	subs	r7, #1
 801270c:	f04f 0901 	mov.w	r9, #1
 8012710:	e79e      	b.n	8012650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8012712:	449c      	add	ip, r3
 8012714:	1aff      	subs	r7, r7, r3
 8012716:	f1b8 0f00 	cmp.w	r8, #0
 801271a:	d009      	beq.n	8012730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801271c:	9019      	str	r0, [sp, #100]	; 0x64
 801271e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012722:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012726:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801272a:	911d      	str	r1, [sp, #116]	; 0x74
 801272c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012730:	1ad2      	subs	r2, r2, r3
 8012732:	e6b5      	b.n	80124a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	b923      	cbnz	r3, 8012744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801273a:	4b04      	ldr	r3, [pc, #16]	; (801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801273c:	6818      	ldr	r0, [r3, #0]
 801273e:	6803      	ldr	r3, [r0, #0]
 8012740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012742:	4798      	blx	r3
 8012744:	b05b      	add	sp, #364	; 0x16c
 8012746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801274a:	bf00      	nop
 801274c:	20060c30 	.word	0x20060c30

08012750 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8012750:	b570      	push	{r4, r5, r6, lr}
 8012752:	4604      	mov	r4, r0
 8012754:	2500      	movs	r5, #0
 8012756:	9804      	ldr	r0, [sp, #16]
 8012758:	7223      	strb	r3, [r4, #8]
 801275a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801275e:	8025      	strh	r5, [r4, #0]
 8012760:	6061      	str	r1, [r4, #4]
 8012762:	7263      	strb	r3, [r4, #9]
 8012764:	60e0      	str	r0, [r4, #12]
 8012766:	8222      	strh	r2, [r4, #16]
 8012768:	8265      	strh	r5, [r4, #18]
 801276a:	82a5      	strh	r5, [r4, #20]
 801276c:	82e5      	strh	r5, [r4, #22]
 801276e:	8325      	strh	r5, [r4, #24]
 8012770:	8365      	strh	r5, [r4, #26]
 8012772:	83a5      	strh	r5, [r4, #28]
 8012774:	77a5      	strb	r5, [r4, #30]
 8012776:	6803      	ldr	r3, [r0, #0]
 8012778:	695b      	ldr	r3, [r3, #20]
 801277a:	4798      	blx	r3
 801277c:	4606      	mov	r6, r0
 801277e:	b1f8      	cbz	r0, 80127c0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8012780:	68e0      	ldr	r0, [r4, #12]
 8012782:	4631      	mov	r1, r6
 8012784:	6803      	ldr	r3, [r0, #0]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	4798      	blx	r3
 801278a:	7b43      	ldrb	r3, [r0, #13]
 801278c:	7a82      	ldrb	r2, [r0, #10]
 801278e:	4605      	mov	r5, r0
 8012790:	005b      	lsls	r3, r3, #1
 8012792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012796:	4313      	orrs	r3, r2
 8012798:	83a3      	strh	r3, [r4, #28]
 801279a:	7a63      	ldrb	r3, [r4, #9]
 801279c:	2b04      	cmp	r3, #4
 801279e:	d10f      	bne.n	80127c0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80127a0:	68e0      	ldr	r0, [r4, #12]
 80127a2:	462a      	mov	r2, r5
 80127a4:	4631      	mov	r1, r6
 80127a6:	6803      	ldr	r3, [r0, #0]
 80127a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127aa:	4798      	blx	r3
 80127ac:	7b6b      	ldrb	r3, [r5, #13]
 80127ae:	005b      	lsls	r3, r3, #1
 80127b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80127b4:	7aab      	ldrb	r3, [r5, #10]
 80127b6:	4313      	orrs	r3, r2
 80127b8:	4418      	add	r0, r3
 80127ba:	8ba3      	ldrh	r3, [r4, #28]
 80127bc:	4418      	add	r0, r3
 80127be:	83a0      	strh	r0, [r4, #28]
 80127c0:	4620      	mov	r0, r4
 80127c2:	bd70      	pop	{r4, r5, r6, pc}

080127c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80127c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c8:	2400      	movs	r4, #0
 80127ca:	b085      	sub	sp, #20
 80127cc:	4681      	mov	r9, r0
 80127ce:	4688      	mov	r8, r1
 80127d0:	4692      	mov	sl, r2
 80127d2:	469b      	mov	fp, r3
 80127d4:	4627      	mov	r7, r4
 80127d6:	4625      	mov	r5, r4
 80127d8:	4626      	mov	r6, r4
 80127da:	4554      	cmp	r4, sl
 80127dc:	da2a      	bge.n	8012834 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80127de:	2300      	movs	r3, #0
 80127e0:	9303      	str	r3, [sp, #12]
 80127e2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80127e6:	429d      	cmp	r5, r3
 80127e8:	d004      	beq.n	80127f4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80127ea:	f242 030b 	movw	r3, #8203	; 0x200b
 80127ee:	429d      	cmp	r5, r3
 80127f0:	bf18      	it	ne
 80127f2:	462f      	movne	r7, r5
 80127f4:	ab03      	add	r3, sp, #12
 80127f6:	4642      	mov	r2, r8
 80127f8:	4659      	mov	r1, fp
 80127fa:	4648      	mov	r0, r9
 80127fc:	f002 fffc 	bl	80157f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012800:	4605      	mov	r5, r0
 8012802:	b1b8      	cbz	r0, 8012834 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012804:	280a      	cmp	r0, #10
 8012806:	d015      	beq.n	8012834 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012808:	9a03      	ldr	r2, [sp, #12]
 801280a:	b18a      	cbz	r2, 8012830 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801280c:	7b50      	ldrb	r0, [r2, #13]
 801280e:	4639      	mov	r1, r7
 8012810:	7a93      	ldrb	r3, [r2, #10]
 8012812:	0040      	lsls	r0, r0, #1
 8012814:	8895      	ldrh	r5, [r2, #4]
 8012816:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801281a:	4303      	orrs	r3, r0
 801281c:	4640      	mov	r0, r8
 801281e:	9301      	str	r3, [sp, #4]
 8012820:	f8d8 3000 	ldr.w	r3, [r8]
 8012824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012826:	4798      	blx	r3
 8012828:	9b01      	ldr	r3, [sp, #4]
 801282a:	4418      	add	r0, r3
 801282c:	4406      	add	r6, r0
 801282e:	b2b6      	uxth	r6, r6
 8012830:	3401      	adds	r4, #1
 8012832:	e7d2      	b.n	80127da <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8012834:	4630      	mov	r0, r6
 8012836:	b005      	add	sp, #20
 8012838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801283c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801283c:	2a02      	cmp	r2, #2
 801283e:	b530      	push	{r4, r5, lr}
 8012840:	d011      	beq.n	8012866 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8012842:	2a03      	cmp	r2, #3
 8012844:	d01c      	beq.n	8012880 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8012846:	2a01      	cmp	r2, #1
 8012848:	d10c      	bne.n	8012864 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801284a:	888b      	ldrh	r3, [r1, #4]
 801284c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012850:	8801      	ldrh	r1, [r0, #0]
 8012852:	1a9b      	subs	r3, r3, r2
 8012854:	8844      	ldrh	r4, [r0, #2]
 8012856:	1a5b      	subs	r3, r3, r1
 8012858:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801285c:	8004      	strh	r4, [r0, #0]
 801285e:	8043      	strh	r3, [r0, #2]
 8012860:	8081      	strh	r1, [r0, #4]
 8012862:	80c2      	strh	r2, [r0, #6]
 8012864:	bd30      	pop	{r4, r5, pc}
 8012866:	88cb      	ldrh	r3, [r1, #6]
 8012868:	88c2      	ldrh	r2, [r0, #6]
 801286a:	1a9b      	subs	r3, r3, r2
 801286c:	8842      	ldrh	r2, [r0, #2]
 801286e:	1a9b      	subs	r3, r3, r2
 8012870:	888a      	ldrh	r2, [r1, #4]
 8012872:	8881      	ldrh	r1, [r0, #4]
 8012874:	8043      	strh	r3, [r0, #2]
 8012876:	1a52      	subs	r2, r2, r1
 8012878:	8801      	ldrh	r1, [r0, #0]
 801287a:	1a52      	subs	r2, r2, r1
 801287c:	8002      	strh	r2, [r0, #0]
 801287e:	e7f1      	b.n	8012864 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012880:	88cb      	ldrh	r3, [r1, #6]
 8012882:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012886:	8841      	ldrh	r1, [r0, #2]
 8012888:	1a9b      	subs	r3, r3, r2
 801288a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801288e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8012892:	1a5b      	subs	r3, r3, r1
 8012894:	8045      	strh	r5, [r0, #2]
 8012896:	8082      	strh	r2, [r0, #4]
 8012898:	8003      	strh	r3, [r0, #0]
 801289a:	80c4      	strh	r4, [r0, #6]
 801289c:	e7e2      	b.n	8012864 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801289e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801289e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a2:	b09f      	sub	sp, #124	; 0x7c
 80128a4:	9116      	str	r1, [sp, #88]	; 0x58
 80128a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80128a8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80128aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80128ac:	8809      	ldrh	r1, [r1, #0]
 80128ae:	889b      	ldrh	r3, [r3, #4]
 80128b0:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80128b4:	440b      	add	r3, r1
 80128b6:	9212      	str	r2, [sp, #72]	; 0x48
 80128b8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80128bc:	b21b      	sxth	r3, r3
 80128be:	9011      	str	r0, [sp, #68]	; 0x44
 80128c0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80128c4:	9310      	str	r3, [sp, #64]	; 0x40
 80128c6:	f8d8 3000 	ldr.w	r3, [r8]
 80128ca:	7a59      	ldrb	r1, [r3, #9]
 80128cc:	7a1b      	ldrb	r3, [r3, #8]
 80128ce:	9114      	str	r1, [sp, #80]	; 0x50
 80128d0:	9315      	str	r3, [sp, #84]	; 0x54
 80128d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80128d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80128d8:	2a00      	cmp	r2, #0
 80128da:	d067      	beq.n	80129ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 80128dc:	f898 3010 	ldrb.w	r3, [r8, #16]
 80128e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80128e2:	2b04      	cmp	r3, #4
 80128e4:	bf14      	ite	ne
 80128e6:	2301      	movne	r3, #1
 80128e8:	2302      	moveq	r3, #2
 80128ea:	4413      	add	r3, r2
 80128ec:	f04f 0900 	mov.w	r9, #0
 80128f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80128f2:	464c      	mov	r4, r9
 80128f4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80128f8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80128fc:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8012900:	4293      	cmp	r3, r2
 8012902:	f280 808c 	bge.w	8012a1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8012906:	2300      	movs	r3, #0
 8012908:	931c      	str	r3, [sp, #112]	; 0x70
 801290a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801290e:	429c      	cmp	r4, r3
 8012910:	d006      	beq.n	8012920 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8012912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012914:	f242 020b 	movw	r2, #8203	; 0x200b
 8012918:	4294      	cmp	r4, r2
 801291a:	bf18      	it	ne
 801291c:	4623      	movne	r3, r4
 801291e:	930d      	str	r3, [sp, #52]	; 0x34
 8012920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012922:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8012924:	f8d8 2000 	ldr.w	r2, [r8]
 8012928:	428b      	cmp	r3, r1
 801292a:	db41      	blt.n	80129b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801292c:	6813      	ldr	r3, [r2, #0]
 801292e:	4610      	mov	r0, r2
 8012930:	695b      	ldr	r3, [r3, #20]
 8012932:	4798      	blx	r3
 8012934:	4604      	mov	r4, r0
 8012936:	f8d8 0000 	ldr.w	r0, [r8]
 801293a:	aa1d      	add	r2, sp, #116	; 0x74
 801293c:	4621      	mov	r1, r4
 801293e:	6803      	ldr	r3, [r0, #0]
 8012940:	689e      	ldr	r6, [r3, #8]
 8012942:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8012946:	47b0      	blx	r6
 8012948:	901c      	str	r0, [sp, #112]	; 0x70
 801294a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801294e:	429c      	cmp	r4, r3
 8012950:	f000 80ea 	beq.w	8012b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8012954:	f242 030b 	movw	r3, #8203	; 0x200b
 8012958:	429c      	cmp	r4, r3
 801295a:	f000 80e5 	beq.w	8012b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801295e:	2c00      	cmp	r4, #0
 8012960:	f000 80f7 	beq.w	8012b52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8012964:	2c0a      	cmp	r4, #10
 8012966:	d060      	beq.n	8012a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8012968:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801296a:	b36a      	cbz	r2, 80129c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801296c:	8894      	ldrh	r4, [r2, #4]
 801296e:	f1bb 0f00 	cmp.w	fp, #0
 8012972:	d03b      	beq.n	80129ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8012974:	f892 900d 	ldrb.w	r9, [r2, #13]
 8012978:	f1bb 0f01 	cmp.w	fp, #1
 801297c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8012980:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8012984:	f892 900a 	ldrb.w	r9, [r2, #10]
 8012988:	ea49 0903 	orr.w	r9, r9, r3
 801298c:	d134      	bne.n	80129f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801298e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012990:	eba5 0509 	sub.w	r5, r5, r9
 8012994:	2b00      	cmp	r3, #0
 8012996:	d14f      	bne.n	8012a38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8012998:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801299a:	eb09 0305 	add.w	r3, r9, r5
 801299e:	4413      	add	r3, r2
 80129a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80129a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80129a6:	4293      	cmp	r3, r2
 80129a8:	da51      	bge.n	8012a4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80129aa:	e038      	b.n	8012a1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80129ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80129ae:	e79d      	b.n	80128ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 80129b0:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80129b4:	4659      	mov	r1, fp
 80129b6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80129b8:	9301      	str	r3, [sp, #4]
 80129ba:	ab1d      	add	r3, sp, #116	; 0x74
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	ab1c      	add	r3, sp, #112	; 0x70
 80129c0:	f002 ff72 	bl	80158a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80129c4:	4604      	mov	r4, r0
 80129c6:	e7c0      	b.n	801294a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 80129c8:	f8d8 0000 	ldr.w	r0, [r8]
 80129cc:	6803      	ldr	r3, [r0, #0]
 80129ce:	691b      	ldr	r3, [r3, #16]
 80129d0:	4798      	blx	r3
 80129d2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80129d6:	4298      	cmp	r0, r3
 80129d8:	f000 80a6 	beq.w	8012b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80129dc:	f242 030b 	movw	r3, #8203	; 0x200b
 80129e0:	4298      	cmp	r0, r3
 80129e2:	f000 80a1 	beq.w	8012b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80129e6:	f1bb 0f00 	cmp.w	fp, #0
 80129ea:	d100      	bne.n	80129ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80129ec:	444d      	add	r5, r9
 80129ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80129f0:	2a00      	cmp	r2, #0
 80129f2:	d1bf      	bne.n	8012974 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80129f4:	4691      	mov	r9, r2
 80129f6:	e097      	b.n	8012b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80129f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	f000 80ab 	beq.w	8012b56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8012a00:	f1bb 0f00 	cmp.w	fp, #0
 8012a04:	d118      	bne.n	8012a38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8012a06:	f8d8 0000 	ldr.w	r0, [r8]
 8012a0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a0c:	6803      	ldr	r3, [r0, #0]
 8012a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a10:	4798      	blx	r3
 8012a12:	4405      	add	r5, r0
 8012a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a18:	1aeb      	subs	r3, r5, r3
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	dd17      	ble.n	8012a4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8012a1e:	2c00      	cmp	r4, #0
 8012a20:	f000 8097 	beq.w	8012b52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8012a24:	2c0a      	cmp	r4, #10
 8012a26:	f040 8085 	bne.w	8012b34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8012a2a:	240a      	movs	r4, #10
 8012a2c:	fab4 f084 	clz	r0, r4
 8012a30:	0940      	lsrs	r0, r0, #5
 8012a32:	b01f      	add	sp, #124	; 0x7c
 8012a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a38:	f8d8 0000 	ldr.w	r0, [r8]
 8012a3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a3e:	6803      	ldr	r3, [r0, #0]
 8012a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a42:	4798      	blx	r3
 8012a44:	f1bb 0f01 	cmp.w	fp, #1
 8012a48:	eba5 0500 	sub.w	r5, r5, r0
 8012a4c:	d0a4      	beq.n	8012998 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8012a4e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012a50:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012a52:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8012a56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012a5a:	7b43      	ldrb	r3, [r0, #13]
 8012a5c:	4429      	add	r1, r5
 8012a5e:	015b      	lsls	r3, r3, #5
 8012a60:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012a64:	7983      	ldrb	r3, [r0, #6]
 8012a66:	4313      	orrs	r3, r2
 8012a68:	440b      	add	r3, r1
 8012a6a:	42b3      	cmp	r3, r6
 8012a6c:	db5c      	blt.n	8012b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8012a6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a70:	4299      	cmp	r1, r3
 8012a72:	da59      	bge.n	8012b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8012a74:	f8d8 0000 	ldr.w	r0, [r8]
 8012a78:	42ae      	cmp	r6, r5
 8012a7a:	6803      	ldr	r3, [r0, #0]
 8012a7c:	bfcc      	ite	gt
 8012a7e:	1b76      	subgt	r6, r6, r5
 8012a80:	2600      	movle	r6, #0
 8012a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a84:	bfc8      	it	gt
 8012a86:	b2b6      	uxthgt	r6, r6
 8012a88:	4798      	blx	r3
 8012a8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012a8c:	7b5a      	ldrb	r2, [r3, #13]
 8012a8e:	00d1      	lsls	r1, r2, #3
 8012a90:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8012a94:	7a19      	ldrb	r1, [r3, #8]
 8012a96:	4339      	orrs	r1, r7
 8012a98:	0657      	lsls	r7, r2, #25
 8012a9a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8012a9c:	bf48      	it	mi
 8012a9e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8012aa2:	4407      	add	r7, r0
 8012aa4:	bf48      	it	mi
 8012aa6:	b209      	sxthmi	r1, r1
 8012aa8:	1a7f      	subs	r7, r7, r1
 8012aaa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012aac:	b2bf      	uxth	r7, r7
 8012aae:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8012ab2:	fa0f fa87 	sxth.w	sl, r7
 8012ab6:	4551      	cmp	r1, sl
 8012ab8:	dd3a      	ble.n	8012b30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8012aba:	0112      	lsls	r2, r2, #4
 8012abc:	79d8      	ldrb	r0, [r3, #7]
 8012abe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012ac2:	4302      	orrs	r2, r0
 8012ac4:	4492      	add	sl, r2
 8012ac6:	4551      	cmp	r1, sl
 8012ac8:	dc2e      	bgt.n	8012b28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8012aca:	1bcf      	subs	r7, r1, r7
 8012acc:	468a      	mov	sl, r1
 8012ace:	b2bf      	uxth	r7, r7
 8012ad0:	9319      	str	r3, [sp, #100]	; 0x64
 8012ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012ad4:	f8d8 0000 	ldr.w	r0, [r8]
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	6801      	ldr	r1, [r0, #0]
 8012adc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8012ade:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012ae0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012ae2:	9218      	str	r2, [sp, #96]	; 0x60
 8012ae4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8012ae6:	4788      	blx	r1
 8012ae8:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012aec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012aee:	910b      	str	r1, [sp, #44]	; 0x2c
 8012af0:	f898 100e 	ldrb.w	r1, [r8, #14]
 8012af4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012af6:	910a      	str	r1, [sp, #40]	; 0x28
 8012af8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8012afc:	9109      	str	r1, [sp, #36]	; 0x24
 8012afe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012b02:	9305      	str	r3, [sp, #20]
 8012b04:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012b06:	9206      	str	r2, [sp, #24]
 8012b08:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012b0c:	442e      	add	r6, r5
 8012b0e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8012b12:	b236      	sxth	r6, r6
 8012b14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b16:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8012b1a:	9600      	str	r6, [sp, #0]
 8012b1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012b26:	47b0      	blx	r6
 8012b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8012b2e:	e6e5      	b.n	80128fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8012b30:	2700      	movs	r7, #0
 8012b32:	e7cd      	b.n	8012ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8012b34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012b36:	3501      	adds	r5, #1
 8012b38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012b3a:	429d      	cmp	r5, r3
 8012b3c:	f6bf af76 	bge.w	8012a2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8012b40:	4659      	mov	r1, fp
 8012b42:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012b44:	f7f3 f950 	bl	8005de8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012b48:	4604      	mov	r4, r0
 8012b4a:	b110      	cbz	r0, 8012b52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8012b4c:	280a      	cmp	r0, #10
 8012b4e:	d1f2      	bne.n	8012b36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8012b50:	e76b      	b.n	8012a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8012b52:	2400      	movs	r4, #0
 8012b54:	e76a      	b.n	8012a2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8012b56:	f1bb 0f00 	cmp.w	fp, #0
 8012b5a:	f43f af5b 	beq.w	8012a14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8012b5e:	e776      	b.n	8012a4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08012b60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8012b60:	b530      	push	{r4, r5, lr}
 8012b62:	8a44      	ldrh	r4, [r0, #18]
 8012b64:	8ac5      	ldrh	r5, [r0, #22]
 8012b66:	82c3      	strh	r3, [r0, #22]
 8012b68:	442c      	add	r4, r5
 8012b6a:	1ae4      	subs	r4, r4, r3
 8012b6c:	8b03      	ldrh	r3, [r0, #24]
 8012b6e:	8244      	strh	r4, [r0, #18]
 8012b70:	8a84      	ldrh	r4, [r0, #20]
 8012b72:	4422      	add	r2, r4
 8012b74:	440c      	add	r4, r1
 8012b76:	1a59      	subs	r1, r3, r1
 8012b78:	8342      	strh	r2, [r0, #26]
 8012b7a:	8284      	strh	r4, [r0, #20]
 8012b7c:	8301      	strh	r1, [r0, #24]
 8012b7e:	bd30      	pop	{r4, r5, pc}

08012b80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8012b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b84:	7a43      	ldrb	r3, [r0, #9]
 8012b86:	b087      	sub	sp, #28
 8012b88:	4604      	mov	r4, r0
 8012b8a:	460f      	mov	r7, r1
 8012b8c:	1eda      	subs	r2, r3, #3
 8012b8e:	b2d2      	uxtb	r2, r2
 8012b90:	2900      	cmp	r1, #0
 8012b92:	d036      	beq.n	8012c02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8012b94:	2a01      	cmp	r2, #1
 8012b96:	d932      	bls.n	8012bfe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8012b98:	1e58      	subs	r0, r3, #1
 8012b9a:	f1d0 0b00 	rsbs	fp, r0, #0
 8012b9e:	eb4b 0b00 	adc.w	fp, fp, r0
 8012ba2:	1e99      	subs	r1, r3, #2
 8012ba4:	424b      	negs	r3, r1
 8012ba6:	414b      	adcs	r3, r1
 8012ba8:	9303      	str	r3, [sp, #12]
 8012baa:	2300      	movs	r3, #0
 8012bac:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8012bb0:	2500      	movs	r5, #0
 8012bb2:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8012bb6:	46a9      	mov	r9, r5
 8012bb8:	8265      	strh	r5, [r4, #18]
 8012bba:	82a5      	strh	r5, [r4, #20]
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	9305      	str	r3, [sp, #20]
 8012bc0:	8823      	ldrh	r3, [r4, #0]
 8012bc2:	2b20      	cmp	r3, #32
 8012bc4:	d02b      	beq.n	8012c1e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8012bc6:	eba3 020a 	sub.w	r2, r3, sl
 8012bca:	4256      	negs	r6, r2
 8012bcc:	4156      	adcs	r6, r2
 8012bce:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d004      	beq.n	8012be0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8012bd6:	4553      	cmp	r3, sl
 8012bd8:	bf16      	itet	ne
 8012bda:	4699      	movne	r9, r3
 8012bdc:	2601      	moveq	r6, #1
 8012bde:	2600      	movne	r6, #0
 8012be0:	ab05      	add	r3, sp, #20
 8012be2:	68e2      	ldr	r2, [r4, #12]
 8012be4:	7a21      	ldrb	r1, [r4, #8]
 8012be6:	6860      	ldr	r0, [r4, #4]
 8012be8:	f002 fe06 	bl	80157f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012bec:	8020      	strh	r0, [r4, #0]
 8012bee:	b9c8      	cbnz	r0, 8012c24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8012bf0:	8b22      	ldrh	r2, [r4, #24]
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	4611      	mov	r1, r2
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	f7ff ffb2 	bl	8012b60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012bfc:	e066      	b.n	8012ccc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8012bfe:	468b      	mov	fp, r1
 8012c00:	e7cf      	b.n	8012ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8012c02:	3b01      	subs	r3, #1
 8012c04:	2a01      	cmp	r2, #1
 8012c06:	9103      	str	r1, [sp, #12]
 8012c08:	468b      	mov	fp, r1
 8012c0a:	bf8c      	ite	hi
 8012c0c:	2200      	movhi	r2, #0
 8012c0e:	2201      	movls	r2, #1
 8012c10:	2b01      	cmp	r3, #1
 8012c12:	9202      	str	r2, [sp, #8]
 8012c14:	bf8c      	ite	hi
 8012c16:	2300      	movhi	r3, #0
 8012c18:	2301      	movls	r3, #1
 8012c1a:	9301      	str	r3, [sp, #4]
 8012c1c:	e7c8      	b.n	8012bb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8012c1e:	4699      	mov	r9, r3
 8012c20:	2601      	movs	r6, #1
 8012c22:	e7dd      	b.n	8012be0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8012c24:	8ae3      	ldrh	r3, [r4, #22]
 8012c26:	280a      	cmp	r0, #10
 8012c28:	f103 0301 	add.w	r3, r3, #1
 8012c2c:	82e3      	strh	r3, [r4, #22]
 8012c2e:	d0df      	beq.n	8012bf0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8012c30:	9a05      	ldr	r2, [sp, #20]
 8012c32:	bb42      	cbnz	r2, 8012c86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8012c34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012c38:	4298      	cmp	r0, r3
 8012c3a:	d001      	beq.n	8012c40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8012c3c:	4550      	cmp	r0, sl
 8012c3e:	d1bd      	bne.n	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012c40:	8823      	ldrh	r3, [r4, #0]
 8012c42:	8b21      	ldrh	r1, [r4, #24]
 8012c44:	2b20      	cmp	r3, #32
 8012c46:	d001      	beq.n	8012c4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8012c48:	4553      	cmp	r3, sl
 8012c4a:	d131      	bne.n	8012cb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8012c4c:	2e00      	cmp	r6, #0
 8012c4e:	bf0a      	itet	eq
 8012c50:	460d      	moveq	r5, r1
 8012c52:	4630      	movne	r0, r6
 8012c54:	2001      	moveq	r0, #1
 8012c56:	440a      	add	r2, r1
 8012c58:	8aa3      	ldrh	r3, [r4, #20]
 8012c5a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012c5e:	b292      	uxth	r2, r2
 8012c60:	8322      	strh	r2, [r4, #24]
 8012c62:	4413      	add	r3, r2
 8012c64:	2f00      	cmp	r7, #0
 8012c66:	d03a      	beq.n	8012cde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8012c68:	f1bb 0f00 	cmp.w	fp, #0
 8012c6c:	d102      	bne.n	8012c74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8012c6e:	9903      	ldr	r1, [sp, #12]
 8012c70:	b301      	cbz	r1, 8012cb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8012c72:	b1f8      	cbz	r0, 8012cb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8012c74:	8ba1      	ldrh	r1, [r4, #28]
 8012c76:	4419      	add	r1, r3
 8012c78:	458c      	cmp	ip, r1
 8012c7a:	da2a      	bge.n	8012cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8012c7c:	8a61      	ldrh	r1, [r4, #18]
 8012c7e:	b341      	cbz	r1, 8012cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8012c80:	4563      	cmp	r3, ip
 8012c82:	dd9b      	ble.n	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012c84:	e01c      	b.n	8012cc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8012c86:	8893      	ldrh	r3, [r2, #4]
 8012c88:	4649      	mov	r1, r9
 8012c8a:	8023      	strh	r3, [r4, #0]
 8012c8c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8012c90:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8012c94:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8012c98:	f892 800a 	ldrb.w	r8, [r2, #10]
 8012c9c:	ea48 0800 	orr.w	r8, r8, r0
 8012ca0:	68e0      	ldr	r0, [r4, #12]
 8012ca2:	6803      	ldr	r3, [r0, #0]
 8012ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ca6:	4798      	blx	r3
 8012ca8:	eb08 0200 	add.w	r2, r8, r0
 8012cac:	b292      	uxth	r2, r2
 8012cae:	e7c7      	b.n	8012c40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8012cb0:	2000      	movs	r0, #0
 8012cb2:	e7d0      	b.n	8012c56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8012cb4:	4563      	cmp	r3, ip
 8012cb6:	dd81      	ble.n	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012cb8:	8a63      	ldrh	r3, [r4, #18]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	f43f af7e 	beq.w	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	8ba2      	ldrh	r2, [r4, #28]
 8012cc4:	77a3      	strb	r3, [r4, #30]
 8012cc6:	8b63      	ldrh	r3, [r4, #26]
 8012cc8:	4413      	add	r3, r2
 8012cca:	8363      	strh	r3, [r4, #26]
 8012ccc:	b007      	add	sp, #28
 8012cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7ff ff42 	bl	8012b60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012cdc:	e76e      	b.n	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012cde:	4563      	cmp	r3, ip
 8012ce0:	dd14      	ble.n	8012d0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8012ce2:	9b02      	ldr	r3, [sp, #8]
 8012ce4:	b113      	cbz	r3, 8012cec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	460a      	mov	r2, r1
 8012cea:	e783      	b.n	8012bf4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8012cec:	9b01      	ldr	r3, [sp, #4]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f43f af64 	beq.w	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	f47f af61 	bne.w	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012cfa:	b116      	cbz	r6, 8012d02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	462a      	mov	r2, r5
 8012d00:	e779      	b.n	8012bf6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8012d02:	8a63      	ldrh	r3, [r4, #18]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	f43f af59 	beq.w	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012d0a:	e7df      	b.n	8012ccc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	f47f af55 	bne.w	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012d12:	2e00      	cmp	r6, #0
 8012d14:	f43f af52 	beq.w	8012bbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012d18:	2301      	movs	r3, #1
 8012d1a:	462a      	mov	r2, r5
 8012d1c:	e7db      	b.n	8012cd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08012d1e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8012d1e:	b530      	push	{r4, r5, lr}
 8012d20:	4605      	mov	r5, r0
 8012d22:	b08b      	sub	sp, #44	; 0x2c
 8012d24:	b191      	cbz	r1, 8012d4c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8012d26:	2401      	movs	r4, #1
 8012d28:	e9cd 3100 	strd	r3, r1, [sp]
 8012d2c:	4613      	mov	r3, r2
 8012d2e:	4601      	mov	r1, r0
 8012d30:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8012d34:	a802      	add	r0, sp, #8
 8012d36:	f7ff fd0b 	bl	8012750 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8012d3a:	2100      	movs	r1, #0
 8012d3c:	a802      	add	r0, sp, #8
 8012d3e:	f7ff ff1f 	bl	8012b80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8012d42:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012d46:	b163      	cbz	r3, 8012d62 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8012d48:	3401      	adds	r4, #1
 8012d4a:	e7f6      	b.n	8012d3a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8012d4c:	2401      	movs	r4, #1
 8012d4e:	f002 fe4d 	bl	80159ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012d52:	280a      	cmp	r0, #10
 8012d54:	4628      	mov	r0, r5
 8012d56:	bf08      	it	eq
 8012d58:	3401      	addeq	r4, #1
 8012d5a:	f002 fe47 	bl	80159ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	d1f7      	bne.n	8012d52 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8012d62:	b2a0      	uxth	r0, r4
 8012d64:	b00b      	add	sp, #44	; 0x2c
 8012d66:	bd30      	pop	{r4, r5, pc}

08012d68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8012d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6c:	b0e5      	sub	sp, #404	; 0x194
 8012d6e:	4689      	mov	r9, r1
 8012d70:	461c      	mov	r4, r3
 8012d72:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8012d76:	900a      	str	r0, [sp, #40]	; 0x28
 8012d78:	f1ba 0f00 	cmp.w	sl, #0
 8012d7c:	f000 80b4 	beq.w	8012ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f000 80b0 	beq.w	8012ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8012d88:	7ba3      	ldrb	r3, [r4, #14]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	f000 80ac 	beq.w	8012ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8012d90:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8012d94:	6810      	ldr	r0, [r2, #0]
 8012d96:	6851      	ldr	r1, [r2, #4]
 8012d98:	2500      	movs	r5, #0
 8012d9a:	4643      	mov	r3, r8
 8012d9c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8012da0:	950f      	str	r5, [sp, #60]	; 0x3c
 8012da2:	af19      	add	r7, sp, #100	; 0x64
 8012da4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8012da8:	79a2      	ldrb	r2, [r4, #6]
 8012daa:	c303      	stmia	r3!, {r0, r1}
 8012dac:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8012db0:	a90f      	add	r1, sp, #60	; 0x3c
 8012db2:	4640      	mov	r0, r8
 8012db4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8012db8:	f7ff fd40 	bl	801283c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012dbc:	a90f      	add	r1, sp, #60	; 0x3c
 8012dbe:	79a2      	ldrb	r2, [r4, #6]
 8012dc0:	4608      	mov	r0, r1
 8012dc2:	f7ff fd3b 	bl	801283c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012dc6:	4638      	mov	r0, r7
 8012dc8:	f002 f9c3 	bl	8015152 <_ZN8touchgfx12TextProviderC1Ev>
 8012dcc:	6820      	ldr	r0, [r4, #0]
 8012dce:	6803      	ldr	r3, [r0, #0]
 8012dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dd2:	4798      	blx	r3
 8012dd4:	4606      	mov	r6, r0
 8012dd6:	6820      	ldr	r0, [r4, #0]
 8012dd8:	6803      	ldr	r3, [r0, #0]
 8012dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ddc:	4798      	blx	r3
 8012dde:	4633      	mov	r3, r6
 8012de0:	9000      	str	r0, [sp, #0]
 8012de2:	4651      	mov	r1, sl
 8012de4:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8012de6:	4638      	mov	r0, r7
 8012de8:	f002 fa06 	bl	80151f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012dec:	7923      	ldrb	r3, [r4, #4]
 8012dee:	6820      	ldr	r0, [r4, #0]
 8012df0:	9308      	str	r3, [sp, #32]
 8012df2:	6803      	ldr	r3, [r0, #0]
 8012df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012df6:	4798      	blx	r3
 8012df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dfc:	181e      	adds	r6, r3, r0
 8012dfe:	42ae      	cmp	r6, r5
 8012e00:	dd06      	ble.n	8012e10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8012e02:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8012e06:	4282      	cmp	r2, r0
 8012e08:	bfa4      	itt	ge
 8012e0a:	189d      	addge	r5, r3, r2
 8012e0c:	fb95 f5f6 	sdivge	r5, r5, r6
 8012e10:	a832      	add	r0, sp, #200	; 0xc8
 8012e12:	f002 f99e 	bl	8015152 <_ZN8touchgfx12TextProviderC1Ev>
 8012e16:	7c23      	ldrb	r3, [r4, #16]
 8012e18:	b17b      	cbz	r3, 8012e3a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8012e1a:	6820      	ldr	r0, [r4, #0]
 8012e1c:	6803      	ldr	r3, [r0, #0]
 8012e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e20:	4798      	blx	r3
 8012e22:	4683      	mov	fp, r0
 8012e24:	6820      	ldr	r0, [r4, #0]
 8012e26:	6803      	ldr	r3, [r0, #0]
 8012e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e2a:	4798      	blx	r3
 8012e2c:	465b      	mov	r3, fp
 8012e2e:	9000      	str	r0, [sp, #0]
 8012e30:	4651      	mov	r1, sl
 8012e32:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8012e34:	a832      	add	r0, sp, #200	; 0xc8
 8012e36:	f002 f9df 	bl	80151f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012e3a:	7be1      	ldrb	r1, [r4, #15]
 8012e3c:	a811      	add	r0, sp, #68	; 0x44
 8012e3e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8012e42:	7963      	ldrb	r3, [r4, #5]
 8012e44:	1a52      	subs	r2, r2, r1
 8012e46:	7c21      	ldrb	r1, [r4, #16]
 8012e48:	9101      	str	r1, [sp, #4]
 8012e4a:	b292      	uxth	r2, r2
 8012e4c:	6821      	ldr	r1, [r4, #0]
 8012e4e:	9100      	str	r1, [sp, #0]
 8012e50:	a932      	add	r1, sp, #200	; 0xc8
 8012e52:	f7ff fc7d 	bl	8012750 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8012e56:	7c23      	ldrb	r3, [r4, #16]
 8012e58:	b9bb      	cbnz	r3, 8012e8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8012e5a:	fa1f fa86 	uxth.w	sl, r6
 8012e5e:	2d00      	cmp	r5, #0
 8012e60:	dd45      	ble.n	8012eee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8012e62:	4638      	mov	r0, r7
 8012e64:	f002 fdc2 	bl	80159ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d03d      	beq.n	8012ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8012e6c:	280a      	cmp	r0, #10
 8012e6e:	d1f6      	bne.n	8012e5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8012e70:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012e74:	3d01      	subs	r5, #1
 8012e76:	4453      	add	r3, sl
 8012e78:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012e7c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8012e80:	eba3 030a 	sub.w	r3, r3, sl
 8012e84:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8012e88:	e7e9      	b.n	8012e5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8012e8a:	0073      	lsls	r3, r6, #1
 8012e8c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8012e90:	fa1f fa86 	uxth.w	sl, r6
 8012e94:	9309      	str	r3, [sp, #36]	; 0x24
 8012e96:	2d00      	cmp	r5, #0
 8012e98:	dd29      	ble.n	8012eee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8012e9a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012e9e:	a811      	add	r0, sp, #68	; 0x44
 8012ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ea2:	428b      	cmp	r3, r1
 8012ea4:	bfd4      	ite	le
 8012ea6:	2100      	movle	r1, #0
 8012ea8:	2101      	movgt	r1, #1
 8012eaa:	f7ff fe69 	bl	8012b80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8012eae:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8012eb2:	3b01      	subs	r3, #1
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	455b      	cmp	r3, fp
 8012eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012eba:	d005      	beq.n	8012ec8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8012ebc:	7961      	ldrb	r1, [r4, #5]
 8012ebe:	4638      	mov	r0, r7
 8012ec0:	f7f2 ff92 	bl	8005de8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ec6:	e7f4      	b.n	8012eb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8012ec8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012ecc:	3d01      	subs	r5, #1
 8012ece:	4453      	add	r3, sl
 8012ed0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012ed4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8012ed8:	eba3 030a 	sub.w	r3, r3, sl
 8012edc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8012ee0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d1d6      	bne.n	8012e96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8012ee8:	b065      	add	sp, #404	; 0x194
 8012eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eee:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8012ef2:	ad4b      	add	r5, sp, #300	; 0x12c
 8012ef4:	f04f 0b00 	mov.w	fp, #0
 8012ef8:	7c23      	ldrb	r3, [r4, #16]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d067      	beq.n	8012fce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8012efe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012f02:	a811      	add	r0, sp, #68	; 0x44
 8012f04:	458a      	cmp	sl, r1
 8012f06:	bfd4      	ite	le
 8012f08:	2100      	movle	r1, #0
 8012f0a:	2101      	movgt	r1, #1
 8012f0c:	f7ff fe38 	bl	8012b80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8012f10:	9b08      	ldr	r3, [sp, #32]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d056      	beq.n	8012fc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8012f16:	7c23      	ldrb	r3, [r4, #16]
 8012f18:	2264      	movs	r2, #100	; 0x64
 8012f1a:	4639      	mov	r1, r7
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8012f20:	f012 fac4 	bl	80254ac <memcpy>
 8012f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d059      	beq.n	8012fde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 8012f2a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8012f2e:	7922      	ldrb	r2, [r4, #4]
 8012f30:	2a01      	cmp	r2, #1
 8012f32:	d13d      	bne.n	8012fb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8012f34:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8012f38:	1ac0      	subs	r0, r0, r3
 8012f3a:	2302      	movs	r3, #2
 8012f3c:	fb90 f0f3 	sdiv	r0, r0, r3
 8012f40:	b200      	sxth	r0, r0
 8012f42:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012f46:	4418      	add	r0, r3
 8012f48:	7c23      	ldrb	r3, [r4, #16]
 8012f4a:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d03a      	beq.n	8012fc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8012f52:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8012f56:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8012f5a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8012f5e:	9500      	str	r5, [sp, #0]
 8012f60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012f62:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8012f66:	e9cd b703 	strd	fp, r7, [sp, #12]
 8012f6a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8012f6e:	464a      	mov	r2, r9
 8012f70:	2100      	movs	r1, #0
 8012f72:	f7ff fc94 	bl	801289e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d1b6      	bne.n	8012ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8012f7a:	b2b2      	uxth	r2, r6
 8012f7c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012f80:	4611      	mov	r1, r2
 8012f82:	4413      	add	r3, r2
 8012f84:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8012f88:	b21b      	sxth	r3, r3
 8012f8a:	1a52      	subs	r2, r2, r1
 8012f8c:	7c21      	ldrb	r1, [r4, #16]
 8012f8e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012f92:	b212      	sxth	r2, r2
 8012f94:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8012f98:	b109      	cbz	r1, 8012f9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 8012f9a:	42b2      	cmp	r2, r6
 8012f9c:	dba4      	blt.n	8012ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8012f9e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8012fa2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8012fa6:	440a      	add	r2, r1
 8012fa8:	b212      	sxth	r2, r2
 8012faa:	4293      	cmp	r3, r2
 8012fac:	dda4      	ble.n	8012ef8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 8012fae:	e79b      	b.n	8012ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8012fb0:	2a02      	cmp	r2, #2
 8012fb2:	d105      	bne.n	8012fc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8012fb4:	7be2      	ldrb	r2, [r4, #15]
 8012fb6:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8012fba:	1a80      	subs	r0, r0, r2
 8012fbc:	1ac0      	subs	r0, r0, r3
 8012fbe:	e7bf      	b.n	8012f40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	e7be      	b.n	8012f42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8012fc4:	7be0      	ldrb	r0, [r4, #15]
 8012fc6:	e7bc      	b.n	8012f42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8012fc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012fcc:	e7c3      	b.n	8012f56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8012fce:	9b08      	ldr	r3, [sp, #32]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d0f7      	beq.n	8012fc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8012fd4:	2264      	movs	r2, #100	; 0x64
 8012fd6:	4639      	mov	r1, r7
 8012fd8:	4628      	mov	r0, r5
 8012fda:	f012 fa67 	bl	80254ac <memcpy>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012fe4:	6821      	ldr	r1, [r4, #0]
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	f7ff fbec 	bl	80127c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012fec:	b203      	sxth	r3, r0
 8012fee:	e79e      	b.n	8012f2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

08012ff0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012ff0:	2b02      	cmp	r3, #2
 8012ff2:	b510      	push	{r4, lr}
 8012ff4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012ff8:	d00b      	beq.n	8013012 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8012ffa:	2b03      	cmp	r3, #3
 8012ffc:	d00e      	beq.n	801301c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	d001      	beq.n	8013006 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8013002:	1860      	adds	r0, r4, r1
 8013004:	bd10      	pop	{r4, pc}
 8013006:	8880      	ldrh	r0, [r0, #4]
 8013008:	4420      	add	r0, r4
 801300a:	b200      	sxth	r0, r0
 801300c:	1a80      	subs	r0, r0, r2
 801300e:	3801      	subs	r0, #1
 8013010:	e7f8      	b.n	8013004 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8013012:	8880      	ldrh	r0, [r0, #4]
 8013014:	4420      	add	r0, r4
 8013016:	b200      	sxth	r0, r0
 8013018:	1a40      	subs	r0, r0, r1
 801301a:	e7f8      	b.n	801300e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801301c:	18a0      	adds	r0, r4, r2
 801301e:	e7f1      	b.n	8013004 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08013020 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013020:	2b02      	cmp	r3, #2
 8013022:	b510      	push	{r4, lr}
 8013024:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8013028:	d006      	beq.n	8013038 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801302a:	2b03      	cmp	r3, #3
 801302c:	d00a      	beq.n	8013044 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801302e:	2b01      	cmp	r3, #1
 8013030:	bf14      	ite	ne
 8013032:	18a0      	addne	r0, r4, r2
 8013034:	1860      	addeq	r0, r4, r1
 8013036:	bd10      	pop	{r4, pc}
 8013038:	88c0      	ldrh	r0, [r0, #6]
 801303a:	4420      	add	r0, r4
 801303c:	b200      	sxth	r0, r0
 801303e:	1a80      	subs	r0, r0, r2
 8013040:	3801      	subs	r0, #1
 8013042:	e7f8      	b.n	8013036 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8013044:	88c0      	ldrh	r0, [r0, #6]
 8013046:	4420      	add	r0, r4
 8013048:	b200      	sxth	r0, r0
 801304a:	1a40      	subs	r0, r0, r1
 801304c:	e7f8      	b.n	8013040 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08013050 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8013050:	4b01      	ldr	r3, [pc, #4]	; (8013058 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8013052:	2200      	movs	r2, #0
 8013054:	601a      	str	r2, [r3, #0]
 8013056:	4770      	bx	lr
 8013058:	20060c58 	.word	0x20060c58

0801305c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801305c:	4603      	mov	r3, r0
 801305e:	b1c8      	cbz	r0, 8013094 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8013060:	0c02      	lsrs	r2, r0, #16
 8013062:	0412      	lsls	r2, r2, #16
 8013064:	b9a2      	cbnz	r2, 8013090 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8013066:	0403      	lsls	r3, r0, #16
 8013068:	2010      	movs	r0, #16
 801306a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801306e:	bf04      	itt	eq
 8013070:	021b      	lsleq	r3, r3, #8
 8013072:	3008      	addeq	r0, #8
 8013074:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013078:	bf04      	itt	eq
 801307a:	011b      	lsleq	r3, r3, #4
 801307c:	3004      	addeq	r0, #4
 801307e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013082:	bf04      	itt	eq
 8013084:	009b      	lsleq	r3, r3, #2
 8013086:	3002      	addeq	r0, #2
 8013088:	2b00      	cmp	r3, #0
 801308a:	db04      	blt.n	8013096 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801308c:	3001      	adds	r0, #1
 801308e:	4770      	bx	lr
 8013090:	2000      	movs	r0, #0
 8013092:	e7ea      	b.n	801306a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8013094:	2020      	movs	r0, #32
 8013096:	4770      	bx	lr

08013098 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8013098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309c:	b087      	sub	sp, #28
 801309e:	4681      	mov	r9, r0
 80130a0:	4698      	mov	r8, r3
 80130a2:	4610      	mov	r0, r2
 80130a4:	460d      	mov	r5, r1
 80130a6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80130aa:	b981      	cbnz	r1, 80130ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80130ac:	b14b      	cbz	r3, 80130c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80130ae:	460b      	mov	r3, r1
 80130b0:	464a      	mov	r2, r9
 80130b2:	4641      	mov	r1, r8
 80130b4:	e9cd 4700 	strd	r4, r7, [sp]
 80130b8:	f7ff ffee 	bl	8013098 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80130bc:	b007      	add	sp, #28
 80130be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c2:	f04f 33ff 	mov.w	r3, #4294967295
 80130c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80130ca:	603b      	str	r3, [r7, #0]
 80130cc:	e7f6      	b.n	80130bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80130ce:	fa32 fa01 	lsrs.w	sl, r2, r1
 80130d2:	d107      	bne.n	80130e4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80130d4:	fb09 f602 	mul.w	r6, r9, r2
 80130d8:	fbb6 f0f4 	udiv	r0, r6, r4
 80130dc:	fb04 6610 	mls	r6, r4, r0, r6
 80130e0:	603e      	str	r6, [r7, #0]
 80130e2:	e7eb      	b.n	80130bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80130e4:	2601      	movs	r6, #1
 80130e6:	fa09 fb01 	lsl.w	fp, r9, r1
 80130ea:	408e      	lsls	r6, r1
 80130ec:	fbbb f3f4 	udiv	r3, fp, r4
 80130f0:	3e01      	subs	r6, #1
 80130f2:	9302      	str	r3, [sp, #8]
 80130f4:	fb0a f303 	mul.w	r3, sl, r3
 80130f8:	4016      	ands	r6, r2
 80130fa:	9303      	str	r3, [sp, #12]
 80130fc:	4630      	mov	r0, r6
 80130fe:	f7ff ffad 	bl	801305c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013102:	464a      	mov	r2, r9
 8013104:	460b      	mov	r3, r1
 8013106:	4601      	mov	r1, r0
 8013108:	4630      	mov	r0, r6
 801310a:	e9cd 4700 	strd	r4, r7, [sp]
 801310e:	f7ff ffc3 	bl	8013098 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013112:	9b02      	ldr	r3, [sp, #8]
 8013114:	4606      	mov	r6, r0
 8013116:	eb05 0108 	add.w	r1, r5, r8
 801311a:	fb04 bb13 	mls	fp, r4, r3, fp
 801311e:	4658      	mov	r0, fp
 8013120:	f7ff ff9c 	bl	801305c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013124:	ab05      	add	r3, sp, #20
 8013126:	465a      	mov	r2, fp
 8013128:	e9cd 4300 	strd	r4, r3, [sp]
 801312c:	4603      	mov	r3, r0
 801312e:	4650      	mov	r0, sl
 8013130:	f7ff ffb2 	bl	8013098 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013134:	6839      	ldr	r1, [r7, #0]
 8013136:	9a05      	ldr	r2, [sp, #20]
 8013138:	9b03      	ldr	r3, [sp, #12]
 801313a:	4411      	add	r1, r2
 801313c:	fbb1 f2f4 	udiv	r2, r1, r4
 8013140:	18d3      	adds	r3, r2, r3
 8013142:	fb04 1412 	mls	r4, r4, r2, r1
 8013146:	441e      	add	r6, r3
 8013148:	603c      	str	r4, [r7, #0]
 801314a:	4430      	add	r0, r6
 801314c:	e7b6      	b.n	80130bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801314e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801314e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013152:	b085      	sub	sp, #20
 8013154:	f1b0 0900 	subs.w	r9, r0, #0
 8013158:	461d      	mov	r5, r3
 801315a:	4617      	mov	r7, r2
 801315c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801315e:	bfbb      	ittet	lt
 8013160:	f1c9 0900 	rsblt	r9, r9, #0
 8013164:	f04f 36ff 	movlt.w	r6, #4294967295
 8013168:	2601      	movge	r6, #1
 801316a:	6823      	ldrlt	r3, [r4, #0]
 801316c:	bfbc      	itt	lt
 801316e:	425b      	neglt	r3, r3
 8013170:	6023      	strlt	r3, [r4, #0]
 8013172:	2a00      	cmp	r2, #0
 8013174:	da04      	bge.n	8013180 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	4257      	negs	r7, r2
 801317a:	4276      	negs	r6, r6
 801317c:	425b      	negs	r3, r3
 801317e:	6023      	str	r3, [r4, #0]
 8013180:	2d00      	cmp	r5, #0
 8013182:	4638      	mov	r0, r7
 8013184:	bfba      	itte	lt
 8013186:	426d      	neglt	r5, r5
 8013188:	f04f 38ff 	movlt.w	r8, #4294967295
 801318c:	f04f 0801 	movge.w	r8, #1
 8013190:	f7ff ff64 	bl	801305c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013194:	ab03      	add	r3, sp, #12
 8013196:	463a      	mov	r2, r7
 8013198:	e9cd 5300 	strd	r5, r3, [sp]
 801319c:	4603      	mov	r3, r0
 801319e:	4648      	mov	r0, r9
 80131a0:	f7ff ff7a 	bl	8013098 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80131a4:	6823      	ldr	r3, [r4, #0]
 80131a6:	9a03      	ldr	r2, [sp, #12]
 80131a8:	4546      	cmp	r6, r8
 80131aa:	441a      	add	r2, r3
 80131ac:	fb92 f3f5 	sdiv	r3, r2, r5
 80131b0:	4418      	add	r0, r3
 80131b2:	fb05 2313 	mls	r3, r5, r3, r2
 80131b6:	bf18      	it	ne
 80131b8:	4240      	negne	r0, r0
 80131ba:	1c72      	adds	r2, r6, #1
 80131bc:	6023      	str	r3, [r4, #0]
 80131be:	d105      	bne.n	80131cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	f1c3 0200 	rsb	r2, r3, #0
 80131c6:	db0b      	blt.n	80131e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80131c8:	6022      	str	r2, [r4, #0]
 80131ca:	e006      	b.n	80131da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80131cc:	2e01      	cmp	r6, #1
 80131ce:	d104      	bne.n	80131da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	da02      	bge.n	80131da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80131d4:	442b      	add	r3, r5
 80131d6:	3801      	subs	r0, #1
 80131d8:	6023      	str	r3, [r4, #0]
 80131da:	b005      	add	sp, #20
 80131dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131e0:	3801      	subs	r0, #1
 80131e2:	1b52      	subs	r2, r2, r5
 80131e4:	e7f0      	b.n	80131c8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080131e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80131e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80131ec:	4c1c      	ldr	r4, [pc, #112]	; (8013260 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80131ee:	4605      	mov	r5, r0
 80131f0:	6807      	ldr	r7, [r0, #0]
 80131f2:	69a3      	ldr	r3, [r4, #24]
 80131f4:	b92b      	cbnz	r3, 8013202 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80131f6:	6840      	ldr	r0, [r0, #4]
 80131f8:	e9c5 7000 	strd	r7, r0, [r5]
 80131fc:	b004      	add	sp, #16
 80131fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013202:	f04f 0802 	mov.w	r8, #2
 8013206:	68a2      	ldr	r2, [r4, #8]
 8013208:	ae04      	add	r6, sp, #16
 801320a:	6820      	ldr	r0, [r4, #0]
 801320c:	fb93 f1f8 	sdiv	r1, r3, r8
 8013210:	440a      	add	r2, r1
 8013212:	69e1      	ldr	r1, [r4, #28]
 8013214:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013218:	463a      	mov	r2, r7
 801321a:	9600      	str	r6, [sp, #0]
 801321c:	f7ff ff97 	bl	801314e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013220:	69a3      	ldr	r3, [r4, #24]
 8013222:	4607      	mov	r7, r0
 8013224:	686a      	ldr	r2, [r5, #4]
 8013226:	6a21      	ldr	r1, [r4, #32]
 8013228:	9600      	str	r6, [sp, #0]
 801322a:	6860      	ldr	r0, [r4, #4]
 801322c:	f7ff ff8f 	bl	801314e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013230:	69a3      	ldr	r3, [r4, #24]
 8013232:	6962      	ldr	r2, [r4, #20]
 8013234:	4407      	add	r7, r0
 8013236:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013238:	9600      	str	r6, [sp, #0]
 801323a:	68e0      	ldr	r0, [r4, #12]
 801323c:	fb93 f8f8 	sdiv	r8, r3, r8
 8013240:	4442      	add	r2, r8
 8013242:	9203      	str	r2, [sp, #12]
 8013244:	682a      	ldr	r2, [r5, #0]
 8013246:	f7ff ff82 	bl	801314e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801324a:	4680      	mov	r8, r0
 801324c:	9600      	str	r6, [sp, #0]
 801324e:	69a3      	ldr	r3, [r4, #24]
 8013250:	686a      	ldr	r2, [r5, #4]
 8013252:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013254:	6920      	ldr	r0, [r4, #16]
 8013256:	f7ff ff7a 	bl	801314e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801325a:	4440      	add	r0, r8
 801325c:	e7cc      	b.n	80131f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801325e:	bf00      	nop
 8013260:	20060c5c 	.word	0x20060c5c

08013264 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8013264:	4b07      	ldr	r3, [pc, #28]	; (8013284 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	2b01      	cmp	r3, #1
 801326a:	d109      	bne.n	8013280 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801326c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013270:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013274:	8003      	strh	r3, [r0, #0]
 8013276:	4b04      	ldr	r3, [pc, #16]	; (8013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8013278:	881b      	ldrh	r3, [r3, #0]
 801327a:	3b01      	subs	r3, #1
 801327c:	1a9b      	subs	r3, r3, r2
 801327e:	800b      	strh	r3, [r1, #0]
 8013280:	4770      	bx	lr
 8013282:	bf00      	nop
 8013284:	20060c28 	.word	0x20060c28
 8013288:	20060c2c 	.word	0x20060c2c

0801328c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801328c:	4b07      	ldr	r3, [pc, #28]	; (80132ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801328e:	b510      	push	{r4, lr}
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	2b01      	cmp	r3, #1
 8013294:	d108      	bne.n	80132a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8013296:	4b06      	ldr	r3, [pc, #24]	; (80132b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8013298:	880c      	ldrh	r4, [r1, #0]
 801329a:	881b      	ldrh	r3, [r3, #0]
 801329c:	f9b0 2000 	ldrsh.w	r2, [r0]
 80132a0:	3b01      	subs	r3, #1
 80132a2:	1b1b      	subs	r3, r3, r4
 80132a4:	8003      	strh	r3, [r0, #0]
 80132a6:	800a      	strh	r2, [r1, #0]
 80132a8:	bd10      	pop	{r4, pc}
 80132aa:	bf00      	nop
 80132ac:	20060c28 	.word	0x20060c28
 80132b0:	20060c2c 	.word	0x20060c2c

080132b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80132b4:	4b0a      	ldr	r3, [pc, #40]	; (80132e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80132b6:	b510      	push	{r4, lr}
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d10e      	bne.n	80132dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80132be:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80132c2:	8843      	ldrh	r3, [r0, #2]
 80132c4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80132c8:	18ca      	adds	r2, r1, r3
 80132ca:	4b06      	ldr	r3, [pc, #24]	; (80132e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80132cc:	8044      	strh	r4, [r0, #2]
 80132ce:	881b      	ldrh	r3, [r3, #0]
 80132d0:	1a9b      	subs	r3, r3, r2
 80132d2:	8003      	strh	r3, [r0, #0]
 80132d4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80132d8:	8081      	strh	r1, [r0, #4]
 80132da:	80c3      	strh	r3, [r0, #6]
 80132dc:	bd10      	pop	{r4, pc}
 80132de:	bf00      	nop
 80132e0:	20060c28 	.word	0x20060c28
 80132e4:	20060c2c 	.word	0x20060c2c

080132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80132e8:	4b08      	ldr	r3, [pc, #32]	; (801330c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	d10c      	bne.n	801330a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80132f0:	8803      	ldrh	r3, [r0, #0]
 80132f2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80132f6:	8842      	ldrh	r2, [r0, #2]
 80132f8:	8002      	strh	r2, [r0, #0]
 80132fa:	185a      	adds	r2, r3, r1
 80132fc:	4b04      	ldr	r3, [pc, #16]	; (8013310 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80132fe:	881b      	ldrh	r3, [r3, #0]
 8013300:	1a9b      	subs	r3, r3, r2
 8013302:	8043      	strh	r3, [r0, #2]
 8013304:	88c3      	ldrh	r3, [r0, #6]
 8013306:	80c1      	strh	r1, [r0, #6]
 8013308:	8083      	strh	r3, [r0, #4]
 801330a:	4770      	bx	lr
 801330c:	20060c28 	.word	0x20060c28
 8013310:	20060c2c 	.word	0x20060c2c

08013314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013314:	4b07      	ldr	r3, [pc, #28]	; (8013334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8013316:	b510      	push	{r4, lr}
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	2b01      	cmp	r3, #1
 801331c:	d108      	bne.n	8013330 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801331e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013322:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013326:	8003      	strh	r3, [r0, #0]
 8013328:	8893      	ldrh	r3, [r2, #4]
 801332a:	3b01      	subs	r3, #1
 801332c:	1b1b      	subs	r3, r3, r4
 801332e:	800b      	strh	r3, [r1, #0]
 8013330:	bd10      	pop	{r4, pc}
 8013332:	bf00      	nop
 8013334:	20060c28 	.word	0x20060c28

08013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8013338:	4b0b      	ldr	r3, [pc, #44]	; (8013368 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	2b01      	cmp	r3, #1
 801333e:	d111      	bne.n	8013364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8013340:	680b      	ldr	r3, [r1, #0]
 8013342:	ed90 7a00 	vldr	s14, [r0]
 8013346:	6003      	str	r3, [r0, #0]
 8013348:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801334c:	eddf 6a07 	vldr	s13, [pc, #28]	; 801336c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8013350:	ee07 3a90 	vmov	s15, r3
 8013354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013358:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801335c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013360:	edc1 7a00 	vstr	s15, [r1]
 8013364:	4770      	bx	lr
 8013366:	bf00      	nop
 8013368:	20060c28 	.word	0x20060c28
 801336c:	38d1b717 	.word	0x38d1b717

08013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013370:	4b0a      	ldr	r3, [pc, #40]	; (801339c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8013372:	460a      	mov	r2, r1
 8013374:	b510      	push	{r4, lr}
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	2b01      	cmp	r3, #1
 801337a:	d10d      	bne.n	8013398 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801337c:	8881      	ldrh	r1, [r0, #4]
 801337e:	8803      	ldrh	r3, [r0, #0]
 8013380:	440b      	add	r3, r1
 8013382:	4601      	mov	r1, r0
 8013384:	3b01      	subs	r3, #1
 8013386:	f821 3b02 	strh.w	r3, [r1], #2
 801338a:	f7ff ffc3 	bl	8013314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801338e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013392:	88c2      	ldrh	r2, [r0, #6]
 8013394:	80c3      	strh	r3, [r0, #6]
 8013396:	8082      	strh	r2, [r0, #4]
 8013398:	bd10      	pop	{r4, pc}
 801339a:	bf00      	nop
 801339c:	20060c28 	.word	0x20060c28

080133a0 <_ZN8touchgfx11Application13requestRedrawEv>:
 80133a0:	4b06      	ldr	r3, [pc, #24]	; (80133bc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80133a2:	2100      	movs	r1, #0
 80133a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80133a8:	4b05      	ldr	r3, [pc, #20]	; (80133c0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80133aa:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80133ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133b2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80133b6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80133ba:	4770      	bx	lr
 80133bc:	20060c24 	.word	0x20060c24
 80133c0:	20060c26 	.word	0x20060c26

080133c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80133c4:	4b03      	ldr	r3, [pc, #12]	; (80133d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80133c6:	6818      	ldr	r0, [r3, #0]
 80133c8:	b110      	cbz	r0, 80133d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80133ca:	6803      	ldr	r3, [r0, #0]
 80133cc:	699b      	ldr	r3, [r3, #24]
 80133ce:	4718      	bx	r3
 80133d0:	4770      	bx	lr
 80133d2:	bf00      	nop
 80133d4:	20060c8c 	.word	0x20060c8c

080133d8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80133d8:	4770      	bx	lr
	...

080133dc <_ZN8touchgfx11Application4drawEv>:
 80133dc:	4b09      	ldr	r3, [pc, #36]	; (8013404 <_ZN8touchgfx11Application4drawEv+0x28>)
 80133de:	b507      	push	{r0, r1, r2, lr}
 80133e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80133e4:	2100      	movs	r1, #0
 80133e6:	4b08      	ldr	r3, [pc, #32]	; (8013408 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80133e8:	9100      	str	r1, [sp, #0]
 80133ea:	4669      	mov	r1, sp
 80133ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80133f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80133f8:	6803      	ldr	r3, [r0, #0]
 80133fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133fc:	4798      	blx	r3
 80133fe:	b003      	add	sp, #12
 8013400:	f85d fb04 	ldr.w	pc, [sp], #4
 8013404:	20060c24 	.word	0x20060c24
 8013408:	20060c26 	.word	0x20060c26

0801340c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801340c:	4b03      	ldr	r3, [pc, #12]	; (801341c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801340e:	6818      	ldr	r0, [r3, #0]
 8013410:	b110      	cbz	r0, 8013418 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8013412:	6803      	ldr	r3, [r0, #0]
 8013414:	69db      	ldr	r3, [r3, #28]
 8013416:	4718      	bx	r3
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop
 801341c:	20060c8c 	.word	0x20060c8c

08013420 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013420:	4b03      	ldr	r3, [pc, #12]	; (8013430 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8013422:	6818      	ldr	r0, [r3, #0]
 8013424:	b110      	cbz	r0, 801342c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8013426:	6803      	ldr	r3, [r0, #0]
 8013428:	6a1b      	ldr	r3, [r3, #32]
 801342a:	4718      	bx	r3
 801342c:	4770      	bx	lr
 801342e:	bf00      	nop
 8013430:	20060c8c 	.word	0x20060c8c

08013434 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013434:	4b03      	ldr	r3, [pc, #12]	; (8013444 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013436:	6818      	ldr	r0, [r3, #0]
 8013438:	b110      	cbz	r0, 8013440 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801343a:	6803      	ldr	r3, [r0, #0]
 801343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801343e:	4718      	bx	r3
 8013440:	4770      	bx	lr
 8013442:	bf00      	nop
 8013444:	20060c8c 	.word	0x20060c8c

08013448 <_ZN8touchgfx11ApplicationD1Ev>:
 8013448:	4770      	bx	lr

0801344a <_ZN8touchgfx11ApplicationD0Ev>:
 801344a:	b510      	push	{r4, lr}
 801344c:	4604      	mov	r4, r0
 801344e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8013452:	f011 fdd6 	bl	8025002 <_ZdlPvj>
 8013456:	4620      	mov	r0, r4
 8013458:	bd10      	pop	{r4, pc}
	...

0801345c <_ZN8touchgfx11Application15handleTickEventEv>:
 801345c:	b570      	push	{r4, r5, r6, lr}
 801345e:	4d38      	ldr	r5, [pc, #224]	; (8013540 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8013460:	4604      	mov	r4, r0
 8013462:	6828      	ldr	r0, [r5, #0]
 8013464:	b140      	cbz	r0, 8013478 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013466:	7a03      	ldrb	r3, [r0, #8]
 8013468:	b933      	cbnz	r3, 8013478 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801346a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801346e:	6803      	ldr	r3, [r0, #0]
 8013470:	689b      	ldr	r3, [r3, #8]
 8013472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013476:	4718      	bx	r3
 8013478:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801347c:	b97b      	cbnz	r3, 801349e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801347e:	b170      	cbz	r0, 801349e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013480:	7a03      	ldrb	r3, [r0, #8]
 8013482:	b163      	cbz	r3, 801349e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013484:	4b2f      	ldr	r3, [pc, #188]	; (8013544 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8013486:	6818      	ldr	r0, [r3, #0]
 8013488:	b110      	cbz	r0, 8013490 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801348a:	6803      	ldr	r3, [r0, #0]
 801348c:	691b      	ldr	r3, [r3, #16]
 801348e:	4798      	blx	r3
 8013490:	6828      	ldr	r0, [r5, #0]
 8013492:	6803      	ldr	r3, [r0, #0]
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	4798      	blx	r3
 8013498:	2301      	movs	r3, #1
 801349a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801349e:	2500      	movs	r5, #0
 80134a0:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80134a4:	42a8      	cmp	r0, r5
 80134a6:	dd0c      	ble.n	80134c2 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80134a8:	1963      	adds	r3, r4, r5
 80134aa:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80134ae:	b132      	cbz	r2, 80134be <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80134b0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80134b4:	4413      	add	r3, r2
 80134b6:	6858      	ldr	r0, [r3, #4]
 80134b8:	6803      	ldr	r3, [r0, #0]
 80134ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134bc:	4798      	blx	r3
 80134be:	3501      	adds	r5, #1
 80134c0:	e7ee      	b.n	80134a0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80134c2:	2300      	movs	r3, #0
 80134c4:	461a      	mov	r2, r3
 80134c6:	4298      	cmp	r0, r3
 80134c8:	d10f      	bne.n	80134ea <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 80134ca:	1d25      	adds	r5, r4, #4
 80134cc:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80134d0:	4291      	cmp	r1, r2
 80134d2:	dd2d      	ble.n	8013530 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 80134d4:	1e48      	subs	r0, r1, #1
 80134d6:	b280      	uxth	r0, r0
 80134d8:	4288      	cmp	r0, r1
 80134da:	d31a      	bcc.n	8013512 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 80134dc:	4b1a      	ldr	r3, [pc, #104]	; (8013548 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 80134de:	f240 11a9 	movw	r1, #425	; 0x1a9
 80134e2:	4a1a      	ldr	r2, [pc, #104]	; (801354c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 80134e4:	481a      	ldr	r0, [pc, #104]	; (8013550 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 80134e6:	f011 ff5f 	bl	80253a8 <__assert_func>
 80134ea:	18e1      	adds	r1, r4, r3
 80134ec:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80134f0:	b16d      	cbz	r5, 801350e <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d00a      	beq.n	801350c <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 80134f6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80134fa:	4431      	add	r1, r6
 80134fc:	684e      	ldr	r6, [r1, #4]
 80134fe:	b291      	uxth	r1, r2
 8013500:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8013504:	604e      	str	r6, [r1, #4]
 8013506:	18a1      	adds	r1, r4, r2
 8013508:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801350c:	3201      	adds	r2, #1
 801350e:	3301      	adds	r3, #1
 8013510:	e7d9      	b.n	80134c6 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8013512:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8013516:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801351a:	3304      	adds	r3, #4
 801351c:	428b      	cmp	r3, r1
 801351e:	d004      	beq.n	801352a <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8013520:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8013524:	f843 6c04 	str.w	r6, [r3, #-4]
 8013528:	e7f8      	b.n	801351c <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801352a:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801352e:	e7cd      	b.n	80134cc <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8013530:	4b04      	ldr	r3, [pc, #16]	; (8013544 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8013532:	6818      	ldr	r0, [r3, #0]
 8013534:	b110      	cbz	r0, 801353c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8013536:	6803      	ldr	r3, [r0, #0]
 8013538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801353a:	e79a      	b.n	8013472 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801353c:	bd70      	pop	{r4, r5, r6, pc}
 801353e:	bf00      	nop
 8013540:	20060c90 	.word	0x20060c90
 8013544:	20060c8c 	.word	0x20060c8c
 8013548:	0802b15f 	.word	0x0802b15f
 801354c:	0802b3b9 	.word	0x0802b3b9
 8013550:	0802b16d 	.word	0x0802b16d

08013554 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8013554:	b570      	push	{r4, r5, r6, lr}
 8013556:	4606      	mov	r6, r0
 8013558:	460c      	mov	r4, r1
 801355a:	b929      	cbnz	r1, 8013568 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801355c:	4b0c      	ldr	r3, [pc, #48]	; (8013590 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801355e:	2167      	movs	r1, #103	; 0x67
 8013560:	4a0c      	ldr	r2, [pc, #48]	; (8013594 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8013562:	480d      	ldr	r0, [pc, #52]	; (8013598 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8013564:	f011 ff20 	bl	80253a8 <__assert_func>
 8013568:	2300      	movs	r3, #0
 801356a:	4d0c      	ldr	r5, [pc, #48]	; (801359c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801356c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8013570:	6828      	ldr	r0, [r5, #0]
 8013572:	b110      	cbz	r0, 801357a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8013574:	6803      	ldr	r3, [r0, #0]
 8013576:	695b      	ldr	r3, [r3, #20]
 8013578:	4798      	blx	r3
 801357a:	602c      	str	r4, [r5, #0]
 801357c:	4620      	mov	r0, r4
 801357e:	6823      	ldr	r3, [r4, #0]
 8013580:	68db      	ldr	r3, [r3, #12]
 8013582:	4798      	blx	r3
 8013584:	6833      	ldr	r3, [r6, #0]
 8013586:	4630      	mov	r0, r6
 8013588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801358a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801358e:	4718      	bx	r3
 8013590:	0802b12b 	.word	0x0802b12b
 8013594:	0802b234 	.word	0x0802b234
 8013598:	0802b135 	.word	0x0802b135
 801359c:	20060c8c 	.word	0x20060c8c

080135a0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80135a0:	b570      	push	{r4, r5, r6, lr}
 80135a2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80135a6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80135aa:	42ac      	cmp	r4, r5
 80135ac:	db18      	blt.n	80135e0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80135ae:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80135b2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	db12      	blt.n	80135e0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80135ba:	8886      	ldrh	r6, [r0, #4]
 80135bc:	4435      	add	r5, r6
 80135be:	888e      	ldrh	r6, [r1, #4]
 80135c0:	4434      	add	r4, r6
 80135c2:	b22d      	sxth	r5, r5
 80135c4:	b224      	sxth	r4, r4
 80135c6:	42a5      	cmp	r5, r4
 80135c8:	db0a      	blt.n	80135e0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80135ca:	88c0      	ldrh	r0, [r0, #6]
 80135cc:	4418      	add	r0, r3
 80135ce:	88cb      	ldrh	r3, [r1, #6]
 80135d0:	441a      	add	r2, r3
 80135d2:	b200      	sxth	r0, r0
 80135d4:	b212      	sxth	r2, r2
 80135d6:	4290      	cmp	r0, r2
 80135d8:	bfb4      	ite	lt
 80135da:	2000      	movlt	r0, #0
 80135dc:	2001      	movge	r0, #1
 80135de:	bd70      	pop	{r4, r5, r6, pc}
 80135e0:	2000      	movs	r0, #0
 80135e2:	e7fc      	b.n	80135de <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

080135e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80135e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135e6:	4604      	mov	r4, r0
 80135e8:	4608      	mov	r0, r1
 80135ea:	460d      	mov	r5, r1
 80135ec:	f7fb fb8f 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80135f0:	b978      	cbnz	r0, 8013612 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80135f2:	4620      	mov	r0, r4
 80135f4:	f7fb fb8b 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80135f8:	f9b5 6000 	ldrsh.w	r6, [r5]
 80135fc:	b150      	cbz	r0, 8013614 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80135fe:	8026      	strh	r6, [r4, #0]
 8013600:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013604:	8063      	strh	r3, [r4, #2]
 8013606:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801360a:	80a3      	strh	r3, [r4, #4]
 801360c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013610:	80e3      	strh	r3, [r4, #6]
 8013612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013614:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013618:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801361c:	42b1      	cmp	r1, r6
 801361e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013622:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013626:	460f      	mov	r7, r1
 8013628:	88ed      	ldrh	r5, [r5, #6]
 801362a:	bfa8      	it	ge
 801362c:	4637      	movge	r7, r6
 801362e:	4293      	cmp	r3, r2
 8013630:	4618      	mov	r0, r3
 8013632:	4466      	add	r6, ip
 8013634:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013638:	bfa8      	it	ge
 801363a:	4610      	movge	r0, r2
 801363c:	442a      	add	r2, r5
 801363e:	88e5      	ldrh	r5, [r4, #6]
 8013640:	4461      	add	r1, ip
 8013642:	b236      	sxth	r6, r6
 8013644:	8027      	strh	r7, [r4, #0]
 8013646:	442b      	add	r3, r5
 8013648:	b209      	sxth	r1, r1
 801364a:	b212      	sxth	r2, r2
 801364c:	8060      	strh	r0, [r4, #2]
 801364e:	b21b      	sxth	r3, r3
 8013650:	428e      	cmp	r6, r1
 8013652:	bfac      	ite	ge
 8013654:	ebc7 0106 	rsbge	r1, r7, r6
 8013658:	ebc7 0101 	rsblt	r1, r7, r1
 801365c:	429a      	cmp	r2, r3
 801365e:	bfac      	ite	ge
 8013660:	ebc0 0202 	rsbge	r2, r0, r2
 8013664:	ebc0 0203 	rsblt	r2, r0, r3
 8013668:	80a1      	strh	r1, [r4, #4]
 801366a:	80e2      	strh	r2, [r4, #6]
 801366c:	e7d1      	b.n	8013612 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08013670 <_ZN8touchgfx11Application11getInstanceEv>:
 8013670:	4b01      	ldr	r3, [pc, #4]	; (8013678 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8013672:	6818      	ldr	r0, [r3, #0]
 8013674:	4770      	bx	lr
 8013676:	bf00      	nop
 8013678:	20060c9c 	.word	0x20060c9c

0801367c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	2200      	movs	r2, #0
 8013680:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8013684:	1d04      	adds	r4, r0, #4
 8013686:	b295      	uxth	r5, r2
 8013688:	42ab      	cmp	r3, r5
 801368a:	d90e      	bls.n	80136aa <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801368c:	f854 6b04 	ldr.w	r6, [r4], #4
 8013690:	4615      	mov	r5, r2
 8013692:	3201      	adds	r2, #1
 8013694:	428e      	cmp	r6, r1
 8013696:	d1f6      	bne.n	8013686 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8013698:	4428      	add	r0, r5
 801369a:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801369e:	2bff      	cmp	r3, #255	; 0xff
 80136a0:	d002      	beq.n	80136a8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80136a2:	3301      	adds	r3, #1
 80136a4:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 80136a8:	bd70      	pop	{r4, r5, r6, pc}
 80136aa:	2b20      	cmp	r3, #32
 80136ac:	d106      	bne.n	80136bc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 80136ae:	4b09      	ldr	r3, [pc, #36]	; (80136d4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 80136b0:	f240 215f 	movw	r1, #607	; 0x25f
 80136b4:	4a08      	ldr	r2, [pc, #32]	; (80136d8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 80136b6:	4809      	ldr	r0, [pc, #36]	; (80136dc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 80136b8:	f011 fe76 	bl	80253a8 <__assert_func>
 80136bc:	18c2      	adds	r2, r0, r3
 80136be:	2401      	movs	r4, #1
 80136c0:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 80136c4:	191a      	adds	r2, r3, r4
 80136c6:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 80136ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80136ce:	6041      	str	r1, [r0, #4]
 80136d0:	e7ea      	b.n	80136a8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80136d2:	bf00      	nop
 80136d4:	0802b196 	.word	0x0802b196
 80136d8:	0802b278 	.word	0x0802b278
 80136dc:	0802b135 	.word	0x0802b135

080136e0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 80136e0:	b570      	push	{r4, r5, r6, lr}
 80136e2:	2300      	movs	r3, #0
 80136e4:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 80136e8:	1d04      	adds	r4, r0, #4
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	4296      	cmp	r6, r2
 80136ee:	d90a      	bls.n	8013706 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 80136f0:	f854 2b04 	ldr.w	r2, [r4], #4
 80136f4:	428a      	cmp	r2, r1
 80136f6:	d107      	bne.n	8013708 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80136f8:	18c5      	adds	r5, r0, r3
 80136fa:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 80136fe:	b11a      	cbz	r2, 8013708 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8013700:	3a01      	subs	r2, #1
 8013702:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8013706:	bd70      	pop	{r4, r5, r6, pc}
 8013708:	3301      	adds	r3, #1
 801370a:	e7ee      	b.n	80136ea <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801370c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801370c:	2300      	movs	r3, #0
 801370e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8013712:	30a8      	adds	r0, #168	; 0xa8
 8013714:	f820 3c24 	strh.w	r3, [r0, #-36]
 8013718:	f802 3b01 	strb.w	r3, [r2], #1
 801371c:	4282      	cmp	r2, r0
 801371e:	d1fb      	bne.n	8013718 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8013720:	4770      	bx	lr

08013722 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8013722:	4603      	mov	r3, r0
 8013724:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8013728:	2200      	movs	r2, #0
 801372a:	801a      	strh	r2, [r3, #0]
 801372c:	3308      	adds	r3, #8
 801372e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8013732:	f823 2c04 	strh.w	r2, [r3, #-4]
 8013736:	f823 2c02 	strh.w	r2, [r3, #-2]
 801373a:	428b      	cmp	r3, r1
 801373c:	d1f5      	bne.n	801372a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801373e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8013742:	4770      	bx	lr

08013744 <_ZN8touchgfx11ApplicationC1Ev>:
 8013744:	b570      	push	{r4, r5, r6, lr}
 8013746:	4b1a      	ldr	r3, [pc, #104]	; (80137b0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8013748:	2500      	movs	r5, #0
 801374a:	4604      	mov	r4, r0
 801374c:	30a8      	adds	r0, #168	; 0xa8
 801374e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8013752:	f820 5c24 	strh.w	r5, [r0, #-36]
 8013756:	f7ff ffe4 	bl	8013722 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801375a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801375e:	f7ff ffe0 	bl	8013722 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013762:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8013766:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801376a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801376e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8013772:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8013776:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801377a:	490e      	ldr	r1, [pc, #56]	; (80137b4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801377c:	480e      	ldr	r0, [pc, #56]	; (80137b8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801377e:	f00f f829 	bl	80227d4 <CRC_Lock>
 8013782:	4e0e      	ldr	r6, [pc, #56]	; (80137bc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8013784:	4b0e      	ldr	r3, [pc, #56]	; (80137c0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8013786:	b158      	cbz	r0, 80137a0 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8013788:	801d      	strh	r5, [r3, #0]
 801378a:	2300      	movs	r3, #0
 801378c:	4a0d      	ldr	r2, [pc, #52]	; (80137c4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801378e:	4620      	mov	r0, r4
 8013790:	6013      	str	r3, [r2, #0]
 8013792:	4a0d      	ldr	r2, [pc, #52]	; (80137c8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8013794:	6033      	str	r3, [r6, #0]
 8013796:	6013      	str	r3, [r2, #0]
 8013798:	f7ff ffb8 	bl	801370c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801379c:	4620      	mov	r0, r4
 801379e:	bd70      	pop	{r4, r5, r6, pc}
 80137a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80137a4:	2002      	movs	r0, #2
 80137a6:	801a      	strh	r2, [r3, #0]
 80137a8:	6030      	str	r0, [r6, #0]
 80137aa:	f001 fab3 	bl	8014d14 <_ZN8touchgfx6Screen4drawEv>
 80137ae:	e7ec      	b.n	801378a <_ZN8touchgfx11ApplicationC1Ev+0x46>
 80137b0:	0802b1f8 	.word	0x0802b1f8
 80137b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80137b8:	f407a5c2 	.word	0xf407a5c2
 80137bc:	20060c8c 	.word	0x20060c8c
 80137c0:	20000070 	.word	0x20000070
 80137c4:	20060c9c 	.word	0x20060c9c
 80137c8:	20060c90 	.word	0x20060c90

080137cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80137cc:	b510      	push	{r4, lr}
 80137ce:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80137d2:	428b      	cmp	r3, r1
 80137d4:	d806      	bhi.n	80137e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 80137d6:	4b0b      	ldr	r3, [pc, #44]	; (8013804 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 80137d8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80137dc:	4a0a      	ldr	r2, [pc, #40]	; (8013808 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 80137de:	480b      	ldr	r0, [pc, #44]	; (801380c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 80137e0:	f011 fde2 	bl	80253a8 <__assert_func>
 80137e4:	3b01      	subs	r3, #1
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	428b      	cmp	r3, r1
 80137ea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80137ee:	d908      	bls.n	8013802 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 80137f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80137f4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80137fe:	685a      	ldr	r2, [r3, #4]
 8013800:	6062      	str	r2, [r4, #4]
 8013802:	bd10      	pop	{r4, pc}
 8013804:	0802b15f 	.word	0x0802b15f
 8013808:	0802b2bd 	.word	0x0802b2bd
 801380c:	0802b16d 	.word	0x0802b16d

08013810 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8013810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013812:	466b      	mov	r3, sp
 8013814:	4604      	mov	r4, r0
 8013816:	e883 0006 	stmia.w	r3, {r1, r2}
 801381a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801381e:	2a07      	cmp	r2, #7
 8013820:	d906      	bls.n	8013830 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8013822:	4b09      	ldr	r3, [pc, #36]	; (8013848 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8013824:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8013828:	4a08      	ldr	r2, [pc, #32]	; (801384c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801382a:	4809      	ldr	r0, [pc, #36]	; (8013850 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801382c:	f011 fdbc 	bl	80253a8 <__assert_func>
 8013830:	1c51      	adds	r1, r2, #1
 8013832:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8013836:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801383a:	cb03      	ldmia	r3!, {r0, r1}
 801383c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8013840:	6069      	str	r1, [r5, #4]
 8013842:	b003      	add	sp, #12
 8013844:	bd30      	pop	{r4, r5, pc}
 8013846:	bf00      	nop
 8013848:	0802b1be 	.word	0x0802b1be
 801384c:	0802b353 	.word	0x0802b353
 8013850:	0802b16d 	.word	0x0802b16d

08013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	b08d      	sub	sp, #52	; 0x34
 801385a:	4683      	mov	fp, r0
 801385c:	ac08      	add	r4, sp, #32
 801385e:	4620      	mov	r0, r4
 8013860:	e884 0006 	stmia.w	r4, {r1, r2}
 8013864:	f7fb fa53 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013868:	2800      	cmp	r0, #0
 801386a:	d16a      	bne.n	8013942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801386c:	9402      	str	r4, [sp, #8]
 801386e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8013872:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8013876:	2400      	movs	r4, #0
 8013878:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801387c:	9301      	str	r3, [sp, #4]
 801387e:	36a0      	adds	r6, #160	; 0xa0
 8013880:	42a5      	cmp	r5, r4
 8013882:	d00d      	beq.n	80138a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8013884:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8013888:	9802      	ldr	r0, [sp, #8]
 801388a:	f7ff fe89 	bl	80135a0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801388e:	b128      	cbz	r0, 801389c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8013890:	1e69      	subs	r1, r5, #1
 8013892:	9801      	ldr	r0, [sp, #4]
 8013894:	1b09      	subs	r1, r1, r4
 8013896:	b289      	uxth	r1, r1
 8013898:	f7ff ff98 	bl	80137cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801389c:	3401      	adds	r4, #1
 801389e:	e7ef      	b.n	8013880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80138a0:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80138a4:	1e7b      	subs	r3, r7, #1
 80138a6:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80138aa:	9703      	str	r7, [sp, #12]
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	2400      	movs	r4, #0
 80138b0:	4655      	mov	r5, sl
 80138b2:	9704      	str	r7, [sp, #16]
 80138b4:	4626      	mov	r6, r4
 80138b6:	9b04      	ldr	r3, [sp, #16]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d078      	beq.n	80139ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 80138bc:	9902      	ldr	r1, [sp, #8]
 80138be:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80138c2:	f7fd f873 	bl	80109ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 80138c6:	b360      	cbz	r0, 8013922 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80138c8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80138cc:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80138d0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 80138d4:	45e6      	cmp	lr, ip
 80138d6:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80138da:	db35      	blt.n	8013948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80138dc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80138e0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80138e4:	4472      	add	r2, lr
 80138e6:	4463      	add	r3, ip
 80138e8:	b212      	sxth	r2, r2
 80138ea:	b21b      	sxth	r3, r3
 80138ec:	429a      	cmp	r2, r3
 80138ee:	dc2b      	bgt.n	8013948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80138f0:	fa1f f288 	uxth.w	r2, r8
 80138f4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80138f8:	45c1      	cmp	r9, r8
 80138fa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80138fe:	4413      	add	r3, r2
 8013900:	fa1f fc89 	uxth.w	ip, r9
 8013904:	b29b      	uxth	r3, r3
 8013906:	fa0f fe83 	sxth.w	lr, r3
 801390a:	db0f      	blt.n	801392c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801390c:	eba3 030c 	sub.w	r3, r3, ip
 8013910:	1ac9      	subs	r1, r1, r3
 8013912:	b209      	sxth	r1, r1
 8013914:	2900      	cmp	r1, #0
 8013916:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801391a:	dd12      	ble.n	8013942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801391c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8013920:	4604      	mov	r4, r0
 8013922:	9b04      	ldr	r3, [sp, #16]
 8013924:	3d08      	subs	r5, #8
 8013926:	3b01      	subs	r3, #1
 8013928:	9304      	str	r3, [sp, #16]
 801392a:	e7c4      	b.n	80138b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801392c:	4461      	add	r1, ip
 801392e:	b209      	sxth	r1, r1
 8013930:	4571      	cmp	r1, lr
 8013932:	dc3a      	bgt.n	80139aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8013934:	eba2 020c 	sub.w	r2, r2, ip
 8013938:	b212      	sxth	r2, r2
 801393a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801393e:	2a00      	cmp	r2, #0
 8013940:	dcee      	bgt.n	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8013942:	b00d      	add	sp, #52	; 0x34
 8013944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013948:	45c1      	cmp	r9, r8
 801394a:	db2e      	blt.n	80139aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801394c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013950:	4499      	add	r9, r3
 8013952:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8013956:	4498      	add	r8, r3
 8013958:	fa0f f989 	sxth.w	r9, r9
 801395c:	fa0f f888 	sxth.w	r8, r8
 8013960:	45c1      	cmp	r9, r8
 8013962:	dc22      	bgt.n	80139aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8013964:	fa1f f28c 	uxth.w	r2, ip
 8013968:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801396c:	45e6      	cmp	lr, ip
 801396e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8013972:	4413      	add	r3, r2
 8013974:	fa1f f88e 	uxth.w	r8, lr
 8013978:	b29b      	uxth	r3, r3
 801397a:	fa0f f983 	sxth.w	r9, r3
 801397e:	db0a      	blt.n	8013996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8013980:	eba3 0308 	sub.w	r3, r3, r8
 8013984:	1ac9      	subs	r1, r1, r3
 8013986:	b209      	sxth	r1, r1
 8013988:	2900      	cmp	r1, #0
 801398a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801398e:	ddd8      	ble.n	8013942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8013990:	f8ad 9020 	strh.w	r9, [sp, #32]
 8013994:	e7c4      	b.n	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8013996:	4441      	add	r1, r8
 8013998:	b209      	sxth	r1, r1
 801399a:	4549      	cmp	r1, r9
 801399c:	dc05      	bgt.n	80139aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801399e:	eba2 0208 	sub.w	r2, r2, r8
 80139a2:	b212      	sxth	r2, r2
 80139a4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80139a8:	e7c9      	b.n	801393e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80139aa:	4606      	mov	r6, r0
 80139ac:	e7b9      	b.n	8013922 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80139ae:	2c00      	cmp	r4, #0
 80139b0:	f47f af7d 	bne.w	80138ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80139b4:	2e00      	cmp	r6, #0
 80139b6:	f000 81dc 	beq.w	8013d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80139ba:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 80139be:	4655      	mov	r5, sl
 80139c0:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80139c4:	b2b9      	uxth	r1, r7
 80139c6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80139ca:	b2b3      	uxth	r3, r6
 80139cc:	9104      	str	r1, [sp, #16]
 80139ce:	9804      	ldr	r0, [sp, #16]
 80139d0:	441a      	add	r2, r3
 80139d2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80139d6:	b292      	uxth	r2, r2
 80139d8:	4401      	add	r1, r0
 80139da:	fa0f f882 	sxth.w	r8, r2
 80139de:	b289      	uxth	r1, r1
 80139e0:	9105      	str	r1, [sp, #20]
 80139e2:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 80139e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80139ea:	9b03      	ldr	r3, [sp, #12]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d054      	beq.n	8013a9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80139f0:	9902      	ldr	r1, [sp, #8]
 80139f2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80139f6:	f7fc ffd9 	bl	80109ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 80139fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139fe:	b1d8      	cbz	r0, 8013a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013a00:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8013a04:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8013a08:	4576      	cmp	r6, lr
 8013a0a:	dc26      	bgt.n	8013a5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013a0c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8013a10:	44f4      	add	ip, lr
 8013a12:	fa0f fc8c 	sxth.w	ip, ip
 8013a16:	45e0      	cmp	r8, ip
 8013a18:	db1f      	blt.n	8013a5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013a1a:	428f      	cmp	r7, r1
 8013a1c:	fa1f fc81 	uxth.w	ip, r1
 8013a20:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8013a24:	dc0f      	bgt.n	8013a46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8013a26:	9805      	ldr	r0, [sp, #20]
 8013a28:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8013a2c:	eba0 0c0c 	sub.w	ip, r0, ip
 8013a30:	eba1 010c 	sub.w	r1, r1, ip
 8013a34:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8013a38:	4620      	mov	r0, r4
 8013a3a:	9903      	ldr	r1, [sp, #12]
 8013a3c:	3d08      	subs	r5, #8
 8013a3e:	4604      	mov	r4, r0
 8013a40:	3901      	subs	r1, #1
 8013a42:	9103      	str	r1, [sp, #12]
 8013a44:	e7cf      	b.n	80139e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8013a46:	4461      	add	r1, ip
 8013a48:	b209      	sxth	r1, r1
 8013a4a:	4549      	cmp	r1, r9
 8013a4c:	dcf5      	bgt.n	8013a3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013a4e:	9904      	ldr	r1, [sp, #16]
 8013a50:	eba1 0c0c 	sub.w	ip, r1, ip
 8013a54:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8013a58:	e7ee      	b.n	8013a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013a5a:	428f      	cmp	r7, r1
 8013a5c:	dced      	bgt.n	8013a3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013a5e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8013a62:	4461      	add	r1, ip
 8013a64:	b209      	sxth	r1, r1
 8013a66:	4589      	cmp	r9, r1
 8013a68:	dbe7      	blt.n	8013a3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013a6a:	4576      	cmp	r6, lr
 8013a6c:	fa1f fc8e 	uxth.w	ip, lr
 8013a70:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8013a74:	dc08      	bgt.n	8013a88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8013a76:	eba2 0c0c 	sub.w	ip, r2, ip
 8013a7a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8013a7e:	eba1 010c 	sub.w	r1, r1, ip
 8013a82:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8013a86:	e7d7      	b.n	8013a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013a88:	4461      	add	r1, ip
 8013a8a:	b209      	sxth	r1, r1
 8013a8c:	4588      	cmp	r8, r1
 8013a8e:	dbd4      	blt.n	8013a3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013a90:	eba3 0c0c 	sub.w	ip, r3, ip
 8013a94:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8013a98:	e7ce      	b.n	8013a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013a9a:	2c00      	cmp	r4, #0
 8013a9c:	f000 8169 	beq.w	8013d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8013aa0:	9b00      	ldr	r3, [sp, #0]
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	f000 8165 	beq.w	8013d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8013aa8:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8013aac:	9802      	ldr	r0, [sp, #8]
 8013aae:	4621      	mov	r1, r4
 8013ab0:	f7ff fd76 	bl	80135a0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013ab4:	b120      	cbz	r0, 8013ac0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8013ab6:	f8bd 1000 	ldrh.w	r1, [sp]
 8013aba:	9801      	ldr	r0, [sp, #4]
 8013abc:	f7ff fe86 	bl	80137cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013ac0:	9902      	ldr	r1, [sp, #8]
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	f7fc ff72 	bl	80109ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	f000 809b 	beq.w	8013c04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8013ace:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8013ad2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8013ad6:	fa1f f288 	uxth.w	r2, r8
 8013ada:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8013ade:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8013ae2:	19d5      	adds	r5, r2, r7
 8013ae4:	b2a1      	uxth	r1, r4
 8013ae6:	45a0      	cmp	r8, r4
 8013ae8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8013aec:	fa1f f985 	uxth.w	r9, r5
 8013af0:	440b      	add	r3, r1
 8013af2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8013af6:	fa0f f589 	sxth.w	r5, r9
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	9503      	str	r5, [sp, #12]
 8013afe:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8013b02:	9507      	str	r5, [sp, #28]
 8013b04:	f340 809d 	ble.w	8013c42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8013b08:	1a52      	subs	r2, r2, r1
 8013b0a:	4584      	cmp	ip, r0
 8013b0c:	fa0f fe83 	sxth.w	lr, r3
 8013b10:	b292      	uxth	r2, r2
 8013b12:	b215      	sxth	r5, r2
 8013b14:	dd2f      	ble.n	8013b76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8013b16:	9e00      	ldr	r6, [sp, #0]
 8013b18:	fa1f fc8c 	uxth.w	ip, ip
 8013b1c:	b280      	uxth	r0, r0
 8013b1e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8013b22:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8013b26:	9e03      	ldr	r6, [sp, #12]
 8013b28:	ebac 0300 	sub.w	r3, ip, r0
 8013b2c:	448c      	add	ip, r1
 8013b2e:	eba6 060e 	sub.w	r6, r6, lr
 8013b32:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8013b36:	b29b      	uxth	r3, r3
 8013b38:	4470      	add	r0, lr
 8013b3a:	fa0f fc8c 	sxth.w	ip, ip
 8013b3e:	b21c      	sxth	r4, r3
 8013b40:	b200      	sxth	r0, r0
 8013b42:	4366      	muls	r6, r4
 8013b44:	ebac 0000 	sub.w	r0, ip, r0
 8013b48:	4368      	muls	r0, r5
 8013b4a:	4286      	cmp	r6, r0
 8013b4c:	db09      	blt.n	8013b62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8013b4e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8013b52:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8013b56:	4417      	add	r7, r2
 8013b58:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013b5c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8013b60:	e685      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013b62:	440b      	add	r3, r1
 8013b64:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8013b68:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013b6c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8013b70:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013b74:	e67b      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013b76:	9e03      	ldr	r6, [sp, #12]
 8013b78:	45b6      	cmp	lr, r6
 8013b7a:	da28      	bge.n	8013bce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8013b7c:	9b00      	ldr	r3, [sp, #0]
 8013b7e:	eba6 060e 	sub.w	r6, r6, lr
 8013b82:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8013b86:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8013b8a:	eb04 030c 	add.w	r3, r4, ip
 8013b8e:	fa1f f883 	uxth.w	r8, r3
 8013b92:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8013b96:	4403      	add	r3, r0
 8013b98:	fa0f f988 	sxth.w	r9, r8
 8013b9c:	eba0 000c 	sub.w	r0, r0, ip
 8013ba0:	eba3 0308 	sub.w	r3, r3, r8
 8013ba4:	4368      	muls	r0, r5
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	fa0f f883 	sxth.w	r8, r3
 8013bac:	fb08 f606 	mul.w	r6, r8, r6
 8013bb0:	42b0      	cmp	r0, r6
 8013bb2:	dc06      	bgt.n	8013bc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8013bb4:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8013bb8:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8013bbc:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8013bc0:	e7c9      	b.n	8013b56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8013bc2:	4423      	add	r3, r4
 8013bc4:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8013bc8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013bcc:	e64f      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013bce:	eba3 0309 	sub.w	r3, r3, r9
 8013bd2:	9807      	ldr	r0, [sp, #28]
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	2806      	cmp	r0, #6
 8013bd8:	fa0f fc83 	sxth.w	ip, r3
 8013bdc:	d818      	bhi.n	8013c10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8013bde:	4652      	mov	r2, sl
 8013be0:	ab0a      	add	r3, sp, #40	; 0x28
 8013be2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8013be6:	6851      	ldr	r1, [r2, #4]
 8013be8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8013bec:	c303      	stmia	r3!, {r0, r1}
 8013bee:	9b03      	ldr	r3, [sp, #12]
 8013bf0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8013bf4:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8013bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8013bfa:	9801      	ldr	r0, [sp, #4]
 8013bfc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013c00:	f7ff fe06 	bl	8013810 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8013c04:	9b00      	ldr	r3, [sp, #0]
 8013c06:	f1aa 0a08 	sub.w	sl, sl, #8
 8013c0a:	3b01      	subs	r3, #1
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	e747      	b.n	8013aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8013c10:	9800      	ldr	r0, [sp, #0]
 8013c12:	45ac      	cmp	ip, r5
 8013c14:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8013c18:	db0c      	blt.n	8013c34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8013c1a:	4417      	add	r7, r2
 8013c1c:	4458      	add	r0, fp
 8013c1e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013c22:	b2bf      	uxth	r7, r7
 8013c24:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8013c28:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8013c2c:	440f      	add	r7, r1
 8013c2e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8013c32:	e61c      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013c34:	4458      	add	r0, fp
 8013c36:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8013c3a:	443b      	add	r3, r7
 8013c3c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013c40:	e615      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013c42:	fa1f f18c 	uxth.w	r1, ip
 8013c46:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8013c4a:	b282      	uxth	r2, r0
 8013c4c:	4584      	cmp	ip, r0
 8013c4e:	eb01 0e05 	add.w	lr, r1, r5
 8013c52:	9204      	str	r2, [sp, #16]
 8013c54:	fa1f fe8e 	uxth.w	lr, lr
 8013c58:	9e04      	ldr	r6, [sp, #16]
 8013c5a:	fa0f f28e 	sxth.w	r2, lr
 8013c5e:	9205      	str	r2, [sp, #20]
 8013c60:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8013c64:	4432      	add	r2, r6
 8013c66:	b292      	uxth	r2, r2
 8013c68:	9206      	str	r2, [sp, #24]
 8013c6a:	da26      	bge.n	8013cba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8013c6c:	eba3 0309 	sub.w	r3, r3, r9
 8013c70:	eba2 020e 	sub.w	r2, r2, lr
 8013c74:	eba0 000c 	sub.w	r0, r0, ip
 8013c78:	eba4 0408 	sub.w	r4, r4, r8
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	b292      	uxth	r2, r2
 8013c80:	fa0f fa83 	sxth.w	sl, r3
 8013c84:	b211      	sxth	r1, r2
 8013c86:	fb0a f000 	mul.w	r0, sl, r0
 8013c8a:	434c      	muls	r4, r1
 8013c8c:	42a0      	cmp	r0, r4
 8013c8e:	9800      	ldr	r0, [sp, #0]
 8013c90:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8013c94:	dc06      	bgt.n	8013ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8013c96:	4458      	add	r0, fp
 8013c98:	9a05      	ldr	r2, [sp, #20]
 8013c9a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8013c9e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8013ca2:	e7ca      	b.n	8013c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8013ca4:	eb0b 0300 	add.w	r3, fp, r0
 8013ca8:	9903      	ldr	r1, [sp, #12]
 8013caa:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8013cae:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8013cb2:	442a      	add	r2, r5
 8013cb4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8013cb8:	e5d9      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013cba:	9e04      	ldr	r6, [sp, #16]
 8013cbc:	9a03      	ldr	r2, [sp, #12]
 8013cbe:	1b89      	subs	r1, r1, r6
 8013cc0:	b21e      	sxth	r6, r3
 8013cc2:	b289      	uxth	r1, r1
 8013cc4:	4296      	cmp	r6, r2
 8013cc6:	fa0f fc81 	sxth.w	ip, r1
 8013cca:	dd25      	ble.n	8013d18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8013ccc:	eba3 0309 	sub.w	r3, r3, r9
 8013cd0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8013cd4:	9e05      	ldr	r6, [sp, #20]
 8013cd6:	eba4 0408 	sub.w	r4, r4, r8
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	eba6 0902 	sub.w	r9, r6, r2
 8013ce0:	fb0c f404 	mul.w	r4, ip, r4
 8013ce4:	b218      	sxth	r0, r3
 8013ce6:	9a00      	ldr	r2, [sp, #0]
 8013ce8:	fb00 f909 	mul.w	r9, r0, r9
 8013cec:	00d2      	lsls	r2, r2, #3
 8013cee:	454c      	cmp	r4, r9
 8013cf0:	db03      	blt.n	8013cfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8013cf2:	445a      	add	r2, fp
 8013cf4:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8013cf8:	e79f      	b.n	8013c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8013cfa:	eb0b 0302 	add.w	r3, fp, r2
 8013cfe:	9a03      	ldr	r2, [sp, #12]
 8013d00:	4429      	add	r1, r5
 8013d02:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8013d06:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8013d0a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8013d0e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8013d12:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013d16:	e5aa      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013d18:	9b06      	ldr	r3, [sp, #24]
 8013d1a:	9c07      	ldr	r4, [sp, #28]
 8013d1c:	eba3 020e 	sub.w	r2, r3, lr
 8013d20:	2c06      	cmp	r4, #6
 8013d22:	b292      	uxth	r2, r2
 8013d24:	b213      	sxth	r3, r2
 8013d26:	d80d      	bhi.n	8013d44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8013d28:	4651      	mov	r1, sl
 8013d2a:	aa0a      	add	r2, sp, #40	; 0x28
 8013d2c:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8013d30:	6849      	ldr	r1, [r1, #4]
 8013d32:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8013d36:	9b05      	ldr	r3, [sp, #20]
 8013d38:	c203      	stmia	r2!, {r0, r1}
 8013d3a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8013d3e:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8013d42:	e759      	b.n	8013bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8013d44:	9c00      	ldr	r4, [sp, #0]
 8013d46:	4563      	cmp	r3, ip
 8013d48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013d4c:	db0d      	blt.n	8013d6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8013d4e:	4429      	add	r1, r5
 8013d50:	9a04      	ldr	r2, [sp, #16]
 8013d52:	445c      	add	r4, fp
 8013d54:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8013d58:	b289      	uxth	r1, r1
 8013d5a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8013d5e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8013d62:	4411      	add	r1, r2
 8013d64:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8013d68:	e581      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013d6a:	445c      	add	r4, fp
 8013d6c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8013d70:	e79f      	b.n	8013cb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8013d72:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8013d76:	2f07      	cmp	r7, #7
 8013d78:	d806      	bhi.n	8013d88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8013d7a:	ab08      	add	r3, sp, #32
 8013d7c:	9801      	ldr	r0, [sp, #4]
 8013d7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013d82:	f7ff fd45 	bl	8013810 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8013d86:	e5dc      	b.n	8013942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8013d88:	f107 39ff 	add.w	r9, r7, #4294967295
 8013d8c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8013d90:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8013d94:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8013d98:	f04f 35ff 	mov.w	r5, #4294967295
 8013d9c:	2400      	movs	r4, #0
 8013d9e:	9304      	str	r3, [sp, #16]
 8013da0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8013da4:	f109 32ff 	add.w	r2, r9, #4294967295
 8013da8:	9300      	str	r3, [sp, #0]
 8013daa:	4690      	mov	r8, r2
 8013dac:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8013db0:	9303      	str	r3, [sp, #12]
 8013db2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013db6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013dba:	6818      	ldr	r0, [r3, #0]
 8013dbc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8013dc0:	9206      	str	r2, [sp, #24]
 8013dc2:	bf16      	itet	ne
 8013dc4:	9904      	ldrne	r1, [sp, #16]
 8013dc6:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8013dca:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8013dce:	9305      	str	r3, [sp, #20]
 8013dd0:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013dd4:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8013dd8:	fb16 f601 	smulbb	r6, r6, r1
 8013ddc:	6859      	ldr	r1, [r3, #4]
 8013dde:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013de2:	4671      	mov	r1, lr
 8013de4:	a80a      	add	r0, sp, #40	; 0x28
 8013de6:	f7ff fbfd 	bl	80135e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013dea:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8013dee:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013df2:	9b03      	ldr	r3, [sp, #12]
 8013df4:	9a00      	ldr	r2, [sp, #0]
 8013df6:	fb11 f100 	smulbb	r1, r1, r0
 8013dfa:	2008      	movs	r0, #8
 8013dfc:	fb02 6603 	mla	r6, r2, r3, r6
 8013e00:	1b8e      	subs	r6, r1, r6
 8013e02:	fb91 f1f0 	sdiv	r1, r1, r0
 8013e06:	42b1      	cmp	r1, r6
 8013e08:	dc21      	bgt.n	8013e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8013e0a:	4556      	cmp	r6, sl
 8013e0c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8013e10:	da03      	bge.n	8013e1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8013e12:	b1e6      	cbz	r6, 8013e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8013e14:	46b2      	mov	sl, r6
 8013e16:	4645      	mov	r5, r8
 8013e18:	464c      	mov	r4, r9
 8013e1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013e1e:	f118 0f02 	cmn.w	r8, #2
 8013e22:	d1c8      	bne.n	8013db6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8013e24:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013e28:	f1a7 0708 	sub.w	r7, r7, #8
 8013e2c:	4691      	mov	r9, r2
 8013e2e:	d1b7      	bne.n	8013da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8013e30:	9b01      	ldr	r3, [sp, #4]
 8013e32:	b2a6      	uxth	r6, r4
 8013e34:	00e4      	lsls	r4, r4, #3
 8013e36:	1918      	adds	r0, r3, r4
 8013e38:	1c6b      	adds	r3, r5, #1
 8013e3a:	d10b      	bne.n	8013e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8013e3c:	4601      	mov	r1, r0
 8013e3e:	9802      	ldr	r0, [sp, #8]
 8013e40:	f7ff fbd0 	bl	80135e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013e44:	4631      	mov	r1, r6
 8013e46:	9801      	ldr	r0, [sp, #4]
 8013e48:	f7ff fcc0 	bl	80137cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013e4c:	e50f      	b.n	801386e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8013e4e:	4645      	mov	r5, r8
 8013e50:	464c      	mov	r4, r9
 8013e52:	e7ed      	b.n	8013e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8013e54:	9b01      	ldr	r3, [sp, #4]
 8013e56:	00ed      	lsls	r5, r5, #3
 8013e58:	445c      	add	r4, fp
 8013e5a:	1959      	adds	r1, r3, r5
 8013e5c:	445d      	add	r5, fp
 8013e5e:	f7ff fbc1 	bl	80135e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013e62:	9b02      	ldr	r3, [sp, #8]
 8013e64:	cb03      	ldmia	r3!, {r0, r1}
 8013e66:	9b02      	ldr	r3, [sp, #8]
 8013e68:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8013e6c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8013e70:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8013e74:	6861      	ldr	r1, [r4, #4]
 8013e76:	c303      	stmia	r3!, {r0, r1}
 8013e78:	e7e4      	b.n	8013e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08013e7c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8013e7c:	4b1d      	ldr	r3, [pc, #116]	; (8013ef4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8013e7e:	b530      	push	{r4, r5, lr}
 8013e80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013e84:	b085      	sub	sp, #20
 8013e86:	4b1c      	ldr	r3, [pc, #112]	; (8013ef8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8013e88:	460c      	mov	r4, r1
 8013e8a:	2100      	movs	r1, #0
 8013e8c:	4605      	mov	r5, r0
 8013e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e92:	6820      	ldr	r0, [r4, #0]
 8013e94:	9100      	str	r1, [sp, #0]
 8013e96:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e9a:	ab02      	add	r3, sp, #8
 8013e9c:	6861      	ldr	r1, [r4, #4]
 8013e9e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013ea2:	c303      	stmia	r3!, {r0, r1}
 8013ea4:	4669      	mov	r1, sp
 8013ea6:	a802      	add	r0, sp, #8
 8013ea8:	f7fa feee 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8013eac:	ab02      	add	r3, sp, #8
 8013eae:	cb03      	ldmia	r3!, {r0, r1}
 8013eb0:	4b12      	ldr	r3, [pc, #72]	; (8013efc <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8013eb2:	6020      	str	r0, [r4, #0]
 8013eb4:	6818      	ldr	r0, [r3, #0]
 8013eb6:	6061      	str	r1, [r4, #4]
 8013eb8:	b138      	cbz	r0, 8013eca <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8013eba:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8013ebe:	b133      	cbz	r3, 8013ece <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8013ec0:	6821      	ldr	r1, [r4, #0]
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	6862      	ldr	r2, [r4, #4]
 8013ec6:	f7ff fcc5 	bl	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013eca:	b005      	add	sp, #20
 8013ecc:	bd30      	pop	{r4, r5, pc}
 8013ece:	6803      	ldr	r3, [r0, #0]
 8013ed0:	4621      	mov	r1, r4
 8013ed2:	689b      	ldr	r3, [r3, #8]
 8013ed4:	4798      	blx	r3
 8013ed6:	4b0a      	ldr	r3, [pc, #40]	; (8013f00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8013ed8:	6818      	ldr	r0, [r3, #0]
 8013eda:	b118      	cbz	r0, 8013ee4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8013edc:	6803      	ldr	r3, [r0, #0]
 8013ede:	4621      	mov	r1, r4
 8013ee0:	689b      	ldr	r3, [r3, #8]
 8013ee2:	4798      	blx	r3
 8013ee4:	4b07      	ldr	r3, [pc, #28]	; (8013f04 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	6818      	ldr	r0, [r3, #0]
 8013eea:	6803      	ldr	r3, [r0, #0]
 8013eec:	69db      	ldr	r3, [r3, #28]
 8013eee:	4798      	blx	r3
 8013ef0:	e7eb      	b.n	8013eca <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8013ef2:	bf00      	nop
 8013ef4:	20060c24 	.word	0x20060c24
 8013ef8:	20060c26 	.word	0x20060c26
 8013efc:	20060c8c 	.word	0x20060c8c
 8013f00:	20060c88 	.word	0x20060c88
 8013f04:	20060c30 	.word	0x20060c30

08013f08 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8013f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	b09b      	sub	sp, #108	; 0x6c
 8013f10:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8013f14:	b129      	cbz	r1, 8013f22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8013f16:	2300      	movs	r3, #0
 8013f18:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8013f1c:	b01b      	add	sp, #108	; 0x6c
 8013f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f22:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8013f26:	4630      	mov	r0, r6
 8013f28:	f7fa fef1 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f2c:	4605      	mov	r5, r0
 8013f2e:	b940      	cbnz	r0, 8013f42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8013f30:	4620      	mov	r0, r4
 8013f32:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013f36:	f7ff fc8d 	bl	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013f3a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8013f3e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8013f42:	4ba6      	ldr	r3, [pc, #664]	; (80141dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	b33b      	cbz	r3, 8013f98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8013f48:	4da5      	ldr	r5, [pc, #660]	; (80141e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f7fa fedf 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f50:	4606      	mov	r6, r0
 8013f52:	bb08      	cbnz	r0, 8013f98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8013f54:	4628      	mov	r0, r5
 8013f56:	f7ff f9ad 	bl	80132b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013f5a:	6829      	ldr	r1, [r5, #0]
 8013f5c:	686a      	ldr	r2, [r5, #4]
 8013f5e:	4620      	mov	r0, r4
 8013f60:	f7ff fc78 	bl	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013f64:	802e      	strh	r6, [r5, #0]
 8013f66:	806e      	strh	r6, [r5, #2]
 8013f68:	80ae      	strh	r6, [r5, #4]
 8013f6a:	80ee      	strh	r6, [r5, #6]
 8013f6c:	4f9d      	ldr	r7, [pc, #628]	; (80141e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8013f6e:	a809      	add	r0, sp, #36	; 0x24
 8013f70:	f7ff fbd7 	bl	8013722 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013f74:	883d      	ldrh	r5, [r7, #0]
 8013f76:	462e      	mov	r6, r5
 8013f78:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013f7c:	42b3      	cmp	r3, r6
 8013f7e:	d910      	bls.n	8013fa2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8013f80:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8013f84:	3601      	adds	r6, #1
 8013f86:	a809      	add	r0, sp, #36	; 0x24
 8013f88:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8013f8c:	b2b6      	uxth	r6, r6
 8013f8e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8013f92:	f7ff fc3d 	bl	8013810 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8013f96:	e7ef      	b.n	8013f78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8013f98:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d1e5      	bne.n	8013f6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8013fa0:	e7bc      	b.n	8013f1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8013fa2:	462e      	mov	r6, r5
 8013fa4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8013fa8:	42b3      	cmp	r3, r6
 8013faa:	d90b      	bls.n	8013fc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8013fac:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8013fb0:	3601      	adds	r6, #1
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8013fb8:	b2b6      	uxth	r6, r6
 8013fba:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8013fbe:	f7ff fc49 	bl	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013fc2:	e7ef      	b.n	8013fa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8013fc4:	4a88      	ldr	r2, [pc, #544]	; (80141e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8013fc6:	6813      	ldr	r3, [r2, #0]
 8013fc8:	4690      	mov	r8, r2
 8013fca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fce:	2b01      	cmp	r3, #1
 8013fd0:	f040 8094 	bne.w	80140fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8013fd4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8013fd8:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8013fdc:	f04f 0900 	mov.w	r9, #0
 8013fe0:	33aa      	adds	r3, #170	; 0xaa
 8013fe2:	42a8      	cmp	r0, r5
 8013fe4:	f103 0308 	add.w	r3, r3, #8
 8013fe8:	dd0a      	ble.n	8014000 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8013fea:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8013fee:	3501      	adds	r5, #1
 8013ff0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8013ff4:	440a      	add	r2, r1
 8013ff6:	b212      	sxth	r2, r2
 8013ff8:	4591      	cmp	r9, r2
 8013ffa:	bfb8      	it	lt
 8013ffc:	4691      	movlt	r9, r2
 8013ffe:	e7f0      	b.n	8013fe2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8014000:	4b7a      	ldr	r3, [pc, #488]	; (80141ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8014002:	4e7b      	ldr	r6, [pc, #492]	; (80141f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8014004:	881d      	ldrh	r5, [r3, #0]
 8014006:	2300      	movs	r3, #0
 8014008:	2d0f      	cmp	r5, #15
 801400a:	bf8c      	ite	hi
 801400c:	08ed      	lsrhi	r5, r5, #3
 801400e:	2501      	movls	r5, #1
 8014010:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8014014:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014018:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801401c:	f8d8 0000 	ldr.w	r0, [r8]
 8014020:	440b      	add	r3, r1
 8014022:	6802      	ldr	r2, [r0, #0]
 8014024:	b21b      	sxth	r3, r3
 8014026:	4599      	cmp	r9, r3
 8014028:	dd4b      	ble.n	80140c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801402a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801402e:	4798      	blx	r3
 8014030:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014034:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014038:	4413      	add	r3, r2
 801403a:	b21b      	sxth	r3, r3
 801403c:	195a      	adds	r2, r3, r5
 801403e:	4290      	cmp	r0, r2
 8014040:	da07      	bge.n	8014052 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8014042:	4581      	cmp	r9, r0
 8014044:	dd05      	ble.n	8014052 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8014046:	4298      	cmp	r0, r3
 8014048:	da33      	bge.n	80140b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801404a:	2b00      	cmp	r3, #0
 801404c:	dd31      	ble.n	80140b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801404e:	4648      	mov	r0, r9
 8014050:	e004      	b.n	801405c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8014052:	4298      	cmp	r0, r3
 8014054:	dbfb      	blt.n	801404e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8014056:	4548      	cmp	r0, r9
 8014058:	bfa8      	it	ge
 801405a:	4648      	movge	r0, r9
 801405c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8014060:	2100      	movs	r1, #0
 8014062:	1ac0      	subs	r0, r0, r3
 8014064:	f8b7 a000 	ldrh.w	sl, [r7]
 8014068:	f8ad 1014 	strh.w	r1, [sp, #20]
 801406c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014070:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014074:	f8ad 001a 	strh.w	r0, [sp, #26]
 8014078:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801407c:	4553      	cmp	r3, sl
 801407e:	d9c9      	bls.n	8014014 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8014080:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8014084:	ab07      	add	r3, sp, #28
 8014086:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801408a:	6851      	ldr	r1, [r2, #4]
 801408c:	c303      	stmia	r3!, {r0, r1}
 801408e:	a807      	add	r0, sp, #28
 8014090:	a905      	add	r1, sp, #20
 8014092:	f7fa fdf9 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8014096:	a807      	add	r0, sp, #28
 8014098:	f7fa fe39 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 801409c:	b920      	cbnz	r0, 80140a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801409e:	6823      	ldr	r3, [r4, #0]
 80140a0:	a907      	add	r1, sp, #28
 80140a2:	4620      	mov	r0, r4
 80140a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140a6:	4798      	blx	r3
 80140a8:	f10a 0a01 	add.w	sl, sl, #1
 80140ac:	fa1f fa8a 	uxth.w	sl, sl
 80140b0:	e7e2      	b.n	8014078 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 80140b2:	f8d8 0000 	ldr.w	r0, [r8]
 80140b6:	2101      	movs	r1, #1
 80140b8:	6803      	ldr	r3, [r0, #0]
 80140ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140be:	4798      	blx	r3
 80140c0:	e7a8      	b.n	8014014 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80140c2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80140c4:	4798      	blx	r3
 80140c6:	4b4b      	ldr	r3, [pc, #300]	; (80141f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	f43f af26 	beq.w	8013f1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80140d0:	2300      	movs	r3, #0
 80140d2:	883d      	ldrh	r5, [r7, #0]
 80140d4:	34ea      	adds	r4, #234	; 0xea
 80140d6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80140da:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80140de:	42ab      	cmp	r3, r5
 80140e0:	f67f af1c 	bls.w	8013f1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80140e4:	ab1a      	add	r3, sp, #104	; 0x68
 80140e6:	4620      	mov	r0, r4
 80140e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80140ec:	3501      	adds	r5, #1
 80140ee:	3b44      	subs	r3, #68	; 0x44
 80140f0:	b2ad      	uxth	r5, r5
 80140f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80140f6:	f7ff fb8b 	bl	8013810 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80140fa:	e7ee      	b.n	80140da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 80140fc:	2b02      	cmp	r3, #2
 80140fe:	f040 813d 	bne.w	801437c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8014102:	4b3d      	ldr	r3, [pc, #244]	; (80141f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	2b01      	cmp	r3, #1
 8014108:	d02c      	beq.n	8014164 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801410a:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801410e:	883a      	ldrh	r2, [r7, #0]
 8014110:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8014114:	3201      	adds	r2, #1
 8014116:	b292      	uxth	r2, r2
 8014118:	2900      	cmp	r1, #0
 801411a:	d0d4      	beq.n	80140c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801411c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8014120:	4610      	mov	r0, r2
 8014122:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8014126:	f04f 0a00 	mov.w	sl, #0
 801412a:	441d      	add	r5, r3
 801412c:	b22d      	sxth	r5, r5
 801412e:	b283      	uxth	r3, r0
 8014130:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8014134:	4299      	cmp	r1, r3
 8014136:	f240 80c3 	bls.w	80142c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801413a:	4426      	add	r6, r4
 801413c:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8014140:	4684      	mov	ip, r0
 8014142:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8014146:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801414a:	4573      	cmp	r3, lr
 801414c:	f340 80a5 	ble.w	801429a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8014150:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8014154:	4475      	add	r5, lr
 8014156:	b22d      	sxth	r5, r5
 8014158:	429d      	cmp	r5, r3
 801415a:	bfa8      	it	ge
 801415c:	461d      	movge	r5, r3
 801415e:	3001      	adds	r0, #1
 8014160:	46e2      	mov	sl, ip
 8014162:	e7e4      	b.n	801412e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8014164:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8014168:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801416c:	f1bb 0f00 	cmp.w	fp, #0
 8014170:	d0a9      	beq.n	80140c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8014172:	883b      	ldrh	r3, [r7, #0]
 8014174:	2600      	movs	r6, #0
 8014176:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801417a:	3301      	adds	r3, #1
 801417c:	b29b      	uxth	r3, r3
 801417e:	b299      	uxth	r1, r3
 8014180:	00f5      	lsls	r5, r6, #3
 8014182:	458b      	cmp	fp, r1
 8014184:	d93a      	bls.n	80141fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8014186:	4425      	add	r5, r4
 8014188:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801418c:	469c      	mov	ip, r3
 801418e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8014192:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8014196:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801419a:	4408      	add	r0, r1
 801419c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80141a0:	4471      	add	r1, lr
 80141a2:	b200      	sxth	r0, r0
 80141a4:	b209      	sxth	r1, r1
 80141a6:	4288      	cmp	r0, r1
 80141a8:	da06      	bge.n	80141b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 80141aa:	4586      	cmp	lr, r0
 80141ac:	4672      	mov	r2, lr
 80141ae:	bfb8      	it	lt
 80141b0:	4602      	movlt	r2, r0
 80141b2:	3301      	adds	r3, #1
 80141b4:	4666      	mov	r6, ip
 80141b6:	e7e2      	b.n	801417e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80141b8:	d10b      	bne.n	80141d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 80141ba:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80141be:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80141c2:	458c      	cmp	ip, r1
 80141c4:	bfb4      	ite	lt
 80141c6:	469c      	movlt	ip, r3
 80141c8:	46b4      	movge	ip, r6
 80141ca:	4572      	cmp	r2, lr
 80141cc:	bfb8      	it	lt
 80141ce:	4672      	movlt	r2, lr
 80141d0:	e7ef      	b.n	80141b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80141d2:	428a      	cmp	r2, r1
 80141d4:	46b4      	mov	ip, r6
 80141d6:	bfb8      	it	lt
 80141d8:	460a      	movlt	r2, r1
 80141da:	e7ea      	b.n	80141b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80141dc:	20060c88 	.word	0x20060c88
 80141e0:	20060c94 	.word	0x20060c94
 80141e4:	20000070 	.word	0x20000070
 80141e8:	20060c30 	.word	0x20060c30
 80141ec:	20060c26 	.word	0x20060c26
 80141f0:	20060c24 	.word	0x20060c24
 80141f4:	20060c2e 	.word	0x20060c2e
 80141f8:	20060c28 	.word	0x20060c28
 80141fc:	1961      	adds	r1, r4, r5
 80141fe:	ab07      	add	r3, sp, #28
 8014200:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8014204:	6849      	ldr	r1, [r1, #4]
 8014206:	c303      	stmia	r3!, {r0, r1}
 8014208:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801420c:	a807      	add	r0, sp, #28
 801420e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014212:	2b13      	cmp	r3, #19
 8014214:	440b      	add	r3, r1
 8014216:	bfd8      	it	le
 8014218:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801421c:	1a9b      	subs	r3, r3, r2
 801421e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014222:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014226:	f7ff f85f 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801422a:	a807      	add	r0, sp, #28
 801422c:	f7fa fd6f 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014230:	2800      	cmp	r0, #0
 8014232:	d199      	bne.n	8014168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8014234:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8014238:	4425      	add	r5, r4
 801423a:	f8d8 0000 	ldr.w	r0, [r8]
 801423e:	f1bc 0f14 	cmp.w	ip, #20
 8014242:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014246:	f8d0 e000 	ldr.w	lr, [r0]
 801424a:	bfa8      	it	ge
 801424c:	f04f 0c14 	movge.w	ip, #20
 8014250:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014254:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014258:	fa1f fc8c 	uxth.w	ip, ip
 801425c:	f8cd c000 	str.w	ip, [sp]
 8014260:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 8014264:	47d0      	blx	sl
 8014266:	4682      	mov	sl, r0
 8014268:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801426c:	a807      	add	r0, sp, #28
 801426e:	f7ff f821 	bl	80132b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014272:	6823      	ldr	r3, [r4, #0]
 8014274:	4620      	mov	r0, r4
 8014276:	a907      	add	r1, sp, #28
 8014278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801427a:	4798      	blx	r3
 801427c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8014280:	eba0 000a 	sub.w	r0, r0, sl
 8014284:	b200      	sxth	r0, r0
 8014286:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801428a:	2800      	cmp	r0, #0
 801428c:	f47f af6c 	bne.w	8014168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8014290:	b2b1      	uxth	r1, r6
 8014292:	4648      	mov	r0, r9
 8014294:	f7ff fa9a 	bl	80137cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014298:	e766      	b.n	8014168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801429a:	d10c      	bne.n	80142b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801429c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 80142a0:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 80142a4:	45b4      	cmp	ip, r6
 80142a6:	bfb4      	ite	lt
 80142a8:	4684      	movlt	ip, r0
 80142aa:	46d4      	movge	ip, sl
 80142ac:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 80142b0:	4433      	add	r3, r6
 80142b2:	b21b      	sxth	r3, r3
 80142b4:	e750      	b.n	8014158 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 80142b6:	4575      	cmp	r5, lr
 80142b8:	46d4      	mov	ip, sl
 80142ba:	bfa8      	it	ge
 80142bc:	4675      	movge	r5, lr
 80142be:	e74e      	b.n	801415e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 80142c0:	eb0b 0006 	add.w	r0, fp, r6
 80142c4:	4426      	add	r6, r4
 80142c6:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 80142ca:	f1b9 0f13 	cmp.w	r9, #19
 80142ce:	bfdc      	itt	le
 80142d0:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 80142d4:	444d      	addle	r5, r9
 80142d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80142da:	bfd8      	it	le
 80142dc:	b22d      	sxthle	r5, r5
 80142de:	f7fa fd16 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80142e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80142e6:	2800      	cmp	r0, #0
 80142e8:	f47f af16 	bne.w	8014118 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 80142ec:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 80142f0:	fa1f f989 	uxth.w	r9, r9
 80142f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80142f8:	eba5 050c 	sub.w	r5, r5, ip
 80142fc:	fa1f f28c 	uxth.w	r2, ip
 8014300:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8014304:	eb02 0009 	add.w	r0, r2, r9
 8014308:	2d14      	cmp	r5, #20
 801430a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801430e:	bfa8      	it	ge
 8014310:	2514      	movge	r5, #20
 8014312:	b200      	sxth	r0, r0
 8014314:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014318:	b289      	uxth	r1, r1
 801431a:	fa1f fe85 	uxth.w	lr, r5
 801431e:	eba0 000c 	sub.w	r0, r0, ip
 8014322:	f8ad c01e 	strh.w	ip, [sp, #30]
 8014326:	4586      	cmp	lr, r0
 8014328:	f8d8 0000 	ldr.w	r0, [r8]
 801432c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014330:	b29b      	uxth	r3, r3
 8014332:	bfb8      	it	lt
 8014334:	46f1      	movlt	r9, lr
 8014336:	6805      	ldr	r5, [r0, #0]
 8014338:	f8cd 9000 	str.w	r9, [sp]
 801433c:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8014340:	47a8      	blx	r5
 8014342:	6823      	ldr	r3, [r4, #0]
 8014344:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014348:	a907      	add	r1, sp, #28
 801434a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801434c:	4620      	mov	r0, r4
 801434e:	4798      	blx	r3
 8014350:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014354:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8014358:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801435c:	1a5b      	subs	r3, r3, r1
 801435e:	440a      	add	r2, r1
 8014360:	b21b      	sxth	r3, r3
 8014362:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8014366:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801436a:	2b00      	cmp	r3, #0
 801436c:	f47f aecf 	bne.w	801410e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8014370:	fa1f f18a 	uxth.w	r1, sl
 8014374:	4658      	mov	r0, fp
 8014376:	f7ff fa29 	bl	80137cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801437a:	e6c8      	b.n	801410e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801437c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8014380:	42ab      	cmp	r3, r5
 8014382:	f67f aea0 	bls.w	80140c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8014386:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801438a:	ab07      	add	r3, sp, #28
 801438c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8014390:	6851      	ldr	r1, [r2, #4]
 8014392:	c303      	stmia	r3!, {r0, r1}
 8014394:	a807      	add	r0, sp, #28
 8014396:	f7fa fcba 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 801439a:	b920      	cbnz	r0, 80143a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801439c:	6823      	ldr	r3, [r4, #0]
 801439e:	a907      	add	r1, sp, #28
 80143a0:	4620      	mov	r0, r4
 80143a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143a4:	4798      	blx	r3
 80143a6:	3501      	adds	r5, #1
 80143a8:	b2ad      	uxth	r5, r5
 80143aa:	e7e7      	b.n	801437c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

080143ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80143ac:	4b03      	ldr	r3, [pc, #12]	; (80143bc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80143ae:	2200      	movs	r2, #0
 80143b0:	801a      	strh	r2, [r3, #0]
 80143b2:	805a      	strh	r2, [r3, #2]
 80143b4:	809a      	strh	r2, [r3, #4]
 80143b6:	80da      	strh	r2, [r3, #6]
 80143b8:	4770      	bx	lr
 80143ba:	bf00      	nop
 80143bc:	20060c94 	.word	0x20060c94

080143c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80143c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c4:	b09d      	sub	sp, #116	; 0x74
 80143c6:	4606      	mov	r6, r0
 80143c8:	4614      	mov	r4, r2
 80143ca:	468a      	mov	sl, r1
 80143cc:	a803      	add	r0, sp, #12
 80143ce:	461d      	mov	r5, r3
 80143d0:	f000 febf 	bl	8015152 <_ZN8touchgfx12TextProviderC1Ev>
 80143d4:	6833      	ldr	r3, [r6, #0]
 80143d6:	4630      	mov	r0, r6
 80143d8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80143dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143de:	4798      	blx	r3
 80143e0:	6833      	ldr	r3, [r6, #0]
 80143e2:	4607      	mov	r7, r0
 80143e4:	4630      	mov	r0, r6
 80143e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143e8:	4798      	blx	r3
 80143ea:	462a      	mov	r2, r5
 80143ec:	2500      	movs	r5, #0
 80143ee:	4621      	mov	r1, r4
 80143f0:	9000      	str	r0, [sp, #0]
 80143f2:	463b      	mov	r3, r7
 80143f4:	462c      	mov	r4, r5
 80143f6:	46a9      	mov	r9, r5
 80143f8:	46a8      	mov	r8, r5
 80143fa:	a803      	add	r0, sp, #12
 80143fc:	f000 fefc 	bl	80151f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014400:	2300      	movs	r3, #0
 8014402:	9302      	str	r3, [sp, #8]
 8014404:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014408:	429c      	cmp	r4, r3
 801440a:	d002      	beq.n	8014412 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801440c:	455c      	cmp	r4, fp
 801440e:	bf18      	it	ne
 8014410:	4625      	movne	r5, r4
 8014412:	ab02      	add	r3, sp, #8
 8014414:	4632      	mov	r2, r6
 8014416:	4651      	mov	r1, sl
 8014418:	a803      	add	r0, sp, #12
 801441a:	f001 f9ed 	bl	80157f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801441e:	4604      	mov	r4, r0
 8014420:	b108      	cbz	r0, 8014426 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8014422:	280a      	cmp	r0, #10
 8014424:	d10a      	bne.n	801443c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8014426:	45c1      	cmp	r9, r8
 8014428:	bf38      	it	cc
 801442a:	46c1      	movcc	r9, r8
 801442c:	f04f 0800 	mov.w	r8, #0
 8014430:	2c00      	cmp	r4, #0
 8014432:	d1e5      	bne.n	8014400 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014434:	4648      	mov	r0, r9
 8014436:	b01d      	add	sp, #116	; 0x74
 8014438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801443c:	9a02      	ldr	r2, [sp, #8]
 801443e:	2a00      	cmp	r2, #0
 8014440:	d0de      	beq.n	8014400 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014442:	7b57      	ldrb	r7, [r2, #13]
 8014444:	4629      	mov	r1, r5
 8014446:	6833      	ldr	r3, [r6, #0]
 8014448:	007f      	lsls	r7, r7, #1
 801444a:	8894      	ldrh	r4, [r2, #4]
 801444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801444e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8014452:	7a97      	ldrb	r7, [r2, #10]
 8014454:	4307      	orrs	r7, r0
 8014456:	4630      	mov	r0, r6
 8014458:	4798      	blx	r3
 801445a:	4438      	add	r0, r7
 801445c:	4480      	add	r8, r0
 801445e:	fa1f f888 	uxth.w	r8, r8
 8014462:	e7e5      	b.n	8014430 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08014464 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8014464:	b508      	push	{r3, lr}
 8014466:	6803      	ldr	r3, [r0, #0]
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	4798      	blx	r3
 801446c:	b128      	cbz	r0, 801447a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801446e:	7b43      	ldrb	r3, [r0, #13]
 8014470:	7a80      	ldrb	r0, [r0, #10]
 8014472:	005b      	lsls	r3, r3, #1
 8014474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014478:	4318      	orrs	r0, r3
 801447a:	bd08      	pop	{r3, pc}

0801447c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801447c:	b40e      	push	{r1, r2, r3}
 801447e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014480:	b09e      	sub	sp, #120	; 0x78
 8014482:	4605      	mov	r5, r0
 8014484:	ab23      	add	r3, sp, #140	; 0x8c
 8014486:	a805      	add	r0, sp, #20
 8014488:	f853 4b04 	ldr.w	r4, [r3], #4
 801448c:	9303      	str	r3, [sp, #12]
 801448e:	f000 fe60 	bl	8015152 <_ZN8touchgfx12TextProviderC1Ev>
 8014492:	682b      	ldr	r3, [r5, #0]
 8014494:	4628      	mov	r0, r5
 8014496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014498:	4798      	blx	r3
 801449a:	682b      	ldr	r3, [r5, #0]
 801449c:	4606      	mov	r6, r0
 801449e:	4628      	mov	r0, r5
 80144a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144a2:	4798      	blx	r3
 80144a4:	4633      	mov	r3, r6
 80144a6:	4621      	mov	r1, r4
 80144a8:	ae1e      	add	r6, sp, #120	; 0x78
 80144aa:	2400      	movs	r4, #0
 80144ac:	9000      	str	r0, [sp, #0]
 80144ae:	9a03      	ldr	r2, [sp, #12]
 80144b0:	a805      	add	r0, sp, #20
 80144b2:	f000 fea1 	bl	80151f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80144b6:	f846 4d68 	str.w	r4, [r6, #-104]!
 80144ba:	462a      	mov	r2, r5
 80144bc:	4633      	mov	r3, r6
 80144be:	4621      	mov	r1, r4
 80144c0:	a805      	add	r0, sp, #20
 80144c2:	f001 f999 	bl	80157f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80144c6:	b300      	cbz	r0, 801450a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80144c8:	280a      	cmp	r0, #10
 80144ca:	d01a      	beq.n	8014502 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80144cc:	9f04      	ldr	r7, [sp, #16]
 80144ce:	b1c7      	cbz	r7, 8014502 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80144d0:	7b78      	ldrb	r0, [r7, #13]
 80144d2:	7a3b      	ldrb	r3, [r7, #8]
 80144d4:	00c1      	lsls	r1, r0, #3
 80144d6:	88aa      	ldrh	r2, [r5, #4]
 80144d8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80144dc:	4319      	orrs	r1, r3
 80144de:	0643      	lsls	r3, r0, #25
 80144e0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80144e4:	bf48      	it	mi
 80144e6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80144ea:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80144ee:	bf48      	it	mi
 80144f0:	b219      	sxthmi	r1, r3
 80144f2:	79fb      	ldrb	r3, [r7, #7]
 80144f4:	4303      	orrs	r3, r0
 80144f6:	4413      	add	r3, r2
 80144f8:	1a5b      	subs	r3, r3, r1
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	42a3      	cmp	r3, r4
 80144fe:	bfc8      	it	gt
 8014500:	b21c      	sxthgt	r4, r3
 8014502:	4633      	mov	r3, r6
 8014504:	462a      	mov	r2, r5
 8014506:	2100      	movs	r1, #0
 8014508:	e7da      	b.n	80144c0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801450a:	b2a0      	uxth	r0, r4
 801450c:	b01e      	add	sp, #120	; 0x78
 801450e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014512:	b003      	add	sp, #12
 8014514:	4770      	bx	lr

08014516 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8014516:	b40e      	push	{r1, r2, r3}
 8014518:	b570      	push	{r4, r5, r6, lr}
 801451a:	b09d      	sub	sp, #116	; 0x74
 801451c:	4604      	mov	r4, r0
 801451e:	ab21      	add	r3, sp, #132	; 0x84
 8014520:	a803      	add	r0, sp, #12
 8014522:	f853 5b04 	ldr.w	r5, [r3], #4
 8014526:	9302      	str	r3, [sp, #8]
 8014528:	f000 fe13 	bl	8015152 <_ZN8touchgfx12TextProviderC1Ev>
 801452c:	6823      	ldr	r3, [r4, #0]
 801452e:	4620      	mov	r0, r4
 8014530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014532:	4798      	blx	r3
 8014534:	6823      	ldr	r3, [r4, #0]
 8014536:	4606      	mov	r6, r0
 8014538:	4620      	mov	r0, r4
 801453a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801453c:	2401      	movs	r4, #1
 801453e:	4798      	blx	r3
 8014540:	4633      	mov	r3, r6
 8014542:	9000      	str	r0, [sp, #0]
 8014544:	4629      	mov	r1, r5
 8014546:	9a02      	ldr	r2, [sp, #8]
 8014548:	a803      	add	r0, sp, #12
 801454a:	f000 fe55 	bl	80151f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801454e:	a803      	add	r0, sp, #12
 8014550:	f001 fa4c 	bl	80159ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014554:	b2a3      	uxth	r3, r4
 8014556:	b138      	cbz	r0, 8014568 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8014558:	280a      	cmp	r0, #10
 801455a:	a803      	add	r0, sp, #12
 801455c:	bf04      	itt	eq
 801455e:	3301      	addeq	r3, #1
 8014560:	b21c      	sxtheq	r4, r3
 8014562:	f001 fa43 	bl	80159ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014566:	e7f5      	b.n	8014554 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8014568:	4618      	mov	r0, r3
 801456a:	b01d      	add	sp, #116	; 0x74
 801456c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014570:	b003      	add	sp, #12
 8014572:	4770      	bx	lr

08014574 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8014574:	b40e      	push	{r1, r2, r3}
 8014576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014578:	b09e      	sub	sp, #120	; 0x78
 801457a:	4604      	mov	r4, r0
 801457c:	ab23      	add	r3, sp, #140	; 0x8c
 801457e:	a805      	add	r0, sp, #20
 8014580:	f853 5b04 	ldr.w	r5, [r3], #4
 8014584:	9303      	str	r3, [sp, #12]
 8014586:	f000 fde4 	bl	8015152 <_ZN8touchgfx12TextProviderC1Ev>
 801458a:	6823      	ldr	r3, [r4, #0]
 801458c:	4620      	mov	r0, r4
 801458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014590:	4798      	blx	r3
 8014592:	6823      	ldr	r3, [r4, #0]
 8014594:	4606      	mov	r6, r0
 8014596:	4620      	mov	r0, r4
 8014598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801459a:	4798      	blx	r3
 801459c:	4633      	mov	r3, r6
 801459e:	4629      	mov	r1, r5
 80145a0:	9000      	str	r0, [sp, #0]
 80145a2:	9a03      	ldr	r2, [sp, #12]
 80145a4:	a805      	add	r0, sp, #20
 80145a6:	f000 fe27 	bl	80151f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80145aa:	ad1e      	add	r5, sp, #120	; 0x78
 80145ac:	2100      	movs	r1, #0
 80145ae:	26ff      	movs	r6, #255	; 0xff
 80145b0:	4622      	mov	r2, r4
 80145b2:	a805      	add	r0, sp, #20
 80145b4:	f845 1d68 	str.w	r1, [r5, #-104]!
 80145b8:	462b      	mov	r3, r5
 80145ba:	f001 f91d 	bl	80157f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80145be:	b1d8      	cbz	r0, 80145f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80145c0:	280a      	cmp	r0, #10
 80145c2:	d012      	beq.n	80145ea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80145c4:	9804      	ldr	r0, [sp, #16]
 80145c6:	b180      	cbz	r0, 80145ea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80145c8:	7b47      	ldrb	r7, [r0, #13]
 80145ca:	7922      	ldrb	r2, [r4, #4]
 80145cc:	00fb      	lsls	r3, r7, #3
 80145ce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80145d2:	7a03      	ldrb	r3, [r0, #8]
 80145d4:	430b      	orrs	r3, r1
 80145d6:	0679      	lsls	r1, r7, #25
 80145d8:	bf44      	itt	mi
 80145da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80145de:	b21b      	sxthmi	r3, r3
 80145e0:	1ad3      	subs	r3, r2, r3
 80145e2:	b2db      	uxtb	r3, r3
 80145e4:	429e      	cmp	r6, r3
 80145e6:	bf28      	it	cs
 80145e8:	461e      	movcs	r6, r3
 80145ea:	462b      	mov	r3, r5
 80145ec:	4622      	mov	r2, r4
 80145ee:	2100      	movs	r1, #0
 80145f0:	a805      	add	r0, sp, #20
 80145f2:	f001 f901 	bl	80157f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80145f6:	e7e2      	b.n	80145be <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80145f8:	4630      	mov	r0, r6
 80145fa:	b01e      	add	sp, #120	; 0x78
 80145fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014600:	b003      	add	sp, #12
 8014602:	4770      	bx	lr

08014604 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8014604:	b513      	push	{r0, r1, r4, lr}
 8014606:	6803      	ldr	r3, [r0, #0]
 8014608:	2400      	movs	r4, #0
 801460a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801460e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014612:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014616:	4669      	mov	r1, sp
 8014618:	691b      	ldr	r3, [r3, #16]
 801461a:	9400      	str	r4, [sp, #0]
 801461c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014620:	4798      	blx	r3
 8014622:	b002      	add	sp, #8
 8014624:	bd10      	pop	{r4, pc}

08014626 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8014626:	b538      	push	{r3, r4, r5, lr}
 8014628:	680b      	ldr	r3, [r1, #0]
 801462a:	460c      	mov	r4, r1
 801462c:	4605      	mov	r5, r0
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	4798      	blx	r3
 8014632:	6823      	ldr	r3, [r4, #0]
 8014634:	4620      	mov	r0, r4
 8014636:	4629      	mov	r1, r5
 8014638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801463a:	4798      	blx	r3
 801463c:	4628      	mov	r0, r5
 801463e:	bd38      	pop	{r3, r4, r5, pc}

08014640 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8014640:	b410      	push	{r4}
 8014642:	880a      	ldrh	r2, [r1, #0]
 8014644:	8884      	ldrh	r4, [r0, #4]
 8014646:	4422      	add	r2, r4
 8014648:	800a      	strh	r2, [r1, #0]
 801464a:	884a      	ldrh	r2, [r1, #2]
 801464c:	88c4      	ldrh	r4, [r0, #6]
 801464e:	4422      	add	r2, r4
 8014650:	804a      	strh	r2, [r1, #2]
 8014652:	6940      	ldr	r0, [r0, #20]
 8014654:	b120      	cbz	r0, 8014660 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8014656:	6803      	ldr	r3, [r0, #0]
 8014658:	f85d 4b04 	ldr.w	r4, [sp], #4
 801465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801465e:	4718      	bx	r3
 8014660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014664:	4770      	bx	lr

08014666 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8014666:	b570      	push	{r4, r5, r6, lr}
 8014668:	8882      	ldrh	r2, [r0, #4]
 801466a:	460c      	mov	r4, r1
 801466c:	880b      	ldrh	r3, [r1, #0]
 801466e:	4605      	mov	r5, r0
 8014670:	4413      	add	r3, r2
 8014672:	800b      	strh	r3, [r1, #0]
 8014674:	884b      	ldrh	r3, [r1, #2]
 8014676:	88c2      	ldrh	r2, [r0, #6]
 8014678:	4413      	add	r3, r2
 801467a:	804b      	strh	r3, [r1, #2]
 801467c:	1d01      	adds	r1, r0, #4
 801467e:	4620      	mov	r0, r4
 8014680:	f7fa fb02 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8014684:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8014688:	2b00      	cmp	r3, #0
 801468a:	dd0b      	ble.n	80146a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801468c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014690:	2b00      	cmp	r3, #0
 8014692:	dd07      	ble.n	80146a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014694:	6968      	ldr	r0, [r5, #20]
 8014696:	b128      	cbz	r0, 80146a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014698:	6803      	ldr	r3, [r0, #0]
 801469a:	4621      	mov	r1, r4
 801469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146a2:	4718      	bx	r3
 80146a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080146a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80146a8:	b570      	push	{r4, r5, r6, lr}
 80146aa:	8882      	ldrh	r2, [r0, #4]
 80146ac:	460c      	mov	r4, r1
 80146ae:	880b      	ldrh	r3, [r1, #0]
 80146b0:	4605      	mov	r5, r0
 80146b2:	4413      	add	r3, r2
 80146b4:	800b      	strh	r3, [r1, #0]
 80146b6:	884b      	ldrh	r3, [r1, #2]
 80146b8:	88c2      	ldrh	r2, [r0, #6]
 80146ba:	4413      	add	r3, r2
 80146bc:	804b      	strh	r3, [r1, #2]
 80146be:	1d01      	adds	r1, r0, #4
 80146c0:	4620      	mov	r0, r4
 80146c2:	f7fa fae1 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 80146c6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	dd15      	ble.n	80146fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80146ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	dd11      	ble.n	80146fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80146d6:	6968      	ldr	r0, [r5, #20]
 80146d8:	b128      	cbz	r0, 80146e6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80146da:	6803      	ldr	r3, [r0, #0]
 80146dc:	691b      	ldr	r3, [r3, #16]
 80146de:	4621      	mov	r1, r4
 80146e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146e4:	4718      	bx	r3
 80146e6:	4b05      	ldr	r3, [pc, #20]	; (80146fc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	3304      	adds	r3, #4
 80146ec:	429d      	cmp	r5, r3
 80146ee:	d104      	bne.n	80146fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80146f0:	f7fe ffbe 	bl	8013670 <_ZN8touchgfx11Application11getInstanceEv>
 80146f4:	6803      	ldr	r3, [r0, #0]
 80146f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146f8:	e7f1      	b.n	80146de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 80146fa:	bd70      	pop	{r4, r5, r6, pc}
 80146fc:	20060c8c 	.word	0x20060c8c

08014700 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8014700:	b570      	push	{r4, r5, r6, lr}
 8014702:	4604      	mov	r4, r0
 8014704:	4616      	mov	r6, r2
 8014706:	460d      	mov	r5, r1
 8014708:	b901      	cbnz	r1, 801470c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801470a:	b192      	cbz	r2, 8014732 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801470c:	6823      	ldr	r3, [r4, #0]
 801470e:	4620      	mov	r0, r4
 8014710:	695b      	ldr	r3, [r3, #20]
 8014712:	4798      	blx	r3
 8014714:	88e2      	ldrh	r2, [r4, #6]
 8014716:	88a1      	ldrh	r1, [r4, #4]
 8014718:	4620      	mov	r0, r4
 801471a:	4432      	add	r2, r6
 801471c:	4429      	add	r1, r5
 801471e:	b212      	sxth	r2, r2
 8014720:	b209      	sxth	r1, r1
 8014722:	f7f0 fbbf 	bl	8004ea4 <_ZN8touchgfx8Drawable5setXYEss>
 8014726:	6823      	ldr	r3, [r4, #0]
 8014728:	4620      	mov	r0, r4
 801472a:	695b      	ldr	r3, [r3, #20]
 801472c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014730:	4718      	bx	r3
 8014732:	bd70      	pop	{r4, r5, r6, pc}

08014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8014734:	b510      	push	{r4, lr}
 8014736:	2300      	movs	r3, #0
 8014738:	4604      	mov	r4, r0
 801473a:	4608      	mov	r0, r1
 801473c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8014740:	8023      	strh	r3, [r4, #0]
 8014742:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014746:	8063      	strh	r3, [r4, #2]
 8014748:	6803      	ldr	r3, [r0, #0]
 801474a:	80a1      	strh	r1, [r4, #4]
 801474c:	4621      	mov	r1, r4
 801474e:	80e2      	strh	r2, [r4, #6]
 8014750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014752:	4798      	blx	r3
 8014754:	4620      	mov	r0, r4
 8014756:	bd10      	pop	{r4, pc}

08014758 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8014758:	b530      	push	{r4, r5, lr}
 801475a:	8083      	strh	r3, [r0, #4]
 801475c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014760:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8014764:	7183      	strb	r3, [r0, #6]
 8014766:	79c3      	ldrb	r3, [r0, #7]
 8014768:	6101      	str	r1, [r0, #16]
 801476a:	f365 0306 	bfi	r3, r5, #0, #7
 801476e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8014772:	8282      	strh	r2, [r0, #20]
 8014774:	f365 13c7 	bfi	r3, r5, #7, #1
 8014778:	71c3      	strb	r3, [r0, #7]
 801477a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801477e:	7203      	strb	r3, [r0, #8]
 8014780:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8014784:	7243      	strb	r3, [r0, #9]
 8014786:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801478a:	8143      	strh	r3, [r0, #10]
 801478c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8014790:	8183      	strh	r3, [r0, #12]
 8014792:	4b01      	ldr	r3, [pc, #4]	; (8014798 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8014794:	6003      	str	r3, [r0, #0]
 8014796:	bd30      	pop	{r4, r5, pc}
 8014798:	0802b4bc 	.word	0x0802b4bc

0801479c <_ZNK8touchgfx9ConstFont4findEt>:
 801479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801479e:	6904      	ldr	r4, [r0, #16]
 80147a0:	b3bc      	cbz	r4, 8014812 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147a2:	88a3      	ldrh	r3, [r4, #4]
 80147a4:	8a82      	ldrh	r2, [r0, #20]
 80147a6:	1acb      	subs	r3, r1, r3
 80147a8:	f102 32ff 	add.w	r2, r2, #4294967295
 80147ac:	d431      	bmi.n	8014812 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147ae:	4293      	cmp	r3, r2
 80147b0:	dd0c      	ble.n	80147cc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80147b2:	230e      	movs	r3, #14
 80147b4:	fb03 4302 	mla	r3, r3, r2, r4
 80147b8:	889b      	ldrh	r3, [r3, #4]
 80147ba:	1a5b      	subs	r3, r3, r1
 80147bc:	1ad3      	subs	r3, r2, r3
 80147be:	429a      	cmp	r2, r3
 80147c0:	db27      	blt.n	8014812 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	bfbc      	itt	lt
 80147c6:	2302      	movlt	r3, #2
 80147c8:	fb92 f3f3 	sdivlt	r3, r2, r3
 80147cc:	2500      	movs	r5, #0
 80147ce:	260e      	movs	r6, #14
 80147d0:	4295      	cmp	r5, r2
 80147d2:	dc1e      	bgt.n	8014812 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147d4:	fb06 4003 	mla	r0, r6, r3, r4
 80147d8:	8887      	ldrh	r7, [r0, #4]
 80147da:	42b9      	cmp	r1, r7
 80147dc:	d01a      	beq.n	8014814 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80147de:	d20d      	bcs.n	80147fc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80147e0:	1e5a      	subs	r2, r3, #1
 80147e2:	4295      	cmp	r5, r2
 80147e4:	dc15      	bgt.n	8014812 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147e6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80147ea:	1a5b      	subs	r3, r3, r1
 80147ec:	1ad3      	subs	r3, r2, r3
 80147ee:	429a      	cmp	r2, r3
 80147f0:	db0f      	blt.n	8014812 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147f2:	429d      	cmp	r5, r3
 80147f4:	ddec      	ble.n	80147d0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80147f6:	1953      	adds	r3, r2, r5
 80147f8:	105b      	asrs	r3, r3, #1
 80147fa:	e7e9      	b.n	80147d0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80147fc:	1c5d      	adds	r5, r3, #1
 80147fe:	42aa      	cmp	r2, r5
 8014800:	db07      	blt.n	8014812 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014802:	8a43      	ldrh	r3, [r0, #18]
 8014804:	1acb      	subs	r3, r1, r3
 8014806:	442b      	add	r3, r5
 8014808:	429d      	cmp	r5, r3
 801480a:	dc02      	bgt.n	8014812 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801480c:	429a      	cmp	r2, r3
 801480e:	dadf      	bge.n	80147d0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014810:	e7f1      	b.n	80147f6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8014812:	2000      	movs	r0, #0
 8014814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014816 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8014816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014818:	4604      	mov	r4, r0
 801481a:	4617      	mov	r7, r2
 801481c:	461e      	mov	r6, r3
 801481e:	b911      	cbnz	r1, 8014826 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014820:	2500      	movs	r5, #0
 8014822:	4628      	mov	r0, r5
 8014824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014826:	290a      	cmp	r1, #10
 8014828:	d0fa      	beq.n	8014820 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801482a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801482e:	4291      	cmp	r1, r2
 8014830:	d0f6      	beq.n	8014820 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014832:	f242 020b 	movw	r2, #8203	; 0x200b
 8014836:	4291      	cmp	r1, r2
 8014838:	d0f2      	beq.n	8014820 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801483a:	f7ff ffaf 	bl	801479c <_ZNK8touchgfx9ConstFont4findEt>
 801483e:	4605      	mov	r5, r0
 8014840:	b950      	cbnz	r0, 8014858 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8014842:	6823      	ldr	r3, [r4, #0]
 8014844:	4620      	mov	r0, r4
 8014846:	691b      	ldr	r3, [r3, #16]
 8014848:	4798      	blx	r3
 801484a:	4601      	mov	r1, r0
 801484c:	4620      	mov	r0, r4
 801484e:	f7ff ffa5 	bl	801479c <_ZNK8touchgfx9ConstFont4findEt>
 8014852:	4605      	mov	r5, r0
 8014854:	2800      	cmp	r0, #0
 8014856:	d0e3      	beq.n	8014820 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014858:	6823      	ldr	r3, [r4, #0]
 801485a:	4629      	mov	r1, r5
 801485c:	4620      	mov	r0, r4
 801485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014860:	4798      	blx	r3
 8014862:	6038      	str	r0, [r7, #0]
 8014864:	6823      	ldr	r3, [r4, #0]
 8014866:	4620      	mov	r0, r4
 8014868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801486a:	4798      	blx	r3
 801486c:	7030      	strb	r0, [r6, #0]
 801486e:	e7d8      	b.n	8014822 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08014870 <_ZN8touchgfx6memsetEPvhm>:
 8014870:	4402      	add	r2, r0
 8014872:	4290      	cmp	r0, r2
 8014874:	d002      	beq.n	801487c <_ZN8touchgfx6memsetEPvhm+0xc>
 8014876:	f800 1b01 	strb.w	r1, [r0], #1
 801487a:	e7fa      	b.n	8014872 <_ZN8touchgfx6memsetEPvhm+0x2>
 801487c:	4770      	bx	lr

0801487e <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801487e:	b538      	push	{r3, r4, r5, lr}
 8014880:	4605      	mov	r5, r0
 8014882:	f002 f9f9 	bl	8016c78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014886:	4604      	mov	r4, r0
 8014888:	4628      	mov	r0, r5
 801488a:	f002 f931 	bl	8016af0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801488e:	2800      	cmp	r0, #0
 8014890:	bf14      	ite	ne
 8014892:	2002      	movne	r0, #2
 8014894:	2000      	moveq	r0, #0
 8014896:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801489a:	b280      	uxth	r0, r0
 801489c:	bd38      	pop	{r3, r4, r5, pc}

0801489e <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801489e:	b538      	push	{r3, r4, r5, lr}
 80148a0:	4605      	mov	r5, r0
 80148a2:	f002 f9e9 	bl	8016c78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80148a6:	4604      	mov	r4, r0
 80148a8:	4628      	mov	r0, r5
 80148aa:	f002 f921 	bl	8016af0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80148ae:	2800      	cmp	r0, #0
 80148b0:	bf14      	ite	ne
 80148b2:	2002      	movne	r0, #2
 80148b4:	2000      	moveq	r0, #0
 80148b6:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80148ba:	f040 0001 	orr.w	r0, r0, #1
 80148be:	b280      	uxth	r0, r0
 80148c0:	bd38      	pop	{r3, r4, r5, pc}

080148c2 <_ZN8touchgfx4clzuEm>:
 80148c2:	4603      	mov	r3, r0
 80148c4:	b1c8      	cbz	r0, 80148fa <_ZN8touchgfx4clzuEm+0x38>
 80148c6:	0c02      	lsrs	r2, r0, #16
 80148c8:	0412      	lsls	r2, r2, #16
 80148ca:	b9a2      	cbnz	r2, 80148f6 <_ZN8touchgfx4clzuEm+0x34>
 80148cc:	0403      	lsls	r3, r0, #16
 80148ce:	2010      	movs	r0, #16
 80148d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80148d4:	bf04      	itt	eq
 80148d6:	021b      	lsleq	r3, r3, #8
 80148d8:	3008      	addeq	r0, #8
 80148da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80148de:	bf04      	itt	eq
 80148e0:	011b      	lsleq	r3, r3, #4
 80148e2:	3004      	addeq	r0, #4
 80148e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80148e8:	bf04      	itt	eq
 80148ea:	009b      	lsleq	r3, r3, #2
 80148ec:	3002      	addeq	r0, #2
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	db04      	blt.n	80148fc <_ZN8touchgfx4clzuEm+0x3a>
 80148f2:	3001      	adds	r0, #1
 80148f4:	4770      	bx	lr
 80148f6:	2000      	movs	r0, #0
 80148f8:	e7ea      	b.n	80148d0 <_ZN8touchgfx4clzuEm+0xe>
 80148fa:	2020      	movs	r0, #32
 80148fc:	4770      	bx	lr

080148fe <_ZN8touchgfx7muldivuEmmmRm>:
 80148fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014902:	4680      	mov	r8, r0
 8014904:	460f      	mov	r7, r1
 8014906:	4615      	mov	r5, r2
 8014908:	461e      	mov	r6, r3
 801490a:	f7ff ffda 	bl	80148c2 <_ZN8touchgfx4clzuEm>
 801490e:	b998      	cbnz	r0, 8014938 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8014910:	4608      	mov	r0, r1
 8014912:	f7ff ffd6 	bl	80148c2 <_ZN8touchgfx4clzuEm>
 8014916:	2800      	cmp	r0, #0
 8014918:	dd08      	ble.n	801492c <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801491a:	4633      	mov	r3, r6
 801491c:	462a      	mov	r2, r5
 801491e:	4641      	mov	r1, r8
 8014920:	4638      	mov	r0, r7
 8014922:	f7ff ffec 	bl	80148fe <_ZN8touchgfx7muldivuEmmmRm>
 8014926:	b003      	add	sp, #12
 8014928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801492c:	f04f 33ff 	mov.w	r3, #4294967295
 8014930:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014934:	6033      	str	r3, [r6, #0]
 8014936:	e7f6      	b.n	8014926 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8014938:	fa31 f900 	lsrs.w	r9, r1, r0
 801493c:	fb01 f308 	mul.w	r3, r1, r8
 8014940:	d105      	bne.n	801494e <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8014942:	fbb3 f0f5 	udiv	r0, r3, r5
 8014946:	fb05 3510 	mls	r5, r5, r0, r3
 801494a:	6035      	str	r5, [r6, #0]
 801494c:	e7eb      	b.n	8014926 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801494e:	2301      	movs	r3, #1
 8014950:	fa08 fb00 	lsl.w	fp, r8, r0
 8014954:	462a      	mov	r2, r5
 8014956:	4641      	mov	r1, r8
 8014958:	fa03 f000 	lsl.w	r0, r3, r0
 801495c:	4633      	mov	r3, r6
 801495e:	fbbb faf5 	udiv	sl, fp, r5
 8014962:	3801      	subs	r0, #1
 8014964:	fb09 f40a 	mul.w	r4, r9, sl
 8014968:	4038      	ands	r0, r7
 801496a:	f7ff ffc8 	bl	80148fe <_ZN8touchgfx7muldivuEmmmRm>
 801496e:	462a      	mov	r2, r5
 8014970:	4607      	mov	r7, r0
 8014972:	ab01      	add	r3, sp, #4
 8014974:	fb05 b11a 	mls	r1, r5, sl, fp
 8014978:	4648      	mov	r0, r9
 801497a:	f7ff ffc0 	bl	80148fe <_ZN8touchgfx7muldivuEmmmRm>
 801497e:	9b01      	ldr	r3, [sp, #4]
 8014980:	6832      	ldr	r2, [r6, #0]
 8014982:	441a      	add	r2, r3
 8014984:	fbb2 f3f5 	udiv	r3, r2, r5
 8014988:	441c      	add	r4, r3
 801498a:	fb05 2513 	mls	r5, r5, r3, r2
 801498e:	443c      	add	r4, r7
 8014990:	4420      	add	r0, r4
 8014992:	e7da      	b.n	801494a <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08014994 <_ZN8touchgfx6muldivElllRl>:
 8014994:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014996:	2800      	cmp	r0, #0
 8014998:	461e      	mov	r6, r3
 801499a:	bfba      	itte	lt
 801499c:	4240      	neglt	r0, r0
 801499e:	f04f 34ff 	movlt.w	r4, #4294967295
 80149a2:	2401      	movge	r4, #1
 80149a4:	2900      	cmp	r1, #0
 80149a6:	bfbc      	itt	lt
 80149a8:	4249      	neglt	r1, r1
 80149aa:	4264      	neglt	r4, r4
 80149ac:	2a00      	cmp	r2, #0
 80149ae:	bfb6      	itet	lt
 80149b0:	4265      	neglt	r5, r4
 80149b2:	4625      	movge	r5, r4
 80149b4:	4252      	neglt	r2, r2
 80149b6:	4288      	cmp	r0, r1
 80149b8:	bfc2      	ittt	gt
 80149ba:	4603      	movgt	r3, r0
 80149bc:	4608      	movgt	r0, r1
 80149be:	4619      	movgt	r1, r3
 80149c0:	ab01      	add	r3, sp, #4
 80149c2:	f7ff ff9c 	bl	80148fe <_ZN8touchgfx7muldivuEmmmRm>
 80149c6:	9b01      	ldr	r3, [sp, #4]
 80149c8:	4368      	muls	r0, r5
 80149ca:	435c      	muls	r4, r3
 80149cc:	6034      	str	r4, [r6, #0]
 80149ce:	b002      	add	sp, #8
 80149d0:	bd70      	pop	{r4, r5, r6, pc}

080149d2 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80149d2:	2000      	movs	r0, #0
 80149d4:	4770      	bx	lr

080149d6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80149d6:	2001      	movs	r0, #1
 80149d8:	4770      	bx	lr

080149da <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80149da:	2002      	movs	r0, #2
 80149dc:	4770      	bx	lr

080149de <_ZN8touchgfx6ScreenD1Ev>:
 80149de:	4770      	bx	lr

080149e0 <_ZN8touchgfx12GestureEventD1Ev>:
 80149e0:	4770      	bx	lr

080149e2 <_ZN8touchgfx9DragEventD1Ev>:
 80149e2:	4770      	bx	lr

080149e4 <_ZN8touchgfx10ClickEventD1Ev>:
 80149e4:	4770      	bx	lr

080149e6 <_ZN8touchgfx10ClickEventD0Ev>:
 80149e6:	b510      	push	{r4, lr}
 80149e8:	4604      	mov	r4, r0
 80149ea:	210c      	movs	r1, #12
 80149ec:	f010 fb09 	bl	8025002 <_ZdlPvj>
 80149f0:	4620      	mov	r0, r4
 80149f2:	bd10      	pop	{r4, pc}

080149f4 <_ZN8touchgfx9DragEventD0Ev>:
 80149f4:	b510      	push	{r4, lr}
 80149f6:	4604      	mov	r4, r0
 80149f8:	2110      	movs	r1, #16
 80149fa:	f010 fb02 	bl	8025002 <_ZdlPvj>
 80149fe:	4620      	mov	r0, r4
 8014a00:	bd10      	pop	{r4, pc}

08014a02 <_ZN8touchgfx12GestureEventD0Ev>:
 8014a02:	b510      	push	{r4, lr}
 8014a04:	4604      	mov	r4, r0
 8014a06:	210c      	movs	r1, #12
 8014a08:	f010 fafb 	bl	8025002 <_ZdlPvj>
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	bd10      	pop	{r4, pc}

08014a10 <_ZN8touchgfx6ScreenD0Ev>:
 8014a10:	b510      	push	{r4, lr}
 8014a12:	4604      	mov	r4, r0
 8014a14:	213c      	movs	r1, #60	; 0x3c
 8014a16:	f010 faf4 	bl	8025002 <_ZdlPvj>
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	bd10      	pop	{r4, pc}
	...

08014a20 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8014a20:	b530      	push	{r4, r5, lr}
 8014a22:	460d      	mov	r5, r1
 8014a24:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014a26:	b087      	sub	sp, #28
 8014a28:	4604      	mov	r4, r0
 8014a2a:	b301      	cbz	r1, 8014a6e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8014a2c:	a801      	add	r0, sp, #4
 8014a2e:	f7ff fe81 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a32:	892a      	ldrh	r2, [r5, #8]
 8014a34:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014a38:	7928      	ldrb	r0, [r5, #4]
 8014a3a:	1ad2      	subs	r2, r2, r3
 8014a3c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014a3e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014a42:	441a      	add	r2, r3
 8014a44:	896b      	ldrh	r3, [r5, #10]
 8014a46:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8014a4a:	f88d 0010 	strb.w	r0, [sp, #16]
 8014a4e:	1b5b      	subs	r3, r3, r5
 8014a50:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8014a52:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014a54:	442b      	add	r3, r5
 8014a56:	4d07      	ldr	r5, [pc, #28]	; (8014a74 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8014a58:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014a5c:	a903      	add	r1, sp, #12
 8014a5e:	9503      	str	r5, [sp, #12]
 8014a60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014a64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a68:	6803      	ldr	r3, [r0, #0]
 8014a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a6c:	4798      	blx	r3
 8014a6e:	b007      	add	sp, #28
 8014a70:	bd30      	pop	{r4, r5, pc}
 8014a72:	bf00      	nop
 8014a74:	0802b53c 	.word	0x0802b53c

08014a78 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8014a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014a7e:	b08a      	sub	sp, #40	; 0x28
 8014a80:	4604      	mov	r4, r0
 8014a82:	460d      	mov	r5, r1
 8014a84:	b113      	cbz	r3, 8014a8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8014a86:	790b      	ldrb	r3, [r1, #4]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d044      	beq.n	8014b16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014a8c:	f104 0804 	add.w	r8, r4, #4
 8014a90:	a803      	add	r0, sp, #12
 8014a92:	4641      	mov	r1, r8
 8014a94:	f7ff fe4e 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a98:	792b      	ldrb	r3, [r5, #4]
 8014a9a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8014a9e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8014aa2:	b983      	cbnz	r3, 8014ac6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8014aa4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8014aa8:	892a      	ldrh	r2, [r5, #8]
 8014aaa:	88e9      	ldrh	r1, [r5, #6]
 8014aac:	4640      	mov	r0, r8
 8014aae:	1b92      	subs	r2, r2, r6
 8014ab0:	9301      	str	r3, [sp, #4]
 8014ab2:	1bc9      	subs	r1, r1, r7
 8014ab4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8014ab8:	b212      	sxth	r2, r2
 8014aba:	9300      	str	r3, [sp, #0]
 8014abc:	b209      	sxth	r1, r1
 8014abe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8014ac2:	f7f9 ffff 	bl	800eac4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8014ac6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014ac8:	b329      	cbz	r1, 8014b16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014aca:	a805      	add	r0, sp, #20
 8014acc:	f7ff fe32 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014ad0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014ad4:	792b      	ldrb	r3, [r5, #4]
 8014ad6:	a907      	add	r1, sp, #28
 8014ad8:	1abf      	subs	r7, r7, r2
 8014ada:	88ea      	ldrh	r2, [r5, #6]
 8014adc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014ade:	4417      	add	r7, r2
 8014ae0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014ae2:	f88d 3020 	strb.w	r3, [sp, #32]
 8014ae6:	4417      	add	r7, r2
 8014ae8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8014aec:	1ab6      	subs	r6, r6, r2
 8014aee:	892a      	ldrh	r2, [r5, #8]
 8014af0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8014af4:	4416      	add	r6, r2
 8014af6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014af8:	4416      	add	r6, r2
 8014afa:	4a08      	ldr	r2, [pc, #32]	; (8014b1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8014afc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8014b00:	2600      	movs	r6, #0
 8014b02:	9207      	str	r2, [sp, #28]
 8014b04:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8014b08:	6803      	ldr	r3, [r0, #0]
 8014b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0c:	4798      	blx	r3
 8014b0e:	792b      	ldrb	r3, [r5, #4]
 8014b10:	b10b      	cbz	r3, 8014b16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014b12:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8014b16:	b00a      	add	sp, #40	; 0x28
 8014b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b1c:	0802b514 	.word	0x0802b514

08014b20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8014b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b24:	460c      	mov	r4, r1
 8014b26:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014b28:	b088      	sub	sp, #32
 8014b2a:	4605      	mov	r5, r0
 8014b2c:	2900      	cmp	r1, #0
 8014b2e:	d06d      	beq.n	8014c0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8014b30:	4668      	mov	r0, sp
 8014b32:	f7ff fdff 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014b36:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8014b38:	88e3      	ldrh	r3, [r4, #6]
 8014b3a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8014b3e:	440b      	add	r3, r1
 8014b40:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014b44:	b21b      	sxth	r3, r3
 8014b46:	4543      	cmp	r3, r8
 8014b48:	db31      	blt.n	8014bae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b4a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8014b4e:	44c4      	add	ip, r8
 8014b50:	fa0f fc8c 	sxth.w	ip, ip
 8014b54:	4563      	cmp	r3, ip
 8014b56:	da2a      	bge.n	8014bae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b58:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8014b5a:	8926      	ldrh	r6, [r4, #8]
 8014b5c:	4416      	add	r6, r2
 8014b5e:	b236      	sxth	r6, r6
 8014b60:	42be      	cmp	r6, r7
 8014b62:	db24      	blt.n	8014bae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b64:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014b68:	4438      	add	r0, r7
 8014b6a:	b200      	sxth	r0, r0
 8014b6c:	4286      	cmp	r6, r0
 8014b6e:	da1e      	bge.n	8014bae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b70:	8963      	ldrh	r3, [r4, #10]
 8014b72:	4419      	add	r1, r3
 8014b74:	b209      	sxth	r1, r1
 8014b76:	4541      	cmp	r1, r8
 8014b78:	db08      	blt.n	8014b8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014b7a:	4561      	cmp	r1, ip
 8014b7c:	da06      	bge.n	8014b8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014b7e:	89a3      	ldrh	r3, [r4, #12]
 8014b80:	441a      	add	r2, r3
 8014b82:	b212      	sxth	r2, r2
 8014b84:	42ba      	cmp	r2, r7
 8014b86:	db01      	blt.n	8014b8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014b88:	4282      	cmp	r2, r0
 8014b8a:	db10      	blt.n	8014bae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b8c:	4b21      	ldr	r3, [pc, #132]	; (8014c14 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8014b8e:	a904      	add	r1, sp, #16
 8014b90:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014b92:	9304      	str	r3, [sp, #16]
 8014b94:	2302      	movs	r3, #2
 8014b96:	f88d 3014 	strb.w	r3, [sp, #20]
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ba0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014ba4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014ba8:	6803      	ldr	r3, [r0, #0]
 8014baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bac:	4798      	blx	r3
 8014bae:	1d29      	adds	r1, r5, #4
 8014bb0:	a802      	add	r0, sp, #8
 8014bb2:	f7ff fdbf 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014bb6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014bba:	88e0      	ldrh	r0, [r4, #6]
 8014bbc:	eba3 0808 	sub.w	r8, r3, r8
 8014bc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014bc4:	7921      	ldrb	r1, [r4, #4]
 8014bc6:	fa1f f888 	uxth.w	r8, r8
 8014bca:	1bdf      	subs	r7, r3, r7
 8014bcc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8014bd0:	b2bb      	uxth	r3, r7
 8014bd2:	4440      	add	r0, r8
 8014bd4:	8922      	ldrh	r2, [r4, #8]
 8014bd6:	8967      	ldrh	r7, [r4, #10]
 8014bd8:	4460      	add	r0, ip
 8014bda:	89a4      	ldrh	r4, [r4, #12]
 8014bdc:	441a      	add	r2, r3
 8014bde:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8014be0:	44b8      	add	r8, r7
 8014be2:	4423      	add	r3, r4
 8014be4:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014be8:	4432      	add	r2, r6
 8014bea:	44e0      	add	r8, ip
 8014bec:	4433      	add	r3, r6
 8014bee:	4c0a      	ldr	r4, [pc, #40]	; (8014c18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8014bf0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014bf2:	f88d 1014 	strb.w	r1, [sp, #20]
 8014bf6:	a904      	add	r1, sp, #16
 8014bf8:	9404      	str	r4, [sp, #16]
 8014bfa:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014bfe:	f8ad 801a 	strh.w	r8, [sp, #26]
 8014c02:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014c06:	6803      	ldr	r3, [r0, #0]
 8014c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c0a:	4798      	blx	r3
 8014c0c:	b008      	add	sp, #32
 8014c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c12:	bf00      	nop
 8014c14:	0802b514 	.word	0x0802b514
 8014c18:	0802b528 	.word	0x0802b528

08014c1c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c1e:	4604      	mov	r4, r0
 8014c20:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014c24:	3201      	adds	r2, #1
 8014c26:	d112      	bne.n	8014c4e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8014c28:	2500      	movs	r5, #0
 8014c2a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014c2e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014c32:	6803      	ldr	r3, [r0, #0]
 8014c34:	9500      	str	r5, [sp, #0]
 8014c36:	466d      	mov	r5, sp
 8014c38:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014c3c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014c40:	4629      	mov	r1, r5
 8014c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c44:	4798      	blx	r3
 8014c46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8014c4e:	4620      	mov	r0, r4
 8014c50:	b003      	add	sp, #12
 8014c52:	bd30      	pop	{r4, r5, pc}

08014c54 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014c54:	b513      	push	{r0, r1, r4, lr}
 8014c56:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8014c5a:	4604      	mov	r4, r0
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	d109      	bne.n	8014c74 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014c60:	4601      	mov	r1, r0
 8014c62:	4668      	mov	r0, sp
 8014c64:	f7ff fd66 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014c68:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c6c:	8423      	strh	r3, [r4, #32]
 8014c6e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014c72:	8463      	strh	r3, [r4, #34]	; 0x22
 8014c74:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014c78:	b002      	add	sp, #8
 8014c7a:	bd10      	pop	{r4, pc}

08014c7c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014c7c:	b513      	push	{r0, r1, r4, lr}
 8014c7e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8014c82:	4604      	mov	r4, r0
 8014c84:	3301      	adds	r3, #1
 8014c86:	d109      	bne.n	8014c9c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014c88:	4601      	mov	r1, r0
 8014c8a:	4668      	mov	r0, sp
 8014c8c:	f7ff fd52 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014c90:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c94:	8423      	strh	r3, [r4, #32]
 8014c96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014c9a:	8463      	strh	r3, [r4, #34]	; 0x22
 8014c9c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8014ca0:	b002      	add	sp, #8
 8014ca2:	bd10      	pop	{r4, pc}

08014ca4 <_ZN8touchgfx6ScreenC1Ev>:
 8014ca4:	b570      	push	{r4, r5, r6, lr}
 8014ca6:	4b17      	ldr	r3, [pc, #92]	; (8014d04 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014ca8:	4605      	mov	r5, r0
 8014caa:	4a17      	ldr	r2, [pc, #92]	; (8014d08 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014cac:	2101      	movs	r1, #1
 8014cae:	f845 3b04 	str.w	r3, [r5], #4
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	6042      	str	r2, [r0, #4]
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	8103      	strh	r3, [r0, #8]
 8014cba:	8143      	strh	r3, [r0, #10]
 8014cbc:	8183      	strh	r3, [r0, #12]
 8014cbe:	81c3      	strh	r3, [r0, #14]
 8014cc0:	8203      	strh	r3, [r0, #16]
 8014cc2:	8243      	strh	r3, [r0, #18]
 8014cc4:	8283      	strh	r3, [r0, #20]
 8014cc6:	82c3      	strh	r3, [r0, #22]
 8014cc8:	6203      	str	r3, [r0, #32]
 8014cca:	8483      	strh	r3, [r0, #36]	; 0x24
 8014ccc:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014cce:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8014cd2:	6343      	str	r3, [r0, #52]	; 0x34
 8014cd4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8014cd8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8014cdc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8014ce0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8014ce4:	4b09      	ldr	r3, [pc, #36]	; (8014d0c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014cec:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8014cee:	4a08      	ldr	r2, [pc, #32]	; (8014d10 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8014cf0:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014cf4:	4798      	blx	r3
 8014cf6:	6863      	ldr	r3, [r4, #4]
 8014cf8:	4628      	mov	r0, r5
 8014cfa:	4631      	mov	r1, r6
 8014cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cfe:	4798      	blx	r3
 8014d00:	4620      	mov	r0, r4
 8014d02:	bd70      	pop	{r4, r5, r6, pc}
 8014d04:	0802b550 	.word	0x0802b550
 8014d08:	0802a008 	.word	0x0802a008
 8014d0c:	20060c26 	.word	0x20060c26
 8014d10:	20060c24 	.word	0x20060c24

08014d14 <_ZN8touchgfx6Screen4drawEv>:
 8014d14:	4b09      	ldr	r3, [pc, #36]	; (8014d3c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8014d16:	b507      	push	{r0, r1, r2, lr}
 8014d18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014d1c:	2100      	movs	r1, #0
 8014d1e:	4b08      	ldr	r3, [pc, #32]	; (8014d40 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014d20:	9100      	str	r1, [sp, #0]
 8014d22:	4669      	mov	r1, sp
 8014d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d28:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014d2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014d30:	6803      	ldr	r3, [r0, #0]
 8014d32:	689b      	ldr	r3, [r3, #8]
 8014d34:	4798      	blx	r3
 8014d36:	b003      	add	sp, #12
 8014d38:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d3c:	20060c24 	.word	0x20060c24
 8014d40:	20060c26 	.word	0x20060c26

08014d44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d48:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014d4c:	b089      	sub	sp, #36	; 0x24
 8014d4e:	4680      	mov	r8, r0
 8014d50:	460c      	mov	r4, r1
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	4615      	mov	r5, r2
 8014d56:	dd0e      	ble.n	8014d76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014d58:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	dd0a      	ble.n	8014d76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014d60:	4628      	mov	r0, r5
 8014d62:	f7ff ff5b 	bl	8014c1c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014d66:	4621      	mov	r1, r4
 8014d68:	f7fb fe20 	bl	80109ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014d6c:	69eb      	ldr	r3, [r5, #28]
 8014d6e:	b928      	cbnz	r0, 8014d7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014d70:	461d      	mov	r5, r3
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d1f4      	bne.n	8014d60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014d76:	b009      	add	sp, #36	; 0x24
 8014d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d7c:	ae04      	add	r6, sp, #16
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	f000 80b5 	beq.w	8014eee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014d84:	682b      	ldr	r3, [r5, #0]
 8014d86:	4629      	mov	r1, r5
 8014d88:	a802      	add	r0, sp, #8
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	4798      	blx	r3
 8014d8e:	4628      	mov	r0, r5
 8014d90:	f7ff ff60 	bl	8014c54 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014d94:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014d98:	4407      	add	r7, r0
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	f7ff ff6e 	bl	8014c7c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014da0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014da4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014da8:	b23f      	sxth	r7, r7
 8014daa:	4418      	add	r0, r3
 8014dac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014db0:	4621      	mov	r1, r4
 8014db2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014db6:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014dba:	4630      	mov	r0, r6
 8014dbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014dc0:	f8ad 7010 	strh.w	r7, [sp, #16]
 8014dc4:	f7f9 ff60 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8014dc8:	4628      	mov	r0, r5
 8014dca:	f7ff ff27 	bl	8014c1c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014dce:	ab06      	add	r3, sp, #24
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014dd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8014dda:	4611      	mov	r1, r2
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7f9 ff53 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8014de2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014de6:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014dea:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8014dee:	4299      	cmp	r1, r3
 8014df0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8014df4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8014df8:	d10b      	bne.n	8014e12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014dfa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014dfe:	4552      	cmp	r2, sl
 8014e00:	d107      	bne.n	8014e12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014e02:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014e06:	455a      	cmp	r2, fp
 8014e08:	d103      	bne.n	8014e12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014e0a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014e0e:	454a      	cmp	r2, r9
 8014e10:	d06d      	beq.n	8014eee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014e12:	f1bb 0f00 	cmp.w	fp, #0
 8014e16:	dd65      	ble.n	8014ee4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014e18:	f1b9 0f00 	cmp.w	r9, #0
 8014e1c:	dd62      	ble.n	8014ee4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014e1e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014e22:	fa1f f08a 	uxth.w	r0, sl
 8014e26:	4552      	cmp	r2, sl
 8014e28:	9000      	str	r0, [sp, #0]
 8014e2a:	da12      	bge.n	8014e52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014e2c:	9301      	str	r3, [sp, #4]
 8014e2e:	9b00      	ldr	r3, [sp, #0]
 8014e30:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014e34:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014e38:	1a9a      	subs	r2, r3, r2
 8014e3a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8014e3e:	4631      	mov	r1, r6
 8014e40:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014e44:	4640      	mov	r0, r8
 8014e46:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014e4a:	69ea      	ldr	r2, [r5, #28]
 8014e4c:	f7ff ff7a 	bl	8014d44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014e50:	9b01      	ldr	r3, [sp, #4]
 8014e52:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014e56:	b29f      	uxth	r7, r3
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	da0d      	bge.n	8014e78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014e5c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014e60:	1aba      	subs	r2, r7, r2
 8014e62:	f8ad a012 	strh.w	sl, [sp, #18]
 8014e66:	4631      	mov	r1, r6
 8014e68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014e6c:	4640      	mov	r0, r8
 8014e6e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014e72:	69ea      	ldr	r2, [r5, #28]
 8014e74:	f7ff ff66 	bl	8014d44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014e78:	8822      	ldrh	r2, [r4, #0]
 8014e7a:	445f      	add	r7, fp
 8014e7c:	88a3      	ldrh	r3, [r4, #4]
 8014e7e:	b2bf      	uxth	r7, r7
 8014e80:	4413      	add	r3, r2
 8014e82:	b23a      	sxth	r2, r7
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	b219      	sxth	r1, r3
 8014e88:	4291      	cmp	r1, r2
 8014e8a:	dd0d      	ble.n	8014ea8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014e8c:	1bdb      	subs	r3, r3, r7
 8014e8e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014e92:	f8ad a012 	strh.w	sl, [sp, #18]
 8014e96:	4631      	mov	r1, r6
 8014e98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e9c:	4640      	mov	r0, r8
 8014e9e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014ea2:	69ea      	ldr	r2, [r5, #28]
 8014ea4:	f7ff ff4e 	bl	8014d44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014ea8:	88e2      	ldrh	r2, [r4, #6]
 8014eaa:	8863      	ldrh	r3, [r4, #2]
 8014eac:	4413      	add	r3, r2
 8014eae:	9a00      	ldr	r2, [sp, #0]
 8014eb0:	444a      	add	r2, r9
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	fa1f f982 	uxth.w	r9, r2
 8014eb8:	b219      	sxth	r1, r3
 8014eba:	fa0f f289 	sxth.w	r2, r9
 8014ebe:	428a      	cmp	r2, r1
 8014ec0:	da15      	bge.n	8014eee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014ec2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014ec6:	eba3 0309 	sub.w	r3, r3, r9
 8014eca:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014ece:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014ed2:	4631      	mov	r1, r6
 8014ed4:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014ed8:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014edc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ee0:	69ea      	ldr	r2, [r5, #28]
 8014ee2:	e001      	b.n	8014ee8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014ee4:	69ea      	ldr	r2, [r5, #28]
 8014ee6:	4621      	mov	r1, r4
 8014ee8:	4640      	mov	r0, r8
 8014eea:	f7ff ff2b 	bl	8014d44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f7ff fe94 	bl	8014c1c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014ef4:	6861      	ldr	r1, [r4, #4]
 8014ef6:	4602      	mov	r2, r0
 8014ef8:	4633      	mov	r3, r6
 8014efa:	6820      	ldr	r0, [r4, #0]
 8014efc:	c303      	stmia	r3!, {r0, r1}
 8014efe:	4611      	mov	r1, r2
 8014f00:	4630      	mov	r0, r6
 8014f02:	f7f9 fec1 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8014f06:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	f77f af33 	ble.w	8014d76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014f10:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	f77f af2e 	ble.w	8014d76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014f1a:	4628      	mov	r0, r5
 8014f1c:	f7ff fe9a 	bl	8014c54 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014f20:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014f24:	1a18      	subs	r0, r3, r0
 8014f26:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	f7ff fea6 	bl	8014c7c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014f30:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014f34:	4631      	mov	r1, r6
 8014f36:	1a18      	subs	r0, r3, r0
 8014f38:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	682b      	ldr	r3, [r5, #0]
 8014f40:	689b      	ldr	r3, [r3, #8]
 8014f42:	4798      	blx	r3
 8014f44:	e717      	b.n	8014d76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014f46 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014f46:	b570      	push	{r4, r5, r6, lr}
 8014f48:	1d06      	adds	r6, r0, #4
 8014f4a:	b086      	sub	sp, #24
 8014f4c:	460c      	mov	r4, r1
 8014f4e:	2300      	movs	r3, #0
 8014f50:	4631      	mov	r1, r6
 8014f52:	4605      	mov	r5, r0
 8014f54:	a802      	add	r0, sp, #8
 8014f56:	9301      	str	r3, [sp, #4]
 8014f58:	f7ff fbec 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014f5c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014f60:	8822      	ldrh	r2, [r4, #0]
 8014f62:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014f66:	1ad2      	subs	r2, r2, r3
 8014f68:	8863      	ldrh	r3, [r4, #2]
 8014f6a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014f6e:	1a5b      	subs	r3, r3, r1
 8014f70:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014f74:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014f78:	aa01      	add	r2, sp, #4
 8014f7a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014f7e:	4630      	mov	r0, r6
 8014f80:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014f84:	a904      	add	r1, sp, #16
 8014f86:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014f8a:	f7f9 ff55 	bl	800ee38 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8014f8e:	9a01      	ldr	r2, [sp, #4]
 8014f90:	b11a      	cbz	r2, 8014f9a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8014f92:	4621      	mov	r1, r4
 8014f94:	4628      	mov	r0, r5
 8014f96:	f7ff fed5 	bl	8014d44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014f9a:	b006      	add	sp, #24
 8014f9c:	bd70      	pop	{r4, r5, r6, pc}

08014f9e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8014f9e:	4602      	mov	r2, r0
 8014fa0:	b530      	push	{r4, r5, lr}
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	b085      	sub	sp, #20
 8014fa6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8014faa:	460d      	mov	r5, r1
 8014fac:	466b      	mov	r3, sp
 8014fae:	6851      	ldr	r1, [r2, #4]
 8014fb0:	c303      	stmia	r3!, {r0, r1}
 8014fb2:	4629      	mov	r1, r5
 8014fb4:	4668      	mov	r0, sp
 8014fb6:	f7f9 fe67 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8014fba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014fbe:	b12b      	cbz	r3, 8014fcc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014fc0:	4669      	mov	r1, sp
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	f7ff ffbf 	bl	8014f46 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014fc8:	b005      	add	sp, #20
 8014fca:	bd30      	pop	{r4, r5, pc}
 8014fcc:	3404      	adds	r4, #4
 8014fce:	a802      	add	r0, sp, #8
 8014fd0:	4621      	mov	r1, r4
 8014fd2:	f7ff fbaf 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014fd6:	f8bd 3000 	ldrh.w	r3, [sp]
 8014fda:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014fde:	4669      	mov	r1, sp
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	1a9b      	subs	r3, r3, r2
 8014fe4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014fe8:	f8ad 3000 	strh.w	r3, [sp]
 8014fec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014ff0:	1a9b      	subs	r3, r3, r2
 8014ff2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014ff6:	f7f9 fee6 	bl	800edc6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8014ffa:	e7e5      	b.n	8014fc8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08014ffc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	680a      	ldr	r2, [r1, #0]
 8015000:	1d01      	adds	r1, r0, #4
 8015002:	6992      	ldr	r2, [r2, #24]
 8015004:	4618      	mov	r0, r3
 8015006:	4710      	bx	r2

08015008 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8015008:	4298      	cmp	r0, r3
 801500a:	d200      	bcs.n	801500e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801500c:	b913      	cbnz	r3, 8015014 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801500e:	440a      	add	r2, r1
 8015010:	b210      	sxth	r0, r2
 8015012:	4770      	bx	lr
 8015014:	ee07 0a90 	vmov	s15, r0
 8015018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801501c:	ee07 3a90 	vmov	s15, r3
 8015020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015028:	ee07 2a90 	vmov	s15, r2
 801502c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015030:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015034:	ee07 1a90 	vmov	s15, r1
 8015038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801503c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015040:	ee67 5a07 	vmul.f32	s11, s14, s14
 8015044:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015048:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801504c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015058:	bfcc      	ite	gt
 801505a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801505e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8015062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015066:	ee17 3a90 	vmov	r3, s15
 801506a:	b218      	sxth	r0, r3
 801506c:	4770      	bx	lr

0801506e <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst>:
 801506e:	4298      	cmp	r0, r3
 8015070:	d200      	bcs.n	8015074 <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0x6>
 8015072:	b913      	cbnz	r3, 801507a <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0xc>
 8015074:	440a      	add	r2, r1
 8015076:	b210      	sxth	r0, r2
 8015078:	4770      	bx	lr
 801507a:	ee07 0a90 	vmov	s15, r0
 801507e:	ee07 3a10 	vmov	s14, r3
 8015082:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801508a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801508e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015092:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015096:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801509a:	ee07 2a90 	vmov	s15, r2
 801509e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80150a2:	ee07 1a90 	vmov	s15, r1
 80150a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80150ae:	eef4 6ae5 	vcmpe.f32	s13, s11
 80150b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b6:	bf55      	itete	pl
 80150b8:	eef0 5a00 	vmovpl.f32	s11, #0	; 0x40000000  2.0
 80150bc:	ee26 7a87 	vmulmi.f32	s14, s13, s14
 80150c0:	ee76 6ae5 	vsubpl.f32	s13, s13, s11
 80150c4:	ee27 7a26 	vmulmi.f32	s14, s14, s13
 80150c8:	bf57      	itett	pl
 80150ca:	ee26 5aa6 	vmulpl.f32	s10, s13, s13
 80150ce:	eee7 7a26 	vfmami.f32	s15, s14, s13
 80150d2:	eee5 5a26 	vfmapl.f32	s11, s10, s13
 80150d6:	eee5 7a87 	vfmapl.f32	s15, s11, s14
 80150da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80150de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150e2:	bfcc      	ite	gt
 80150e4:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 80150e8:	ee77 7ac6 	vsuble.f32	s15, s15, s12
 80150ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150f0:	ee17 3a90 	vmov	r3, s15
 80150f4:	b218      	sxth	r0, r3
 80150f6:	4770      	bx	lr

080150f8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 80150f8:	4298      	cmp	r0, r3
 80150fa:	d200      	bcs.n	80150fe <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 80150fc:	b913      	cbnz	r3, 8015104 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 80150fe:	440a      	add	r2, r1
 8015100:	b210      	sxth	r0, r2
 8015102:	4770      	bx	lr
 8015104:	ee07 2a90 	vmov	s15, r2
 8015108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801510c:	ee07 0a90 	vmov	s15, r0
 8015110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015118:	ee07 3a10 	vmov	s14, r3
 801511c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015120:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015124:	ee07 1a90 	vmov	s15, r1
 8015128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801512c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015130:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801513c:	bfcc      	ite	gt
 801513e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8015142:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8015146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801514a:	ee17 3a90 	vmov	r3, s15
 801514e:	b218      	sxth	r0, r3
 8015150:	4770      	bx	lr

08015152 <_ZN8touchgfx12TextProviderC1Ev>:
 8015152:	b538      	push	{r3, r4, r5, lr}
 8015154:	2500      	movs	r5, #0
 8015156:	2302      	movs	r3, #2
 8015158:	4604      	mov	r4, r0
 801515a:	220e      	movs	r2, #14
 801515c:	7403      	strb	r3, [r0, #16]
 801515e:	4629      	mov	r1, r5
 8015160:	6145      	str	r5, [r0, #20]
 8015162:	7605      	strb	r5, [r0, #24]
 8015164:	83c5      	strh	r5, [r0, #30]
 8015166:	8405      	strh	r5, [r0, #32]
 8015168:	86c5      	strh	r5, [r0, #54]	; 0x36
 801516a:	8705      	strh	r5, [r0, #56]	; 0x38
 801516c:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801516e:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8015172:	e9c0 5500 	strd	r5, r5, [r0]
 8015176:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801517a:	304c      	adds	r0, #76	; 0x4c
 801517c:	f010 f9a4 	bl	80254c8 <memset>
 8015180:	2301      	movs	r3, #1
 8015182:	4620      	mov	r0, r4
 8015184:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8015188:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801518c:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8015190:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8015194:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8015198:	f7f0 fe68 	bl	8005e6c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801519c:	4620      	mov	r0, r4
 801519e:	bd38      	pop	{r3, r4, r5, pc}

080151a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80151a0:	b530      	push	{r4, r5, lr}
 80151a2:	2500      	movs	r5, #0
 80151a4:	2401      	movs	r4, #1
 80151a6:	6843      	ldr	r3, [r0, #4]
 80151a8:	b913      	cbnz	r3, 80151b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80151aa:	6803      	ldr	r3, [r0, #0]
 80151ac:	b313      	cbz	r3, 80151f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80151ae:	6043      	str	r3, [r0, #4]
 80151b0:	7e03      	ldrb	r3, [r0, #24]
 80151b2:	b143      	cbz	r3, 80151c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80151b4:	6943      	ldr	r3, [r0, #20]
 80151b6:	b12b      	cbz	r3, 80151c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80151b8:	881a      	ldrh	r2, [r3, #0]
 80151ba:	b11a      	cbz	r2, 80151c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80151bc:	1c9a      	adds	r2, r3, #2
 80151be:	6142      	str	r2, [r0, #20]
 80151c0:	8818      	ldrh	r0, [r3, #0]
 80151c2:	bd30      	pop	{r4, r5, pc}
 80151c4:	7605      	strb	r5, [r0, #24]
 80151c6:	6843      	ldr	r3, [r0, #4]
 80151c8:	8819      	ldrh	r1, [r3, #0]
 80151ca:	b199      	cbz	r1, 80151f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80151cc:	1c9a      	adds	r2, r3, #2
 80151ce:	2902      	cmp	r1, #2
 80151d0:	6042      	str	r2, [r0, #4]
 80151d2:	d1f5      	bne.n	80151c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80151d4:	7c03      	ldrb	r3, [r0, #16]
 80151d6:	2b01      	cmp	r3, #1
 80151d8:	d8e5      	bhi.n	80151a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80151da:	1c5a      	adds	r2, r3, #1
 80151dc:	3302      	adds	r3, #2
 80151de:	7402      	strb	r2, [r0, #16]
 80151e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80151e4:	6143      	str	r3, [r0, #20]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d0dd      	beq.n	80151a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80151ea:	881b      	ldrh	r3, [r3, #0]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d0da      	beq.n	80151a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80151f0:	7604      	strb	r4, [r0, #24]
 80151f2:	e7d8      	b.n	80151a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80151f4:	2000      	movs	r0, #0
 80151f6:	e7e4      	b.n	80151c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080151f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80151f8:	b430      	push	{r4, r5}
 80151fa:	6815      	ldr	r5, [r2, #0]
 80151fc:	6085      	str	r5, [r0, #8]
 80151fe:	6852      	ldr	r2, [r2, #4]
 8015200:	6443      	str	r3, [r0, #68]	; 0x44
 8015202:	60c2      	str	r2, [r0, #12]
 8015204:	2200      	movs	r2, #0
 8015206:	9b02      	ldr	r3, [sp, #8]
 8015208:	7402      	strb	r2, [r0, #16]
 801520a:	6001      	str	r1, [r0, #0]
 801520c:	6483      	str	r3, [r0, #72]	; 0x48
 801520e:	6042      	str	r2, [r0, #4]
 8015210:	6142      	str	r2, [r0, #20]
 8015212:	7602      	strb	r2, [r0, #24]
 8015214:	8702      	strh	r2, [r0, #56]	; 0x38
 8015216:	8402      	strh	r2, [r0, #32]
 8015218:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801521c:	bc30      	pop	{r4, r5}
 801521e:	f7f0 be25 	b.w	8005e6c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08015222 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8015222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015224:	4605      	mov	r5, r0
 8015226:	4608      	mov	r0, r1
 8015228:	b1f1      	cbz	r1, 8015268 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801522a:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801522e:	460b      	mov	r3, r1
 8015230:	f101 0708 	add.w	r7, r1, #8
 8015234:	4622      	mov	r2, r4
 8015236:	6818      	ldr	r0, [r3, #0]
 8015238:	3308      	adds	r3, #8
 801523a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801523e:	4626      	mov	r6, r4
 8015240:	42bb      	cmp	r3, r7
 8015242:	c603      	stmia	r6!, {r0, r1}
 8015244:	4634      	mov	r4, r6
 8015246:	d1f6      	bne.n	8015236 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8015248:	6818      	ldr	r0, [r3, #0]
 801524a:	6030      	str	r0, [r6, #0]
 801524c:	4610      	mov	r0, r2
 801524e:	889b      	ldrh	r3, [r3, #4]
 8015250:	80b3      	strh	r3, [r6, #4]
 8015252:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8015256:	015b      	lsls	r3, r3, #5
 8015258:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801525c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8015260:	430b      	orrs	r3, r1
 8015262:	425b      	negs	r3, r3
 8015264:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8015268:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801526a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801526a:	b538      	push	{r3, r4, r5, lr}
 801526c:	460c      	mov	r4, r1
 801526e:	6811      	ldr	r1, [r2, #0]
 8015270:	4610      	mov	r0, r2
 8015272:	68cd      	ldr	r5, [r1, #12]
 8015274:	4619      	mov	r1, r3
 8015276:	47a8      	blx	r5
 8015278:	2800      	cmp	r0, #0
 801527a:	bf08      	it	eq
 801527c:	4620      	moveq	r0, r4
 801527e:	bd38      	pop	{r3, r4, r5, pc}

08015280 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8015280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015282:	4604      	mov	r4, r0
 8015284:	4615      	mov	r5, r2
 8015286:	4608      	mov	r0, r1
 8015288:	b93a      	cbnz	r2, 801529a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801528a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801528e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8015292:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015296:	4628      	mov	r0, r5
 8015298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801529a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801529e:	8893      	ldrh	r3, [r2, #4]
 80152a0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80152a4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80152a8:	79ee      	ldrb	r6, [r5, #7]
 80152aa:	4316      	orrs	r6, r2
 80152ac:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 80152b0:	189a      	adds	r2, r3, r2
 80152b2:	b2b7      	uxth	r7, r6
 80152b4:	b291      	uxth	r1, r2
 80152b6:	291d      	cmp	r1, #29
 80152b8:	f200 8084 	bhi.w	80153c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80152bc:	2201      	movs	r2, #1
 80152be:	10f6      	asrs	r6, r6, #3
 80152c0:	408a      	lsls	r2, r1
 80152c2:	4978      	ldr	r1, [pc, #480]	; (80154a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 80152c4:	420a      	tst	r2, r1
 80152c6:	d12e      	bne.n	8015326 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80152c8:	f412 7f60 	tst.w	r2, #896	; 0x380
 80152cc:	d07a      	beq.n	80153c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80152ce:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80152d2:	462b      	mov	r3, r5
 80152d4:	f105 0e08 	add.w	lr, r5, #8
 80152d8:	4615      	mov	r5, r2
 80152da:	6818      	ldr	r0, [r3, #0]
 80152dc:	3308      	adds	r3, #8
 80152de:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80152e2:	4694      	mov	ip, r2
 80152e4:	4573      	cmp	r3, lr
 80152e6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80152ea:	4662      	mov	r2, ip
 80152ec:	d1f5      	bne.n	80152da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80152ee:	6818      	ldr	r0, [r3, #0]
 80152f0:	f8cc 0000 	str.w	r0, [ip]
 80152f4:	889b      	ldrh	r3, [r3, #4]
 80152f6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80152fa:	b2b3      	uxth	r3, r6
 80152fc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015300:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8015304:	1aca      	subs	r2, r1, r3
 8015306:	1bcf      	subs	r7, r1, r7
 8015308:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801530c:	b292      	uxth	r2, r2
 801530e:	1afb      	subs	r3, r7, r3
 8015310:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8015314:	10d2      	asrs	r2, r2, #3
 8015316:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801531a:	4302      	orrs	r2, r0
 801531c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8015320:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8015324:	e7b7      	b.n	8015296 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8015326:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015328:	b92b      	cbnz	r3, 8015336 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801532a:	4b5f      	ldr	r3, [pc, #380]	; (80154a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801532c:	21c0      	movs	r1, #192	; 0xc0
 801532e:	4a5f      	ldr	r2, [pc, #380]	; (80154ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8015330:	485f      	ldr	r0, [pc, #380]	; (80154b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8015332:	f010 f839 	bl	80253a8 <__assert_func>
 8015336:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015338:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801533c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801533e:	f640 6333 	movw	r3, #3635	; 0xe33
 8015342:	4299      	cmp	r1, r3
 8015344:	d110      	bne.n	8015368 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8015346:	6803      	ldr	r3, [r0, #0]
 8015348:	68db      	ldr	r3, [r3, #12]
 801534a:	4798      	blx	r3
 801534c:	7b41      	ldrb	r1, [r0, #13]
 801534e:	00cb      	lsls	r3, r1, #3
 8015350:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015354:	7a03      	ldrb	r3, [r0, #8]
 8015356:	0648      	lsls	r0, r1, #25
 8015358:	ea43 0302 	orr.w	r3, r3, r2
 801535c:	bf44      	itt	mi
 801535e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015362:	b21b      	sxthmi	r3, r3
 8015364:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015368:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801536c:	462a      	mov	r2, r5
 801536e:	f105 0c08 	add.w	ip, r5, #8
 8015372:	443b      	add	r3, r7
 8015374:	4433      	add	r3, r6
 8015376:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801537a:	b29b      	uxth	r3, r3
 801537c:	4635      	mov	r5, r6
 801537e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015382:	6810      	ldr	r0, [r2, #0]
 8015384:	3208      	adds	r2, #8
 8015386:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801538a:	4637      	mov	r7, r6
 801538c:	4562      	cmp	r2, ip
 801538e:	c703      	stmia	r7!, {r0, r1}
 8015390:	463e      	mov	r6, r7
 8015392:	d1f6      	bne.n	8015382 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8015394:	6810      	ldr	r0, [r2, #0]
 8015396:	6038      	str	r0, [r7, #0]
 8015398:	8892      	ldrh	r2, [r2, #4]
 801539a:	80ba      	strh	r2, [r7, #4]
 801539c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80153a0:	10db      	asrs	r3, r3, #3
 80153a2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80153a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80153aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80153ae:	4313      	orrs	r3, r2
 80153b0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80153b4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80153b8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80153bc:	1a9b      	subs	r3, r3, r2
 80153be:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80153c2:	e768      	b.n	8015296 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80153c4:	f023 0204 	bic.w	r2, r3, #4
 80153c8:	f640 611b 	movw	r1, #3611	; 0xe1b
 80153cc:	428a      	cmp	r2, r1
 80153ce:	d003      	beq.n	80153d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80153d0:	f640 621d 	movw	r2, #3613	; 0xe1d
 80153d4:	4293      	cmp	r3, r2
 80153d6:	d120      	bne.n	801541a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80153d8:	3b01      	subs	r3, #1
 80153da:	4602      	mov	r2, r0
 80153dc:	4629      	mov	r1, r5
 80153de:	4620      	mov	r0, r4
 80153e0:	b29b      	uxth	r3, r3
 80153e2:	f7ff ff42 	bl	801526a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80153e6:	7b41      	ldrb	r1, [r0, #13]
 80153e8:	00cb      	lsls	r3, r1, #3
 80153ea:	0649      	lsls	r1, r1, #25
 80153ec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80153f0:	7a03      	ldrb	r3, [r0, #8]
 80153f2:	ea43 0302 	orr.w	r3, r3, r2
 80153f6:	bf44      	itt	mi
 80153f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80153fc:	b21b      	sxthmi	r3, r3
 80153fe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015402:	7b6b      	ldrb	r3, [r5, #13]
 8015404:	7aaa      	ldrb	r2, [r5, #10]
 8015406:	005b      	lsls	r3, r3, #1
 8015408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801540c:	4313      	orrs	r3, r2
 801540e:	115a      	asrs	r2, r3, #5
 8015410:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8015414:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015418:	e035      	b.n	8015486 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801541a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801541e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8015422:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8015426:	7a2a      	ldrb	r2, [r5, #8]
 8015428:	ea42 0201 	orr.w	r2, r2, r1
 801542c:	f640 6109 	movw	r1, #3593	; 0xe09
 8015430:	bf1c      	itt	ne
 8015432:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8015436:	b212      	sxthne	r2, r2
 8015438:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801543c:	f023 0210 	bic.w	r2, r3, #16
 8015440:	428a      	cmp	r2, r1
 8015442:	d003      	beq.n	801544c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8015444:	f640 6213 	movw	r2, #3603	; 0xe13
 8015448:	4293      	cmp	r3, r2
 801544a:	d129      	bne.n	80154a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801544c:	7b6e      	ldrb	r6, [r5, #13]
 801544e:	4629      	mov	r1, r5
 8015450:	0076      	lsls	r6, r6, #1
 8015452:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015456:	7aae      	ldrb	r6, [r5, #10]
 8015458:	4316      	orrs	r6, r2
 801545a:	f640 6213 	movw	r2, #3603	; 0xe13
 801545e:	4293      	cmp	r3, r2
 8015460:	4602      	mov	r2, r0
 8015462:	4620      	mov	r0, r4
 8015464:	bf16      	itet	ne
 8015466:	f103 33ff 	addne.w	r3, r3, #4294967295
 801546a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801546e:	b29b      	uxthne	r3, r3
 8015470:	f7ff fefb 	bl	801526a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015474:	7b43      	ldrb	r3, [r0, #13]
 8015476:	7a82      	ldrb	r2, [r0, #10]
 8015478:	005b      	lsls	r3, r3, #1
 801547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801547e:	4313      	orrs	r3, r2
 8015480:	1af6      	subs	r6, r6, r3
 8015482:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8015486:	7b69      	ldrb	r1, [r5, #13]
 8015488:	00cb      	lsls	r3, r1, #3
 801548a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801548e:	7a2b      	ldrb	r3, [r5, #8]
 8015490:	4313      	orrs	r3, r2
 8015492:	064a      	lsls	r2, r1, #25
 8015494:	bf44      	itt	mi
 8015496:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801549a:	b21b      	sxthmi	r3, r3
 801549c:	1bdb      	subs	r3, r3, r7
 801549e:	e73f      	b.n	8015320 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 80154a0:	2300      	movs	r3, #0
 80154a2:	e7b7      	b.n	8015414 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 80154a4:	3fc00079 	.word	0x3fc00079
 80154a8:	08028f04 	.word	0x08028f04
 80154ac:	0802b7ab 	.word	0x0802b7ab
 80154b0:	08028fd6 	.word	0x08028fd6

080154b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80154b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154b8:	4604      	mov	r4, r0
 80154ba:	b942      	cbnz	r2, 80154ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80154bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80154c0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80154c4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80154c8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80154cc:	e046      	b.n	801555c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80154ce:	7b51      	ldrb	r1, [r2, #13]
 80154d0:	8893      	ldrh	r3, [r2, #4]
 80154d2:	010f      	lsls	r7, r1, #4
 80154d4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80154d8:	79d7      	ldrb	r7, [r2, #7]
 80154da:	4307      	orrs	r7, r0
 80154dc:	2f04      	cmp	r7, #4
 80154de:	b2bd      	uxth	r5, r7
 80154e0:	bfcc      	ite	gt
 80154e2:	08bf      	lsrgt	r7, r7, #2
 80154e4:	2701      	movle	r7, #1
 80154e6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80154ea:	f200 80ab 	bhi.w	8015644 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80154ee:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80154f2:	4283      	cmp	r3, r0
 80154f4:	d216      	bcs.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80154f6:	f240 605b 	movw	r0, #1627	; 0x65b
 80154fa:	4283      	cmp	r3, r0
 80154fc:	d859      	bhi.n	80155b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80154fe:	f240 6057 	movw	r0, #1623	; 0x657
 8015502:	4283      	cmp	r3, r0
 8015504:	d20e      	bcs.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015506:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801550a:	d24a      	bcs.n	80155a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801550c:	f240 604e 	movw	r0, #1614	; 0x64e
 8015510:	4283      	cmp	r3, r0
 8015512:	d207      	bcs.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015514:	f240 601a 	movw	r0, #1562	; 0x61a
 8015518:	4283      	cmp	r3, r0
 801551a:	d02a      	beq.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801551c:	d821      	bhi.n	8015562 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801551e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8015522:	d35b      	bcc.n	80155dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015524:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8015528:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801552c:	f040 80d0 	bne.w	80156d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8015530:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8015534:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015538:	f040 80ca 	bne.w	80156d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801553c:	00cb      	lsls	r3, r1, #3
 801553e:	0649      	lsls	r1, r1, #25
 8015540:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015544:	7a13      	ldrb	r3, [r2, #8]
 8015546:	ea43 0300 	orr.w	r3, r3, r0
 801554a:	bf44      	itt	mi
 801554c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015550:	b21b      	sxthmi	r3, r3
 8015552:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015556:	1b5d      	subs	r5, r3, r5
 8015558:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801555c:	4610      	mov	r0, r2
 801555e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015562:	f240 604b 	movw	r0, #1611	; 0x64b
 8015566:	4283      	cmp	r3, r0
 8015568:	d338      	bcc.n	80155dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801556a:	f240 604c 	movw	r0, #1612	; 0x64c
 801556e:	4283      	cmp	r3, r0
 8015570:	d9d8      	bls.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015572:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8015576:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801557a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801557e:	f040 80f2 	bne.w	8015766 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8015582:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015586:	f040 80ee 	bne.w	8015766 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801558a:	00cb      	lsls	r3, r1, #3
 801558c:	064e      	lsls	r6, r1, #25
 801558e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015592:	7a13      	ldrb	r3, [r2, #8]
 8015594:	ea43 0300 	orr.w	r3, r3, r0
 8015598:	bf44      	itt	mi
 801559a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801559e:	b21b      	sxthmi	r3, r3
 80155a0:	e7d9      	b.n	8015556 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 80155a2:	f240 6054 	movw	r0, #1620	; 0x654
 80155a6:	4283      	cmp	r3, r0
 80155a8:	d8e3      	bhi.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80155aa:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80155ae:	d9e0      	bls.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80155b0:	e7b8      	b.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80155b2:	f240 6074 	movw	r0, #1652	; 0x674
 80155b6:	4283      	cmp	r3, r0
 80155b8:	d0b4      	beq.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80155ba:	d82d      	bhi.n	8015618 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80155bc:	f240 605e 	movw	r0, #1630	; 0x65e
 80155c0:	4283      	cmp	r3, r0
 80155c2:	d804      	bhi.n	80155ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80155c4:	f240 605d 	movw	r0, #1629	; 0x65d
 80155c8:	4283      	cmp	r3, r0
 80155ca:	d3d2      	bcc.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80155cc:	e7aa      	b.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80155ce:	f240 605f 	movw	r0, #1631	; 0x65f
 80155d2:	4283      	cmp	r3, r0
 80155d4:	d0cd      	beq.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80155d6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80155da:	d0a3      	beq.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80155dc:	00cb      	lsls	r3, r1, #3
 80155de:	0649      	lsls	r1, r1, #25
 80155e0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80155e4:	7a13      	ldrb	r3, [r2, #8]
 80155e6:	ea43 0300 	orr.w	r3, r3, r0
 80155ea:	bf44      	itt	mi
 80155ec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80155f0:	b21b      	sxthmi	r3, r3
 80155f2:	1b5d      	subs	r5, r3, r5
 80155f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80155f8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80155fc:	7b53      	ldrb	r3, [r2, #13]
 80155fe:	015b      	lsls	r3, r3, #5
 8015600:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015604:	7993      	ldrb	r3, [r2, #6]
 8015606:	430b      	orrs	r3, r1
 8015608:	2105      	movs	r1, #5
 801560a:	005b      	lsls	r3, r3, #1
 801560c:	fb93 f3f1 	sdiv	r3, r3, r1
 8015610:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8015614:	440b      	add	r3, r1
 8015616:	e757      	b.n	80154c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8015618:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801561c:	4283      	cmp	r3, r0
 801561e:	d809      	bhi.n	8015634 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8015620:	f240 60df 	movw	r0, #1759	; 0x6df
 8015624:	4283      	cmp	r3, r0
 8015626:	f4bf af7d 	bcs.w	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801562a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801562e:	2b05      	cmp	r3, #5
 8015630:	d8d4      	bhi.n	80155dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015632:	e777      	b.n	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015634:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8015638:	4283      	cmp	r3, r0
 801563a:	d09a      	beq.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801563c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8015640:	4283      	cmp	r3, r0
 8015642:	e7ca      	b.n	80155da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8015644:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8015648:	d22b      	bcs.n	80156a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801564a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801564e:	4283      	cmp	r3, r0
 8015650:	d28f      	bcs.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015652:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015656:	4283      	cmp	r3, r0
 8015658:	d816      	bhi.n	8015688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801565a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801565e:	4283      	cmp	r3, r0
 8015660:	f4bf af60 	bcs.w	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015664:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8015668:	4283      	cmp	r3, r0
 801566a:	d80a      	bhi.n	8015682 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801566c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8015670:	4283      	cmp	r3, r0
 8015672:	f4bf af57 	bcs.w	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015676:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801567a:	4283      	cmp	r3, r0
 801567c:	f43f af79 	beq.w	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015680:	e7ac      	b.n	80155dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015682:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8015686:	e7f8      	b.n	801567a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8015688:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801568c:	4283      	cmp	r3, r0
 801568e:	d802      	bhi.n	8015696 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8015690:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015694:	e798      	b.n	80155c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8015696:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801569a:	4283      	cmp	r3, r0
 801569c:	f47f af42 	bne.w	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80156a0:	e767      	b.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80156a2:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80156a6:	4283      	cmp	r3, r0
 80156a8:	f43f af63 	beq.w	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80156ac:	d802      	bhi.n	80156b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 80156ae:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80156b2:	e7f2      	b.n	801569a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 80156b4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80156b8:	4283      	cmp	r3, r0
 80156ba:	d805      	bhi.n	80156c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 80156bc:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80156c0:	4283      	cmp	r3, r0
 80156c2:	f4ff af2f 	bcc.w	8015524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80156c6:	e754      	b.n	8015572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80156c8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80156cc:	4283      	cmp	r3, r0
 80156ce:	e7af      	b.n	8015630 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 80156d0:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80156d4:	4617      	mov	r7, r2
 80156d6:	f102 0808 	add.w	r8, r2, #8
 80156da:	4666      	mov	r6, ip
 80156dc:	6838      	ldr	r0, [r7, #0]
 80156de:	3708      	adds	r7, #8
 80156e0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80156e4:	46e6      	mov	lr, ip
 80156e6:	4547      	cmp	r7, r8
 80156e8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80156ec:	46f4      	mov	ip, lr
 80156ee:	d1f5      	bne.n	80156dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80156f0:	6838      	ldr	r0, [r7, #0]
 80156f2:	f8ce 0000 	str.w	r0, [lr]
 80156f6:	88b9      	ldrh	r1, [r7, #4]
 80156f8:	f8ae 1004 	strh.w	r1, [lr, #4]
 80156fc:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8015700:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015704:	d009      	beq.n	801571a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8015706:	7b51      	ldrb	r1, [r2, #13]
 8015708:	7992      	ldrb	r2, [r2, #6]
 801570a:	0149      	lsls	r1, r1, #5
 801570c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015710:	4311      	orrs	r1, r2
 8015712:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015716:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801571a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801571e:	d00d      	beq.n	801573c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8015720:	442b      	add	r3, r5
 8015722:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015726:	b29b      	uxth	r3, r3
 8015728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801572c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015730:	10db      	asrs	r3, r3, #3
 8015732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015736:	4313      	orrs	r3, r2
 8015738:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801573c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8015740:	00cb      	lsls	r3, r1, #3
 8015742:	064f      	lsls	r7, r1, #25
 8015744:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015748:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801574c:	ea43 0302 	orr.w	r3, r3, r2
 8015750:	bf44      	itt	mi
 8015752:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015756:	b21b      	sxthmi	r3, r3
 8015758:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801575c:	1b5d      	subs	r5, r3, r5
 801575e:	4632      	mov	r2, r6
 8015760:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015764:	e6fa      	b.n	801555c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8015766:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801576a:	4694      	mov	ip, r2
 801576c:	f102 0908 	add.w	r9, r2, #8
 8015770:	4676      	mov	r6, lr
 8015772:	f8dc 0000 	ldr.w	r0, [ip]
 8015776:	f10c 0c08 	add.w	ip, ip, #8
 801577a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801577e:	46f0      	mov	r8, lr
 8015780:	45cc      	cmp	ip, r9
 8015782:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8015786:	46c6      	mov	lr, r8
 8015788:	d1f3      	bne.n	8015772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801578a:	f8dc 0000 	ldr.w	r0, [ip]
 801578e:	f8c8 0000 	str.w	r0, [r8]
 8015792:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8015796:	f8a8 1004 	strh.w	r1, [r8, #4]
 801579a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801579e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80157a2:	d009      	beq.n	80157b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 80157a4:	7b51      	ldrb	r1, [r2, #13]
 80157a6:	7992      	ldrb	r2, [r2, #6]
 80157a8:	0149      	lsls	r1, r1, #5
 80157aa:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80157ae:	4311      	orrs	r1, r2
 80157b0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80157b4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80157b8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80157bc:	d00d      	beq.n	80157da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 80157be:	1bdb      	subs	r3, r3, r7
 80157c0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80157ca:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80157ce:	10db      	asrs	r3, r3, #3
 80157d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80157d4:	4313      	orrs	r3, r2
 80157d6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80157da:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80157de:	00cb      	lsls	r3, r1, #3
 80157e0:	0648      	lsls	r0, r1, #25
 80157e2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80157e6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80157ea:	ea43 0302 	orr.w	r3, r3, r2
 80157ee:	bf44      	itt	mi
 80157f0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80157f4:	b21b      	sxthmi	r3, r3
 80157f6:	e7b1      	b.n	801575c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080157f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80157f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157fc:	461e      	mov	r6, r3
 80157fe:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8015800:	4604      	mov	r4, r0
 8015802:	4617      	mov	r7, r2
 8015804:	b92b      	cbnz	r3, 8015812 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8015806:	4b25      	ldr	r3, [pc, #148]	; (801589c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8015808:	21c0      	movs	r1, #192	; 0xc0
 801580a:	4a25      	ldr	r2, [pc, #148]	; (80158a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801580c:	4825      	ldr	r0, [pc, #148]	; (80158a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801580e:	f00f fdcb 	bl	80253a8 <__assert_func>
 8015812:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015814:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015818:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801581c:	f7f0 fae4 	bl	8005de8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015820:	4605      	mov	r5, r0
 8015822:	b918      	cbnz	r0, 801582c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8015824:	6030      	str	r0, [r6, #0]
 8015826:	4628      	mov	r0, r5
 8015828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	4601      	mov	r1, r0
 8015830:	4638      	mov	r0, r7
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	4798      	blx	r3
 8015836:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801583a:	4602      	mov	r2, r0
 801583c:	6030      	str	r0, [r6, #0]
 801583e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015842:	d213      	bcs.n	801586c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8015844:	4643      	mov	r3, r8
 8015846:	4639      	mov	r1, r7
 8015848:	4620      	mov	r0, r4
 801584a:	f7ff fe33 	bl	80154b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801584e:	6030      	str	r0, [r6, #0]
 8015850:	6833      	ldr	r3, [r6, #0]
 8015852:	b143      	cbz	r3, 8015866 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8015854:	7b5a      	ldrb	r2, [r3, #13]
 8015856:	7a9b      	ldrb	r3, [r3, #10]
 8015858:	0052      	lsls	r2, r2, #1
 801585a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801585e:	4313      	orrs	r3, r2
 8015860:	bf0c      	ite	eq
 8015862:	2301      	moveq	r3, #1
 8015864:	2300      	movne	r3, #0
 8015866:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801586a:	e7dc      	b.n	8015826 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801586c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8015870:	b29b      	uxth	r3, r3
 8015872:	2b7f      	cmp	r3, #127	; 0x7f
 8015874:	d804      	bhi.n	8015880 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8015876:	4639      	mov	r1, r7
 8015878:	4620      	mov	r0, r4
 801587a:	f7ff fd01 	bl	8015280 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801587e:	e7e6      	b.n	801584e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8015880:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8015884:	2b00      	cmp	r3, #0
 8015886:	d0e3      	beq.n	8015850 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8015888:	f640 1302 	movw	r3, #2306	; 0x902
 801588c:	429d      	cmp	r5, r3
 801588e:	d1df      	bne.n	8015850 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8015890:	4601      	mov	r1, r0
 8015892:	4620      	mov	r0, r4
 8015894:	f7ff fcc5 	bl	8015222 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015898:	e7d9      	b.n	801584e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801589a:	bf00      	nop
 801589c:	08028f04 	.word	0x08028f04
 80158a0:	0802b7ab 	.word	0x0802b7ab
 80158a4:	08028fd6 	.word	0x08028fd6

080158a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80158a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158ac:	461e      	mov	r6, r3
 80158ae:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80158b0:	4604      	mov	r4, r0
 80158b2:	4617      	mov	r7, r2
 80158b4:	b92b      	cbnz	r3, 80158c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 80158b6:	4b26      	ldr	r3, [pc, #152]	; (8015950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 80158b8:	21c0      	movs	r1, #192	; 0xc0
 80158ba:	4a26      	ldr	r2, [pc, #152]	; (8015954 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 80158bc:	4826      	ldr	r0, [pc, #152]	; (8015958 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 80158be:	f00f fd73 	bl	80253a8 <__assert_func>
 80158c2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80158c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80158c8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80158cc:	f7f0 fa8c 	bl	8005de8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80158d0:	4605      	mov	r5, r0
 80158d2:	b918      	cbnz	r0, 80158dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 80158d4:	6030      	str	r0, [r6, #0]
 80158d6:	4628      	mov	r0, r5
 80158d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	4601      	mov	r1, r0
 80158e0:	4638      	mov	r0, r7
 80158e2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80158e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80158ea:	47c8      	blx	r9
 80158ec:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80158f0:	4602      	mov	r2, r0
 80158f2:	6030      	str	r0, [r6, #0]
 80158f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80158f8:	d213      	bcs.n	8015922 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 80158fa:	4643      	mov	r3, r8
 80158fc:	4639      	mov	r1, r7
 80158fe:	4620      	mov	r0, r4
 8015900:	f7ff fdd8 	bl	80154b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015904:	6030      	str	r0, [r6, #0]
 8015906:	6833      	ldr	r3, [r6, #0]
 8015908:	b143      	cbz	r3, 801591c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801590a:	7b5a      	ldrb	r2, [r3, #13]
 801590c:	7a9b      	ldrb	r3, [r3, #10]
 801590e:	0052      	lsls	r2, r2, #1
 8015910:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015914:	4313      	orrs	r3, r2
 8015916:	bf0c      	ite	eq
 8015918:	2301      	moveq	r3, #1
 801591a:	2300      	movne	r3, #0
 801591c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8015920:	e7d9      	b.n	80158d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8015922:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8015926:	b29b      	uxth	r3, r3
 8015928:	2b7f      	cmp	r3, #127	; 0x7f
 801592a:	d804      	bhi.n	8015936 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801592c:	4639      	mov	r1, r7
 801592e:	4620      	mov	r0, r4
 8015930:	f7ff fca6 	bl	8015280 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015934:	e7e6      	b.n	8015904 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8015936:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801593a:	2b00      	cmp	r3, #0
 801593c:	d0e3      	beq.n	8015906 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801593e:	f640 1302 	movw	r3, #2306	; 0x902
 8015942:	429d      	cmp	r5, r3
 8015944:	d1df      	bne.n	8015906 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8015946:	4601      	mov	r1, r0
 8015948:	4620      	mov	r0, r4
 801594a:	f7ff fc6a 	bl	8015222 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801594e:	e7d9      	b.n	8015904 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8015950:	08028f04 	.word	0x08028f04
 8015954:	0802b7ab 	.word	0x0802b7ab
 8015958:	08028fd6 	.word	0x08028fd6

0801595c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801595c:	b510      	push	{r4, lr}
 801595e:	4604      	mov	r4, r0
 8015960:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8015964:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015966:	b9d9      	cbnz	r1, 80159a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8015968:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801596a:	2b0a      	cmp	r3, #10
 801596c:	d037      	beq.n	80159de <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801596e:	4620      	mov	r0, r4
 8015970:	f7ff fc16 	bl	80151a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8015974:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015976:	2b09      	cmp	r3, #9
 8015978:	d906      	bls.n	8015988 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801597a:	4b19      	ldr	r3, [pc, #100]	; (80159e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801597c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8015980:	4a18      	ldr	r2, [pc, #96]	; (80159e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8015982:	4819      	ldr	r0, [pc, #100]	; (80159e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8015984:	f00f fd10 	bl	80253a8 <__assert_func>
 8015988:	1c5a      	adds	r2, r3, #1
 801598a:	8722      	strh	r2, [r4, #56]	; 0x38
 801598c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801598e:	4413      	add	r3, r2
 8015990:	b29b      	uxth	r3, r3
 8015992:	2b09      	cmp	r3, #9
 8015994:	bf88      	it	hi
 8015996:	3b0a      	subhi	r3, #10
 8015998:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801599c:	8458      	strh	r0, [r3, #34]	; 0x22
 801599e:	e7e3      	b.n	8015968 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 80159a0:	2b0a      	cmp	r3, #10
 80159a2:	d01c      	beq.n	80159de <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80159a4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80159a6:	3901      	subs	r1, #1
 80159a8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80159ac:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80159ae:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80159b2:	1c51      	adds	r1, r2, #1
 80159b4:	b289      	uxth	r1, r1
 80159b6:	2901      	cmp	r1, #1
 80159b8:	bf8a      	itet	hi
 80159ba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80159be:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80159c0:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80159c2:	2b09      	cmp	r3, #9
 80159c4:	d8d9      	bhi.n	801597a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 80159c6:	1c5a      	adds	r2, r3, #1
 80159c8:	8722      	strh	r2, [r4, #56]	; 0x38
 80159ca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80159cc:	4413      	add	r3, r2
 80159ce:	b29b      	uxth	r3, r3
 80159d0:	2b09      	cmp	r3, #9
 80159d2:	bf88      	it	hi
 80159d4:	3b0a      	subhi	r3, #10
 80159d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80159da:	8458      	strh	r0, [r3, #34]	; 0x22
 80159dc:	e7c0      	b.n	8015960 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80159de:	bd10      	pop	{r4, pc}
 80159e0:	0802b57c 	.word	0x0802b57c
 80159e4:	0802b901 	.word	0x0802b901
 80159e8:	08028fd6 	.word	0x08028fd6

080159ec <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80159ec:	b538      	push	{r3, r4, r5, lr}
 80159ee:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80159f0:	4604      	mov	r4, r0
 80159f2:	b92a      	cbnz	r2, 8015a00 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80159f4:	4b13      	ldr	r3, [pc, #76]	; (8015a44 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80159f6:	21d5      	movs	r1, #213	; 0xd5
 80159f8:	4a13      	ldr	r2, [pc, #76]	; (8015a48 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80159fa:	4814      	ldr	r0, [pc, #80]	; (8015a4c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80159fc:	f00f fcd4 	bl	80253a8 <__assert_func>
 8015a00:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015a02:	3a01      	subs	r2, #1
 8015a04:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8015a08:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8015a0a:	8702      	strh	r2, [r0, #56]	; 0x38
 8015a0c:	1c5a      	adds	r2, r3, #1
 8015a0e:	b292      	uxth	r2, r2
 8015a10:	2a09      	cmp	r2, #9
 8015a12:	bf8a      	itet	hi
 8015a14:	3b09      	subhi	r3, #9
 8015a16:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8015a18:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8015a1a:	f7ff ff9f 	bl	801595c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015a1e:	8c23      	ldrh	r3, [r4, #32]
 8015a20:	2b01      	cmp	r3, #1
 8015a22:	bf9c      	itt	ls
 8015a24:	3301      	addls	r3, #1
 8015a26:	8423      	strhls	r3, [r4, #32]
 8015a28:	8be3      	ldrh	r3, [r4, #30]
 8015a2a:	b90b      	cbnz	r3, 8015a30 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8015a2c:	2302      	movs	r3, #2
 8015a2e:	83e3      	strh	r3, [r4, #30]
 8015a30:	8be3      	ldrh	r3, [r4, #30]
 8015a32:	4628      	mov	r0, r5
 8015a34:	3b01      	subs	r3, #1
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	83e3      	strh	r3, [r4, #30]
 8015a3a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015a3e:	8365      	strh	r5, [r4, #26]
 8015a40:	bd38      	pop	{r3, r4, r5, pc}
 8015a42:	bf00      	nop
 8015a44:	08028f04 	.word	0x08028f04
 8015a48:	0802b856 	.word	0x0802b856
 8015a4c:	08028fd6 	.word	0x08028fd6

08015a50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8015a50:	428a      	cmp	r2, r1
 8015a52:	b538      	push	{r3, r4, r5, lr}
 8015a54:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8015a56:	d90c      	bls.n	8015a72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8015a58:	b92c      	cbnz	r4, 8015a66 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8015a5a:	4b1c      	ldr	r3, [pc, #112]	; (8015acc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8015a5c:	21e1      	movs	r1, #225	; 0xe1
 8015a5e:	4a1c      	ldr	r2, [pc, #112]	; (8015ad0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8015a60:	481c      	ldr	r0, [pc, #112]	; (8015ad4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8015a62:	f00f fca1 	bl	80253a8 <__assert_func>
 8015a66:	3c01      	subs	r4, #1
 8015a68:	4b1b      	ldr	r3, [pc, #108]	; (8015ad8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8015a6a:	4a1c      	ldr	r2, [pc, #112]	; (8015adc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8015a6c:	21c5      	movs	r1, #197	; 0xc5
 8015a6e:	8704      	strh	r4, [r0, #56]	; 0x38
 8015a70:	e7f6      	b.n	8015a60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8015a72:	428c      	cmp	r4, r1
 8015a74:	d203      	bcs.n	8015a7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8015a76:	4b1a      	ldr	r3, [pc, #104]	; (8015ae0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8015a78:	21cb      	movs	r1, #203	; 0xcb
 8015a7a:	4a1a      	ldr	r2, [pc, #104]	; (8015ae4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8015a7c:	e7f0      	b.n	8015a60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8015a7e:	1a64      	subs	r4, r4, r1
 8015a80:	250a      	movs	r5, #10
 8015a82:	8704      	strh	r4, [r0, #56]	; 0x38
 8015a84:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8015a86:	4421      	add	r1, r4
 8015a88:	b289      	uxth	r1, r1
 8015a8a:	2909      	cmp	r1, #9
 8015a8c:	bf88      	it	hi
 8015a8e:	390a      	subhi	r1, #10
 8015a90:	86c1      	strh	r1, [r0, #54]	; 0x36
 8015a92:	b1ba      	cbz	r2, 8015ac4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8015a94:	3a01      	subs	r2, #1
 8015a96:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8015a98:	b292      	uxth	r2, r2
 8015a9a:	2909      	cmp	r1, #9
 8015a9c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8015aa0:	d903      	bls.n	8015aaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8015aa2:	4b11      	ldr	r3, [pc, #68]	; (8015ae8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8015aa4:	21e6      	movs	r1, #230	; 0xe6
 8015aa6:	4a11      	ldr	r2, [pc, #68]	; (8015aec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8015aa8:	e7da      	b.n	8015a60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8015aaa:	3101      	adds	r1, #1
 8015aac:	8701      	strh	r1, [r0, #56]	; 0x38
 8015aae:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015ab0:	b901      	cbnz	r1, 8015ab4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8015ab2:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015ab4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015ab6:	3901      	subs	r1, #1
 8015ab8:	b289      	uxth	r1, r1
 8015aba:	86c1      	strh	r1, [r0, #54]	; 0x36
 8015abc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8015ac0:	844c      	strh	r4, [r1, #34]	; 0x22
 8015ac2:	e7e6      	b.n	8015a92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8015ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ac8:	f7ff bf48 	b.w	801595c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015acc:	08028f04 	.word	0x08028f04
 8015ad0:	0802b62f 	.word	0x0802b62f
 8015ad4:	08028fd6 	.word	0x08028fd6
 8015ad8:	08029002 	.word	0x08029002
 8015adc:	0802b6d9 	.word	0x0802b6d9
 8015ae0:	0802b588 	.word	0x0802b588
 8015ae4:	0802b9b0 	.word	0x0802b9b0
 8015ae8:	0802b594 	.word	0x0802b594
 8015aec:	0802b5a7 	.word	0x0802b5a7

08015af0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8015af0:	3a01      	subs	r2, #1
 8015af2:	b570      	push	{r4, r5, r6, lr}
 8015af4:	b292      	uxth	r2, r2
 8015af6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8015afa:	42b2      	cmp	r2, r6
 8015afc:	d019      	beq.n	8015b32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8015afe:	8c04      	ldrh	r4, [r0, #32]
 8015b00:	f831 5b02 	ldrh.w	r5, [r1], #2
 8015b04:	4294      	cmp	r4, r2
 8015b06:	d805      	bhi.n	8015b14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8015b08:	4b19      	ldr	r3, [pc, #100]	; (8015b70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8015b0a:	4a1a      	ldr	r2, [pc, #104]	; (8015b74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8015b0c:	21c5      	movs	r1, #197	; 0xc5
 8015b0e:	481a      	ldr	r0, [pc, #104]	; (8015b78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8015b10:	f00f fc4a 	bl	80253a8 <__assert_func>
 8015b14:	8bc4      	ldrh	r4, [r0, #30]
 8015b16:	4414      	add	r4, r2
 8015b18:	3a01      	subs	r2, #1
 8015b1a:	b2a4      	uxth	r4, r4
 8015b1c:	b292      	uxth	r2, r2
 8015b1e:	2c01      	cmp	r4, #1
 8015b20:	bf88      	it	hi
 8015b22:	3c02      	subhi	r4, #2
 8015b24:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015b28:	8b64      	ldrh	r4, [r4, #26]
 8015b2a:	42ac      	cmp	r4, r5
 8015b2c:	d0e5      	beq.n	8015afa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8015b2e:	2000      	movs	r0, #0
 8015b30:	bd70      	pop	{r4, r5, r6, pc}
 8015b32:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015b36:	2400      	movs	r4, #0
 8015b38:	4413      	add	r3, r2
 8015b3a:	b2a2      	uxth	r2, r4
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	da14      	bge.n	8015b6a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8015b40:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8015b42:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8015b46:	4296      	cmp	r6, r2
 8015b48:	d802      	bhi.n	8015b50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8015b4a:	4b09      	ldr	r3, [pc, #36]	; (8015b70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8015b4c:	4a0b      	ldr	r2, [pc, #44]	; (8015b7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8015b4e:	e7dd      	b.n	8015b0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8015b50:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8015b52:	3401      	adds	r4, #1
 8015b54:	4432      	add	r2, r6
 8015b56:	b292      	uxth	r2, r2
 8015b58:	2a09      	cmp	r2, #9
 8015b5a:	bf88      	it	hi
 8015b5c:	3a0a      	subhi	r2, #10
 8015b5e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8015b62:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8015b64:	42aa      	cmp	r2, r5
 8015b66:	d0e8      	beq.n	8015b3a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8015b68:	e7e1      	b.n	8015b2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8015b6a:	2001      	movs	r0, #1
 8015b6c:	e7e0      	b.n	8015b30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8015b6e:	bf00      	nop
 8015b70:	08029002 	.word	0x08029002
 8015b74:	0802ba34 	.word	0x0802ba34
 8015b78:	08028fd6 	.word	0x08028fd6
 8015b7c:	0802b6d9 	.word	0x0802b6d9

08015b80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8015b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b84:	4605      	mov	r5, r0
 8015b86:	4616      	mov	r6, r2
 8015b88:	1c8c      	adds	r4, r1, #2
 8015b8a:	8809      	ldrh	r1, [r1, #0]
 8015b8c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8015b90:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8015b94:	42b3      	cmp	r3, r6
 8015b96:	d124      	bne.n	8015be2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8015b98:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8015b9c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8015ba0:	f001 070f 	and.w	r7, r1, #15
 8015ba4:	4652      	mov	r2, sl
 8015ba6:	f8cd 8000 	str.w	r8, [sp]
 8015baa:	464b      	mov	r3, r9
 8015bac:	4621      	mov	r1, r4
 8015bae:	4628      	mov	r0, r5
 8015bb0:	f7ff ff9e 	bl	8015af0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8015bb4:	4683      	mov	fp, r0
 8015bb6:	b168      	cbz	r0, 8015bd4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8015bb8:	eb0a 0109 	add.w	r1, sl, r9
 8015bbc:	463a      	mov	r2, r7
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	4441      	add	r1, r8
 8015bc2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8015bc6:	4649      	mov	r1, r9
 8015bc8:	f7ff ff42 	bl	8015a50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015bcc:	4658      	mov	r0, fp
 8015bce:	b003      	add	sp, #12
 8015bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bd4:	eb07 010a 	add.w	r1, r7, sl
 8015bd8:	4449      	add	r1, r9
 8015bda:	4441      	add	r1, r8
 8015bdc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015be0:	e7d2      	b.n	8015b88 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8015be2:	f04f 0b00 	mov.w	fp, #0
 8015be6:	e7f1      	b.n	8015bcc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08015be8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8015be8:	b570      	push	{r4, r5, r6, lr}
 8015bea:	8810      	ldrh	r0, [r2, #0]
 8015bec:	4298      	cmp	r0, r3
 8015bee:	d817      	bhi.n	8015c20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015bf0:	1e48      	subs	r0, r1, #1
 8015bf2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8015bf6:	4298      	cmp	r0, r3
 8015bf8:	d312      	bcc.n	8015c20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015bfa:	2400      	movs	r4, #0
 8015bfc:	428c      	cmp	r4, r1
 8015bfe:	d20f      	bcs.n	8015c20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015c00:	1860      	adds	r0, r4, r1
 8015c02:	1040      	asrs	r0, r0, #1
 8015c04:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8015c08:	0085      	lsls	r5, r0, #2
 8015c0a:	42b3      	cmp	r3, r6
 8015c0c:	d902      	bls.n	8015c14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8015c0e:	3001      	adds	r0, #1
 8015c10:	b284      	uxth	r4, r0
 8015c12:	e7f3      	b.n	8015bfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015c14:	d201      	bcs.n	8015c1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8015c16:	b281      	uxth	r1, r0
 8015c18:	e7f0      	b.n	8015bfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015c1a:	442a      	add	r2, r5
 8015c1c:	8850      	ldrh	r0, [r2, #2]
 8015c1e:	bd70      	pop	{r4, r5, r6, pc}
 8015c20:	2000      	movs	r0, #0
 8015c22:	e7fc      	b.n	8015c1e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08015c24 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8015c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c28:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8015c2a:	4604      	mov	r4, r0
 8015c2c:	260b      	movs	r6, #11
 8015c2e:	886f      	ldrh	r7, [r5, #2]
 8015c30:	087f      	lsrs	r7, r7, #1
 8015c32:	3e01      	subs	r6, #1
 8015c34:	d01b      	beq.n	8015c6e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8015c36:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015c38:	b92b      	cbnz	r3, 8015c46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8015c3a:	4b0e      	ldr	r3, [pc, #56]	; (8015c74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8015c3c:	21c0      	movs	r1, #192	; 0xc0
 8015c3e:	4a0e      	ldr	r2, [pc, #56]	; (8015c78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8015c40:	480e      	ldr	r0, [pc, #56]	; (8015c7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8015c42:	f00f fbb1 	bl	80253a8 <__assert_func>
 8015c46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015c48:	462a      	mov	r2, r5
 8015c4a:	4639      	mov	r1, r7
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015c52:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8015c56:	4643      	mov	r3, r8
 8015c58:	f7ff ffc6 	bl	8015be8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015c5c:	b138      	cbz	r0, 8015c6e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8015c5e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8015c62:	4642      	mov	r2, r8
 8015c64:	4620      	mov	r0, r4
 8015c66:	f7ff ff8b 	bl	8015b80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	d1e1      	bne.n	8015c32 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8015c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c72:	bf00      	nop
 8015c74:	08028f04 	.word	0x08028f04
 8015c78:	0802b7ab 	.word	0x0802b7ab
 8015c7c:	08028fd6 	.word	0x08028fd6

08015c80 <_ZN8touchgfx8ceil28_4El>:
 8015c80:	f110 030f 	adds.w	r3, r0, #15
 8015c84:	d401      	bmi.n	8015c8a <_ZN8touchgfx8ceil28_4El+0xa>
 8015c86:	1118      	asrs	r0, r3, #4
 8015c88:	4770      	bx	lr
 8015c8a:	2210      	movs	r2, #16
 8015c8c:	f1c0 0001 	rsb	r0, r0, #1
 8015c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c94:	f010 000f 	ands.w	r0, r0, #15
 8015c98:	bf18      	it	ne
 8015c9a:	2001      	movne	r0, #1
 8015c9c:	1a18      	subs	r0, r3, r0
 8015c9e:	4770      	bx	lr

08015ca0 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8015ca0:	2900      	cmp	r1, #0
 8015ca2:	b538      	push	{r3, r4, r5, lr}
 8015ca4:	dc05      	bgt.n	8015cb2 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8015ca6:	4b0f      	ldr	r3, [pc, #60]	; (8015ce4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8015ca8:	21f7      	movs	r1, #247	; 0xf7
 8015caa:	4a0f      	ldr	r2, [pc, #60]	; (8015ce8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8015cac:	480f      	ldr	r0, [pc, #60]	; (8015cec <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8015cae:	f00f fb7b 	bl	80253a8 <__assert_func>
 8015cb2:	2800      	cmp	r0, #0
 8015cb4:	db06      	blt.n	8015cc4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8015cb6:	fb90 f4f1 	sdiv	r4, r0, r1
 8015cba:	fb01 0114 	mls	r1, r1, r4, r0
 8015cbe:	6014      	str	r4, [r2, #0]
 8015cc0:	6019      	str	r1, [r3, #0]
 8015cc2:	bd38      	pop	{r3, r4, r5, pc}
 8015cc4:	4240      	negs	r0, r0
 8015cc6:	fb90 f4f1 	sdiv	r4, r0, r1
 8015cca:	4265      	negs	r5, r4
 8015ccc:	fb01 0014 	mls	r0, r1, r4, r0
 8015cd0:	6015      	str	r5, [r2, #0]
 8015cd2:	6018      	str	r0, [r3, #0]
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	d0f4      	beq.n	8015cc2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8015cd8:	6810      	ldr	r0, [r2, #0]
 8015cda:	3801      	subs	r0, #1
 8015cdc:	6010      	str	r0, [r2, #0]
 8015cde:	6818      	ldr	r0, [r3, #0]
 8015ce0:	1a09      	subs	r1, r1, r0
 8015ce2:	e7ed      	b.n	8015cc0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8015ce4:	0802bb05 	.word	0x0802bb05
 8015ce8:	0802bb44 	.word	0x0802bb44
 8015cec:	0802bb15 	.word	0x0802bb15

08015cf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8015cf0:	b570      	push	{r4, r5, r6, lr}
 8015cf2:	694a      	ldr	r2, [r1, #20]
 8015cf4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015cf6:	684b      	ldr	r3, [r1, #4]
 8015cf8:	1b54      	subs	r4, r2, r5
 8015cfa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8015cfc:	f000 8106 	beq.w	8015f0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8015d00:	1b9b      	subs	r3, r3, r6
 8015d02:	d003      	beq.n	8015d0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015d04:	4363      	muls	r3, r4
 8015d06:	2210      	movs	r2, #16
 8015d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8015d0c:	680c      	ldr	r4, [r1, #0]
 8015d0e:	698a      	ldr	r2, [r1, #24]
 8015d10:	1b65      	subs	r5, r4, r5
 8015d12:	f000 80fd 	beq.w	8015f10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8015d16:	1b92      	subs	r2, r2, r6
 8015d18:	d003      	beq.n	8015d22 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015d1a:	436a      	muls	r2, r5
 8015d1c:	2410      	movs	r4, #16
 8015d1e:	fb92 f2f4 	sdiv	r2, r2, r4
 8015d22:	1a9b      	subs	r3, r3, r2
 8015d24:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8015f4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8015d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d2c:	460a      	mov	r2, r1
 8015d2e:	ee07 3a90 	vmov	s15, r3
 8015d32:	f100 040c 	add.w	r4, r0, #12
 8015d36:	4603      	mov	r3, r0
 8015d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d3c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015d40:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8015d44:	eeb1 6a43 	vneg.f32	s12, s6
 8015d48:	edd2 7a02 	vldr	s15, [r2, #8]
 8015d4c:	3214      	adds	r2, #20
 8015d4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015d52:	ece3 6a01 	vstmia	r3!, {s13}
 8015d56:	429c      	cmp	r4, r3
 8015d58:	ed52 7a02 	vldr	s15, [r2, #-8]
 8015d5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015d60:	edc3 7a02 	vstr	s15, [r3, #8]
 8015d64:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015d68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015d6c:	edc3 7a05 	vstr	s15, [r3, #20]
 8015d70:	d1ea      	bne.n	8015d48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8015d72:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015d74:	698b      	ldr	r3, [r1, #24]
 8015d76:	edd0 4a02 	vldr	s9, [r0, #8]
 8015d7a:	1a9b      	subs	r3, r3, r2
 8015d7c:	edd0 3a00 	vldr	s7, [r0]
 8015d80:	edd0 6a01 	vldr	s13, [r0, #4]
 8015d84:	ee07 3a90 	vmov	s15, r3
 8015d88:	684b      	ldr	r3, [r1, #4]
 8015d8a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8015d8e:	ed90 5a05 	vldr	s10, [r0, #20]
 8015d92:	1a9b      	subs	r3, r3, r2
 8015d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d98:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8015d9c:	ed90 2a03 	vldr	s4, [r0, #12]
 8015da0:	ee07 3a10 	vmov	s14, r3
 8015da4:	edd0 5a04 	vldr	s11, [r0, #16]
 8015da8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015dac:	ed90 1a07 	vldr	s2, [r0, #28]
 8015db0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015db4:	edd0 2a06 	vldr	s5, [r0, #24]
 8015db8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8015dbc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8015dc0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015dc4:	ee32 5a45 	vsub.f32	s10, s4, s10
 8015dc8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015dcc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8015dd0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8015dd4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015dd6:	694a      	ldr	r2, [r1, #20]
 8015dd8:	1b13      	subs	r3, r2, r4
 8015dda:	ee07 3a10 	vmov	s14, r3
 8015dde:	680b      	ldr	r3, [r1, #0]
 8015de0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015de4:	1b1b      	subs	r3, r3, r4
 8015de6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015dea:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8015dee:	ee07 3a10 	vmov	s14, r3
 8015df2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015df6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015dfa:	eee6 4a87 	vfma.f32	s9, s13, s14
 8015dfe:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015e02:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8015e06:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015e08:	698b      	ldr	r3, [r1, #24]
 8015e0a:	1a9b      	subs	r3, r3, r2
 8015e0c:	ee06 3a90 	vmov	s13, r3
 8015e10:	684b      	ldr	r3, [r1, #4]
 8015e12:	1a9b      	subs	r3, r3, r2
 8015e14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015e18:	ee07 3a10 	vmov	s14, r3
 8015e1c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015e20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e24:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015e28:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015e2c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015e30:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015e34:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8015e38:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015e3a:	694a      	ldr	r2, [r1, #20]
 8015e3c:	1b13      	subs	r3, r2, r4
 8015e3e:	ee07 3a10 	vmov	s14, r3
 8015e42:	680b      	ldr	r3, [r1, #0]
 8015e44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e48:	1b1b      	subs	r3, r3, r4
 8015e4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015e4e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015e52:	ee07 3a10 	vmov	s14, r3
 8015e56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e5a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015e5e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015e62:	edd0 5a08 	vldr	s11, [r0, #32]
 8015e66:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015e6a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8015e6e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015e72:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8015e76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015e78:	698b      	ldr	r3, [r1, #24]
 8015e7a:	1a9b      	subs	r3, r3, r2
 8015e7c:	ee07 3a10 	vmov	s14, r3
 8015e80:	684b      	ldr	r3, [r1, #4]
 8015e82:	1a9b      	subs	r3, r3, r2
 8015e84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e88:	ee01 3a90 	vmov	s3, r3
 8015e8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015e90:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8015e94:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8015e98:	ee61 1a84 	vmul.f32	s3, s3, s8
 8015e9c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8015ea0:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015ea4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015ea8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015eaa:	694a      	ldr	r2, [r1, #20]
 8015eac:	1b13      	subs	r3, r2, r4
 8015eae:	ee03 3a10 	vmov	s6, r3
 8015eb2:	680b      	ldr	r3, [r1, #0]
 8015eb4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015eb8:	1b1b      	subs	r3, r3, r4
 8015eba:	ee23 3a04 	vmul.f32	s6, s6, s8
 8015ebe:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8015ec2:	ee03 3a10 	vmov	s6, r3
 8015ec6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015eca:	ee23 4a04 	vmul.f32	s8, s6, s8
 8015ece:	eee1 5a04 	vfma.f32	s11, s2, s8
 8015ed2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015ed6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8015eda:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8015ede:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8015ee2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eea:	dd13      	ble.n	8015f14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8015eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015ef0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015ef4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015ef6:	eee3 7a87 	vfma.f32	s15, s7, s14
 8015efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f02:	dd15      	ble.n	8015f30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015f08:	6403      	str	r3, [r0, #64]	; 0x40
 8015f0a:	bd70      	pop	{r4, r5, r6, pc}
 8015f0c:	4623      	mov	r3, r4
 8015f0e:	e6fd      	b.n	8015d0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015f10:	462a      	mov	r2, r5
 8015f12:	e706      	b.n	8015d22 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015f14:	d502      	bpl.n	8015f1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8015f16:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015f1a:	e7e9      	b.n	8015ef0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8015f1c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8015f20:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015f24:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f2c:	dade      	bge.n	8015eec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8015f2e:	e7f2      	b.n	8015f16 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8015f30:	d502      	bpl.n	8015f38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8015f32:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015f36:	e7e7      	b.n	8015f08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8015f38:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015f3c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8015f40:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f48:	dadc      	bge.n	8015f04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8015f4a:	e7f2      	b.n	8015f32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015f4c:	3d800000 	.word	0x3d800000

08015f50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8015f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f54:	f04f 0814 	mov.w	r8, #20
 8015f58:	4604      	mov	r4, r0
 8015f5a:	4617      	mov	r7, r2
 8015f5c:	460d      	mov	r5, r1
 8015f5e:	fb08 f903 	mul.w	r9, r8, r3
 8015f62:	461e      	mov	r6, r3
 8015f64:	eb02 0a09 	add.w	sl, r2, r9
 8015f68:	f8da 0004 	ldr.w	r0, [sl, #4]
 8015f6c:	f7ff fe88 	bl	8015c80 <_ZN8touchgfx8ceil28_4El>
 8015f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f72:	6160      	str	r0, [r4, #20]
 8015f74:	fb08 f803 	mul.w	r8, r8, r3
 8015f78:	9001      	str	r0, [sp, #4]
 8015f7a:	eb07 0b08 	add.w	fp, r7, r8
 8015f7e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8015f82:	f7ff fe7d 	bl	8015c80 <_ZN8touchgfx8ceil28_4El>
 8015f86:	9a01      	ldr	r2, [sp, #4]
 8015f88:	1a80      	subs	r0, r0, r2
 8015f8a:	61a0      	str	r0, [r4, #24]
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	f000 8088 	beq.w	80160a2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8015f92:	f857 3009 	ldr.w	r3, [r7, r9]
 8015f96:	f857 c008 	ldr.w	ip, [r7, r8]
 8015f9a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8015f9e:	ebac 0c03 	sub.w	ip, ip, r3
 8015fa2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015fa6:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8015faa:	1a40      	subs	r0, r0, r1
 8015fac:	fb0b f202 	mul.w	r2, fp, r2
 8015fb0:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8015fb4:	fb0c 2211 	mls	r2, ip, r1, r2
 8015fb8:	4641      	mov	r1, r8
 8015fba:	fb00 2003 	mla	r0, r0, r3, r2
 8015fbe:	f104 0310 	add.w	r3, r4, #16
 8015fc2:	4622      	mov	r2, r4
 8015fc4:	3801      	subs	r0, #1
 8015fc6:	4440      	add	r0, r8
 8015fc8:	f7ff fe6a 	bl	8015ca0 <_ZN8touchgfx11floorDivModEllRlS0_>
 8015fcc:	f104 0308 	add.w	r3, r4, #8
 8015fd0:	1d22      	adds	r2, r4, #4
 8015fd2:	4641      	mov	r1, r8
 8015fd4:	4658      	mov	r0, fp
 8015fd6:	f7ff fe63 	bl	8015ca0 <_ZN8touchgfx11floorDivModEllRlS0_>
 8015fda:	f8c4 800c 	str.w	r8, [r4, #12]
 8015fde:	6962      	ldr	r2, [r4, #20]
 8015fe0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015fe4:	eddf 6a31 	vldr	s13, [pc, #196]	; 80160ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015fe8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8015fec:	6822      	ldr	r2, [r4, #0]
 8015fee:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8015ff2:	ee07 3a10 	vmov	s14, r3
 8015ff6:	f857 3009 	ldr.w	r3, [r7, r9]
 8015ffa:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8015ffe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016002:	ee07 3a90 	vmov	s15, r3
 8016006:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801600a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801600e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016012:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016016:	edd3 6a00 	vldr	s13, [r3]
 801601a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801601e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016022:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016026:	edc4 6a07 	vstr	s13, [r4, #28]
 801602a:	edd4 6a01 	vldr	s13, [r4, #4]
 801602e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8016032:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016036:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801603a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801603e:	ed84 6a08 	vstr	s12, [r4, #32]
 8016042:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8016044:	6262      	str	r2, [r4, #36]	; 0x24
 8016046:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801604a:	ed93 6a03 	vldr	s12, [r3, #12]
 801604e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016052:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8016056:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801605a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801605e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8016062:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8016066:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801606a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801606e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8016070:	6322      	str	r2, [r4, #48]	; 0x30
 8016072:	ed93 6a06 	vldr	s12, [r3, #24]
 8016076:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801607a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801607e:	eeb0 7a46 	vmov.f32	s14, s12
 8016082:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8016086:	eea6 7a27 	vfma.f32	s14, s12, s15
 801608a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801608e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8016092:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8016096:	eee6 7a87 	vfma.f32	s15, s13, s14
 801609a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801609e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80160a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80160a2:	4620      	mov	r0, r4
 80160a4:	b003      	add	sp, #12
 80160a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160aa:	bf00      	nop
 80160ac:	3d800000 	.word	0x3d800000

080160b0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80160b0:	4602      	mov	r2, r0
 80160b2:	b148      	cbz	r0, 80160c8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80160b4:	2300      	movs	r3, #0
 80160b6:	b298      	uxth	r0, r3
 80160b8:	3301      	adds	r3, #1
 80160ba:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80160be:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80160c2:	2900      	cmp	r1, #0
 80160c4:	d1f7      	bne.n	80160b6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80160c6:	4770      	bx	lr
 80160c8:	4770      	bx	lr

080160ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80160ca:	b530      	push	{r4, r5, lr}
 80160cc:	4604      	mov	r4, r0
 80160ce:	b159      	cbz	r1, 80160e8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80160d0:	b148      	cbz	r0, 80160e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80160d2:	2300      	movs	r3, #0
 80160d4:	b298      	uxth	r0, r3
 80160d6:	4282      	cmp	r2, r0
 80160d8:	d905      	bls.n	80160e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80160da:	5ccd      	ldrb	r5, [r1, r3]
 80160dc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80160e0:	3301      	adds	r3, #1
 80160e2:	2d00      	cmp	r5, #0
 80160e4:	d1f6      	bne.n	80160d4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80160e6:	bd30      	pop	{r4, r5, pc}
 80160e8:	4608      	mov	r0, r1
 80160ea:	e7fc      	b.n	80160e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080160ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 80160ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160ee:	468c      	mov	ip, r1
 80160f0:	b08b      	sub	sp, #44	; 0x2c
 80160f2:	2100      	movs	r1, #0
 80160f4:	ae01      	add	r6, sp, #4
 80160f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80160fa:	211f      	movs	r1, #31
 80160fc:	fbb0 f7f3 	udiv	r7, r0, r3
 8016100:	fb03 0517 	mls	r5, r3, r7, r0
 8016104:	4638      	mov	r0, r7
 8016106:	b2ec      	uxtb	r4, r5
 8016108:	2d09      	cmp	r5, #9
 801610a:	bfd4      	ite	le
 801610c:	3430      	addle	r4, #48	; 0x30
 801610e:	3457      	addgt	r4, #87	; 0x57
 8016110:	b2e4      	uxtb	r4, r4
 8016112:	558c      	strb	r4, [r1, r6]
 8016114:	1e4c      	subs	r4, r1, #1
 8016116:	b92f      	cbnz	r7, 8016124 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8016118:	4431      	add	r1, r6
 801611a:	4660      	mov	r0, ip
 801611c:	f7ff ffd5 	bl	80160ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8016120:	b00b      	add	sp, #44	; 0x2c
 8016122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016124:	4621      	mov	r1, r4
 8016126:	e7e9      	b.n	80160fc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08016128 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8016128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801612a:	4607      	mov	r7, r0
 801612c:	b08b      	sub	sp, #44	; 0x2c
 801612e:	4608      	mov	r0, r1
 8016130:	b341      	cbz	r1, 8016184 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8016132:	1e99      	subs	r1, r3, #2
 8016134:	2922      	cmp	r1, #34	; 0x22
 8016136:	d825      	bhi.n	8016184 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8016138:	2100      	movs	r1, #0
 801613a:	463c      	mov	r4, r7
 801613c:	261f      	movs	r6, #31
 801613e:	f10d 0c04 	add.w	ip, sp, #4
 8016142:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8016146:	1e71      	subs	r1, r6, #1
 8016148:	fb94 fef3 	sdiv	lr, r4, r3
 801614c:	fb03 441e 	mls	r4, r3, lr, r4
 8016150:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8016154:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8016158:	b2ec      	uxtb	r4, r5
 801615a:	2d09      	cmp	r5, #9
 801615c:	bfd4      	ite	le
 801615e:	3430      	addle	r4, #48	; 0x30
 8016160:	3457      	addgt	r4, #87	; 0x57
 8016162:	b2e4      	uxtb	r4, r4
 8016164:	f80c 4006 	strb.w	r4, [ip, r6]
 8016168:	4674      	mov	r4, lr
 801616a:	b96c      	cbnz	r4, 8016188 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801616c:	2f00      	cmp	r7, #0
 801616e:	da05      	bge.n	801617c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8016170:	ab0a      	add	r3, sp, #40	; 0x28
 8016172:	4419      	add	r1, r3
 8016174:	232d      	movs	r3, #45	; 0x2d
 8016176:	f801 3c24 	strb.w	r3, [r1, #-36]
 801617a:	1eb1      	subs	r1, r6, #2
 801617c:	3101      	adds	r1, #1
 801617e:	4461      	add	r1, ip
 8016180:	f7ff ffa3 	bl	80160ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8016184:	b00b      	add	sp, #44	; 0x2c
 8016186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016188:	460e      	mov	r6, r1
 801618a:	e7dc      	b.n	8016146 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801618c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016190:	b085      	sub	sp, #20
 8016192:	4691      	mov	r9, r2
 8016194:	6802      	ldr	r2, [r0, #0]
 8016196:	4688      	mov	r8, r1
 8016198:	461c      	mov	r4, r3
 801619a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801619e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80161a2:	4683      	mov	fp, r0
 80161a4:	4610      	mov	r0, r2
 80161a6:	9103      	str	r1, [sp, #12]
 80161a8:	9302      	str	r3, [sp, #8]
 80161aa:	9201      	str	r2, [sp, #4]
 80161ac:	f7ff ff80 	bl	80160b0 <_ZN8touchgfx7Unicode6strlenEPKt>
 80161b0:	f1b8 0f00 	cmp.w	r8, #0
 80161b4:	bf0c      	ite	eq
 80161b6:	4684      	moveq	ip, r0
 80161b8:	f100 0c01 	addne.w	ip, r0, #1
 80161bc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 80161c0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80161c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80161c6:	fa1f fc8c 	uxth.w	ip, ip
 80161ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80161cc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80161d0:	9903      	ldr	r1, [sp, #12]
 80161d2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80161d6:	d041      	beq.n	801625c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80161d8:	d834      	bhi.n	8016244 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80161da:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 80161de:	d059      	beq.n	8016294 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80161e0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 80161e4:	d03a      	beq.n	801625c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80161e6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 80161ea:	d034      	beq.n	8016256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80161ec:	2400      	movs	r4, #0
 80161ee:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80161f2:	3a01      	subs	r2, #1
 80161f4:	b169      	cbz	r1, 8016212 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80161f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80161f8:	458c      	cmp	ip, r1
 80161fa:	da09      	bge.n	8016210 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80161fc:	eba1 010c 	sub.w	r1, r1, ip
 8016200:	b289      	uxth	r1, r1
 8016202:	b933      	cbnz	r3, 8016212 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016204:	2e00      	cmp	r6, #0
 8016206:	d051      	beq.n	80162ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8016208:	2800      	cmp	r0, #0
 801620a:	d04f      	beq.n	80162ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801620c:	440c      	add	r4, r1
 801620e:	b2a4      	uxth	r4, r4
 8016210:	2100      	movs	r1, #0
 8016212:	682b      	ldr	r3, [r5, #0]
 8016214:	4293      	cmp	r3, r2
 8016216:	da07      	bge.n	8016228 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8016218:	f1b8 0f00 	cmp.w	r8, #0
 801621c:	d004      	beq.n	8016228 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801621e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8016222:	682b      	ldr	r3, [r5, #0]
 8016224:	3301      	adds	r3, #1
 8016226:	602b      	str	r3, [r5, #0]
 8016228:	2730      	movs	r7, #48	; 0x30
 801622a:	2c00      	cmp	r4, #0
 801622c:	d04e      	beq.n	80162cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801622e:	682e      	ldr	r6, [r5, #0]
 8016230:	3c01      	subs	r4, #1
 8016232:	42b2      	cmp	r2, r6
 8016234:	b2a4      	uxth	r4, r4
 8016236:	dd49      	ble.n	80162cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8016238:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801623c:	682b      	ldr	r3, [r5, #0]
 801623e:	3301      	adds	r3, #1
 8016240:	602b      	str	r3, [r5, #0]
 8016242:	e7f2      	b.n	801622a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8016244:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8016248:	d01d      	beq.n	8016286 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801624a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801624e:	d002      	beq.n	8016256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8016250:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8016254:	e7c9      	b.n	80161ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8016256:	4684      	mov	ip, r0
 8016258:	f04f 0800 	mov.w	r8, #0
 801625c:	2c00      	cmp	r4, #0
 801625e:	d0c6      	beq.n	80161ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016260:	b947      	cbnz	r7, 8016274 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8016262:	2801      	cmp	r0, #1
 8016264:	d106      	bne.n	8016274 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8016266:	8814      	ldrh	r4, [r2, #0]
 8016268:	2c30      	cmp	r4, #48	; 0x30
 801626a:	bf02      	ittt	eq
 801626c:	3202      	addeq	r2, #2
 801626e:	4638      	moveq	r0, r7
 8016270:	f8cb 2000 	streq.w	r2, [fp]
 8016274:	45bc      	cmp	ip, r7
 8016276:	da14      	bge.n	80162a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8016278:	b2bf      	uxth	r7, r7
 801627a:	eba7 040c 	sub.w	r4, r7, ip
 801627e:	46bc      	mov	ip, r7
 8016280:	b2a4      	uxth	r4, r4
 8016282:	2600      	movs	r6, #0
 8016284:	e7b3      	b.n	80161ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016286:	4684      	mov	ip, r0
 8016288:	b16c      	cbz	r4, 80162a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801628a:	42b8      	cmp	r0, r7
 801628c:	dd00      	ble.n	8016290 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801628e:	b2b8      	uxth	r0, r7
 8016290:	2400      	movs	r4, #0
 8016292:	e003      	b.n	801629c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8016294:	f04f 0c01 	mov.w	ip, #1
 8016298:	2400      	movs	r4, #0
 801629a:	4660      	mov	r0, ip
 801629c:	4626      	mov	r6, r4
 801629e:	46a0      	mov	r8, r4
 80162a0:	e7a5      	b.n	80161ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80162a2:	2400      	movs	r4, #0
 80162a4:	e7ed      	b.n	8016282 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80162a6:	4626      	mov	r6, r4
 80162a8:	46a0      	mov	r8, r4
 80162aa:	e7a0      	b.n	80161ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80162ac:	2900      	cmp	r1, #0
 80162ae:	d0b0      	beq.n	8016212 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80162b0:	2720      	movs	r7, #32
 80162b2:	682e      	ldr	r6, [r5, #0]
 80162b4:	2900      	cmp	r1, #0
 80162b6:	d0ac      	beq.n	8016212 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80162b8:	3901      	subs	r1, #1
 80162ba:	4296      	cmp	r6, r2
 80162bc:	b289      	uxth	r1, r1
 80162be:	daa7      	bge.n	8016210 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80162c0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80162c4:	682b      	ldr	r3, [r5, #0]
 80162c6:	3301      	adds	r3, #1
 80162c8:	602b      	str	r3, [r5, #0]
 80162ca:	e7f2      	b.n	80162b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80162cc:	b188      	cbz	r0, 80162f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80162ce:	682b      	ldr	r3, [r5, #0]
 80162d0:	3801      	subs	r0, #1
 80162d2:	429a      	cmp	r2, r3
 80162d4:	b280      	uxth	r0, r0
 80162d6:	dd0c      	ble.n	80162f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80162d8:	f8db 3000 	ldr.w	r3, [fp]
 80162dc:	1c9c      	adds	r4, r3, #2
 80162de:	f8cb 4000 	str.w	r4, [fp]
 80162e2:	881c      	ldrh	r4, [r3, #0]
 80162e4:	682b      	ldr	r3, [r5, #0]
 80162e6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80162ea:	682b      	ldr	r3, [r5, #0]
 80162ec:	3301      	adds	r3, #1
 80162ee:	602b      	str	r3, [r5, #0]
 80162f0:	e7ec      	b.n	80162cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80162f2:	2620      	movs	r6, #32
 80162f4:	b151      	cbz	r1, 801630c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80162f6:	6828      	ldr	r0, [r5, #0]
 80162f8:	3901      	subs	r1, #1
 80162fa:	4282      	cmp	r2, r0
 80162fc:	b289      	uxth	r1, r1
 80162fe:	dd05      	ble.n	801630c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8016300:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8016304:	682b      	ldr	r3, [r5, #0]
 8016306:	3301      	adds	r3, #1
 8016308:	602b      	str	r3, [r5, #0]
 801630a:	e7f3      	b.n	80162f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801630c:	b005      	add	sp, #20
 801630e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8016312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016316:	2400      	movs	r4, #0
 8016318:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801631c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8016320:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8016324:	8014      	strh	r4, [r2, #0]
 8016326:	701c      	strb	r4, [r3, #0]
 8016328:	f888 4000 	strb.w	r4, [r8]
 801632c:	f88c 4000 	strb.w	r4, [ip]
 8016330:	f88e 4000 	strb.w	r4, [lr]
 8016334:	703c      	strb	r4, [r7, #0]
 8016336:	6804      	ldr	r4, [r0, #0]
 8016338:	b1a4      	cbz	r4, 8016364 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801633a:	8824      	ldrh	r4, [r4, #0]
 801633c:	f04f 0901 	mov.w	r9, #1
 8016340:	b314      	cbz	r4, 8016388 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016342:	2c2b      	cmp	r4, #43	; 0x2b
 8016344:	d001      	beq.n	801634a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8016346:	2c20      	cmp	r4, #32
 8016348:	d110      	bne.n	801636c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801634a:	8014      	strh	r4, [r2, #0]
 801634c:	6804      	ldr	r4, [r0, #0]
 801634e:	b10c      	cbz	r4, 8016354 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8016350:	3402      	adds	r4, #2
 8016352:	6004      	str	r4, [r0, #0]
 8016354:	680c      	ldr	r4, [r1, #0]
 8016356:	b10c      	cbz	r4, 801635c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8016358:	3401      	adds	r4, #1
 801635a:	600c      	str	r4, [r1, #0]
 801635c:	6804      	ldr	r4, [r0, #0]
 801635e:	b17c      	cbz	r4, 8016380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8016360:	8824      	ldrh	r4, [r4, #0]
 8016362:	e7ed      	b.n	8016340 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8016364:	680c      	ldr	r4, [r1, #0]
 8016366:	b17c      	cbz	r4, 8016388 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016368:	7824      	ldrb	r4, [r4, #0]
 801636a:	e7e7      	b.n	801633c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801636c:	2c2d      	cmp	r4, #45	; 0x2d
 801636e:	d102      	bne.n	8016376 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8016370:	f883 9000 	strb.w	r9, [r3]
 8016374:	e7ea      	b.n	801634c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8016376:	2c23      	cmp	r4, #35	; 0x23
 8016378:	d107      	bne.n	801638a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801637a:	f888 9000 	strb.w	r9, [r8]
 801637e:	e7e5      	b.n	801634c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8016380:	680c      	ldr	r4, [r1, #0]
 8016382:	b10c      	cbz	r4, 8016388 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016384:	7824      	ldrb	r4, [r4, #0]
 8016386:	e7db      	b.n	8016340 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8016388:	2400      	movs	r4, #0
 801638a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801638e:	2b09      	cmp	r3, #9
 8016390:	d901      	bls.n	8016396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8016392:	2c2a      	cmp	r4, #42	; 0x2a
 8016394:	d122      	bne.n	80163dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016396:	2301      	movs	r3, #1
 8016398:	2c30      	cmp	r4, #48	; 0x30
 801639a:	f88e 3000 	strb.w	r3, [lr]
 801639e:	d10d      	bne.n	80163bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80163a0:	f88c 3000 	strb.w	r3, [ip]
 80163a4:	6803      	ldr	r3, [r0, #0]
 80163a6:	b10b      	cbz	r3, 80163ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80163a8:	3302      	adds	r3, #2
 80163aa:	6003      	str	r3, [r0, #0]
 80163ac:	680b      	ldr	r3, [r1, #0]
 80163ae:	b10b      	cbz	r3, 80163b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80163b0:	3301      	adds	r3, #1
 80163b2:	600b      	str	r3, [r1, #0]
 80163b4:	6803      	ldr	r3, [r0, #0]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d02f      	beq.n	801641a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80163ba:	881c      	ldrh	r4, [r3, #0]
 80163bc:	2c2a      	cmp	r4, #42	; 0x2a
 80163be:	d135      	bne.n	801642c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80163c0:	f04f 33ff 	mov.w	r3, #4294967295
 80163c4:	6033      	str	r3, [r6, #0]
 80163c6:	6803      	ldr	r3, [r0, #0]
 80163c8:	b10b      	cbz	r3, 80163ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80163ca:	3302      	adds	r3, #2
 80163cc:	6003      	str	r3, [r0, #0]
 80163ce:	680b      	ldr	r3, [r1, #0]
 80163d0:	b10b      	cbz	r3, 80163d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80163d2:	3301      	adds	r3, #1
 80163d4:	600b      	str	r3, [r1, #0]
 80163d6:	6803      	ldr	r3, [r0, #0]
 80163d8:	b31b      	cbz	r3, 8016422 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80163da:	881c      	ldrh	r4, [r3, #0]
 80163dc:	2c2e      	cmp	r4, #46	; 0x2e
 80163de:	d11a      	bne.n	8016416 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80163e0:	2301      	movs	r3, #1
 80163e2:	703b      	strb	r3, [r7, #0]
 80163e4:	6803      	ldr	r3, [r0, #0]
 80163e6:	b10b      	cbz	r3, 80163ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80163e8:	3302      	adds	r3, #2
 80163ea:	6003      	str	r3, [r0, #0]
 80163ec:	680b      	ldr	r3, [r1, #0]
 80163ee:	b10b      	cbz	r3, 80163f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80163f0:	3301      	adds	r3, #1
 80163f2:	600b      	str	r3, [r1, #0]
 80163f4:	6803      	ldr	r3, [r0, #0]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d036      	beq.n	8016468 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80163fa:	881b      	ldrh	r3, [r3, #0]
 80163fc:	2b2a      	cmp	r3, #42	; 0x2a
 80163fe:	d137      	bne.n	8016470 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8016400:	f04f 33ff 	mov.w	r3, #4294967295
 8016404:	602b      	str	r3, [r5, #0]
 8016406:	6803      	ldr	r3, [r0, #0]
 8016408:	b10b      	cbz	r3, 801640e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801640a:	3302      	adds	r3, #2
 801640c:	6003      	str	r3, [r0, #0]
 801640e:	680b      	ldr	r3, [r1, #0]
 8016410:	b10b      	cbz	r3, 8016416 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016412:	3301      	adds	r3, #1
 8016414:	600b      	str	r3, [r1, #0]
 8016416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801641a:	680c      	ldr	r4, [r1, #0]
 801641c:	b134      	cbz	r4, 801642c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801641e:	7824      	ldrb	r4, [r4, #0]
 8016420:	e7cc      	b.n	80163bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8016422:	680b      	ldr	r3, [r1, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d0f6      	beq.n	8016416 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016428:	781c      	ldrb	r4, [r3, #0]
 801642a:	e7d7      	b.n	80163dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801642c:	2300      	movs	r3, #0
 801642e:	220a      	movs	r2, #10
 8016430:	6033      	str	r3, [r6, #0]
 8016432:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016436:	fa1f f38c 	uxth.w	r3, ip
 801643a:	2b09      	cmp	r3, #9
 801643c:	d8ce      	bhi.n	80163dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801643e:	6833      	ldr	r3, [r6, #0]
 8016440:	fb02 c303 	mla	r3, r2, r3, ip
 8016444:	6033      	str	r3, [r6, #0]
 8016446:	6803      	ldr	r3, [r0, #0]
 8016448:	b10b      	cbz	r3, 801644e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801644a:	3302      	adds	r3, #2
 801644c:	6003      	str	r3, [r0, #0]
 801644e:	680b      	ldr	r3, [r1, #0]
 8016450:	b10b      	cbz	r3, 8016456 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8016452:	3301      	adds	r3, #1
 8016454:	600b      	str	r3, [r1, #0]
 8016456:	6803      	ldr	r3, [r0, #0]
 8016458:	b10b      	cbz	r3, 801645e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801645a:	881c      	ldrh	r4, [r3, #0]
 801645c:	e7e9      	b.n	8016432 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801645e:	680c      	ldr	r4, [r1, #0]
 8016460:	2c00      	cmp	r4, #0
 8016462:	d0e6      	beq.n	8016432 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016464:	7824      	ldrb	r4, [r4, #0]
 8016466:	e7e4      	b.n	8016432 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016468:	680b      	ldr	r3, [r1, #0]
 801646a:	b10b      	cbz	r3, 8016470 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	e7c5      	b.n	80163fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8016470:	2200      	movs	r2, #0
 8016472:	240a      	movs	r4, #10
 8016474:	602a      	str	r2, [r5, #0]
 8016476:	3b30      	subs	r3, #48	; 0x30
 8016478:	682a      	ldr	r2, [r5, #0]
 801647a:	b29e      	uxth	r6, r3
 801647c:	2e09      	cmp	r6, #9
 801647e:	d813      	bhi.n	80164a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8016480:	fb04 3302 	mla	r3, r4, r2, r3
 8016484:	602b      	str	r3, [r5, #0]
 8016486:	6803      	ldr	r3, [r0, #0]
 8016488:	b10b      	cbz	r3, 801648e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801648a:	3302      	adds	r3, #2
 801648c:	6003      	str	r3, [r0, #0]
 801648e:	680b      	ldr	r3, [r1, #0]
 8016490:	b10b      	cbz	r3, 8016496 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8016492:	3301      	adds	r3, #1
 8016494:	600b      	str	r3, [r1, #0]
 8016496:	6803      	ldr	r3, [r0, #0]
 8016498:	b10b      	cbz	r3, 801649e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801649a:	881b      	ldrh	r3, [r3, #0]
 801649c:	e7eb      	b.n	8016476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801649e:	680b      	ldr	r3, [r1, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d0e8      	beq.n	8016476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80164a4:	781b      	ldrb	r3, [r3, #0]
 80164a6:	e7e6      	b.n	8016476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80164a8:	2a06      	cmp	r2, #6
 80164aa:	bfa8      	it	ge
 80164ac:	2206      	movge	r2, #6
 80164ae:	602a      	str	r2, [r5, #0]
 80164b0:	e7b1      	b.n	8016416 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080164b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80164b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b6:	b0a3      	sub	sp, #140	; 0x8c
 80164b8:	2600      	movs	r6, #0
 80164ba:	4607      	mov	r7, r0
 80164bc:	4688      	mov	r8, r1
 80164be:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80164c2:	4631      	mov	r1, r6
 80164c4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80164c6:	4648      	mov	r0, r9
 80164c8:	960d      	str	r6, [sp, #52]	; 0x34
 80164ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80164ce:	2242      	movs	r2, #66	; 0x42
 80164d0:	f00e fffa 	bl	80254c8 <memset>
 80164d4:	b15f      	cbz	r7, 80164ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80164d6:	f108 3aff 	add.w	sl, r8, #4294967295
 80164da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164de:	b152      	cbz	r2, 80164f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80164e0:	8812      	ldrh	r2, [r2, #0]
 80164e2:	b10a      	cbz	r2, 80164e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80164e4:	459a      	cmp	sl, r3
 80164e6:	dc2e      	bgt.n	8016546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80164e8:	2200      	movs	r2, #0
 80164ea:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80164ee:	4638      	mov	r0, r7
 80164f0:	b023      	add	sp, #140	; 0x8c
 80164f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164f6:	9a08      	ldr	r2, [sp, #32]
 80164f8:	2a00      	cmp	r2, #0
 80164fa:	d0f5      	beq.n	80164e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80164fc:	7812      	ldrb	r2, [r2, #0]
 80164fe:	e7f0      	b.n	80164e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8016500:	2d00      	cmp	r5, #0
 8016502:	d0ea      	beq.n	80164da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016504:	782a      	ldrb	r2, [r5, #0]
 8016506:	b142      	cbz	r2, 801651a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8016508:	2a25      	cmp	r2, #37	; 0x25
 801650a:	d001      	beq.n	8016510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801650c:	459a      	cmp	sl, r3
 801650e:	dc08      	bgt.n	8016522 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8016510:	f1bb 0f00 	cmp.w	fp, #0
 8016514:	d121      	bne.n	801655a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8016516:	2d00      	cmp	r5, #0
 8016518:	d0df      	beq.n	80164da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801651a:	782a      	ldrb	r2, [r5, #0]
 801651c:	f04f 0b00 	mov.w	fp, #0
 8016520:	e01d      	b.n	801655e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8016522:	f1bb 0f00 	cmp.w	fp, #0
 8016526:	d077      	beq.n	8016618 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8016528:	f8bb 2000 	ldrh.w	r2, [fp]
 801652c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016530:	f1bb 0f00 	cmp.w	fp, #0
 8016534:	d002      	beq.n	801653c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8016536:	f10b 0202 	add.w	r2, fp, #2
 801653a:	9209      	str	r2, [sp, #36]	; 0x24
 801653c:	b10d      	cbz	r5, 8016542 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801653e:	3501      	adds	r5, #1
 8016540:	9508      	str	r5, [sp, #32]
 8016542:	3301      	adds	r3, #1
 8016544:	930d      	str	r3, [sp, #52]	; 0x34
 8016546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016548:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801654c:	f1bb 0f00 	cmp.w	fp, #0
 8016550:	d0d6      	beq.n	8016500 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8016552:	f8bb 2000 	ldrh.w	r2, [fp]
 8016556:	2a00      	cmp	r2, #0
 8016558:	d1d6      	bne.n	8016508 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801655a:	f8bb 2000 	ldrh.w	r2, [fp]
 801655e:	2a00      	cmp	r2, #0
 8016560:	d0bb      	beq.n	80164da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016562:	459a      	cmp	sl, r3
 8016564:	ddb9      	ble.n	80164da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016566:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801656a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801656e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8016572:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8016576:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801657a:	960e      	str	r6, [sp, #56]	; 0x38
 801657c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8016580:	960f      	str	r6, [sp, #60]	; 0x3c
 8016582:	f1bb 0f00 	cmp.w	fp, #0
 8016586:	d002      	beq.n	801658e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8016588:	f10b 0302 	add.w	r3, fp, #2
 801658c:	9309      	str	r3, [sp, #36]	; 0x24
 801658e:	b10d      	cbz	r5, 8016594 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8016590:	1c6b      	adds	r3, r5, #1
 8016592:	9308      	str	r3, [sp, #32]
 8016594:	ab0f      	add	r3, sp, #60	; 0x3c
 8016596:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801659a:	a908      	add	r1, sp, #32
 801659c:	a809      	add	r0, sp, #36	; 0x24
 801659e:	9305      	str	r3, [sp, #20]
 80165a0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80165a4:	9304      	str	r3, [sp, #16]
 80165a6:	ab0e      	add	r3, sp, #56	; 0x38
 80165a8:	9303      	str	r3, [sp, #12]
 80165aa:	ab0c      	add	r3, sp, #48	; 0x30
 80165ac:	9302      	str	r3, [sp, #8]
 80165ae:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80165b2:	9301      	str	r3, [sp, #4]
 80165b4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80165b8:	9300      	str	r3, [sp, #0]
 80165ba:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80165be:	f7ff fea8 	bl	8016312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80165c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	bfbf      	itttt	lt
 80165c8:	6823      	ldrlt	r3, [r4, #0]
 80165ca:	3404      	addlt	r4, #4
 80165cc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80165d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80165d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	bfbe      	ittt	lt
 80165d8:	6823      	ldrlt	r3, [r4, #0]
 80165da:	3404      	addlt	r4, #4
 80165dc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80165e0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80165e4:	bfb8      	it	lt
 80165e6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80165e8:	b1d9      	cbz	r1, 8016622 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 80165ea:	880b      	ldrh	r3, [r1, #0]
 80165ec:	2b69      	cmp	r3, #105	; 0x69
 80165ee:	d01f      	beq.n	8016630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80165f0:	d82f      	bhi.n	8016652 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80165f2:	2b58      	cmp	r3, #88	; 0x58
 80165f4:	d01c      	beq.n	8016630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80165f6:	d818      	bhi.n	801662a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80165f8:	2b25      	cmp	r3, #37	; 0x25
 80165fa:	d034      	beq.n	8016666 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80165fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165fe:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8016602:	f1bb 0f00 	cmp.w	fp, #0
 8016606:	f000 80b7 	beq.w	8016778 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801660a:	f8bb 5000 	ldrh.w	r5, [fp]
 801660e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8016612:	3301      	adds	r3, #1
 8016614:	930d      	str	r3, [sp, #52]	; 0x34
 8016616:	e029      	b.n	801666c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016618:	b10d      	cbz	r5, 801661e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801661a:	782a      	ldrb	r2, [r5, #0]
 801661c:	e786      	b.n	801652c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801661e:	462a      	mov	r2, r5
 8016620:	e784      	b.n	801652c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016622:	2a00      	cmp	r2, #0
 8016624:	d0ea      	beq.n	80165fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016626:	7813      	ldrb	r3, [r2, #0]
 8016628:	e7e0      	b.n	80165ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801662a:	3b63      	subs	r3, #99	; 0x63
 801662c:	2b01      	cmp	r3, #1
 801662e:	d8e5      	bhi.n	80165fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016630:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8016634:	b329      	cbz	r1, 8016682 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8016636:	880b      	ldrh	r3, [r1, #0]
 8016638:	2b69      	cmp	r3, #105	; 0x69
 801663a:	d063      	beq.n	8016704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801663c:	d825      	bhi.n	801668a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801663e:	2b63      	cmp	r3, #99	; 0x63
 8016640:	d038      	beq.n	80166b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8016642:	2b64      	cmp	r3, #100	; 0x64
 8016644:	d05e      	beq.n	8016704 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8016646:	2b58      	cmp	r3, #88	; 0x58
 8016648:	d07a      	beq.n	8016740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801664a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801664e:	4625      	mov	r5, r4
 8016650:	e036      	b.n	80166c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016652:	2b73      	cmp	r3, #115	; 0x73
 8016654:	d0ec      	beq.n	8016630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016656:	d802      	bhi.n	801665e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8016658:	2b6f      	cmp	r3, #111	; 0x6f
 801665a:	d1cf      	bne.n	80165fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801665c:	e7e8      	b.n	8016630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801665e:	2b75      	cmp	r3, #117	; 0x75
 8016660:	d0e6      	beq.n	8016630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016662:	2b78      	cmp	r3, #120	; 0x78
 8016664:	e7f9      	b.n	801665a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8016666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016668:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801666c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801666e:	b10b      	cbz	r3, 8016674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8016670:	3302      	adds	r3, #2
 8016672:	9309      	str	r3, [sp, #36]	; 0x24
 8016674:	9b08      	ldr	r3, [sp, #32]
 8016676:	2b00      	cmp	r3, #0
 8016678:	f43f af2f 	beq.w	80164da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801667c:	3301      	adds	r3, #1
 801667e:	9308      	str	r3, [sp, #32]
 8016680:	e72b      	b.n	80164da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016682:	2a00      	cmp	r2, #0
 8016684:	d0e1      	beq.n	801664a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016686:	7813      	ldrb	r3, [r2, #0]
 8016688:	e7d6      	b.n	8016638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801668a:	2b73      	cmp	r3, #115	; 0x73
 801668c:	d036      	beq.n	80166fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801668e:	d807      	bhi.n	80166a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8016690:	2b6f      	cmp	r3, #111	; 0x6f
 8016692:	d1da      	bne.n	801664a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016696:	1d25      	adds	r5, r4, #4
 8016698:	2308      	movs	r3, #8
 801669a:	eba8 0202 	sub.w	r2, r8, r2
 801669e:	e049      	b.n	8016734 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80166a0:	2b75      	cmp	r3, #117	; 0x75
 80166a2:	d042      	beq.n	801672a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80166a4:	2b78      	cmp	r3, #120	; 0x78
 80166a6:	d1d0      	bne.n	801664a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80166a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80166aa:	1d25      	adds	r5, r4, #4
 80166ac:	2310      	movs	r3, #16
 80166ae:	eba8 0202 	sub.w	r2, r8, r2
 80166b2:	e03f      	b.n	8016734 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80166b4:	7823      	ldrb	r3, [r4, #0]
 80166b6:	1d25      	adds	r5, r4, #4
 80166b8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80166bc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80166c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166c2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d051      	beq.n	801676e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80166ca:	881a      	ldrh	r2, [r3, #0]
 80166cc:	a80d      	add	r0, sp, #52	; 0x34
 80166ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80166d2:	462c      	mov	r4, r5
 80166d4:	9005      	str	r0, [sp, #20]
 80166d6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80166da:	9004      	str	r0, [sp, #16]
 80166dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80166de:	9003      	str	r0, [sp, #12]
 80166e0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80166e4:	9002      	str	r0, [sp, #8]
 80166e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80166e8:	9001      	str	r0, [sp, #4]
 80166ea:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80166ee:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80166f2:	9000      	str	r0, [sp, #0]
 80166f4:	a810      	add	r0, sp, #64	; 0x40
 80166f6:	f7ff fd49 	bl	801618c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80166fa:	e7b7      	b.n	801666c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80166fc:	1d25      	adds	r5, r4, #4
 80166fe:	6823      	ldr	r3, [r4, #0]
 8016700:	9310      	str	r3, [sp, #64]	; 0x40
 8016702:	e7dd      	b.n	80166c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016706:	230a      	movs	r3, #10
 8016708:	4649      	mov	r1, r9
 801670a:	6820      	ldr	r0, [r4, #0]
 801670c:	eba8 0202 	sub.w	r2, r8, r2
 8016710:	1d25      	adds	r5, r4, #4
 8016712:	b292      	uxth	r2, r2
 8016714:	f7ff fd08 	bl	8016128 <_ZN8touchgfx7Unicode4itoaElPtti>
 8016718:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801671c:	2b2d      	cmp	r3, #45	; 0x2d
 801671e:	d1cf      	bne.n	80166c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016720:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016726:	3302      	adds	r3, #2
 8016728:	e7ea      	b.n	8016700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801672a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801672c:	1d25      	adds	r5, r4, #4
 801672e:	230a      	movs	r3, #10
 8016730:	eba8 0202 	sub.w	r2, r8, r2
 8016734:	b292      	uxth	r2, r2
 8016736:	4649      	mov	r1, r9
 8016738:	6820      	ldr	r0, [r4, #0]
 801673a:	f7ff fcd7 	bl	80160ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801673e:	e7bf      	b.n	80166c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016742:	2310      	movs	r3, #16
 8016744:	4649      	mov	r1, r9
 8016746:	6820      	ldr	r0, [r4, #0]
 8016748:	eba8 0202 	sub.w	r2, r8, r2
 801674c:	1d25      	adds	r5, r4, #4
 801674e:	b292      	uxth	r2, r2
 8016750:	f7ff fccc 	bl	80160ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8016754:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8016758:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801675c:	2b00      	cmp	r3, #0
 801675e:	d0af      	beq.n	80166c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016760:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8016764:	2919      	cmp	r1, #25
 8016766:	d8f7      	bhi.n	8016758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8016768:	3b20      	subs	r3, #32
 801676a:	8013      	strh	r3, [r2, #0]
 801676c:	e7f4      	b.n	8016758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801676e:	9a08      	ldr	r2, [sp, #32]
 8016770:	2a00      	cmp	r2, #0
 8016772:	d0ab      	beq.n	80166cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016774:	7812      	ldrb	r2, [r2, #0]
 8016776:	e7a9      	b.n	80166cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016778:	2d00      	cmp	r5, #0
 801677a:	f43f af48 	beq.w	801660e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801677e:	782d      	ldrb	r5, [r5, #0]
 8016780:	e745      	b.n	801660e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08016782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8016782:	b507      	push	{r0, r1, r2, lr}
 8016784:	9300      	str	r3, [sp, #0]
 8016786:	4613      	mov	r3, r2
 8016788:	2200      	movs	r2, #0
 801678a:	f7ff fe92 	bl	80164b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801678e:	b003      	add	sp, #12
 8016790:	f85d fb04 	ldr.w	pc, [sp], #4

08016794 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8016794:	b40c      	push	{r2, r3}
 8016796:	b507      	push	{r0, r1, r2, lr}
 8016798:	ab04      	add	r3, sp, #16
 801679a:	f853 2b04 	ldr.w	r2, [r3], #4
 801679e:	9301      	str	r3, [sp, #4]
 80167a0:	f7ff ffef 	bl	8016782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80167a4:	b003      	add	sp, #12
 80167a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80167aa:	b002      	add	sp, #8
 80167ac:	4770      	bx	lr
	...

080167b0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80167b0:	4b01      	ldr	r3, [pc, #4]	; (80167b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80167b2:	6018      	str	r0, [r3, #0]
 80167b4:	4770      	bx	lr
 80167b6:	bf00      	nop
 80167b8:	20060cb0 	.word	0x20060cb0

080167bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80167bc:	4b06      	ldr	r3, [pc, #24]	; (80167d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80167be:	881a      	ldrh	r2, [r3, #0]
 80167c0:	4282      	cmp	r2, r0
 80167c2:	d807      	bhi.n	80167d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80167c4:	4b05      	ldr	r3, [pc, #20]	; (80167dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80167c6:	881b      	ldrh	r3, [r3, #0]
 80167c8:	4413      	add	r3, r2
 80167ca:	4298      	cmp	r0, r3
 80167cc:	bfac      	ite	ge
 80167ce:	2000      	movge	r0, #0
 80167d0:	2001      	movlt	r0, #1
 80167d2:	4770      	bx	lr
 80167d4:	2000      	movs	r0, #0
 80167d6:	4770      	bx	lr
 80167d8:	20060cd0 	.word	0x20060cd0
 80167dc:	20060cd4 	.word	0x20060cd4

080167e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80167e0:	b508      	push	{r3, lr}
 80167e2:	4601      	mov	r1, r0
 80167e4:	f7ff ffea 	bl	80167bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80167e8:	b118      	cbz	r0, 80167f2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80167ea:	4b02      	ldr	r3, [pc, #8]	; (80167f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80167f2:	bd08      	pop	{r3, pc}
 80167f4:	20060cb4 	.word	0x20060cb4

080167f8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80167f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167fc:	4d28      	ldr	r5, [pc, #160]	; (80168a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80167fe:	682b      	ldr	r3, [r5, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d04a      	beq.n	801689a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8016804:	4a27      	ldr	r2, [pc, #156]	; (80168a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8016806:	4e28      	ldr	r6, [pc, #160]	; (80168a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8016808:	8810      	ldrh	r0, [r2, #0]
 801680a:	f8b6 8000 	ldrh.w	r8, [r6]
 801680e:	4c27      	ldr	r4, [pc, #156]	; (80168ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8016810:	4440      	add	r0, r8
 8016812:	4f27      	ldr	r7, [pc, #156]	; (80168b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8016814:	1c41      	adds	r1, r0, #1
 8016816:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801681a:	f021 0101 	bic.w	r1, r1, #1
 801681e:	eb03 020e 	add.w	r2, r3, lr
 8016822:	0409      	lsls	r1, r1, #16
 8016824:	6022      	str	r2, [r4, #0]
 8016826:	0c09      	lsrs	r1, r1, #16
 8016828:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801682c:	eb0e 010c 	add.w	r1, lr, ip
 8016830:	185a      	adds	r2, r3, r1
 8016832:	603a      	str	r2, [r7, #0]
 8016834:	220e      	movs	r2, #14
 8016836:	fb02 f208 	mul.w	r2, r2, r8
 801683a:	3203      	adds	r2, #3
 801683c:	f022 0203 	bic.w	r2, r2, #3
 8016840:	4411      	add	r1, r2
 8016842:	440b      	add	r3, r1
 8016844:	491b      	ldr	r1, [pc, #108]	; (80168b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8016846:	600b      	str	r3, [r1, #0]
 8016848:	2300      	movs	r3, #0
 801684a:	491b      	ldr	r1, [pc, #108]	; (80168b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801684c:	800b      	strh	r3, [r1, #0]
 801684e:	491b      	ldr	r1, [pc, #108]	; (80168bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8016850:	6809      	ldr	r1, [r1, #0]
 8016852:	eba1 010e 	sub.w	r1, r1, lr
 8016856:	eba1 010c 	sub.w	r1, r1, ip
 801685a:	469c      	mov	ip, r3
 801685c:	1a8a      	subs	r2, r1, r2
 801685e:	4918      	ldr	r1, [pc, #96]	; (80168c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8016860:	600a      	str	r2, [r1, #0]
 8016862:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016866:	4a17      	ldr	r2, [pc, #92]	; (80168c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8016868:	8013      	strh	r3, [r2, #0]
 801686a:	4283      	cmp	r3, r0
 801686c:	d10d      	bne.n	801688a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801686e:	8835      	ldrh	r5, [r6, #0]
 8016870:	2300      	movs	r3, #0
 8016872:	6838      	ldr	r0, [r7, #0]
 8016874:	240e      	movs	r4, #14
 8016876:	429d      	cmp	r5, r3
 8016878:	d90f      	bls.n	801689a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801687a:	fb04 0203 	mla	r2, r4, r3, r0
 801687e:	3301      	adds	r3, #1
 8016880:	7b11      	ldrb	r1, [r2, #12]
 8016882:	f36f 1145 	bfc	r1, #5, #1
 8016886:	7311      	strb	r1, [r2, #12]
 8016888:	e7f5      	b.n	8016876 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801688a:	682a      	ldr	r2, [r5, #0]
 801688c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8016890:	6822      	ldr	r2, [r4, #0]
 8016892:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8016896:	3301      	adds	r3, #1
 8016898:	e7e7      	b.n	801686a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801689a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801689e:	bf00      	nop
 80168a0:	20060cb4 	.word	0x20060cb4
 80168a4:	20060cd0 	.word	0x20060cd0
 80168a8:	20060cd4 	.word	0x20060cd4
 80168ac:	20060cc8 	.word	0x20060cc8
 80168b0:	20060cb8 	.word	0x20060cb8
 80168b4:	20060cc0 	.word	0x20060cc0
 80168b8:	20060cd2 	.word	0x20060cd2
 80168bc:	20060cbc 	.word	0x20060cbc
 80168c0:	20060ccc 	.word	0x20060ccc
 80168c4:	20060cc4 	.word	0x20060cc4

080168c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80168c8:	4b10      	ldr	r3, [pc, #64]	; (801690c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80168ca:	b510      	push	{r4, lr}
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	b9db      	cbnz	r3, 8016908 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80168d0:	b1d1      	cbz	r1, 8016908 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80168d2:	4b0f      	ldr	r3, [pc, #60]	; (8016910 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80168d4:	240e      	movs	r4, #14
 80168d6:	801a      	strh	r2, [r3, #0]
 80168d8:	b292      	uxth	r2, r2
 80168da:	4b0e      	ldr	r3, [pc, #56]	; (8016914 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80168dc:	881b      	ldrh	r3, [r3, #0]
 80168de:	4413      	add	r3, r2
 80168e0:	4362      	muls	r2, r4
 80168e2:	2406      	movs	r4, #6
 80168e4:	fb04 2203 	mla	r2, r4, r3, r2
 80168e8:	428a      	cmp	r2, r1
 80168ea:	d305      	bcc.n	80168f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80168ec:	4b0a      	ldr	r3, [pc, #40]	; (8016918 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80168ee:	2135      	movs	r1, #53	; 0x35
 80168f0:	4a0a      	ldr	r2, [pc, #40]	; (801691c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80168f2:	480b      	ldr	r0, [pc, #44]	; (8016920 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80168f4:	f00e fd58 	bl	80253a8 <__assert_func>
 80168f8:	4b0a      	ldr	r3, [pc, #40]	; (8016924 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80168fa:	6019      	str	r1, [r3, #0]
 80168fc:	4b0a      	ldr	r3, [pc, #40]	; (8016928 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80168fe:	6018      	str	r0, [r3, #0]
 8016900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016904:	f7ff bf78 	b.w	80167f8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8016908:	bd10      	pop	{r4, pc}
 801690a:	bf00      	nop
 801690c:	20060cc0 	.word	0x20060cc0
 8016910:	20060cd4 	.word	0x20060cd4
 8016914:	20060cd0 	.word	0x20060cd0
 8016918:	0802bbe2 	.word	0x0802bbe2
 801691c:	0802bc3b 	.word	0x0802bc3b
 8016920:	0802bbbd 	.word	0x0802bbbd
 8016924:	20060cbc 	.word	0x20060cbc
 8016928:	20060cb4 	.word	0x20060cb4

0801692c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801692c:	b470      	push	{r4, r5, r6}
 801692e:	4c07      	ldr	r4, [pc, #28]	; (801694c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8016930:	4605      	mov	r5, r0
 8016932:	4610      	mov	r0, r2
 8016934:	9a03      	ldr	r2, [sp, #12]
 8016936:	6826      	ldr	r6, [r4, #0]
 8016938:	b936      	cbnz	r6, 8016948 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801693a:	6025      	str	r5, [r4, #0]
 801693c:	4c04      	ldr	r4, [pc, #16]	; (8016950 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801693e:	8021      	strh	r1, [r4, #0]
 8016940:	4619      	mov	r1, r3
 8016942:	bc70      	pop	{r4, r5, r6}
 8016944:	f7ff bfc0 	b.w	80168c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8016948:	bc70      	pop	{r4, r5, r6}
 801694a:	4770      	bx	lr
 801694c:	20060cd8 	.word	0x20060cd8
 8016950:	20060cd0 	.word	0x20060cd0

08016954 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8016954:	b508      	push	{r3, lr}
 8016956:	4b14      	ldr	r3, [pc, #80]	; (80169a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8016958:	6819      	ldr	r1, [r3, #0]
 801695a:	b931      	cbnz	r1, 801696a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801695c:	4b13      	ldr	r3, [pc, #76]	; (80169ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801695e:	f240 4185 	movw	r1, #1157	; 0x485
 8016962:	4a13      	ldr	r2, [pc, #76]	; (80169b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8016964:	4813      	ldr	r0, [pc, #76]	; (80169b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8016966:	f00e fd1f 	bl	80253a8 <__assert_func>
 801696a:	4a13      	ldr	r2, [pc, #76]	; (80169b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801696c:	8803      	ldrh	r3, [r0, #0]
 801696e:	8812      	ldrh	r2, [r2, #0]
 8016970:	4293      	cmp	r3, r2
 8016972:	d204      	bcs.n	801697e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8016974:	2214      	movs	r2, #20
 8016976:	fb02 1303 	mla	r3, r2, r3, r1
 801697a:	8918      	ldrh	r0, [r3, #8]
 801697c:	bd08      	pop	{r3, pc}
 801697e:	490f      	ldr	r1, [pc, #60]	; (80169bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8016980:	8809      	ldrh	r1, [r1, #0]
 8016982:	4411      	add	r1, r2
 8016984:	428b      	cmp	r3, r1
 8016986:	da06      	bge.n	8016996 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8016988:	1a9b      	subs	r3, r3, r2
 801698a:	4a0d      	ldr	r2, [pc, #52]	; (80169c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801698c:	210e      	movs	r1, #14
 801698e:	6812      	ldr	r2, [r2, #0]
 8016990:	fb01 2303 	mla	r3, r1, r3, r2
 8016994:	e7f1      	b.n	801697a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8016996:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801699a:	4293      	cmp	r3, r2
 801699c:	bf0a      	itet	eq
 801699e:	4b09      	ldreq	r3, [pc, #36]	; (80169c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80169a0:	2000      	movne	r0, #0
 80169a2:	8818      	ldrheq	r0, [r3, #0]
 80169a4:	e7ea      	b.n	801697c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80169a6:	bf00      	nop
 80169a8:	20060cd8 	.word	0x20060cd8
 80169ac:	0802ae01 	.word	0x0802ae01
 80169b0:	0802bce8 	.word	0x0802bce8
 80169b4:	0802bbbd 	.word	0x0802bbbd
 80169b8:	20060cd0 	.word	0x20060cd0
 80169bc:	20060cd4 	.word	0x20060cd4
 80169c0:	20060cb8 	.word	0x20060cb8
 80169c4:	20060c24 	.word	0x20060c24

080169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80169c8:	b508      	push	{r3, lr}
 80169ca:	4b14      	ldr	r3, [pc, #80]	; (8016a1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80169cc:	6819      	ldr	r1, [r3, #0]
 80169ce:	b931      	cbnz	r1, 80169de <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80169d0:	4b13      	ldr	r3, [pc, #76]	; (8016a20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80169d2:	f240 4199 	movw	r1, #1177	; 0x499
 80169d6:	4a13      	ldr	r2, [pc, #76]	; (8016a24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80169d8:	4813      	ldr	r0, [pc, #76]	; (8016a28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80169da:	f00e fce5 	bl	80253a8 <__assert_func>
 80169de:	4a13      	ldr	r2, [pc, #76]	; (8016a2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80169e0:	8803      	ldrh	r3, [r0, #0]
 80169e2:	8812      	ldrh	r2, [r2, #0]
 80169e4:	4293      	cmp	r3, r2
 80169e6:	d204      	bcs.n	80169f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80169e8:	2214      	movs	r2, #20
 80169ea:	fb02 1303 	mla	r3, r2, r3, r1
 80169ee:	8958      	ldrh	r0, [r3, #10]
 80169f0:	bd08      	pop	{r3, pc}
 80169f2:	490f      	ldr	r1, [pc, #60]	; (8016a30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80169f4:	8809      	ldrh	r1, [r1, #0]
 80169f6:	4411      	add	r1, r2
 80169f8:	428b      	cmp	r3, r1
 80169fa:	da06      	bge.n	8016a0a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80169fc:	1a9b      	subs	r3, r3, r2
 80169fe:	4a0d      	ldr	r2, [pc, #52]	; (8016a34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8016a00:	210e      	movs	r1, #14
 8016a02:	6812      	ldr	r2, [r2, #0]
 8016a04:	fb01 2303 	mla	r3, r1, r3, r2
 8016a08:	e7f1      	b.n	80169ee <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8016a0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016a0e:	4293      	cmp	r3, r2
 8016a10:	bf0a      	itet	eq
 8016a12:	4b09      	ldreq	r3, [pc, #36]	; (8016a38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8016a14:	2000      	movne	r0, #0
 8016a16:	8818      	ldrheq	r0, [r3, #0]
 8016a18:	e7ea      	b.n	80169f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8016a1a:	bf00      	nop
 8016a1c:	20060cd8 	.word	0x20060cd8
 8016a20:	0802ae01 	.word	0x0802ae01
 8016a24:	0802bd14 	.word	0x0802bd14
 8016a28:	0802bbbd 	.word	0x0802bbbd
 8016a2c:	20060cd0 	.word	0x20060cd0
 8016a30:	20060cd4 	.word	0x20060cd4
 8016a34:	20060cb8 	.word	0x20060cb8
 8016a38:	20060c26 	.word	0x20060c26

08016a3c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8016a3c:	4b23      	ldr	r3, [pc, #140]	; (8016acc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8016a3e:	b510      	push	{r4, lr}
 8016a40:	681c      	ldr	r4, [r3, #0]
 8016a42:	b934      	cbnz	r4, 8016a52 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8016a44:	4b22      	ldr	r3, [pc, #136]	; (8016ad0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8016a46:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8016a4a:	4a22      	ldr	r2, [pc, #136]	; (8016ad4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8016a4c:	4822      	ldr	r0, [pc, #136]	; (8016ad8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8016a4e:	f00e fcab 	bl	80253a8 <__assert_func>
 8016a52:	4a22      	ldr	r2, [pc, #136]	; (8016adc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8016a54:	880b      	ldrh	r3, [r1, #0]
 8016a56:	8812      	ldrh	r2, [r2, #0]
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d211      	bcs.n	8016a80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8016a5c:	2214      	movs	r2, #20
 8016a5e:	fb02 4303 	mla	r3, r2, r3, r4
 8016a62:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8016a66:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8016a6a:	8a1a      	ldrh	r2, [r3, #16]
 8016a6c:	8a5b      	ldrh	r3, [r3, #18]
 8016a6e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016a72:	8004      	strh	r4, [r0, #0]
 8016a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a78:	8041      	strh	r1, [r0, #2]
 8016a7a:	8082      	strh	r2, [r0, #4]
 8016a7c:	80c3      	strh	r3, [r0, #6]
 8016a7e:	e00e      	b.n	8016a9e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8016a80:	4917      	ldr	r1, [pc, #92]	; (8016ae0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8016a82:	8809      	ldrh	r1, [r1, #0]
 8016a84:	4411      	add	r1, r2
 8016a86:	428b      	cmp	r3, r1
 8016a88:	da0a      	bge.n	8016aa0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8016a8a:	1a9b      	subs	r3, r3, r2
 8016a8c:	4a15      	ldr	r2, [pc, #84]	; (8016ae4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8016a8e:	210e      	movs	r1, #14
 8016a90:	6812      	ldr	r2, [r2, #0]
 8016a92:	fb01 2303 	mla	r3, r1, r3, r2
 8016a96:	681a      	ldr	r2, [r3, #0]
 8016a98:	6002      	str	r2, [r0, #0]
 8016a9a:	685a      	ldr	r2, [r3, #4]
 8016a9c:	6042      	str	r2, [r0, #4]
 8016a9e:	bd10      	pop	{r4, pc}
 8016aa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016aa4:	4293      	cmp	r3, r2
 8016aa6:	d10b      	bne.n	8016ac0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8016aa8:	4b0f      	ldr	r3, [pc, #60]	; (8016ae8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8016aaa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016aae:	4b0f      	ldr	r3, [pc, #60]	; (8016aec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8016ab0:	8081      	strh	r1, [r0, #4]
 8016ab2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	80c2      	strh	r2, [r0, #6]
 8016aba:	8003      	strh	r3, [r0, #0]
 8016abc:	8043      	strh	r3, [r0, #2]
 8016abe:	e7ee      	b.n	8016a9e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	8003      	strh	r3, [r0, #0]
 8016ac4:	8043      	strh	r3, [r0, #2]
 8016ac6:	8083      	strh	r3, [r0, #4]
 8016ac8:	e7d8      	b.n	8016a7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8016aca:	bf00      	nop
 8016acc:	20060cd8 	.word	0x20060cd8
 8016ad0:	0802ae01 	.word	0x0802ae01
 8016ad4:	0802bc81 	.word	0x0802bc81
 8016ad8:	0802bbbd 	.word	0x0802bbbd
 8016adc:	20060cd0 	.word	0x20060cd0
 8016ae0:	20060cd4 	.word	0x20060cd4
 8016ae4:	20060cb8 	.word	0x20060cb8
 8016ae8:	20060c24 	.word	0x20060c24
 8016aec:	20060c26 	.word	0x20060c26

08016af0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8016af0:	4b18      	ldr	r3, [pc, #96]	; (8016b54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	b34b      	cbz	r3, 8016b4a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8016af6:	4a18      	ldr	r2, [pc, #96]	; (8016b58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8016af8:	8800      	ldrh	r0, [r0, #0]
 8016afa:	8812      	ldrh	r2, [r2, #0]
 8016afc:	4290      	cmp	r0, r2
 8016afe:	d211      	bcs.n	8016b24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8016b00:	2214      	movs	r2, #20
 8016b02:	fb02 3300 	mla	r3, r2, r0, r3
 8016b06:	8a1a      	ldrh	r2, [r3, #16]
 8016b08:	8919      	ldrh	r1, [r3, #8]
 8016b0a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016b0e:	428a      	cmp	r2, r1
 8016b10:	db1d      	blt.n	8016b4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8016b12:	8a58      	ldrh	r0, [r3, #18]
 8016b14:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8016b18:	895b      	ldrh	r3, [r3, #10]
 8016b1a:	4298      	cmp	r0, r3
 8016b1c:	bfac      	ite	ge
 8016b1e:	2000      	movge	r0, #0
 8016b20:	2001      	movlt	r0, #1
 8016b22:	4770      	bx	lr
 8016b24:	4b0d      	ldr	r3, [pc, #52]	; (8016b5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8016b26:	881b      	ldrh	r3, [r3, #0]
 8016b28:	4413      	add	r3, r2
 8016b2a:	4298      	cmp	r0, r3
 8016b2c:	da0d      	bge.n	8016b4a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8016b2e:	4b0c      	ldr	r3, [pc, #48]	; (8016b60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8016b30:	1a80      	subs	r0, r0, r2
 8016b32:	220e      	movs	r2, #14
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	fb02 3300 	mla	r3, r2, r0, r3
 8016b3a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016b3e:	891a      	ldrh	r2, [r3, #8]
 8016b40:	4291      	cmp	r1, r2
 8016b42:	db04      	blt.n	8016b4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8016b44:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8016b48:	e7e6      	b.n	8016b18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	4770      	bx	lr
 8016b4e:	2001      	movs	r0, #1
 8016b50:	4770      	bx	lr
 8016b52:	bf00      	nop
 8016b54:	20060cd8 	.word	0x20060cd8
 8016b58:	20060cd0 	.word	0x20060cd0
 8016b5c:	20060cd4 	.word	0x20060cd4
 8016b60:	20060cb8 	.word	0x20060cb8

08016b64 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8016b64:	b508      	push	{r3, lr}
 8016b66:	4b12      	ldr	r3, [pc, #72]	; (8016bb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8016b68:	6819      	ldr	r1, [r3, #0]
 8016b6a:	b931      	cbnz	r1, 8016b7a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8016b6c:	4b11      	ldr	r3, [pc, #68]	; (8016bb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016b6e:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8016b72:	4a11      	ldr	r2, [pc, #68]	; (8016bb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8016b74:	4811      	ldr	r0, [pc, #68]	; (8016bbc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8016b76:	f00e fc17 	bl	80253a8 <__assert_func>
 8016b7a:	8803      	ldrh	r3, [r0, #0]
 8016b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b80:	4293      	cmp	r3, r2
 8016b82:	d012      	beq.n	8016baa <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8016b84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016b88:	4293      	cmp	r3, r2
 8016b8a:	d103      	bne.n	8016b94 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8016b8c:	4b0c      	ldr	r3, [pc, #48]	; (8016bc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8016b92:	bd08      	pop	{r3, pc}
 8016b94:	4a0b      	ldr	r2, [pc, #44]	; (8016bc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8016b96:	6812      	ldr	r2, [r2, #0]
 8016b98:	b11a      	cbz	r2, 8016ba2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8016b9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	d1f7      	bne.n	8016b92 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8016ba2:	2214      	movs	r2, #20
 8016ba4:	4353      	muls	r3, r2
 8016ba6:	58c8      	ldr	r0, [r1, r3]
 8016ba8:	e7f3      	b.n	8016b92 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8016baa:	2000      	movs	r0, #0
 8016bac:	e7f1      	b.n	8016b92 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8016bae:	bf00      	nop
 8016bb0:	20060cd8 	.word	0x20060cd8
 8016bb4:	0802ae01 	.word	0x0802ae01
 8016bb8:	0802bcb7 	.word	0x0802bcb7
 8016bbc:	0802bbbd 	.word	0x0802bbbd
 8016bc0:	20060c30 	.word	0x20060c30
 8016bc4:	20060cb4 	.word	0x20060cb4

08016bc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8016bc8:	8802      	ldrh	r2, [r0, #0]
 8016bca:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8016bce:	429a      	cmp	r2, r3
 8016bd0:	d845      	bhi.n	8016c5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8016bd2:	4b24      	ldr	r3, [pc, #144]	; (8016c64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016bd4:	8818      	ldrh	r0, [r3, #0]
 8016bd6:	4282      	cmp	r2, r0
 8016bd8:	d221      	bcs.n	8016c1e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8016bda:	4b23      	ldr	r3, [pc, #140]	; (8016c68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8016bdc:	6819      	ldr	r1, [r3, #0]
 8016bde:	2314      	movs	r3, #20
 8016be0:	fb03 1302 	mla	r3, r3, r2, r1
 8016be4:	6858      	ldr	r0, [r3, #4]
 8016be6:	2800      	cmp	r0, #0
 8016be8:	d03a      	beq.n	8016c60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8016bea:	4920      	ldr	r1, [pc, #128]	; (8016c6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8016bec:	6809      	ldr	r1, [r1, #0]
 8016bee:	2900      	cmp	r1, #0
 8016bf0:	d036      	beq.n	8016c60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8016bf2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016bf6:	2900      	cmp	r1, #0
 8016bf8:	d032      	beq.n	8016c60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8016bfa:	891a      	ldrh	r2, [r3, #8]
 8016bfc:	8958      	ldrh	r0, [r3, #10]
 8016bfe:	4350      	muls	r0, r2
 8016c00:	7c5a      	ldrb	r2, [r3, #17]
 8016c02:	7cdb      	ldrb	r3, [r3, #19]
 8016c04:	0952      	lsrs	r2, r2, #5
 8016c06:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8016c0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8016c0e:	2b0b      	cmp	r3, #11
 8016c10:	bf18      	it	ne
 8016c12:	0040      	lslne	r0, r0, #1
 8016c14:	3003      	adds	r0, #3
 8016c16:	f020 0003 	bic.w	r0, r0, #3
 8016c1a:	4408      	add	r0, r1
 8016c1c:	4770      	bx	lr
 8016c1e:	4b14      	ldr	r3, [pc, #80]	; (8016c70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8016c20:	881b      	ldrh	r3, [r3, #0]
 8016c22:	4403      	add	r3, r0
 8016c24:	429a      	cmp	r2, r3
 8016c26:	da1a      	bge.n	8016c5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8016c28:	4b12      	ldr	r3, [pc, #72]	; (8016c74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8016c2a:	1a10      	subs	r0, r2, r0
 8016c2c:	210e      	movs	r1, #14
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	fb01 3000 	mla	r0, r1, r0, r3
 8016c34:	7b03      	ldrb	r3, [r0, #12]
 8016c36:	f003 031f 	and.w	r3, r3, #31
 8016c3a:	2b0b      	cmp	r3, #11
 8016c3c:	d10b      	bne.n	8016c56 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8016c3e:	8903      	ldrh	r3, [r0, #8]
 8016c40:	8940      	ldrh	r0, [r0, #10]
 8016c42:	4358      	muls	r0, r3
 8016c44:	4b09      	ldr	r3, [pc, #36]	; (8016c6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8016c46:	3003      	adds	r0, #3
 8016c48:	6819      	ldr	r1, [r3, #0]
 8016c4a:	f020 0303 	bic.w	r3, r0, #3
 8016c4e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8016c52:	4418      	add	r0, r3
 8016c54:	4770      	bx	lr
 8016c56:	2b0d      	cmp	r3, #13
 8016c58:	d101      	bne.n	8016c5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8016c5a:	300d      	adds	r0, #13
 8016c5c:	4770      	bx	lr
 8016c5e:	2000      	movs	r0, #0
 8016c60:	4770      	bx	lr
 8016c62:	bf00      	nop
 8016c64:	20060cd0 	.word	0x20060cd0
 8016c68:	20060cd8 	.word	0x20060cd8
 8016c6c:	20060cb4 	.word	0x20060cb4
 8016c70:	20060cd4 	.word	0x20060cd4
 8016c74:	20060cb8 	.word	0x20060cb8

08016c78 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8016c78:	4b17      	ldr	r3, [pc, #92]	; (8016cd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8016c7a:	b510      	push	{r4, lr}
 8016c7c:	6819      	ldr	r1, [r3, #0]
 8016c7e:	8803      	ldrh	r3, [r0, #0]
 8016c80:	b1e9      	cbz	r1, 8016cbe <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8016c82:	4a16      	ldr	r2, [pc, #88]	; (8016cdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8016c84:	8812      	ldrh	r2, [r2, #0]
 8016c86:	429a      	cmp	r2, r3
 8016c88:	d90a      	bls.n	8016ca0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8016c8a:	2214      	movs	r2, #20
 8016c8c:	fb02 1303 	mla	r3, r2, r3, r1
 8016c90:	7c58      	ldrb	r0, [r3, #17]
 8016c92:	0942      	lsrs	r2, r0, #5
 8016c94:	7cd8      	ldrb	r0, [r3, #19]
 8016c96:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8016c9a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8016c9e:	bd10      	pop	{r4, pc}
 8016ca0:	490f      	ldr	r1, [pc, #60]	; (8016ce0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8016ca2:	8809      	ldrh	r1, [r1, #0]
 8016ca4:	4411      	add	r1, r2
 8016ca6:	428b      	cmp	r3, r1
 8016ca8:	da09      	bge.n	8016cbe <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8016caa:	1a9b      	subs	r3, r3, r2
 8016cac:	4a0d      	ldr	r2, [pc, #52]	; (8016ce4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8016cae:	210e      	movs	r1, #14
 8016cb0:	6812      	ldr	r2, [r2, #0]
 8016cb2:	fb01 2303 	mla	r3, r1, r3, r2
 8016cb6:	7b18      	ldrb	r0, [r3, #12]
 8016cb8:	f000 001f 	and.w	r0, r0, #31
 8016cbc:	e7ef      	b.n	8016c9e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8016cbe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016cc2:	4293      	cmp	r3, r2
 8016cc4:	d106      	bne.n	8016cd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8016cc6:	f7ed fdf7 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 8016cca:	6803      	ldr	r3, [r0, #0]
 8016ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cd2:	4718      	bx	r3
 8016cd4:	2000      	movs	r0, #0
 8016cd6:	e7e2      	b.n	8016c9e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8016cd8:	20060cd8 	.word	0x20060cd8
 8016cdc:	20060cd0 	.word	0x20060cd0
 8016ce0:	20060cd4 	.word	0x20060cd4
 8016ce4:	20060cb8 	.word	0x20060cb8

08016ce8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8016ce8:	2010      	movs	r0, #16
 8016cea:	4770      	bx	lr

08016cec <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8016cec:	2000      	movs	r0, #0
 8016cee:	4770      	bx	lr

08016cf0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016cf0:	2bff      	cmp	r3, #255	; 0xff
 8016cf2:	d050      	beq.n	8016d96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8016cf4:	2a0b      	cmp	r2, #11
 8016cf6:	d04a      	beq.n	8016d8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016cf8:	d80e      	bhi.n	8016d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8016cfa:	2a03      	cmp	r2, #3
 8016cfc:	d03f      	beq.n	8016d7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8016cfe:	d804      	bhi.n	8016d0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016d00:	2a01      	cmp	r2, #1
 8016d02:	d03e      	beq.n	8016d82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8016d04:	d93f      	bls.n	8016d86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8016d06:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016d08:	4770      	bx	lr
 8016d0a:	2a09      	cmp	r2, #9
 8016d0c:	d03f      	beq.n	8016d8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016d0e:	d83c      	bhi.n	8016d8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8016d10:	2a08      	cmp	r2, #8
 8016d12:	d03a      	beq.n	8016d8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8016d14:	2000      	movs	r0, #0
 8016d16:	4770      	bx	lr
 8016d18:	2a2f      	cmp	r2, #47	; 0x2f
 8016d1a:	d024      	beq.n	8016d66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8016d1c:	d80d      	bhi.n	8016d3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8016d1e:	2a2d      	cmp	r2, #45	; 0x2d
 8016d20:	d014      	beq.n	8016d4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8016d22:	d826      	bhi.n	8016d72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8016d24:	2a2c      	cmp	r2, #44	; 0x2c
 8016d26:	d1f5      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d28:	684b      	ldr	r3, [r1, #4]
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	2b01      	cmp	r3, #1
 8016d2e:	d018      	beq.n	8016d62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8016d30:	d323      	bcc.n	8016d7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8016d32:	2b02      	cmp	r3, #2
 8016d34:	d1ee      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d36:	6880      	ldr	r0, [r0, #8]
 8016d38:	4770      	bx	lr
 8016d3a:	2a31      	cmp	r2, #49	; 0x31
 8016d3c:	d004      	beq.n	8016d48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8016d3e:	d328      	bcc.n	8016d92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016d40:	2a32      	cmp	r2, #50	; 0x32
 8016d42:	d026      	beq.n	8016d92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016d44:	2a33      	cmp	r2, #51	; 0x33
 8016d46:	d1e5      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d48:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8016d4a:	4770      	bx	lr
 8016d4c:	684b      	ldr	r3, [r1, #4]
 8016d4e:	781b      	ldrb	r3, [r3, #0]
 8016d50:	2b01      	cmp	r3, #1
 8016d52:	d004      	beq.n	8016d5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016d54:	d30b      	bcc.n	8016d6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8016d56:	2b02      	cmp	r3, #2
 8016d58:	d1dc      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d5a:	6900      	ldr	r0, [r0, #16]
 8016d5c:	4770      	bx	lr
 8016d5e:	6a00      	ldr	r0, [r0, #32]
 8016d60:	4770      	bx	lr
 8016d62:	6980      	ldr	r0, [r0, #24]
 8016d64:	4770      	bx	lr
 8016d66:	684b      	ldr	r3, [r1, #4]
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d1d2      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d6e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016d70:	4770      	bx	lr
 8016d72:	684b      	ldr	r3, [r1, #4]
 8016d74:	781b      	ldrb	r3, [r3, #0]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d1cc      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d7a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016d7c:	4770      	bx	lr
 8016d7e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8016d80:	4770      	bx	lr
 8016d82:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8016d84:	4770      	bx	lr
 8016d86:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8016d88:	4770      	bx	lr
 8016d8a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8016d8c:	4770      	bx	lr
 8016d8e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016d90:	4770      	bx	lr
 8016d92:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016d94:	4770      	bx	lr
 8016d96:	2a0b      	cmp	r2, #11
 8016d98:	d049      	beq.n	8016e2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016d9a:	d80e      	bhi.n	8016dba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8016d9c:	2a03      	cmp	r2, #3
 8016d9e:	d040      	beq.n	8016e22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016da0:	d804      	bhi.n	8016dac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8016da2:	2a01      	cmp	r2, #1
 8016da4:	d03f      	beq.n	8016e26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8016da6:	d940      	bls.n	8016e2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8016da8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016daa:	4770      	bx	lr
 8016dac:	2a09      	cmp	r2, #9
 8016dae:	d03e      	beq.n	8016e2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016db0:	d801      	bhi.n	8016db6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8016db2:	2a08      	cmp	r2, #8
 8016db4:	d1ae      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016db6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8016db8:	4770      	bx	lr
 8016dba:	2a2f      	cmp	r2, #47	; 0x2f
 8016dbc:	d024      	beq.n	8016e08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8016dbe:	d80d      	bhi.n	8016ddc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8016dc0:	2a2d      	cmp	r2, #45	; 0x2d
 8016dc2:	d014      	beq.n	8016dee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8016dc4:	d826      	bhi.n	8016e14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8016dc6:	2a2c      	cmp	r2, #44	; 0x2c
 8016dc8:	d1a4      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016dca:	684b      	ldr	r3, [r1, #4]
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	2b01      	cmp	r3, #1
 8016dd0:	d018      	beq.n	8016e04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8016dd2:	d324      	bcc.n	8016e1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8016dd4:	2b02      	cmp	r3, #2
 8016dd6:	d19d      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016dd8:	68c0      	ldr	r0, [r0, #12]
 8016dda:	4770      	bx	lr
 8016ddc:	2a31      	cmp	r2, #49	; 0x31
 8016dde:	d004      	beq.n	8016dea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8016de0:	d327      	bcc.n	8016e32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8016de2:	2a32      	cmp	r2, #50	; 0x32
 8016de4:	d025      	beq.n	8016e32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8016de6:	2a33      	cmp	r2, #51	; 0x33
 8016de8:	d194      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016dea:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8016dec:	4770      	bx	lr
 8016dee:	684b      	ldr	r3, [r1, #4]
 8016df0:	781b      	ldrb	r3, [r3, #0]
 8016df2:	2b01      	cmp	r3, #1
 8016df4:	d004      	beq.n	8016e00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8016df6:	d30b      	bcc.n	8016e10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8016df8:	2b02      	cmp	r3, #2
 8016dfa:	d18b      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016dfc:	6940      	ldr	r0, [r0, #20]
 8016dfe:	4770      	bx	lr
 8016e00:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016e02:	4770      	bx	lr
 8016e04:	69c0      	ldr	r0, [r0, #28]
 8016e06:	4770      	bx	lr
 8016e08:	684b      	ldr	r3, [r1, #4]
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d181      	bne.n	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e10:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8016e12:	4770      	bx	lr
 8016e14:	684b      	ldr	r3, [r1, #4]
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	f47f af7b 	bne.w	8016d14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e1e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016e20:	4770      	bx	lr
 8016e22:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8016e24:	4770      	bx	lr
 8016e26:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8016e28:	4770      	bx	lr
 8016e2a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016e2c:	4770      	bx	lr
 8016e2e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8016e30:	4770      	bx	lr
 8016e32:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8016e34:	4770      	bx	lr

08016e36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e3a:	b087      	sub	sp, #28
 8016e3c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016e3e:	9205      	str	r2, [sp, #20]
 8016e40:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016e44:	9101      	str	r1, [sp, #4]
 8016e46:	9202      	str	r2, [sp, #8]
 8016e48:	6841      	ldr	r1, [r0, #4]
 8016e4a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8016e4e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8016e52:	fb01 2404 	mla	r4, r1, r4, r2
 8016e56:	6802      	ldr	r2, [r0, #0]
 8016e58:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016e5c:	f8de 2000 	ldr.w	r2, [lr]
 8016e60:	9203      	str	r2, [sp, #12]
 8016e62:	f8de 2004 	ldr.w	r2, [lr, #4]
 8016e66:	3204      	adds	r2, #4
 8016e68:	9204      	str	r2, [sp, #16]
 8016e6a:	9a02      	ldr	r2, [sp, #8]
 8016e6c:	43d6      	mvns	r6, r2
 8016e6e:	b2f6      	uxtb	r6, r6
 8016e70:	9a01      	ldr	r2, [sp, #4]
 8016e72:	2a00      	cmp	r2, #0
 8016e74:	dc03      	bgt.n	8016e7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016e76:	9a05      	ldr	r2, [sp, #20]
 8016e78:	2a00      	cmp	r2, #0
 8016e7a:	f340 8129 	ble.w	80170d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016e7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016e80:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8016e84:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016e88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e8a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8016e8e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	dd0e      	ble.n	8016eb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016e96:	1408      	asrs	r0, r1, #16
 8016e98:	d405      	bmi.n	8016ea6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e9a:	4560      	cmp	r0, ip
 8016e9c:	da03      	bge.n	8016ea6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e9e:	1410      	asrs	r0, r2, #16
 8016ea0:	d401      	bmi.n	8016ea6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016ea2:	42b8      	cmp	r0, r7
 8016ea4:	db07      	blt.n	8016eb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8016ea6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016ea8:	3b01      	subs	r3, #1
 8016eaa:	3402      	adds	r4, #2
 8016eac:	4401      	add	r1, r0
 8016eae:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016eb0:	4402      	add	r2, r0
 8016eb2:	e7ee      	b.n	8016e92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016eb4:	d071      	beq.n	8016f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016eb6:	1e58      	subs	r0, r3, #1
 8016eb8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016eba:	fb05 1500 	mla	r5, r5, r0, r1
 8016ebe:	142d      	asrs	r5, r5, #16
 8016ec0:	d45f      	bmi.n	8016f82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016ec2:	4565      	cmp	r5, ip
 8016ec4:	da5d      	bge.n	8016f82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016ec6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016ec8:	fb05 2000 	mla	r0, r5, r0, r2
 8016ecc:	1400      	asrs	r0, r0, #16
 8016ece:	d458      	bmi.n	8016f82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016ed0:	42b8      	cmp	r0, r7
 8016ed2:	da56      	bge.n	8016f82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016ed4:	4699      	mov	r9, r3
 8016ed6:	46a2      	mov	sl, r4
 8016ed8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8016edc:	f1b9 0f00 	cmp.w	r9, #0
 8016ee0:	dd57      	ble.n	8016f92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016ee2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016ee6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8016eea:	9803      	ldr	r0, [sp, #12]
 8016eec:	140d      	asrs	r5, r1, #16
 8016eee:	f109 39ff 	add.w	r9, r9, #4294967295
 8016ef2:	fb07 000c 	mla	r0, r7, ip, r0
 8016ef6:	5d40      	ldrb	r0, [r0, r5]
 8016ef8:	9d04      	ldr	r5, [sp, #16]
 8016efa:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8016efe:	f8ba 5000 	ldrh.w	r5, [sl]
 8016f02:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016f06:	122f      	asrs	r7, r5, #8
 8016f08:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8016f0c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016f10:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016f14:	00ed      	lsls	r5, r5, #3
 8016f16:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8016f1a:	fb17 f706 	smulbb	r7, r7, r6
 8016f1e:	b2ed      	uxtb	r5, r5
 8016f20:	fb18 f806 	smulbb	r8, r8, r6
 8016f24:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8016f28:	10c7      	asrs	r7, r0, #3
 8016f2a:	fb15 f506 	smulbb	r5, r5, r6
 8016f2e:	00c0      	lsls	r0, r0, #3
 8016f30:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016f34:	fa1f fc8c 	uxth.w	ip, ip
 8016f38:	b2c0      	uxtb	r0, r0
 8016f3a:	fb07 870b 	mla	r7, r7, fp, r8
 8016f3e:	fb00 500b 	mla	r0, r0, fp, r5
 8016f42:	f10c 0501 	add.w	r5, ip, #1
 8016f46:	b2bf      	uxth	r7, r7
 8016f48:	b280      	uxth	r0, r0
 8016f4a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016f4e:	f107 0801 	add.w	r8, r7, #1
 8016f52:	1c45      	adds	r5, r0, #1
 8016f54:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8016f58:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016f5c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016f60:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016f62:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016f66:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016f6a:	4401      	add	r1, r0
 8016f6c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016f70:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016f72:	ea45 0c0c 	orr.w	ip, r5, ip
 8016f76:	4402      	add	r2, r0
 8016f78:	ea4c 0c08 	orr.w	ip, ip, r8
 8016f7c:	f82a cb02 	strh.w	ip, [sl], #2
 8016f80:	e7ac      	b.n	8016edc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016f82:	f04f 0800 	mov.w	r8, #0
 8016f86:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8016f8a:	eb03 0008 	add.w	r0, r3, r8
 8016f8e:	2800      	cmp	r0, #0
 8016f90:	dc41      	bgt.n	8017016 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8016f92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f96:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016f9a:	9b01      	ldr	r3, [sp, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f340 8097 	ble.w	80170d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016fa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fa8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016fac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016fb0:	eef0 6a62 	vmov.f32	s13, s5
 8016fb4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016fb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016fbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016fc0:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8016fc4:	eef0 6a43 	vmov.f32	s13, s6
 8016fc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016fcc:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8016fd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016fd4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016fd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016fdc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016fe0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016fe4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016fe8:	ee12 2a90 	vmov	r2, s5
 8016fec:	eef0 2a47 	vmov.f32	s5, s14
 8016ff0:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ff4:	ee13 2a10 	vmov	r2, s6
 8016ff8:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ffc:	eeb0 3a67 	vmov.f32	s6, s15
 8017000:	fb92 f3f3 	sdiv	r3, r2, r3
 8017004:	9314      	str	r3, [sp, #80]	; 0x50
 8017006:	9b01      	ldr	r3, [sp, #4]
 8017008:	9a05      	ldr	r2, [sp, #20]
 801700a:	3b01      	subs	r3, #1
 801700c:	9301      	str	r3, [sp, #4]
 801700e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017010:	bf08      	it	eq
 8017012:	4613      	moveq	r3, r2
 8017014:	e72c      	b.n	8016e70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017016:	140f      	asrs	r7, r1, #16
 8017018:	d453      	bmi.n	80170c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801701a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801701e:	42bd      	cmp	r5, r7
 8017020:	dd4f      	ble.n	80170c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017022:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017026:	d44c      	bmi.n	80170c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017028:	f8de 000c 	ldr.w	r0, [lr, #12]
 801702c:	4560      	cmp	r0, ip
 801702e:	dd48      	ble.n	80170c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017030:	9803      	ldr	r0, [sp, #12]
 8017032:	b22d      	sxth	r5, r5
 8017034:	fb0c 0505 	mla	r5, ip, r5, r0
 8017038:	5de8      	ldrb	r0, [r5, r7]
 801703a:	9d04      	ldr	r5, [sp, #16]
 801703c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017040:	f06f 0501 	mvn.w	r5, #1
 8017044:	fb05 fb08 	mul.w	fp, r5, r8
 8017048:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801704c:	f834 500b 	ldrh.w	r5, [r4, fp]
 8017050:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017054:	122f      	asrs	r7, r5, #8
 8017056:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801705a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801705e:	00ed      	lsls	r5, r5, #3
 8017060:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017064:	fb17 f706 	smulbb	r7, r7, r6
 8017068:	b2ed      	uxtb	r5, r5
 801706a:	fb19 f906 	smulbb	r9, r9, r6
 801706e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8017072:	10c7      	asrs	r7, r0, #3
 8017074:	fb15 f506 	smulbb	r5, r5, r6
 8017078:	00c0      	lsls	r0, r0, #3
 801707a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801707e:	fa1f fc8c 	uxth.w	ip, ip
 8017082:	b2c0      	uxtb	r0, r0
 8017084:	fb07 970a 	mla	r7, r7, sl, r9
 8017088:	fb00 500a 	mla	r0, r0, sl, r5
 801708c:	f10c 0501 	add.w	r5, ip, #1
 8017090:	b2bf      	uxth	r7, r7
 8017092:	b280      	uxth	r0, r0
 8017094:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017098:	f107 0901 	add.w	r9, r7, #1
 801709c:	1c45      	adds	r5, r0, #1
 801709e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80170a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80170a6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80170aa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80170ae:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80170b2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80170b6:	ea45 0c0c 	orr.w	ip, r5, ip
 80170ba:	ea4c 0c09 	orr.w	ip, ip, r9
 80170be:	f824 c00b 	strh.w	ip, [r4, fp]
 80170c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80170c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80170c8:	4401      	add	r1, r0
 80170ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80170cc:	4402      	add	r2, r0
 80170ce:	e75c      	b.n	8016f8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80170d0:	b007      	add	sp, #28
 80170d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080170d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80170d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170da:	b085      	sub	sp, #20
 80170dc:	4693      	mov	fp, r2
 80170de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80170e2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80170e4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80170e6:	6870      	ldr	r0, [r6, #4]
 80170e8:	9100      	str	r1, [sp, #0]
 80170ea:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80170ee:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80170f2:	fb00 2404 	mla	r4, r0, r4, r2
 80170f6:	6832      	ldr	r2, [r6, #0]
 80170f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80170fc:	682a      	ldr	r2, [r5, #0]
 80170fe:	9201      	str	r2, [sp, #4]
 8017100:	686a      	ldr	r2, [r5, #4]
 8017102:	3204      	adds	r2, #4
 8017104:	9202      	str	r2, [sp, #8]
 8017106:	9a00      	ldr	r2, [sp, #0]
 8017108:	2a00      	cmp	r2, #0
 801710a:	dc03      	bgt.n	8017114 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801710c:	f1bb 0f00 	cmp.w	fp, #0
 8017110:	f340 80a0 	ble.w	8017254 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017116:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801711a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801711e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017120:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017124:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017128:	2b00      	cmp	r3, #0
 801712a:	dd0c      	ble.n	8017146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801712c:	1406      	asrs	r6, r0, #16
 801712e:	d405      	bmi.n	801713c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017130:	454e      	cmp	r6, r9
 8017132:	da03      	bge.n	801713c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017134:	1416      	asrs	r6, r2, #16
 8017136:	d401      	bmi.n	801713c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017138:	4546      	cmp	r6, r8
 801713a:	db05      	blt.n	8017148 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801713c:	4470      	add	r0, lr
 801713e:	4462      	add	r2, ip
 8017140:	3b01      	subs	r3, #1
 8017142:	3402      	adds	r4, #2
 8017144:	e7f0      	b.n	8017128 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017146:	d00f      	beq.n	8017168 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017148:	1e5e      	subs	r6, r3, #1
 801714a:	fb0e 0706 	mla	r7, lr, r6, r0
 801714e:	143f      	asrs	r7, r7, #16
 8017150:	d541      	bpl.n	80171d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8017152:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017156:	4698      	mov	r8, r3
 8017158:	9603      	str	r6, [sp, #12]
 801715a:	f1b8 0f00 	cmp.w	r8, #0
 801715e:	dc59      	bgt.n	8017214 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017160:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017164:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017168:	9b00      	ldr	r3, [sp, #0]
 801716a:	2b00      	cmp	r3, #0
 801716c:	dd72      	ble.n	8017254 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801716e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017174:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017178:	eeb0 6a62 	vmov.f32	s12, s5
 801717c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017180:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017184:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017188:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801718c:	eeb0 6a43 	vmov.f32	s12, s6
 8017190:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017194:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017198:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801719c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80171a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80171a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80171a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80171ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80171b0:	ee12 2a90 	vmov	r2, s5
 80171b4:	eef0 2a47 	vmov.f32	s5, s14
 80171b8:	fb92 fef3 	sdiv	lr, r2, r3
 80171bc:	ee13 2a10 	vmov	r2, s6
 80171c0:	eeb0 3a67 	vmov.f32	s6, s15
 80171c4:	fb92 fcf3 	sdiv	ip, r2, r3
 80171c8:	9b00      	ldr	r3, [sp, #0]
 80171ca:	3b01      	subs	r3, #1
 80171cc:	9300      	str	r3, [sp, #0]
 80171ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171d0:	bf08      	it	eq
 80171d2:	465b      	moveq	r3, fp
 80171d4:	e797      	b.n	8017106 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80171d6:	454f      	cmp	r7, r9
 80171d8:	dabb      	bge.n	8017152 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80171da:	fb0c 2606 	mla	r6, ip, r6, r2
 80171de:	1436      	asrs	r6, r6, #16
 80171e0:	d4b7      	bmi.n	8017152 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80171e2:	4546      	cmp	r6, r8
 80171e4:	dab5      	bge.n	8017152 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80171e6:	461e      	mov	r6, r3
 80171e8:	46a0      	mov	r8, r4
 80171ea:	2e00      	cmp	r6, #0
 80171ec:	ddb8      	ble.n	8017160 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80171ee:	1417      	asrs	r7, r2, #16
 80171f0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80171f4:	9901      	ldr	r1, [sp, #4]
 80171f6:	ea4f 4920 	mov.w	r9, r0, asr #16
 80171fa:	4462      	add	r2, ip
 80171fc:	4470      	add	r0, lr
 80171fe:	fb0a 1707 	mla	r7, sl, r7, r1
 8017202:	9902      	ldr	r1, [sp, #8]
 8017204:	3e01      	subs	r6, #1
 8017206:	f817 7009 	ldrb.w	r7, [r7, r9]
 801720a:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801720e:	f828 7b02 	strh.w	r7, [r8], #2
 8017212:	e7ea      	b.n	80171ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8017214:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017218:	d417      	bmi.n	801724a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801721a:	68ae      	ldr	r6, [r5, #8]
 801721c:	454e      	cmp	r6, r9
 801721e:	dd14      	ble.n	801724a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017220:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017224:	d411      	bmi.n	801724a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017226:	68ef      	ldr	r7, [r5, #12]
 8017228:	4557      	cmp	r7, sl
 801722a:	dd0e      	ble.n	801724a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801722c:	9f01      	ldr	r7, [sp, #4]
 801722e:	b236      	sxth	r6, r6
 8017230:	f06f 0101 	mvn.w	r1, #1
 8017234:	fb0a 7606 	mla	r6, sl, r6, r7
 8017238:	9f02      	ldr	r7, [sp, #8]
 801723a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801723e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8017242:	fb01 f608 	mul.w	r6, r1, r8
 8017246:	9903      	ldr	r1, [sp, #12]
 8017248:	538f      	strh	r7, [r1, r6]
 801724a:	4470      	add	r0, lr
 801724c:	4462      	add	r2, ip
 801724e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017252:	e782      	b.n	801715a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017254:	b005      	add	sp, #20
 8017256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801725a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801725a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801725e:	b087      	sub	sp, #28
 8017260:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017262:	9205      	str	r2, [sp, #20]
 8017264:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017268:	9102      	str	r1, [sp, #8]
 801726a:	9203      	str	r2, [sp, #12]
 801726c:	6861      	ldr	r1, [r4, #4]
 801726e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017272:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017276:	fb01 2000 	mla	r0, r1, r0, r2
 801727a:	6822      	ldr	r2, [r4, #0]
 801727c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017280:	9200      	str	r2, [sp, #0]
 8017282:	f8dc 2000 	ldr.w	r2, [ip]
 8017286:	9204      	str	r2, [sp, #16]
 8017288:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801728c:	3204      	adds	r2, #4
 801728e:	9201      	str	r2, [sp, #4]
 8017290:	9a03      	ldr	r2, [sp, #12]
 8017292:	43d5      	mvns	r5, r2
 8017294:	b2ed      	uxtb	r5, r5
 8017296:	9a02      	ldr	r2, [sp, #8]
 8017298:	2a00      	cmp	r2, #0
 801729a:	dc03      	bgt.n	80172a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801729c:	9a05      	ldr	r2, [sp, #20]
 801729e:	2a00      	cmp	r2, #0
 80172a0:	f340 812c 	ble.w	80174fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80172a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80172a6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80172aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80172ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172b0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80172b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	dd10      	ble.n	80172de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80172bc:	140c      	asrs	r4, r1, #16
 80172be:	d405      	bmi.n	80172cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80172c0:	4574      	cmp	r4, lr
 80172c2:	da03      	bge.n	80172cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80172c4:	1414      	asrs	r4, r2, #16
 80172c6:	d401      	bmi.n	80172cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80172c8:	42bc      	cmp	r4, r7
 80172ca:	db09      	blt.n	80172e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80172cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80172ce:	3b01      	subs	r3, #1
 80172d0:	9800      	ldr	r0, [sp, #0]
 80172d2:	4421      	add	r1, r4
 80172d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80172d6:	3002      	adds	r0, #2
 80172d8:	4422      	add	r2, r4
 80172da:	9000      	str	r0, [sp, #0]
 80172dc:	e7ec      	b.n	80172b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80172de:	d071      	beq.n	80173c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80172e0:	1e5c      	subs	r4, r3, #1
 80172e2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80172e4:	fb06 1604 	mla	r6, r6, r4, r1
 80172e8:	1436      	asrs	r6, r6, #16
 80172ea:	d45d      	bmi.n	80173a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80172ec:	4576      	cmp	r6, lr
 80172ee:	da5b      	bge.n	80173a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80172f0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80172f2:	fb06 2404 	mla	r4, r6, r4, r2
 80172f6:	1424      	asrs	r4, r4, #16
 80172f8:	d456      	bmi.n	80173a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80172fa:	42bc      	cmp	r4, r7
 80172fc:	da54      	bge.n	80173a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80172fe:	4698      	mov	r8, r3
 8017300:	f8dd 9000 	ldr.w	r9, [sp]
 8017304:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8017308:	f1b8 0f00 	cmp.w	r8, #0
 801730c:	dd54      	ble.n	80173b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801730e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8017312:	1414      	asrs	r4, r2, #16
 8017314:	9804      	ldr	r0, [sp, #16]
 8017316:	140e      	asrs	r6, r1, #16
 8017318:	f108 38ff 	add.w	r8, r8, #4294967295
 801731c:	fb07 0404 	mla	r4, r7, r4, r0
 8017320:	9801      	ldr	r0, [sp, #4]
 8017322:	f814 e006 	ldrb.w	lr, [r4, r6]
 8017326:	f8b9 4000 	ldrh.w	r4, [r9]
 801732a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801732e:	1227      	asrs	r7, r4, #8
 8017330:	eb00 0b0e 	add.w	fp, r0, lr
 8017334:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8017338:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801733c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801733e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017342:	f89b b001 	ldrb.w	fp, [fp, #1]
 8017346:	4401      	add	r1, r0
 8017348:	fb16 f60a 	smulbb	r6, r6, sl
 801734c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801734e:	fb1b fb0a 	smulbb	fp, fp, sl
 8017352:	fb07 6705 	mla	r7, r7, r5, r6
 8017356:	10e6      	asrs	r6, r4, #3
 8017358:	00e4      	lsls	r4, r4, #3
 801735a:	4402      	add	r2, r0
 801735c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017360:	b2bf      	uxth	r7, r7
 8017362:	b2e4      	uxtb	r4, r4
 8017364:	fb06 b605 	mla	r6, r6, r5, fp
 8017368:	fb14 f405 	smulbb	r4, r4, r5
 801736c:	b2b6      	uxth	r6, r6
 801736e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8017372:	1c7c      	adds	r4, r7, #1
 8017374:	f106 0b01 	add.w	fp, r6, #1
 8017378:	fa1f fe8e 	uxth.w	lr, lr
 801737c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017380:	f10e 0401 	add.w	r4, lr, #1
 8017384:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8017388:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801738c:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8017390:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017394:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8017398:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801739c:	4327      	orrs	r7, r4
 801739e:	ea47 070b 	orr.w	r7, r7, fp
 80173a2:	f829 7b02 	strh.w	r7, [r9], #2
 80173a6:	e7af      	b.n	8017308 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80173a8:	f04f 0e00 	mov.w	lr, #0
 80173ac:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80173b0:	eb03 040e 	add.w	r4, r3, lr
 80173b4:	2c00      	cmp	r4, #0
 80173b6:	dc43      	bgt.n	8017440 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80173b8:	9a00      	ldr	r2, [sp, #0]
 80173ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80173be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80173c2:	9300      	str	r3, [sp, #0]
 80173c4:	9b02      	ldr	r3, [sp, #8]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	f340 8098 	ble.w	80174fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80173cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80173d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80173d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80173da:	eef0 6a62 	vmov.f32	s13, s5
 80173de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80173e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80173e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80173ea:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80173ee:	eef0 6a43 	vmov.f32	s13, s6
 80173f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80173f6:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80173fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80173fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017402:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801740a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801740e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017412:	ee12 2a90 	vmov	r2, s5
 8017416:	eef0 2a47 	vmov.f32	s5, s14
 801741a:	fb92 f3f3 	sdiv	r3, r2, r3
 801741e:	ee13 2a10 	vmov	r2, s6
 8017422:	9313      	str	r3, [sp, #76]	; 0x4c
 8017424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017426:	eeb0 3a67 	vmov.f32	s6, s15
 801742a:	fb92 f3f3 	sdiv	r3, r2, r3
 801742e:	9314      	str	r3, [sp, #80]	; 0x50
 8017430:	9b02      	ldr	r3, [sp, #8]
 8017432:	9a05      	ldr	r2, [sp, #20]
 8017434:	3b01      	subs	r3, #1
 8017436:	9302      	str	r3, [sp, #8]
 8017438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801743a:	bf08      	it	eq
 801743c:	4613      	moveq	r3, r2
 801743e:	e72a      	b.n	8017296 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017440:	140f      	asrs	r7, r1, #16
 8017442:	d454      	bmi.n	80174ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017444:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017448:	42be      	cmp	r6, r7
 801744a:	dd50      	ble.n	80174ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801744c:	ea5f 4822 	movs.w	r8, r2, asr #16
 8017450:	d44d      	bmi.n	80174ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017452:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8017456:	4544      	cmp	r4, r8
 8017458:	dd49      	ble.n	80174ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801745a:	9c04      	ldr	r4, [sp, #16]
 801745c:	b236      	sxth	r6, r6
 801745e:	f06f 0001 	mvn.w	r0, #1
 8017462:	fb08 4606 	mla	r6, r8, r6, r4
 8017466:	9c01      	ldr	r4, [sp, #4]
 8017468:	fb00 fa0e 	mul.w	sl, r0, lr
 801746c:	9800      	ldr	r0, [sp, #0]
 801746e:	f816 8007 	ldrb.w	r8, [r6, r7]
 8017472:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017476:	eb04 0b08 	add.w	fp, r4, r8
 801747a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801747e:	9801      	ldr	r0, [sp, #4]
 8017480:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017484:	1227      	asrs	r7, r4, #8
 8017486:	f89b b001 	ldrb.w	fp, [fp, #1]
 801748a:	fb16 f609 	smulbb	r6, r6, r9
 801748e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017492:	f810 8008 	ldrb.w	r8, [r0, r8]
 8017496:	fb1b fb09 	smulbb	fp, fp, r9
 801749a:	fb07 6705 	mla	r7, r7, r5, r6
 801749e:	10e6      	asrs	r6, r4, #3
 80174a0:	00e4      	lsls	r4, r4, #3
 80174a2:	9800      	ldr	r0, [sp, #0]
 80174a4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80174a8:	b2bf      	uxth	r7, r7
 80174aa:	b2e4      	uxtb	r4, r4
 80174ac:	fb06 b605 	mla	r6, r6, r5, fp
 80174b0:	fb14 f405 	smulbb	r4, r4, r5
 80174b4:	b2b6      	uxth	r6, r6
 80174b6:	fb08 4809 	mla	r8, r8, r9, r4
 80174ba:	1c7c      	adds	r4, r7, #1
 80174bc:	f106 0b01 	add.w	fp, r6, #1
 80174c0:	fa1f f888 	uxth.w	r8, r8
 80174c4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80174c8:	f108 0401 	add.w	r4, r8, #1
 80174cc:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80174d0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80174d4:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80174d8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80174dc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80174e0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80174e4:	4327      	orrs	r7, r4
 80174e6:	ea47 070b 	orr.w	r7, r7, fp
 80174ea:	f820 700a 	strh.w	r7, [r0, sl]
 80174ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80174f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80174f4:	4401      	add	r1, r0
 80174f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80174f8:	4402      	add	r2, r0
 80174fa:	e759      	b.n	80173b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80174fc:	b007      	add	sp, #28
 80174fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017508:	b085      	sub	sp, #20
 801750a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801750e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017510:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017512:	9203      	str	r2, [sp, #12]
 8017514:	6870      	ldr	r0, [r6, #4]
 8017516:	686f      	ldr	r7, [r5, #4]
 8017518:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801751c:	3704      	adds	r7, #4
 801751e:	9101      	str	r1, [sp, #4]
 8017520:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017524:	fb00 2404 	mla	r4, r0, r4, r2
 8017528:	6832      	ldr	r2, [r6, #0]
 801752a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801752e:	682a      	ldr	r2, [r5, #0]
 8017530:	9202      	str	r2, [sp, #8]
 8017532:	9a01      	ldr	r2, [sp, #4]
 8017534:	2a00      	cmp	r2, #0
 8017536:	dc03      	bgt.n	8017540 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017538:	9a03      	ldr	r2, [sp, #12]
 801753a:	2a00      	cmp	r2, #0
 801753c:	f340 80cc 	ble.w	80176d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017542:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017546:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801754a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801754c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017550:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017554:	2b00      	cmp	r3, #0
 8017556:	dd0d      	ble.n	8017574 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017558:	1406      	asrs	r6, r0, #16
 801755a:	d405      	bmi.n	8017568 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801755c:	454e      	cmp	r6, r9
 801755e:	da03      	bge.n	8017568 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017560:	1416      	asrs	r6, r2, #16
 8017562:	d401      	bmi.n	8017568 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017564:	4546      	cmp	r6, r8
 8017566:	db06      	blt.n	8017576 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017568:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801756a:	4460      	add	r0, ip
 801756c:	3b01      	subs	r3, #1
 801756e:	3402      	adds	r4, #2
 8017570:	4432      	add	r2, r6
 8017572:	e7ef      	b.n	8017554 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017574:	d00f      	beq.n	8017596 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017576:	1e5e      	subs	r6, r3, #1
 8017578:	fb0c 0e06 	mla	lr, ip, r6, r0
 801757c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8017580:	d543      	bpl.n	801760a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8017582:	4698      	mov	r8, r3
 8017584:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8017588:	f1b8 0f00 	cmp.w	r8, #0
 801758c:	dc71      	bgt.n	8017672 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801758e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017592:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017596:	9b01      	ldr	r3, [sp, #4]
 8017598:	2b00      	cmp	r3, #0
 801759a:	f340 809d 	ble.w	80176d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801759e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80175a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80175a8:	eeb0 6a62 	vmov.f32	s12, s5
 80175ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80175b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80175b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80175b8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80175bc:	eeb0 6a43 	vmov.f32	s12, s6
 80175c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80175c4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80175c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80175cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80175d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80175d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80175d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80175dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80175e0:	ee12 2a90 	vmov	r2, s5
 80175e4:	eef0 2a47 	vmov.f32	s5, s14
 80175e8:	fb92 fcf3 	sdiv	ip, r2, r3
 80175ec:	ee13 2a10 	vmov	r2, s6
 80175f0:	eeb0 3a67 	vmov.f32	s6, s15
 80175f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80175f8:	9312      	str	r3, [sp, #72]	; 0x48
 80175fa:	9b01      	ldr	r3, [sp, #4]
 80175fc:	9a03      	ldr	r2, [sp, #12]
 80175fe:	3b01      	subs	r3, #1
 8017600:	9301      	str	r3, [sp, #4]
 8017602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017604:	bf08      	it	eq
 8017606:	4613      	moveq	r3, r2
 8017608:	e793      	b.n	8017532 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801760a:	45ce      	cmp	lr, r9
 801760c:	dab9      	bge.n	8017582 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801760e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017610:	fb01 2606 	mla	r6, r1, r6, r2
 8017614:	1436      	asrs	r6, r6, #16
 8017616:	d4b4      	bmi.n	8017582 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017618:	4546      	cmp	r6, r8
 801761a:	dab2      	bge.n	8017582 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801761c:	4698      	mov	r8, r3
 801761e:	46a2      	mov	sl, r4
 8017620:	f1b8 0f00 	cmp.w	r8, #0
 8017624:	ddb3      	ble.n	801758e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017626:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801762a:	1416      	asrs	r6, r2, #16
 801762c:	9902      	ldr	r1, [sp, #8]
 801762e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8017632:	f108 38ff 	add.w	r8, r8, #4294967295
 8017636:	4460      	add	r0, ip
 8017638:	fb09 1606 	mla	r6, r9, r6, r1
 801763c:	4928      	ldr	r1, [pc, #160]	; (80176e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801763e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8017642:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017646:	eb07 0b0e 	add.w	fp, r7, lr
 801764a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801764e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8017652:	00f6      	lsls	r6, r6, #3
 8017654:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8017658:	9912      	ldr	r1, [sp, #72]	; 0x48
 801765a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801765e:	440a      	add	r2, r1
 8017660:	ea49 0606 	orr.w	r6, r9, r6
 8017664:	f817 900e 	ldrb.w	r9, [r7, lr]
 8017668:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801766c:	f82a 6b02 	strh.w	r6, [sl], #2
 8017670:	e7d6      	b.n	8017620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017672:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017676:	d429      	bmi.n	80176cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017678:	68ae      	ldr	r6, [r5, #8]
 801767a:	454e      	cmp	r6, r9
 801767c:	dd26      	ble.n	80176cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801767e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8017682:	d423      	bmi.n	80176cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017684:	68e9      	ldr	r1, [r5, #12]
 8017686:	4559      	cmp	r1, fp
 8017688:	dd20      	ble.n	80176cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801768a:	fa0f fe86 	sxth.w	lr, r6
 801768e:	9902      	ldr	r1, [sp, #8]
 8017690:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8017694:	f06f 0101 	mvn.w	r1, #1
 8017698:	f81e e009 	ldrb.w	lr, [lr, r9]
 801769c:	fb01 f908 	mul.w	r9, r1, r8
 80176a0:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 80176a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80176a8:	eb07 060e 	add.w	r6, r7, lr
 80176ac:	f896 b002 	ldrb.w	fp, [r6, #2]
 80176b0:	7876      	ldrb	r6, [r6, #1]
 80176b2:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80176b6:	00f6      	lsls	r6, r6, #3
 80176b8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80176bc:	ea4b 0606 	orr.w	r6, fp, r6
 80176c0:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80176c4:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80176c8:	f82a 6009 	strh.w	r6, [sl, r9]
 80176cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80176ce:	4460      	add	r0, ip
 80176d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80176d4:	440a      	add	r2, r1
 80176d6:	e757      	b.n	8017588 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80176d8:	b005      	add	sp, #20
 80176da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176de:	bf00      	nop
 80176e0:	fffff800 	.word	0xfffff800

080176e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80176e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e8:	b087      	sub	sp, #28
 80176ea:	468b      	mov	fp, r1
 80176ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80176f0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80176f2:	9204      	str	r2, [sp, #16]
 80176f4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80176f8:	6841      	ldr	r1, [r0, #4]
 80176fa:	9205      	str	r2, [sp, #20]
 80176fc:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017700:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017704:	fb01 2404 	mla	r4, r1, r4, r2
 8017708:	6802      	ldr	r2, [r0, #0]
 801770a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801770e:	f8dc 2000 	ldr.w	r2, [ip]
 8017712:	9201      	str	r2, [sp, #4]
 8017714:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017718:	3204      	adds	r2, #4
 801771a:	9202      	str	r2, [sp, #8]
 801771c:	f1bb 0f00 	cmp.w	fp, #0
 8017720:	dc03      	bgt.n	801772a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8017722:	9a04      	ldr	r2, [sp, #16]
 8017724:	2a00      	cmp	r2, #0
 8017726:	f340 8138 	ble.w	801799a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801772a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801772c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8017730:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017736:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801773a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801773e:	2b00      	cmp	r3, #0
 8017740:	dd0e      	ble.n	8017760 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017742:	1402      	asrs	r2, r0, #16
 8017744:	d405      	bmi.n	8017752 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017746:	42ba      	cmp	r2, r7
 8017748:	da03      	bge.n	8017752 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801774a:	140a      	asrs	r2, r1, #16
 801774c:	d401      	bmi.n	8017752 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801774e:	42b2      	cmp	r2, r6
 8017750:	db07      	blt.n	8017762 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017752:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017754:	3b01      	subs	r3, #1
 8017756:	3402      	adds	r4, #2
 8017758:	4410      	add	r0, r2
 801775a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801775c:	4411      	add	r1, r2
 801775e:	e7ee      	b.n	801773e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017760:	d019      	beq.n	8017796 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017762:	1e5a      	subs	r2, r3, #1
 8017764:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017766:	fb05 0502 	mla	r5, r5, r2, r0
 801776a:	142d      	asrs	r5, r5, #16
 801776c:	d409      	bmi.n	8017782 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801776e:	42bd      	cmp	r5, r7
 8017770:	da07      	bge.n	8017782 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017772:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017774:	fb05 1202 	mla	r2, r5, r2, r1
 8017778:	1412      	asrs	r2, r2, #16
 801777a:	d402      	bmi.n	8017782 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801777c:	42b2      	cmp	r2, r6
 801777e:	f2c0 80ac 	blt.w	80178da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8017782:	f04f 0e00 	mov.w	lr, #0
 8017786:	eb03 020e 	add.w	r2, r3, lr
 801778a:	2a00      	cmp	r2, #0
 801778c:	dc3e      	bgt.n	801780c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801778e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017792:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017796:	f1bb 0f00 	cmp.w	fp, #0
 801779a:	f340 80fe 	ble.w	801799a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801779e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80177a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80177a8:	f1bb 0b01 	subs.w	fp, fp, #1
 80177ac:	eeb0 6a62 	vmov.f32	s12, s5
 80177b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80177b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80177b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80177bc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80177c0:	eeb0 6a43 	vmov.f32	s12, s6
 80177c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80177c8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80177cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80177d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80177d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80177d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80177dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80177e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80177e4:	ee12 2a90 	vmov	r2, s5
 80177e8:	eef0 2a47 	vmov.f32	s5, s14
 80177ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80177f0:	ee13 2a10 	vmov	r2, s6
 80177f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80177f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177f8:	eeb0 3a67 	vmov.f32	s6, s15
 80177fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8017800:	9a04      	ldr	r2, [sp, #16]
 8017802:	9314      	str	r3, [sp, #80]	; 0x50
 8017804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017806:	bf08      	it	eq
 8017808:	4613      	moveq	r3, r2
 801780a:	e787      	b.n	801771c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801780c:	1406      	asrs	r6, r0, #16
 801780e:	d45d      	bmi.n	80178cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017810:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8017814:	42b5      	cmp	r5, r6
 8017816:	dd59      	ble.n	80178cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017818:	140f      	asrs	r7, r1, #16
 801781a:	d457      	bmi.n	80178cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801781c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017820:	42ba      	cmp	r2, r7
 8017822:	dd53      	ble.n	80178cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017824:	9a01      	ldr	r2, [sp, #4]
 8017826:	b22d      	sxth	r5, r5
 8017828:	fb07 2505 	mla	r5, r7, r5, r2
 801782c:	5daa      	ldrb	r2, [r5, r6]
 801782e:	9d02      	ldr	r5, [sp, #8]
 8017830:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017834:	0e2e      	lsrs	r6, r5, #24
 8017836:	d049      	beq.n	80178cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017838:	f06f 0201 	mvn.w	r2, #1
 801783c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017840:	fb02 f20e 	mul.w	r2, r2, lr
 8017844:	f834 8002 	ldrh.w	r8, [r4, r2]
 8017848:	9203      	str	r2, [sp, #12]
 801784a:	9a05      	ldr	r2, [sp, #20]
 801784c:	ea4f 2728 	mov.w	r7, r8, asr #8
 8017850:	4356      	muls	r6, r2
 8017852:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017856:	1c72      	adds	r2, r6, #1
 8017858:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801785c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017860:	b2ed      	uxtb	r5, r5
 8017862:	1212      	asrs	r2, r2, #8
 8017864:	fa1f f982 	uxth.w	r9, r2
 8017868:	43d2      	mvns	r2, r2
 801786a:	fb16 f609 	smulbb	r6, r6, r9
 801786e:	b2d2      	uxtb	r2, r2
 8017870:	fb15 f509 	smulbb	r5, r5, r9
 8017874:	fb07 6702 	mla	r7, r7, r2, r6
 8017878:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801787c:	fb1a fa09 	smulbb	sl, sl, r9
 8017880:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017884:	b2bf      	uxth	r7, r7
 8017886:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801788a:	fa5f f888 	uxtb.w	r8, r8
 801788e:	fb06 a602 	mla	r6, r6, r2, sl
 8017892:	fb08 5502 	mla	r5, r8, r2, r5
 8017896:	1c7a      	adds	r2, r7, #1
 8017898:	b2b6      	uxth	r6, r6
 801789a:	b2ad      	uxth	r5, r5
 801789c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80178a0:	9a03      	ldr	r2, [sp, #12]
 80178a2:	f105 0a01 	add.w	sl, r5, #1
 80178a6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80178aa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80178ae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80178b2:	ea4a 0707 	orr.w	r7, sl, r7
 80178b6:	f106 0a01 	add.w	sl, r6, #1
 80178ba:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80178be:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80178c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80178c6:	ea47 070a 	orr.w	r7, r7, sl
 80178ca:	52a7      	strh	r7, [r4, r2]
 80178cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80178ce:	f10e 3eff 	add.w	lr, lr, #4294967295
 80178d2:	4410      	add	r0, r2
 80178d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80178d6:	4411      	add	r1, r2
 80178d8:	e755      	b.n	8017786 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80178da:	f04f 0800 	mov.w	r8, #0
 80178de:	eba3 0208 	sub.w	r2, r3, r8
 80178e2:	2a00      	cmp	r2, #0
 80178e4:	f77f af53 	ble.w	801778e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80178e8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 80178ec:	140a      	asrs	r2, r1, #16
 80178ee:	9f01      	ldr	r7, [sp, #4]
 80178f0:	1405      	asrs	r5, r0, #16
 80178f2:	fb06 7202 	mla	r2, r6, r2, r7
 80178f6:	5d52      	ldrb	r2, [r2, r5]
 80178f8:	9d02      	ldr	r5, [sp, #8]
 80178fa:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80178fe:	0e2e      	lsrs	r6, r5, #24
 8017900:	d044      	beq.n	801798c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8017902:	9a05      	ldr	r2, [sp, #20]
 8017904:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017908:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801790c:	4356      	muls	r6, r2
 801790e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8017912:	1c72      	adds	r2, r6, #1
 8017914:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017918:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801791c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017920:	b2ed      	uxtb	r5, r5
 8017922:	1212      	asrs	r2, r2, #8
 8017924:	fa1f f982 	uxth.w	r9, r2
 8017928:	43d2      	mvns	r2, r2
 801792a:	fb16 f609 	smulbb	r6, r6, r9
 801792e:	b2d2      	uxtb	r2, r2
 8017930:	fb15 f509 	smulbb	r5, r5, r9
 8017934:	fb07 6702 	mla	r7, r7, r2, r6
 8017938:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801793c:	fb1a fa09 	smulbb	sl, sl, r9
 8017940:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017944:	b2bf      	uxth	r7, r7
 8017946:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801794a:	fa5f fe8e 	uxtb.w	lr, lr
 801794e:	fb06 a602 	mla	r6, r6, r2, sl
 8017952:	fb0e 5502 	mla	r5, lr, r2, r5
 8017956:	1c7a      	adds	r2, r7, #1
 8017958:	b2b6      	uxth	r6, r6
 801795a:	b2ad      	uxth	r5, r5
 801795c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017960:	f105 0a01 	add.w	sl, r5, #1
 8017964:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017968:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801796c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017970:	ea4a 0707 	orr.w	r7, sl, r7
 8017974:	f106 0a01 	add.w	sl, r6, #1
 8017978:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801797c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017980:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017984:	ea47 070a 	orr.w	r7, r7, sl
 8017988:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801798c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801798e:	f108 0801 	add.w	r8, r8, #1
 8017992:	4410      	add	r0, r2
 8017994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017996:	4411      	add	r1, r2
 8017998:	e7a1      	b.n	80178de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801799a:	b007      	add	sp, #28
 801799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80179a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a4:	b085      	sub	sp, #20
 80179a6:	468b      	mov	fp, r1
 80179a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80179ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80179ae:	9203      	str	r2, [sp, #12]
 80179b0:	6841      	ldr	r1, [r0, #4]
 80179b2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80179b6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80179ba:	fb01 2404 	mla	r4, r1, r4, r2
 80179be:	6802      	ldr	r2, [r0, #0]
 80179c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80179c4:	f8de 2000 	ldr.w	r2, [lr]
 80179c8:	9200      	str	r2, [sp, #0]
 80179ca:	f8de 2004 	ldr.w	r2, [lr, #4]
 80179ce:	3204      	adds	r2, #4
 80179d0:	9201      	str	r2, [sp, #4]
 80179d2:	f1bb 0f00 	cmp.w	fp, #0
 80179d6:	dc03      	bgt.n	80179e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80179d8:	9a03      	ldr	r2, [sp, #12]
 80179da:	2a00      	cmp	r2, #0
 80179dc:	f340 8153 	ble.w	8017c86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80179e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80179e2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80179e6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80179ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80179ec:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80179f0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	dd0e      	ble.n	8017a16 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80179f8:	1408      	asrs	r0, r1, #16
 80179fa:	d405      	bmi.n	8017a08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80179fc:	42b8      	cmp	r0, r7
 80179fe:	da03      	bge.n	8017a08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017a00:	1410      	asrs	r0, r2, #16
 8017a02:	d401      	bmi.n	8017a08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017a04:	42b0      	cmp	r0, r6
 8017a06:	db07      	blt.n	8017a18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017a08:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017a0a:	3b01      	subs	r3, #1
 8017a0c:	3402      	adds	r4, #2
 8017a0e:	4401      	add	r1, r0
 8017a10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017a12:	4402      	add	r2, r0
 8017a14:	e7ee      	b.n	80179f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8017a16:	d017      	beq.n	8017a48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017a18:	1e58      	subs	r0, r3, #1
 8017a1a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017a1c:	fb05 1500 	mla	r5, r5, r0, r1
 8017a20:	142d      	asrs	r5, r5, #16
 8017a22:	d409      	bmi.n	8017a38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017a24:	42bd      	cmp	r5, r7
 8017a26:	da07      	bge.n	8017a38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017a28:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017a2a:	fb05 2000 	mla	r0, r5, r0, r2
 8017a2e:	1400      	asrs	r0, r0, #16
 8017a30:	d402      	bmi.n	8017a38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017a32:	42b0      	cmp	r0, r6
 8017a34:	f2c0 80bc 	blt.w	8017bb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8017a38:	2600      	movs	r6, #0
 8017a3a:	1998      	adds	r0, r3, r6
 8017a3c:	2800      	cmp	r0, #0
 8017a3e:	dc3e      	bgt.n	8017abe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8017a40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017a44:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017a48:	f1bb 0f00 	cmp.w	fp, #0
 8017a4c:	f340 811b 	ble.w	8017c86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8017a50:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017a5a:	f1bb 0b01 	subs.w	fp, fp, #1
 8017a5e:	eeb0 6a62 	vmov.f32	s12, s5
 8017a62:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017a66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017a6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a6e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017a72:	eeb0 6a43 	vmov.f32	s12, s6
 8017a76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a7a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017a7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017a82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017a86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017a8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017a8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017a92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017a96:	ee12 2a90 	vmov	r2, s5
 8017a9a:	eef0 2a47 	vmov.f32	s5, s14
 8017a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017aa2:	ee13 2a10 	vmov	r2, s6
 8017aa6:	9311      	str	r3, [sp, #68]	; 0x44
 8017aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017aaa:	eeb0 3a67 	vmov.f32	s6, s15
 8017aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ab2:	9a03      	ldr	r2, [sp, #12]
 8017ab4:	9312      	str	r3, [sp, #72]	; 0x48
 8017ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ab8:	bf08      	it	eq
 8017aba:	4613      	moveq	r3, r2
 8017abc:	e789      	b.n	80179d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8017abe:	140f      	asrs	r7, r1, #16
 8017ac0:	d426      	bmi.n	8017b10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017ac2:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017ac6:	42bd      	cmp	r5, r7
 8017ac8:	dd22      	ble.n	8017b10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017aca:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017ace:	d41f      	bmi.n	8017b10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017ad0:	f8de 000c 	ldr.w	r0, [lr, #12]
 8017ad4:	4560      	cmp	r0, ip
 8017ad6:	dd1b      	ble.n	8017b10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017ad8:	9800      	ldr	r0, [sp, #0]
 8017ada:	b22d      	sxth	r5, r5
 8017adc:	fb0c 0505 	mla	r5, ip, r5, r0
 8017ae0:	5de8      	ldrb	r0, [r5, r7]
 8017ae2:	9d01      	ldr	r5, [sp, #4]
 8017ae4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8017ae8:	0e07      	lsrs	r7, r0, #24
 8017aea:	2fff      	cmp	r7, #255	; 0xff
 8017aec:	d116      	bne.n	8017b1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017aee:	f06f 0501 	mvn.w	r5, #1
 8017af2:	fb05 f706 	mul.w	r7, r5, r6
 8017af6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8017afa:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8017afe:	0945      	lsrs	r5, r0, #5
 8017b00:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8017b04:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8017b08:	ea4c 0505 	orr.w	r5, ip, r5
 8017b0c:	4305      	orrs	r5, r0
 8017b0e:	53e5      	strh	r5, [r4, r7]
 8017b10:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017b12:	3e01      	subs	r6, #1
 8017b14:	4401      	add	r1, r0
 8017b16:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017b18:	4402      	add	r2, r0
 8017b1a:	e78e      	b.n	8017a3a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8017b1c:	b2fd      	uxtb	r5, r7
 8017b1e:	2f00      	cmp	r7, #0
 8017b20:	d0f6      	beq.n	8017b10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017b22:	f06f 0701 	mvn.w	r7, #1
 8017b26:	fa1f f985 	uxth.w	r9, r5
 8017b2a:	43ed      	mvns	r5, r5
 8017b2c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017b30:	4377      	muls	r7, r6
 8017b32:	fb1a fa09 	smulbb	sl, sl, r9
 8017b36:	b2ed      	uxtb	r5, r5
 8017b38:	f834 8007 	ldrh.w	r8, [r4, r7]
 8017b3c:	9702      	str	r7, [sp, #8]
 8017b3e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017b42:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8017b46:	fb17 f709 	smulbb	r7, r7, r9
 8017b4a:	b2c0      	uxtb	r0, r0
 8017b4c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017b50:	fb10 f009 	smulbb	r0, r0, r9
 8017b54:	fb0c 7c05 	mla	ip, ip, r5, r7
 8017b58:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8017b5c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017b60:	fa1f fc8c 	uxth.w	ip, ip
 8017b64:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017b68:	fa5f f888 	uxtb.w	r8, r8
 8017b6c:	fb07 a705 	mla	r7, r7, r5, sl
 8017b70:	fb08 0005 	mla	r0, r8, r5, r0
 8017b74:	f10c 0501 	add.w	r5, ip, #1
 8017b78:	b2bf      	uxth	r7, r7
 8017b7a:	b280      	uxth	r0, r0
 8017b7c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017b80:	f100 0a01 	add.w	sl, r0, #1
 8017b84:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017b88:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8017b8c:	9802      	ldr	r0, [sp, #8]
 8017b8e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017b92:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017b96:	f107 0a01 	add.w	sl, r7, #1
 8017b9a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8017b9e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017ba2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017ba6:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017baa:	f824 c000 	strh.w	ip, [r4, r0]
 8017bae:	e7af      	b.n	8017b10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017bb0:	f04f 0800 	mov.w	r8, #0
 8017bb4:	eba3 0008 	sub.w	r0, r3, r8
 8017bb8:	2800      	cmp	r0, #0
 8017bba:	f77f af41 	ble.w	8017a40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017bbe:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017bc2:	1410      	asrs	r0, r2, #16
 8017bc4:	9f00      	ldr	r7, [sp, #0]
 8017bc6:	140d      	asrs	r5, r1, #16
 8017bc8:	fb06 7000 	mla	r0, r6, r0, r7
 8017bcc:	5d40      	ldrb	r0, [r0, r5]
 8017bce:	9d01      	ldr	r5, [sp, #4]
 8017bd0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8017bd4:	0e2e      	lsrs	r6, r5, #24
 8017bd6:	2eff      	cmp	r6, #255	; 0xff
 8017bd8:	d112      	bne.n	8017c00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8017bda:	482c      	ldr	r0, [pc, #176]	; (8017c8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8017bdc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8017be0:	0968      	lsrs	r0, r5, #5
 8017be2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017be6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017bea:	4330      	orrs	r0, r6
 8017bec:	4328      	orrs	r0, r5
 8017bee:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8017bf2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017bf4:	f108 0801 	add.w	r8, r8, #1
 8017bf8:	4401      	add	r1, r0
 8017bfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017bfc:	4402      	add	r2, r0
 8017bfe:	e7d9      	b.n	8017bb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8017c00:	b2f0      	uxtb	r0, r6
 8017c02:	2e00      	cmp	r6, #0
 8017c04:	d0f5      	beq.n	8017bf2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8017c06:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8017c0a:	fa1f f980 	uxth.w	r9, r0
 8017c0e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017c12:	43c0      	mvns	r0, r0
 8017c14:	ea4f 272c 	mov.w	r7, ip, asr #8
 8017c18:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017c1c:	fb16 f609 	smulbb	r6, r6, r9
 8017c20:	b2c0      	uxtb	r0, r0
 8017c22:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017c26:	b2ed      	uxtb	r5, r5
 8017c28:	fb1a fa09 	smulbb	sl, sl, r9
 8017c2c:	fb07 6700 	mla	r7, r7, r0, r6
 8017c30:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8017c34:	fb15 f509 	smulbb	r5, r5, r9
 8017c38:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017c3c:	b2bf      	uxth	r7, r7
 8017c3e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017c42:	fa5f fc8c 	uxtb.w	ip, ip
 8017c46:	fb06 a600 	mla	r6, r6, r0, sl
 8017c4a:	fb0c 5500 	mla	r5, ip, r0, r5
 8017c4e:	1c78      	adds	r0, r7, #1
 8017c50:	b2b6      	uxth	r6, r6
 8017c52:	b2ad      	uxth	r5, r5
 8017c54:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8017c58:	f105 0a01 	add.w	sl, r5, #1
 8017c5c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017c60:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017c64:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017c68:	ea4a 0707 	orr.w	r7, sl, r7
 8017c6c:	f106 0a01 	add.w	sl, r6, #1
 8017c70:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017c74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017c78:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017c7c:	ea47 070a 	orr.w	r7, r7, sl
 8017c80:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8017c84:	e7b5      	b.n	8017bf2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8017c86:	b005      	add	sp, #20
 8017c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c8c:	fffff800 	.word	0xfffff800

08017c90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c94:	b087      	sub	sp, #28
 8017c96:	468b      	mov	fp, r1
 8017c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017c9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017c9e:	9204      	str	r2, [sp, #16]
 8017ca0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017ca4:	6861      	ldr	r1, [r4, #4]
 8017ca6:	9205      	str	r2, [sp, #20]
 8017ca8:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017cac:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017cb0:	fb01 2000 	mla	r0, r1, r0, r2
 8017cb4:	6822      	ldr	r2, [r4, #0]
 8017cb6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8017cba:	f8de 2000 	ldr.w	r2, [lr]
 8017cbe:	9201      	str	r2, [sp, #4]
 8017cc0:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017cc4:	9202      	str	r2, [sp, #8]
 8017cc6:	f1bb 0f00 	cmp.w	fp, #0
 8017cca:	dc03      	bgt.n	8017cd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8017ccc:	9a04      	ldr	r2, [sp, #16]
 8017cce:	2a00      	cmp	r2, #0
 8017cd0:	f340 8142 	ble.w	8017f58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8017cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017cd6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017cda:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017cde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017ce0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8017ce4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	dd0e      	ble.n	8017d0a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017cec:	140c      	asrs	r4, r1, #16
 8017cee:	d405      	bmi.n	8017cfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017cf0:	42bc      	cmp	r4, r7
 8017cf2:	da03      	bge.n	8017cfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017cf4:	1414      	asrs	r4, r2, #16
 8017cf6:	d401      	bmi.n	8017cfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017cf8:	42b4      	cmp	r4, r6
 8017cfa:	db07      	blt.n	8017d0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017cfc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017cfe:	3b01      	subs	r3, #1
 8017d00:	3002      	adds	r0, #2
 8017d02:	4421      	add	r1, r4
 8017d04:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017d06:	4422      	add	r2, r4
 8017d08:	e7ee      	b.n	8017ce8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8017d0a:	d019      	beq.n	8017d40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017d0c:	1e5c      	subs	r4, r3, #1
 8017d0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017d10:	fb05 1504 	mla	r5, r5, r4, r1
 8017d14:	142d      	asrs	r5, r5, #16
 8017d16:	d409      	bmi.n	8017d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017d18:	42bd      	cmp	r5, r7
 8017d1a:	da07      	bge.n	8017d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017d1c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017d1e:	fb05 2404 	mla	r4, r5, r4, r2
 8017d22:	1424      	asrs	r4, r4, #16
 8017d24:	d402      	bmi.n	8017d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017d26:	42b4      	cmp	r4, r6
 8017d28:	f2c0 80b1 	blt.w	8017e8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8017d2c:	f04f 0800 	mov.w	r8, #0
 8017d30:	eb03 0408 	add.w	r4, r3, r8
 8017d34:	2c00      	cmp	r4, #0
 8017d36:	dc3e      	bgt.n	8017db6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017d38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017d3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017d40:	f1bb 0f00 	cmp.w	fp, #0
 8017d44:	f340 8108 	ble.w	8017f58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8017d48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017d52:	f1bb 0b01 	subs.w	fp, fp, #1
 8017d56:	eeb0 6a62 	vmov.f32	s12, s5
 8017d5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017d5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017d62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d66:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017d6a:	eeb0 6a43 	vmov.f32	s12, s6
 8017d6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d72:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017d76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017d7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017d7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017d82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017d86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017d8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017d8e:	ee12 2a90 	vmov	r2, s5
 8017d92:	eef0 2a47 	vmov.f32	s5, s14
 8017d96:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d9a:	ee13 2a10 	vmov	r2, s6
 8017d9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8017da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017da2:	eeb0 3a67 	vmov.f32	s6, s15
 8017da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8017daa:	9a04      	ldr	r2, [sp, #16]
 8017dac:	9314      	str	r3, [sp, #80]	; 0x50
 8017dae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017db0:	bf08      	it	eq
 8017db2:	4613      	moveq	r3, r2
 8017db4:	e787      	b.n	8017cc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017db6:	140e      	asrs	r6, r1, #16
 8017db8:	d462      	bmi.n	8017e80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017dba:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017dbe:	42b5      	cmp	r5, r6
 8017dc0:	dd5e      	ble.n	8017e80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017dc2:	1417      	asrs	r7, r2, #16
 8017dc4:	d45c      	bmi.n	8017e80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017dc6:	f8de 400c 	ldr.w	r4, [lr, #12]
 8017dca:	42bc      	cmp	r4, r7
 8017dcc:	dd58      	ble.n	8017e80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017dce:	b22d      	sxth	r5, r5
 8017dd0:	9c02      	ldr	r4, [sp, #8]
 8017dd2:	fb07 6505 	mla	r5, r7, r5, r6
 8017dd6:	5d66      	ldrb	r6, [r4, r5]
 8017dd8:	2e00      	cmp	r6, #0
 8017dda:	d051      	beq.n	8017e80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017ddc:	9c01      	ldr	r4, [sp, #4]
 8017dde:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8017de2:	f06f 0401 	mvn.w	r4, #1
 8017de6:	fb04 f408 	mul.w	r4, r4, r8
 8017dea:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8017dee:	5b05      	ldrh	r5, [r0, r4]
 8017df0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017df4:	9403      	str	r4, [sp, #12]
 8017df6:	9c05      	ldr	r4, [sp, #20]
 8017df8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8017dfc:	4366      	muls	r6, r4
 8017dfe:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017e02:	1c74      	adds	r4, r6, #1
 8017e04:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8017e08:	122e      	asrs	r6, r5, #8
 8017e0a:	1224      	asrs	r4, r4, #8
 8017e0c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017e10:	00ed      	lsls	r5, r5, #3
 8017e12:	b2a7      	uxth	r7, r4
 8017e14:	43e4      	mvns	r4, r4
 8017e16:	b2ed      	uxtb	r5, r5
 8017e18:	b2e4      	uxtb	r4, r4
 8017e1a:	fb16 f604 	smulbb	r6, r6, r4
 8017e1e:	fb15 f504 	smulbb	r5, r5, r4
 8017e22:	fb0c 6c07 	mla	ip, ip, r7, r6
 8017e26:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8017e2a:	fb1a fa04 	smulbb	sl, sl, r4
 8017e2e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8017e32:	fa1f fc8c 	uxth.w	ip, ip
 8017e36:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017e3a:	fa5f f989 	uxtb.w	r9, r9
 8017e3e:	fb06 a607 	mla	r6, r6, r7, sl
 8017e42:	f10c 0401 	add.w	r4, ip, #1
 8017e46:	fb09 5507 	mla	r5, r9, r7, r5
 8017e4a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8017e4e:	9c03      	ldr	r4, [sp, #12]
 8017e50:	b2ad      	uxth	r5, r5
 8017e52:	b2b6      	uxth	r6, r6
 8017e54:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017e58:	f105 0a01 	add.w	sl, r5, #1
 8017e5c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017e60:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017e64:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017e68:	f106 0a01 	add.w	sl, r6, #1
 8017e6c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017e70:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017e74:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017e78:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017e7c:	f820 c004 	strh.w	ip, [r0, r4]
 8017e80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017e82:	f108 38ff 	add.w	r8, r8, #4294967295
 8017e86:	4421      	add	r1, r4
 8017e88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017e8a:	4422      	add	r2, r4
 8017e8c:	e750      	b.n	8017d30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017e8e:	f04f 0900 	mov.w	r9, #0
 8017e92:	eba3 0409 	sub.w	r4, r3, r9
 8017e96:	2c00      	cmp	r4, #0
 8017e98:	f77f af4e 	ble.w	8017d38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017e9c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017ea0:	140d      	asrs	r5, r1, #16
 8017ea2:	1414      	asrs	r4, r2, #16
 8017ea4:	fb06 5404 	mla	r4, r6, r4, r5
 8017ea8:	9d02      	ldr	r5, [sp, #8]
 8017eaa:	5d2e      	ldrb	r6, [r5, r4]
 8017eac:	2e00      	cmp	r6, #0
 8017eae:	d04c      	beq.n	8017f4a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017eb0:	9d01      	ldr	r5, [sp, #4]
 8017eb2:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8017eb6:	9c05      	ldr	r4, [sp, #20]
 8017eb8:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8017ebc:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8017ec0:	4366      	muls	r6, r4
 8017ec2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8017ec6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017eca:	1c74      	adds	r4, r6, #1
 8017ecc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017ed0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8017ed4:	122e      	asrs	r6, r5, #8
 8017ed6:	1224      	asrs	r4, r4, #8
 8017ed8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017edc:	00ed      	lsls	r5, r5, #3
 8017ede:	b2a7      	uxth	r7, r4
 8017ee0:	43e4      	mvns	r4, r4
 8017ee2:	b2ed      	uxtb	r5, r5
 8017ee4:	b2e4      	uxtb	r4, r4
 8017ee6:	fb16 f604 	smulbb	r6, r6, r4
 8017eea:	fb15 f504 	smulbb	r5, r5, r4
 8017eee:	fb0c 6c07 	mla	ip, ip, r7, r6
 8017ef2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8017ef6:	fb1a fa04 	smulbb	sl, sl, r4
 8017efa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017efe:	fa1f fc8c 	uxth.w	ip, ip
 8017f02:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017f06:	fa5f f888 	uxtb.w	r8, r8
 8017f0a:	fb06 a607 	mla	r6, r6, r7, sl
 8017f0e:	f10c 0401 	add.w	r4, ip, #1
 8017f12:	fb08 5507 	mla	r5, r8, r7, r5
 8017f16:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8017f1a:	b2ad      	uxth	r5, r5
 8017f1c:	b2b6      	uxth	r6, r6
 8017f1e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017f22:	f105 0a01 	add.w	sl, r5, #1
 8017f26:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017f2a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017f2e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017f32:	f106 0a01 	add.w	sl, r6, #1
 8017f36:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017f3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017f3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017f42:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017f46:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8017f4a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017f4c:	f109 0901 	add.w	r9, r9, #1
 8017f50:	4421      	add	r1, r4
 8017f52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017f54:	4422      	add	r2, r4
 8017f56:	e79c      	b.n	8017e92 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8017f58:	b007      	add	sp, #28
 8017f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f5e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017f5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f62:	b085      	sub	sp, #20
 8017f64:	468b      	mov	fp, r1
 8017f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017f6a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017f6c:	9203      	str	r2, [sp, #12]
 8017f6e:	6861      	ldr	r1, [r4, #4]
 8017f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017f74:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8017f78:	fb01 2000 	mla	r0, r1, r0, r2
 8017f7c:	6822      	ldr	r2, [r4, #0]
 8017f7e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8017f82:	f8d8 2000 	ldr.w	r2, [r8]
 8017f86:	9200      	str	r2, [sp, #0]
 8017f88:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8017f8c:	9201      	str	r2, [sp, #4]
 8017f8e:	f1bb 0f00 	cmp.w	fp, #0
 8017f92:	dc03      	bgt.n	8017f9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017f94:	9a03      	ldr	r2, [sp, #12]
 8017f96:	2a00      	cmp	r2, #0
 8017f98:	f340 8146 	ble.w	8018228 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f9e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8017fa2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017fa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017fa8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8017fac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	dd0e      	ble.n	8017fd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017fb4:	140c      	asrs	r4, r1, #16
 8017fb6:	d405      	bmi.n	8017fc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017fb8:	42bc      	cmp	r4, r7
 8017fba:	da03      	bge.n	8017fc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017fbc:	1414      	asrs	r4, r2, #16
 8017fbe:	d401      	bmi.n	8017fc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017fc0:	42b4      	cmp	r4, r6
 8017fc2:	db07      	blt.n	8017fd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017fc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017fc6:	3b01      	subs	r3, #1
 8017fc8:	3002      	adds	r0, #2
 8017fca:	4421      	add	r1, r4
 8017fcc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017fce:	4422      	add	r2, r4
 8017fd0:	e7ee      	b.n	8017fb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017fd2:	d017      	beq.n	8018004 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017fd4:	1e5c      	subs	r4, r3, #1
 8017fd6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017fd8:	fb05 1504 	mla	r5, r5, r4, r1
 8017fdc:	142d      	asrs	r5, r5, #16
 8017fde:	d409      	bmi.n	8017ff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017fe0:	42bd      	cmp	r5, r7
 8017fe2:	da07      	bge.n	8017ff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017fe4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017fe6:	fb05 2404 	mla	r4, r5, r4, r2
 8017fea:	1424      	asrs	r4, r4, #16
 8017fec:	d402      	bmi.n	8017ff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017fee:	42b4      	cmp	r4, r6
 8017ff0:	f2c0 80b3 	blt.w	801815a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8017ff4:	2600      	movs	r6, #0
 8017ff6:	199c      	adds	r4, r3, r6
 8017ff8:	2c00      	cmp	r4, #0
 8017ffa:	dc3e      	bgt.n	801807a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017ffc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018000:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018004:	f1bb 0f00 	cmp.w	fp, #0
 8018008:	f340 810e 	ble.w	8018228 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801800c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018012:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018016:	f1bb 0b01 	subs.w	fp, fp, #1
 801801a:	eeb0 6a62 	vmov.f32	s12, s5
 801801e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018022:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018026:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801802a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801802e:	eeb0 6a43 	vmov.f32	s12, s6
 8018032:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018036:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801803a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801803e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018042:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018046:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801804a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801804e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018052:	ee12 2a90 	vmov	r2, s5
 8018056:	eef0 2a47 	vmov.f32	s5, s14
 801805a:	fb92 f3f3 	sdiv	r3, r2, r3
 801805e:	ee13 2a10 	vmov	r2, s6
 8018062:	9311      	str	r3, [sp, #68]	; 0x44
 8018064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018066:	eeb0 3a67 	vmov.f32	s6, s15
 801806a:	fb92 f3f3 	sdiv	r3, r2, r3
 801806e:	9a03      	ldr	r2, [sp, #12]
 8018070:	9312      	str	r3, [sp, #72]	; 0x48
 8018072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018074:	bf08      	it	eq
 8018076:	4613      	moveq	r3, r2
 8018078:	e789      	b.n	8017f8e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801807a:	140f      	asrs	r7, r1, #16
 801807c:	d418      	bmi.n	80180b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801807e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018082:	42bd      	cmp	r5, r7
 8018084:	dd14      	ble.n	80180b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018086:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801808a:	d411      	bmi.n	80180b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801808c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8018090:	4564      	cmp	r4, ip
 8018092:	dd0d      	ble.n	80180b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018094:	b22d      	sxth	r5, r5
 8018096:	9c01      	ldr	r4, [sp, #4]
 8018098:	fb0c 7505 	mla	r5, ip, r5, r7
 801809c:	5d64      	ldrb	r4, [r4, r5]
 801809e:	2cff      	cmp	r4, #255	; 0xff
 80180a0:	d10c      	bne.n	80180bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80180a2:	9c00      	ldr	r4, [sp, #0]
 80180a4:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80180a8:	f06f 0401 	mvn.w	r4, #1
 80180ac:	4374      	muls	r4, r6
 80180ae:	5305      	strh	r5, [r0, r4]
 80180b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80180b2:	3e01      	subs	r6, #1
 80180b4:	4421      	add	r1, r4
 80180b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80180b8:	4422      	add	r2, r4
 80180ba:	e79c      	b.n	8017ff6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80180bc:	2c00      	cmp	r4, #0
 80180be:	d0f7      	beq.n	80180b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80180c0:	9f00      	ldr	r7, [sp, #0]
 80180c2:	fa1f fc84 	uxth.w	ip, r4
 80180c6:	43e4      	mvns	r4, r4
 80180c8:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80180cc:	f06f 0501 	mvn.w	r5, #1
 80180d0:	b2e4      	uxtb	r4, r4
 80180d2:	4375      	muls	r5, r6
 80180d4:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80180d8:	9502      	str	r5, [sp, #8]
 80180da:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80180de:	5b45      	ldrh	r5, [r0, r5]
 80180e0:	122f      	asrs	r7, r5, #8
 80180e2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80180e6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80180ea:	00ed      	lsls	r5, r5, #3
 80180ec:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80180f0:	fb17 f704 	smulbb	r7, r7, r4
 80180f4:	b2ed      	uxtb	r5, r5
 80180f6:	fb1a fa04 	smulbb	sl, sl, r4
 80180fa:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80180fe:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8018102:	fb15 f504 	smulbb	r5, r5, r4
 8018106:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801810a:	fa1f fe8e 	uxth.w	lr, lr
 801810e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018112:	fa5f f989 	uxtb.w	r9, r9
 8018116:	fb07 a70c 	mla	r7, r7, ip, sl
 801811a:	f10e 0401 	add.w	r4, lr, #1
 801811e:	fb09 550c 	mla	r5, r9, ip, r5
 8018122:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8018126:	9c02      	ldr	r4, [sp, #8]
 8018128:	b2ad      	uxth	r5, r5
 801812a:	b2bf      	uxth	r7, r7
 801812c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018130:	f105 0a01 	add.w	sl, r5, #1
 8018134:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018138:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801813c:	ea4a 0e0e 	orr.w	lr, sl, lr
 8018140:	f107 0a01 	add.w	sl, r7, #1
 8018144:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018148:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801814c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018150:	ea4e 0e0a 	orr.w	lr, lr, sl
 8018154:	f820 e004 	strh.w	lr, [r0, r4]
 8018158:	e7aa      	b.n	80180b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801815a:	f04f 0900 	mov.w	r9, #0
 801815e:	eba3 0409 	sub.w	r4, r3, r9
 8018162:	2c00      	cmp	r4, #0
 8018164:	f77f af4a 	ble.w	8017ffc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018168:	1414      	asrs	r4, r2, #16
 801816a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801816e:	140d      	asrs	r5, r1, #16
 8018170:	fb06 5504 	mla	r5, r6, r4, r5
 8018174:	9c01      	ldr	r4, [sp, #4]
 8018176:	5d64      	ldrb	r4, [r4, r5]
 8018178:	2cff      	cmp	r4, #255	; 0xff
 801817a:	d10b      	bne.n	8018194 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801817c:	9c00      	ldr	r4, [sp, #0]
 801817e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8018182:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8018186:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018188:	f109 0901 	add.w	r9, r9, #1
 801818c:	4421      	add	r1, r4
 801818e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018190:	4422      	add	r2, r4
 8018192:	e7e4      	b.n	801815e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8018194:	2c00      	cmp	r4, #0
 8018196:	d0f6      	beq.n	8018186 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018198:	9e00      	ldr	r6, [sp, #0]
 801819a:	b2a7      	uxth	r7, r4
 801819c:	43e4      	mvns	r4, r4
 801819e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80181a2:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80181a6:	b2e4      	uxtb	r4, r4
 80181a8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80181ac:	122e      	asrs	r6, r5, #8
 80181ae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80181b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80181b6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80181ba:	00ed      	lsls	r5, r5, #3
 80181bc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80181c0:	fb16 f604 	smulbb	r6, r6, r4
 80181c4:	b2ed      	uxtb	r5, r5
 80181c6:	fb1a fa04 	smulbb	sl, sl, r4
 80181ca:	fb0c 6c07 	mla	ip, ip, r7, r6
 80181ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80181d2:	fb15 f504 	smulbb	r5, r5, r4
 80181d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80181da:	fa1f fc8c 	uxth.w	ip, ip
 80181de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80181e2:	fa5f fe8e 	uxtb.w	lr, lr
 80181e6:	fb06 a607 	mla	r6, r6, r7, sl
 80181ea:	f10c 0401 	add.w	r4, ip, #1
 80181ee:	fb0e 5507 	mla	r5, lr, r7, r5
 80181f2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80181f6:	b2ad      	uxth	r5, r5
 80181f8:	b2b6      	uxth	r6, r6
 80181fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80181fe:	f105 0a01 	add.w	sl, r5, #1
 8018202:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018206:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801820a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801820e:	f106 0a01 	add.w	sl, r6, #1
 8018212:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018216:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801821a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801821e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018222:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018226:	e7ae      	b.n	8018186 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018228:	b005      	add	sp, #20
 801822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801822e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801822e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018232:	b085      	sub	sp, #20
 8018234:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018236:	9203      	str	r2, [sp, #12]
 8018238:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801823c:	9100      	str	r1, [sp, #0]
 801823e:	9201      	str	r2, [sp, #4]
 8018240:	6841      	ldr	r1, [r0, #4]
 8018242:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8018246:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801824a:	fb01 2404 	mla	r4, r1, r4, r2
 801824e:	6802      	ldr	r2, [r0, #0]
 8018250:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018254:	f8de 2000 	ldr.w	r2, [lr]
 8018258:	9202      	str	r2, [sp, #8]
 801825a:	9a01      	ldr	r2, [sp, #4]
 801825c:	43d6      	mvns	r6, r2
 801825e:	b2f6      	uxtb	r6, r6
 8018260:	9a00      	ldr	r2, [sp, #0]
 8018262:	2a00      	cmp	r2, #0
 8018264:	dc03      	bgt.n	801826e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018266:	9a03      	ldr	r2, [sp, #12]
 8018268:	2a00      	cmp	r2, #0
 801826a:	f340 8124 	ble.w	80184b6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801826e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018270:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8018274:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018278:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801827a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801827e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018282:	2b00      	cmp	r3, #0
 8018284:	dd0e      	ble.n	80182a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018286:	1408      	asrs	r0, r1, #16
 8018288:	d405      	bmi.n	8018296 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801828a:	4560      	cmp	r0, ip
 801828c:	da03      	bge.n	8018296 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801828e:	1410      	asrs	r0, r2, #16
 8018290:	d401      	bmi.n	8018296 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018292:	42b8      	cmp	r0, r7
 8018294:	db07      	blt.n	80182a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018296:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018298:	3b01      	subs	r3, #1
 801829a:	3402      	adds	r4, #2
 801829c:	4401      	add	r1, r0
 801829e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80182a0:	4402      	add	r2, r0
 80182a2:	e7ee      	b.n	8018282 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80182a4:	d06e      	beq.n	8018384 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80182a6:	1e58      	subs	r0, r3, #1
 80182a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80182aa:	fb05 1500 	mla	r5, r5, r0, r1
 80182ae:	142d      	asrs	r5, r5, #16
 80182b0:	d45c      	bmi.n	801836c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80182b2:	4565      	cmp	r5, ip
 80182b4:	da5a      	bge.n	801836c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80182b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80182b8:	fb05 2000 	mla	r0, r5, r0, r2
 80182bc:	1400      	asrs	r0, r0, #16
 80182be:	d455      	bmi.n	801836c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80182c0:	42b8      	cmp	r0, r7
 80182c2:	da53      	bge.n	801836c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80182c4:	4699      	mov	r9, r3
 80182c6:	46a2      	mov	sl, r4
 80182c8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80182cc:	f1b9 0f00 	cmp.w	r9, #0
 80182d0:	dd54      	ble.n	801837c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80182d2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80182d6:	140d      	asrs	r5, r1, #16
 80182d8:	1410      	asrs	r0, r2, #16
 80182da:	f109 39ff 	add.w	r9, r9, #4294967295
 80182de:	fb07 5000 	mla	r0, r7, r0, r5
 80182e2:	9d02      	ldr	r5, [sp, #8]
 80182e4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80182e8:	f8ba 5000 	ldrh.w	r5, [sl]
 80182ec:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80182f0:	122f      	asrs	r7, r5, #8
 80182f2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80182f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80182fa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80182fe:	00ed      	lsls	r5, r5, #3
 8018300:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8018304:	fb17 f706 	smulbb	r7, r7, r6
 8018308:	b2ed      	uxtb	r5, r5
 801830a:	fb18 f806 	smulbb	r8, r8, r6
 801830e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8018312:	10c7      	asrs	r7, r0, #3
 8018314:	fb15 f506 	smulbb	r5, r5, r6
 8018318:	00c0      	lsls	r0, r0, #3
 801831a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801831e:	fa1f fc8c 	uxth.w	ip, ip
 8018322:	b2c0      	uxtb	r0, r0
 8018324:	fb07 870b 	mla	r7, r7, fp, r8
 8018328:	fb00 500b 	mla	r0, r0, fp, r5
 801832c:	f10c 0501 	add.w	r5, ip, #1
 8018330:	b2bf      	uxth	r7, r7
 8018332:	b280      	uxth	r0, r0
 8018334:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018338:	f107 0801 	add.w	r8, r7, #1
 801833c:	1c45      	adds	r5, r0, #1
 801833e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8018342:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018346:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801834a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801834c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018350:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018354:	4401      	add	r1, r0
 8018356:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801835a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801835c:	ea45 0c0c 	orr.w	ip, r5, ip
 8018360:	4402      	add	r2, r0
 8018362:	ea4c 0c08 	orr.w	ip, ip, r8
 8018366:	f82a cb02 	strh.w	ip, [sl], #2
 801836a:	e7af      	b.n	80182cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801836c:	f04f 0800 	mov.w	r8, #0
 8018370:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8018374:	eb03 0008 	add.w	r0, r3, r8
 8018378:	2800      	cmp	r0, #0
 801837a:	dc41      	bgt.n	8018400 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801837c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018380:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018384:	9b00      	ldr	r3, [sp, #0]
 8018386:	2b00      	cmp	r3, #0
 8018388:	f340 8095 	ble.w	80184b6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801838c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018392:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018396:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801839a:	eef0 6a62 	vmov.f32	s13, s5
 801839e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80183a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80183a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80183aa:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80183ae:	eef0 6a43 	vmov.f32	s13, s6
 80183b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80183b6:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80183ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80183be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80183c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80183c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80183ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80183ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80183d2:	ee12 2a90 	vmov	r2, s5
 80183d6:	eef0 2a47 	vmov.f32	s5, s14
 80183da:	fb92 f3f3 	sdiv	r3, r2, r3
 80183de:	ee13 2a10 	vmov	r2, s6
 80183e2:	9311      	str	r3, [sp, #68]	; 0x44
 80183e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183e6:	eeb0 3a67 	vmov.f32	s6, s15
 80183ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80183ee:	9312      	str	r3, [sp, #72]	; 0x48
 80183f0:	9b00      	ldr	r3, [sp, #0]
 80183f2:	9a03      	ldr	r2, [sp, #12]
 80183f4:	3b01      	subs	r3, #1
 80183f6:	9300      	str	r3, [sp, #0]
 80183f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183fa:	bf08      	it	eq
 80183fc:	4613      	moveq	r3, r2
 80183fe:	e72f      	b.n	8018260 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8018400:	140f      	asrs	r7, r1, #16
 8018402:	d451      	bmi.n	80184a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018404:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018408:	42bd      	cmp	r5, r7
 801840a:	dd4d      	ble.n	80184a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801840c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018410:	d44a      	bmi.n	80184a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018412:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018416:	4560      	cmp	r0, ip
 8018418:	dd46      	ble.n	80184a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801841a:	b22d      	sxth	r5, r5
 801841c:	9802      	ldr	r0, [sp, #8]
 801841e:	fb0c 7505 	mla	r5, ip, r5, r7
 8018422:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8018426:	f06f 0501 	mvn.w	r5, #1
 801842a:	fb05 fb08 	mul.w	fp, r5, r8
 801842e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018432:	f834 500b 	ldrh.w	r5, [r4, fp]
 8018436:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801843a:	122f      	asrs	r7, r5, #8
 801843c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8018440:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018444:	00ed      	lsls	r5, r5, #3
 8018446:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801844a:	fb17 f706 	smulbb	r7, r7, r6
 801844e:	b2ed      	uxtb	r5, r5
 8018450:	fb19 f906 	smulbb	r9, r9, r6
 8018454:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8018458:	10c7      	asrs	r7, r0, #3
 801845a:	fb15 f506 	smulbb	r5, r5, r6
 801845e:	00c0      	lsls	r0, r0, #3
 8018460:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018464:	fa1f fc8c 	uxth.w	ip, ip
 8018468:	b2c0      	uxtb	r0, r0
 801846a:	fb07 970a 	mla	r7, r7, sl, r9
 801846e:	fb00 500a 	mla	r0, r0, sl, r5
 8018472:	f10c 0501 	add.w	r5, ip, #1
 8018476:	b2bf      	uxth	r7, r7
 8018478:	b280      	uxth	r0, r0
 801847a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801847e:	f107 0901 	add.w	r9, r7, #1
 8018482:	1c45      	adds	r5, r0, #1
 8018484:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8018488:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801848c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8018490:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018494:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018498:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801849c:	ea45 0c0c 	orr.w	ip, r5, ip
 80184a0:	ea4c 0c09 	orr.w	ip, ip, r9
 80184a4:	f824 c00b 	strh.w	ip, [r4, fp]
 80184a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80184aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80184ae:	4401      	add	r1, r0
 80184b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80184b2:	4402      	add	r2, r0
 80184b4:	e75e      	b.n	8018374 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80184b6:	b005      	add	sp, #20
 80184b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080184bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80184bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c0:	b085      	sub	sp, #20
 80184c2:	4693      	mov	fp, r2
 80184c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80184c8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80184ca:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80184cc:	6870      	ldr	r0, [r6, #4]
 80184ce:	9101      	str	r1, [sp, #4]
 80184d0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80184d4:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80184d8:	fb00 2404 	mla	r4, r0, r4, r2
 80184dc:	6832      	ldr	r2, [r6, #0]
 80184de:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80184e2:	682a      	ldr	r2, [r5, #0]
 80184e4:	9202      	str	r2, [sp, #8]
 80184e6:	9a01      	ldr	r2, [sp, #4]
 80184e8:	2a00      	cmp	r2, #0
 80184ea:	dc03      	bgt.n	80184f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80184ec:	f1bb 0f00 	cmp.w	fp, #0
 80184f0:	f340 809a 	ble.w	8018628 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80184f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80184f6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80184fa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80184fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018500:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018504:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018508:	2b00      	cmp	r3, #0
 801850a:	dd0c      	ble.n	8018526 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801850c:	1406      	asrs	r6, r0, #16
 801850e:	d405      	bmi.n	801851c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018510:	454e      	cmp	r6, r9
 8018512:	da03      	bge.n	801851c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018514:	1416      	asrs	r6, r2, #16
 8018516:	d401      	bmi.n	801851c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018518:	4546      	cmp	r6, r8
 801851a:	db05      	blt.n	8018528 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801851c:	4470      	add	r0, lr
 801851e:	4462      	add	r2, ip
 8018520:	3b01      	subs	r3, #1
 8018522:	3402      	adds	r4, #2
 8018524:	e7f0      	b.n	8018508 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018526:	d00f      	beq.n	8018548 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018528:	1e5e      	subs	r6, r3, #1
 801852a:	fb0e 0706 	mla	r7, lr, r6, r0
 801852e:	143f      	asrs	r7, r7, #16
 8018530:	d541      	bpl.n	80185b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8018532:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8018536:	4698      	mov	r8, r3
 8018538:	9603      	str	r6, [sp, #12]
 801853a:	f1b8 0f00 	cmp.w	r8, #0
 801853e:	dc56      	bgt.n	80185ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8018540:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018544:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018548:	9b01      	ldr	r3, [sp, #4]
 801854a:	2b00      	cmp	r3, #0
 801854c:	dd6c      	ble.n	8018628 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801854e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018554:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018558:	eeb0 6a62 	vmov.f32	s12, s5
 801855c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018560:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018564:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018568:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801856c:	eeb0 6a43 	vmov.f32	s12, s6
 8018570:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018574:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018578:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801857c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018580:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018584:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018588:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801858c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018590:	ee12 2a90 	vmov	r2, s5
 8018594:	eef0 2a47 	vmov.f32	s5, s14
 8018598:	fb92 fef3 	sdiv	lr, r2, r3
 801859c:	ee13 2a10 	vmov	r2, s6
 80185a0:	eeb0 3a67 	vmov.f32	s6, s15
 80185a4:	fb92 fcf3 	sdiv	ip, r2, r3
 80185a8:	9b01      	ldr	r3, [sp, #4]
 80185aa:	3b01      	subs	r3, #1
 80185ac:	9301      	str	r3, [sp, #4]
 80185ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185b0:	bf08      	it	eq
 80185b2:	465b      	moveq	r3, fp
 80185b4:	e797      	b.n	80184e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80185b6:	454f      	cmp	r7, r9
 80185b8:	dabb      	bge.n	8018532 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80185ba:	fb0c 2606 	mla	r6, ip, r6, r2
 80185be:	1436      	asrs	r6, r6, #16
 80185c0:	d4b7      	bmi.n	8018532 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80185c2:	4546      	cmp	r6, r8
 80185c4:	dab5      	bge.n	8018532 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80185c6:	461e      	mov	r6, r3
 80185c8:	46a0      	mov	r8, r4
 80185ca:	2e00      	cmp	r6, #0
 80185cc:	ddb8      	ble.n	8018540 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80185ce:	1417      	asrs	r7, r2, #16
 80185d0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80185d4:	ea4f 4920 	mov.w	r9, r0, asr #16
 80185d8:	9902      	ldr	r1, [sp, #8]
 80185da:	4470      	add	r0, lr
 80185dc:	4462      	add	r2, ip
 80185de:	fb0a 9707 	mla	r7, sl, r7, r9
 80185e2:	3e01      	subs	r6, #1
 80185e4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80185e8:	f828 7b02 	strh.w	r7, [r8], #2
 80185ec:	e7ed      	b.n	80185ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80185ee:	ea5f 4920 	movs.w	r9, r0, asr #16
 80185f2:	d414      	bmi.n	801861e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80185f4:	68ae      	ldr	r6, [r5, #8]
 80185f6:	454e      	cmp	r6, r9
 80185f8:	dd11      	ble.n	801861e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80185fa:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80185fe:	d40e      	bmi.n	801861e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018600:	68ef      	ldr	r7, [r5, #12]
 8018602:	4557      	cmp	r7, sl
 8018604:	dd0b      	ble.n	801861e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018606:	b236      	sxth	r6, r6
 8018608:	f06f 0101 	mvn.w	r1, #1
 801860c:	9f02      	ldr	r7, [sp, #8]
 801860e:	fb0a 9606 	mla	r6, sl, r6, r9
 8018612:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8018616:	fb01 f608 	mul.w	r6, r1, r8
 801861a:	9903      	ldr	r1, [sp, #12]
 801861c:	538f      	strh	r7, [r1, r6]
 801861e:	4470      	add	r0, lr
 8018620:	4462      	add	r2, ip
 8018622:	f108 38ff 	add.w	r8, r8, #4294967295
 8018626:	e788      	b.n	801853a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018628:	b005      	add	sp, #20
 801862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801862e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801862e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018632:	b087      	sub	sp, #28
 8018634:	468b      	mov	fp, r1
 8018636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801863a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801863c:	9203      	str	r2, [sp, #12]
 801863e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018642:	6841      	ldr	r1, [r0, #4]
 8018644:	9204      	str	r2, [sp, #16]
 8018646:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801864a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801864e:	fb01 2505 	mla	r5, r1, r5, r2
 8018652:	6802      	ldr	r2, [r0, #0]
 8018654:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8018658:	f8d9 2000 	ldr.w	r2, [r9]
 801865c:	9201      	str	r2, [sp, #4]
 801865e:	f1bb 0f00 	cmp.w	fp, #0
 8018662:	dc03      	bgt.n	801866c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018664:	9a03      	ldr	r2, [sp, #12]
 8018666:	2a00      	cmp	r2, #0
 8018668:	f340 8158 	ble.w	801891c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801866c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801866e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8018672:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018676:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018678:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801867c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018680:	2b00      	cmp	r3, #0
 8018682:	dd0e      	ble.n	80186a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018684:	1402      	asrs	r2, r0, #16
 8018686:	d405      	bmi.n	8018694 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018688:	42ba      	cmp	r2, r7
 801868a:	da03      	bge.n	8018694 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801868c:	140a      	asrs	r2, r1, #16
 801868e:	d401      	bmi.n	8018694 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018690:	42b2      	cmp	r2, r6
 8018692:	db07      	blt.n	80186a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018694:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018696:	3b01      	subs	r3, #1
 8018698:	3502      	adds	r5, #2
 801869a:	4410      	add	r0, r2
 801869c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801869e:	4411      	add	r1, r2
 80186a0:	e7ee      	b.n	8018680 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80186a2:	d017      	beq.n	80186d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80186a4:	1e5a      	subs	r2, r3, #1
 80186a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80186a8:	fb04 0402 	mla	r4, r4, r2, r0
 80186ac:	1424      	asrs	r4, r4, #16
 80186ae:	d409      	bmi.n	80186c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80186b0:	42bc      	cmp	r4, r7
 80186b2:	da07      	bge.n	80186c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80186b4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80186b6:	fb04 1202 	mla	r2, r4, r2, r1
 80186ba:	1412      	asrs	r2, r2, #16
 80186bc:	d402      	bmi.n	80186c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80186be:	42b2      	cmp	r2, r6
 80186c0:	f2c0 80bf 	blt.w	8018842 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80186c4:	2700      	movs	r7, #0
 80186c6:	19da      	adds	r2, r3, r7
 80186c8:	2a00      	cmp	r2, #0
 80186ca:	dc3e      	bgt.n	801874a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80186cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80186d0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80186d4:	f1bb 0f00 	cmp.w	fp, #0
 80186d8:	f340 8120 	ble.w	801891c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80186dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80186e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80186e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80186e6:	f1bb 0b01 	subs.w	fp, fp, #1
 80186ea:	eeb0 6a62 	vmov.f32	s12, s5
 80186ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80186f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80186f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186fa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80186fe:	eeb0 6a43 	vmov.f32	s12, s6
 8018702:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018706:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801870a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801870e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018712:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018716:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801871a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801871e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018722:	ee12 2a90 	vmov	r2, s5
 8018726:	eef0 2a47 	vmov.f32	s5, s14
 801872a:	fb92 f3f3 	sdiv	r3, r2, r3
 801872e:	ee13 2a10 	vmov	r2, s6
 8018732:	9313      	str	r3, [sp, #76]	; 0x4c
 8018734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018736:	eeb0 3a67 	vmov.f32	s6, s15
 801873a:	fb92 f3f3 	sdiv	r3, r2, r3
 801873e:	9a03      	ldr	r2, [sp, #12]
 8018740:	9314      	str	r3, [sp, #80]	; 0x50
 8018742:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018744:	bf08      	it	eq
 8018746:	4613      	moveq	r3, r2
 8018748:	e789      	b.n	801865e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801874a:	1406      	asrs	r6, r0, #16
 801874c:	d42d      	bmi.n	80187aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801874e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8018752:	42b4      	cmp	r4, r6
 8018754:	dd29      	ble.n	80187aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018756:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801875a:	d426      	bmi.n	80187aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801875c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018760:	4562      	cmp	r2, ip
 8018762:	dd22      	ble.n	80187aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018764:	b224      	sxth	r4, r4
 8018766:	9a01      	ldr	r2, [sp, #4]
 8018768:	fb0c 6404 	mla	r4, ip, r4, r6
 801876c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8018770:	0e22      	lsrs	r2, r4, #24
 8018772:	d01a      	beq.n	80187aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018774:	9e04      	ldr	r6, [sp, #16]
 8018776:	4372      	muls	r2, r6
 8018778:	1c56      	adds	r6, r2, #1
 801877a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801877e:	0a26      	lsrs	r6, r4, #8
 8018780:	1212      	asrs	r2, r2, #8
 8018782:	9605      	str	r6, [sp, #20]
 8018784:	2aff      	cmp	r2, #255	; 0xff
 8018786:	d116      	bne.n	80187b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8018788:	f06f 0201 	mvn.w	r2, #1
 801878c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018790:	fb02 fc07 	mul.w	ip, r2, r7
 8018794:	0962      	lsrs	r2, r4, #5
 8018796:	f026 0607 	bic.w	r6, r6, #7
 801879a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801879e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80187a2:	4316      	orrs	r6, r2
 80187a4:	4326      	orrs	r6, r4
 80187a6:	f825 600c 	strh.w	r6, [r5, ip]
 80187aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80187ac:	3f01      	subs	r7, #1
 80187ae:	4410      	add	r0, r2
 80187b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80187b2:	4411      	add	r1, r2
 80187b4:	e787      	b.n	80186c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80187b6:	f06f 0601 	mvn.w	r6, #1
 80187ba:	fa1f fa82 	uxth.w	sl, r2
 80187be:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80187c2:	43d2      	mvns	r2, r2
 80187c4:	437e      	muls	r6, r7
 80187c6:	b2e4      	uxtb	r4, r4
 80187c8:	fb1c fc0a 	smulbb	ip, ip, sl
 80187cc:	b2d2      	uxtb	r2, r2
 80187ce:	f835 8006 	ldrh.w	r8, [r5, r6]
 80187d2:	fb14 f40a 	smulbb	r4, r4, sl
 80187d6:	9602      	str	r6, [sp, #8]
 80187d8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80187dc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80187e0:	fb16 f60a 	smulbb	r6, r6, sl
 80187e4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80187e8:	fb0e ce02 	mla	lr, lr, r2, ip
 80187ec:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80187f0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80187f4:	fa1f fe8e 	uxth.w	lr, lr
 80187f8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80187fc:	fa5f f888 	uxtb.w	r8, r8
 8018800:	fb0c 6c02 	mla	ip, ip, r2, r6
 8018804:	fb08 4402 	mla	r4, r8, r2, r4
 8018808:	f10e 0201 	add.w	r2, lr, #1
 801880c:	fa1f fc8c 	uxth.w	ip, ip
 8018810:	b2a4      	uxth	r4, r4
 8018812:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8018816:	9a02      	ldr	r2, [sp, #8]
 8018818:	1c66      	adds	r6, r4, #1
 801881a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801881e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8018822:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018826:	ea46 0e0e 	orr.w	lr, r6, lr
 801882a:	f10c 0601 	add.w	r6, ip, #1
 801882e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8018832:	0976      	lsrs	r6, r6, #5
 8018834:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018838:	ea4e 0e06 	orr.w	lr, lr, r6
 801883c:	f825 e002 	strh.w	lr, [r5, r2]
 8018840:	e7b3      	b.n	80187aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018842:	f04f 0800 	mov.w	r8, #0
 8018846:	eba3 0208 	sub.w	r2, r3, r8
 801884a:	2a00      	cmp	r2, #0
 801884c:	f77f af3e 	ble.w	80186cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018850:	1404      	asrs	r4, r0, #16
 8018852:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8018856:	140a      	asrs	r2, r1, #16
 8018858:	fb06 4202 	mla	r2, r6, r2, r4
 801885c:	9c01      	ldr	r4, [sp, #4]
 801885e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8018862:	0e22      	lsrs	r2, r4, #24
 8018864:	d015      	beq.n	8018892 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8018866:	9e04      	ldr	r6, [sp, #16]
 8018868:	4372      	muls	r2, r6
 801886a:	1c56      	adds	r6, r2, #1
 801886c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018870:	0a26      	lsrs	r6, r4, #8
 8018872:	1212      	asrs	r2, r2, #8
 8018874:	2aff      	cmp	r2, #255	; 0xff
 8018876:	d113      	bne.n	80188a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8018878:	0962      	lsrs	r2, r4, #5
 801887a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801887e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018882:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018886:	f026 0607 	bic.w	r6, r6, #7
 801888a:	4316      	orrs	r6, r2
 801888c:	4326      	orrs	r6, r4
 801888e:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8018892:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018894:	f108 0801 	add.w	r8, r8, #1
 8018898:	4410      	add	r0, r2
 801889a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801889c:	4411      	add	r1, r2
 801889e:	e7d2      	b.n	8018846 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80188a0:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80188a4:	fa1f fa82 	uxth.w	sl, r2
 80188a8:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80188ac:	43d2      	mvns	r2, r2
 80188ae:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80188b2:	fb17 f70a 	smulbb	r7, r7, sl
 80188b6:	b2d2      	uxtb	r2, r2
 80188b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80188bc:	b2e4      	uxtb	r4, r4
 80188be:	b2f6      	uxtb	r6, r6
 80188c0:	fb0c 7c02 	mla	ip, ip, r2, r7
 80188c4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80188c8:	fb14 f40a 	smulbb	r4, r4, sl
 80188cc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80188d0:	fa1f fc8c 	uxth.w	ip, ip
 80188d4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80188d8:	fb16 f60a 	smulbb	r6, r6, sl
 80188dc:	fa5f fe8e 	uxtb.w	lr, lr
 80188e0:	fb0e 4402 	mla	r4, lr, r2, r4
 80188e4:	fb07 6702 	mla	r7, r7, r2, r6
 80188e8:	f10c 0201 	add.w	r2, ip, #1
 80188ec:	b2a4      	uxth	r4, r4
 80188ee:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80188f2:	1c66      	adds	r6, r4, #1
 80188f4:	b2bf      	uxth	r7, r7
 80188f6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80188fa:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80188fe:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018902:	ea46 0c0c 	orr.w	ip, r6, ip
 8018906:	1c7e      	adds	r6, r7, #1
 8018908:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801890c:	0976      	lsrs	r6, r6, #5
 801890e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018912:	ea4c 0c06 	orr.w	ip, ip, r6
 8018916:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801891a:	e7ba      	b.n	8018892 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801891c:	b007      	add	sp, #28
 801891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018928:	b085      	sub	sp, #20
 801892a:	468b      	mov	fp, r1
 801892c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018930:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018932:	9203      	str	r2, [sp, #12]
 8018934:	6841      	ldr	r1, [r0, #4]
 8018936:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801893a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801893e:	fb01 2404 	mla	r4, r1, r4, r2
 8018942:	6802      	ldr	r2, [r0, #0]
 8018944:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018948:	f8d8 2000 	ldr.w	r2, [r8]
 801894c:	9201      	str	r2, [sp, #4]
 801894e:	f1bb 0f00 	cmp.w	fp, #0
 8018952:	dc03      	bgt.n	801895c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018954:	9a03      	ldr	r2, [sp, #12]
 8018956:	2a00      	cmp	r2, #0
 8018958:	f340 814f 	ble.w	8018bfa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801895c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801895e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018962:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018966:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018968:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801896c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018970:	2b00      	cmp	r3, #0
 8018972:	dd0e      	ble.n	8018992 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018974:	1408      	asrs	r0, r1, #16
 8018976:	d405      	bmi.n	8018984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018978:	42b8      	cmp	r0, r7
 801897a:	da03      	bge.n	8018984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801897c:	1410      	asrs	r0, r2, #16
 801897e:	d401      	bmi.n	8018984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018980:	42b0      	cmp	r0, r6
 8018982:	db07      	blt.n	8018994 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018984:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018986:	3b01      	subs	r3, #1
 8018988:	3402      	adds	r4, #2
 801898a:	4401      	add	r1, r0
 801898c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801898e:	4402      	add	r2, r0
 8018990:	e7ee      	b.n	8018970 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018992:	d017      	beq.n	80189c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018994:	1e58      	subs	r0, r3, #1
 8018996:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018998:	fb05 1500 	mla	r5, r5, r0, r1
 801899c:	142d      	asrs	r5, r5, #16
 801899e:	d409      	bmi.n	80189b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80189a0:	42bd      	cmp	r5, r7
 80189a2:	da07      	bge.n	80189b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80189a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80189a6:	fb05 2000 	mla	r0, r5, r0, r2
 80189aa:	1400      	asrs	r0, r0, #16
 80189ac:	d402      	bmi.n	80189b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80189ae:	42b0      	cmp	r0, r6
 80189b0:	f2c0 80ba 	blt.w	8018b28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80189b4:	2600      	movs	r6, #0
 80189b6:	1998      	adds	r0, r3, r6
 80189b8:	2800      	cmp	r0, #0
 80189ba:	dc3e      	bgt.n	8018a3a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80189bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80189c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80189c4:	f1bb 0f00 	cmp.w	fp, #0
 80189c8:	f340 8117 	ble.w	8018bfa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80189cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80189d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80189d6:	f1bb 0b01 	subs.w	fp, fp, #1
 80189da:	eeb0 6a62 	vmov.f32	s12, s5
 80189de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80189e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80189e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80189ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80189ee:	eeb0 6a43 	vmov.f32	s12, s6
 80189f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80189f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80189fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80189fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a02:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018a06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018a0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018a0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018a12:	ee12 2a90 	vmov	r2, s5
 8018a16:	eef0 2a47 	vmov.f32	s5, s14
 8018a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a1e:	ee13 2a10 	vmov	r2, s6
 8018a22:	9311      	str	r3, [sp, #68]	; 0x44
 8018a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a26:	eeb0 3a67 	vmov.f32	s6, s15
 8018a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a2e:	9a03      	ldr	r2, [sp, #12]
 8018a30:	9312      	str	r3, [sp, #72]	; 0x48
 8018a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a34:	bf08      	it	eq
 8018a36:	4613      	moveq	r3, r2
 8018a38:	e789      	b.n	801894e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8018a3a:	140f      	asrs	r7, r1, #16
 8018a3c:	d424      	bmi.n	8018a88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a3e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018a42:	42bd      	cmp	r5, r7
 8018a44:	dd20      	ble.n	8018a88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a46:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018a4a:	d41d      	bmi.n	8018a88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a4c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8018a50:	4560      	cmp	r0, ip
 8018a52:	dd19      	ble.n	8018a88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a54:	b22d      	sxth	r5, r5
 8018a56:	9801      	ldr	r0, [sp, #4]
 8018a58:	fb0c 7505 	mla	r5, ip, r5, r7
 8018a5c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018a60:	0e07      	lsrs	r7, r0, #24
 8018a62:	2fff      	cmp	r7, #255	; 0xff
 8018a64:	d116      	bne.n	8018a94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018a66:	f06f 0501 	mvn.w	r5, #1
 8018a6a:	fb05 f706 	mul.w	r7, r5, r6
 8018a6e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8018a72:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8018a76:	0945      	lsrs	r5, r0, #5
 8018a78:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018a7c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018a80:	ea4c 0505 	orr.w	r5, ip, r5
 8018a84:	4305      	orrs	r5, r0
 8018a86:	53e5      	strh	r5, [r4, r7]
 8018a88:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018a8a:	3e01      	subs	r6, #1
 8018a8c:	4401      	add	r1, r0
 8018a8e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018a90:	4402      	add	r2, r0
 8018a92:	e790      	b.n	80189b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018a94:	b2fd      	uxtb	r5, r7
 8018a96:	2f00      	cmp	r7, #0
 8018a98:	d0f6      	beq.n	8018a88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a9a:	f06f 0701 	mvn.w	r7, #1
 8018a9e:	fa1f f985 	uxth.w	r9, r5
 8018aa2:	43ed      	mvns	r5, r5
 8018aa4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018aa8:	4377      	muls	r7, r6
 8018aaa:	fb1a fa09 	smulbb	sl, sl, r9
 8018aae:	b2ed      	uxtb	r5, r5
 8018ab0:	f834 e007 	ldrh.w	lr, [r4, r7]
 8018ab4:	9702      	str	r7, [sp, #8]
 8018ab6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018aba:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018abe:	fb17 f709 	smulbb	r7, r7, r9
 8018ac2:	b2c0      	uxtb	r0, r0
 8018ac4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018ac8:	fb10 f009 	smulbb	r0, r0, r9
 8018acc:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018ad0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018ad4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018ad8:	fa1f fc8c 	uxth.w	ip, ip
 8018adc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018ae0:	fa5f fe8e 	uxtb.w	lr, lr
 8018ae4:	fb07 a705 	mla	r7, r7, r5, sl
 8018ae8:	fb0e 0005 	mla	r0, lr, r5, r0
 8018aec:	f10c 0501 	add.w	r5, ip, #1
 8018af0:	b2bf      	uxth	r7, r7
 8018af2:	b280      	uxth	r0, r0
 8018af4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018af8:	f100 0a01 	add.w	sl, r0, #1
 8018afc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018b00:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018b04:	9802      	ldr	r0, [sp, #8]
 8018b06:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018b0a:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018b0e:	f107 0a01 	add.w	sl, r7, #1
 8018b12:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018b16:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018b1a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018b1e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018b22:	f824 c000 	strh.w	ip, [r4, r0]
 8018b26:	e7af      	b.n	8018a88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018b28:	f04f 0e00 	mov.w	lr, #0
 8018b2c:	eba3 000e 	sub.w	r0, r3, lr
 8018b30:	2800      	cmp	r0, #0
 8018b32:	f77f af43 	ble.w	80189bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018b36:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018b3a:	140d      	asrs	r5, r1, #16
 8018b3c:	1410      	asrs	r0, r2, #16
 8018b3e:	fb06 5000 	mla	r0, r6, r0, r5
 8018b42:	9d01      	ldr	r5, [sp, #4]
 8018b44:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8018b48:	0e2e      	lsrs	r6, r5, #24
 8018b4a:	2eff      	cmp	r6, #255	; 0xff
 8018b4c:	d112      	bne.n	8018b74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8018b4e:	482c      	ldr	r0, [pc, #176]	; (8018c00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8018b50:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8018b54:	0968      	lsrs	r0, r5, #5
 8018b56:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018b5a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018b5e:	4330      	orrs	r0, r6
 8018b60:	4328      	orrs	r0, r5
 8018b62:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8018b66:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018b68:	f10e 0e01 	add.w	lr, lr, #1
 8018b6c:	4401      	add	r1, r0
 8018b6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018b70:	4402      	add	r2, r0
 8018b72:	e7db      	b.n	8018b2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018b74:	b2f0      	uxtb	r0, r6
 8018b76:	2e00      	cmp	r6, #0
 8018b78:	d0f5      	beq.n	8018b66 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8018b7a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8018b7e:	fa1f f980 	uxth.w	r9, r0
 8018b82:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018b86:	43c0      	mvns	r0, r0
 8018b88:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018b8c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018b90:	fb16 f609 	smulbb	r6, r6, r9
 8018b94:	b2c0      	uxtb	r0, r0
 8018b96:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018b9a:	b2ed      	uxtb	r5, r5
 8018b9c:	fb1a fa09 	smulbb	sl, sl, r9
 8018ba0:	fb07 6700 	mla	r7, r7, r0, r6
 8018ba4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018ba8:	fb15 f509 	smulbb	r5, r5, r9
 8018bac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018bb0:	b2bf      	uxth	r7, r7
 8018bb2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018bb6:	fa5f fc8c 	uxtb.w	ip, ip
 8018bba:	fb06 a600 	mla	r6, r6, r0, sl
 8018bbe:	fb0c 5500 	mla	r5, ip, r0, r5
 8018bc2:	1c78      	adds	r0, r7, #1
 8018bc4:	b2b6      	uxth	r6, r6
 8018bc6:	b2ad      	uxth	r5, r5
 8018bc8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8018bcc:	f105 0a01 	add.w	sl, r5, #1
 8018bd0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018bd4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018bd8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018bdc:	ea4a 0707 	orr.w	r7, sl, r7
 8018be0:	f106 0a01 	add.w	sl, r6, #1
 8018be4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018be8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018bec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018bf0:	ea47 070a 	orr.w	r7, r7, sl
 8018bf4:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8018bf8:	e7b5      	b.n	8018b66 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8018bfa:	b005      	add	sp, #20
 8018bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c00:	fffff800 	.word	0xfffff800

08018c04 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c08:	b087      	sub	sp, #28
 8018c0a:	468b      	mov	fp, r1
 8018c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018c10:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018c12:	9203      	str	r2, [sp, #12]
 8018c14:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018c18:	6841      	ldr	r1, [r0, #4]
 8018c1a:	9204      	str	r2, [sp, #16]
 8018c1c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018c20:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018c24:	fb01 2404 	mla	r4, r1, r4, r2
 8018c28:	6802      	ldr	r2, [r0, #0]
 8018c2a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018c2e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8018c32:	3201      	adds	r2, #1
 8018c34:	f022 0201 	bic.w	r2, r2, #1
 8018c38:	9200      	str	r2, [sp, #0]
 8018c3a:	f8d9 2000 	ldr.w	r2, [r9]
 8018c3e:	9201      	str	r2, [sp, #4]
 8018c40:	f1bb 0f00 	cmp.w	fp, #0
 8018c44:	dc03      	bgt.n	8018c4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018c46:	9a03      	ldr	r2, [sp, #12]
 8018c48:	2a00      	cmp	r2, #0
 8018c4a:	f340 816a 	ble.w	8018f22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018c4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018c50:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8018c54:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018c58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018c5a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8018c5e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	dd0e      	ble.n	8018c84 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018c66:	1402      	asrs	r2, r0, #16
 8018c68:	d405      	bmi.n	8018c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018c6a:	42ba      	cmp	r2, r7
 8018c6c:	da03      	bge.n	8018c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018c6e:	140a      	asrs	r2, r1, #16
 8018c70:	d401      	bmi.n	8018c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018c72:	42b2      	cmp	r2, r6
 8018c74:	db07      	blt.n	8018c86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8018c76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018c78:	3b01      	subs	r3, #1
 8018c7a:	3402      	adds	r4, #2
 8018c7c:	4410      	add	r0, r2
 8018c7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018c80:	4411      	add	r1, r2
 8018c82:	e7ee      	b.n	8018c62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018c84:	d017      	beq.n	8018cb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018c86:	1e5a      	subs	r2, r3, #1
 8018c88:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018c8a:	fb05 0502 	mla	r5, r5, r2, r0
 8018c8e:	142d      	asrs	r5, r5, #16
 8018c90:	d409      	bmi.n	8018ca6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018c92:	42bd      	cmp	r5, r7
 8018c94:	da07      	bge.n	8018ca6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018c96:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018c98:	fb05 1202 	mla	r2, r5, r2, r1
 8018c9c:	1412      	asrs	r2, r2, #16
 8018c9e:	d402      	bmi.n	8018ca6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018ca0:	42b2      	cmp	r2, r6
 8018ca2:	f2c0 80c8 	blt.w	8018e36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8018ca6:	2700      	movs	r7, #0
 8018ca8:	19da      	adds	r2, r3, r7
 8018caa:	2a00      	cmp	r2, #0
 8018cac:	dc3e      	bgt.n	8018d2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018cae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018cb2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018cb6:	f1bb 0f00 	cmp.w	fp, #0
 8018cba:	f340 8132 	ble.w	8018f22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018cbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018cc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018cc4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018cc8:	f1bb 0b01 	subs.w	fp, fp, #1
 8018ccc:	eeb0 6a62 	vmov.f32	s12, s5
 8018cd0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018cd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018cd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018cdc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018ce0:	eeb0 6a43 	vmov.f32	s12, s6
 8018ce4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ce8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018cec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018cf0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018cf4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018cf8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018cfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018d04:	ee12 2a90 	vmov	r2, s5
 8018d08:	eef0 2a47 	vmov.f32	s5, s14
 8018d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d10:	ee13 2a10 	vmov	r2, s6
 8018d14:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d18:	eeb0 3a67 	vmov.f32	s6, s15
 8018d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d20:	9a03      	ldr	r2, [sp, #12]
 8018d22:	9314      	str	r3, [sp, #80]	; 0x50
 8018d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d26:	bf08      	it	eq
 8018d28:	4613      	moveq	r3, r2
 8018d2a:	e789      	b.n	8018c40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018d2c:	1405      	asrs	r5, r0, #16
 8018d2e:	d436      	bmi.n	8018d9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018d30:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8018d34:	42aa      	cmp	r2, r5
 8018d36:	dd32      	ble.n	8018d9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018d38:	140e      	asrs	r6, r1, #16
 8018d3a:	d430      	bmi.n	8018d9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018d3c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018d40:	42b2      	cmp	r2, r6
 8018d42:	dd2c      	ble.n	8018d9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018d44:	9a00      	ldr	r2, [sp, #0]
 8018d46:	fb06 5502 	mla	r5, r6, r2, r5
 8018d4a:	9e01      	ldr	r6, [sp, #4]
 8018d4c:	086a      	lsrs	r2, r5, #1
 8018d4e:	5cb2      	ldrb	r2, [r6, r2]
 8018d50:	07ee      	lsls	r6, r5, #31
 8018d52:	bf54      	ite	pl
 8018d54:	f002 020f 	andpl.w	r2, r2, #15
 8018d58:	1112      	asrmi	r2, r2, #4
 8018d5a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018d5e:	b2d2      	uxtb	r2, r2
 8018d60:	b1ea      	cbz	r2, 8018d9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018d62:	9d04      	ldr	r5, [sp, #16]
 8018d64:	436a      	muls	r2, r5
 8018d66:	1c55      	adds	r5, r2, #1
 8018d68:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018d6c:	4d6e      	ldr	r5, [pc, #440]	; (8018f28 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018d6e:	1212      	asrs	r2, r2, #8
 8018d70:	682d      	ldr	r5, [r5, #0]
 8018d72:	2aff      	cmp	r2, #255	; 0xff
 8018d74:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8018d78:	9605      	str	r6, [sp, #20]
 8018d7a:	d116      	bne.n	8018daa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018d7c:	f06f 0201 	mvn.w	r2, #1
 8018d80:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018d84:	fb02 fc07 	mul.w	ip, r2, r7
 8018d88:	096a      	lsrs	r2, r5, #5
 8018d8a:	f026 0607 	bic.w	r6, r6, #7
 8018d8e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018d92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018d96:	4316      	orrs	r6, r2
 8018d98:	432e      	orrs	r6, r5
 8018d9a:	f824 600c 	strh.w	r6, [r4, ip]
 8018d9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018da0:	3f01      	subs	r7, #1
 8018da2:	4410      	add	r0, r2
 8018da4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018da6:	4411      	add	r1, r2
 8018da8:	e77e      	b.n	8018ca8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8018daa:	f06f 0601 	mvn.w	r6, #1
 8018dae:	fa1f fa82 	uxth.w	sl, r2
 8018db2:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8018db6:	43d2      	mvns	r2, r2
 8018db8:	437e      	muls	r6, r7
 8018dba:	b2ed      	uxtb	r5, r5
 8018dbc:	fb1c fc0a 	smulbb	ip, ip, sl
 8018dc0:	b2d2      	uxtb	r2, r2
 8018dc2:	f834 8006 	ldrh.w	r8, [r4, r6]
 8018dc6:	fb15 f50a 	smulbb	r5, r5, sl
 8018dca:	9602      	str	r6, [sp, #8]
 8018dcc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8018dd0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8018dd4:	fb16 f60a 	smulbb	r6, r6, sl
 8018dd8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018ddc:	fb0e ce02 	mla	lr, lr, r2, ip
 8018de0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8018de4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018de8:	fa1f fe8e 	uxth.w	lr, lr
 8018dec:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8018df0:	fa5f f888 	uxtb.w	r8, r8
 8018df4:	fb0c 6c02 	mla	ip, ip, r2, r6
 8018df8:	fb08 5502 	mla	r5, r8, r2, r5
 8018dfc:	f10e 0201 	add.w	r2, lr, #1
 8018e00:	fa1f fc8c 	uxth.w	ip, ip
 8018e04:	b2ad      	uxth	r5, r5
 8018e06:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8018e0a:	9a02      	ldr	r2, [sp, #8]
 8018e0c:	1c6e      	adds	r6, r5, #1
 8018e0e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018e12:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8018e16:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018e1a:	ea46 0e0e 	orr.w	lr, r6, lr
 8018e1e:	f10c 0601 	add.w	r6, ip, #1
 8018e22:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8018e26:	0976      	lsrs	r6, r6, #5
 8018e28:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018e2c:	ea4e 0e06 	orr.w	lr, lr, r6
 8018e30:	f824 e002 	strh.w	lr, [r4, r2]
 8018e34:	e7b3      	b.n	8018d9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018e36:	f04f 0800 	mov.w	r8, #0
 8018e3a:	eba3 0208 	sub.w	r2, r3, r8
 8018e3e:	2a00      	cmp	r2, #0
 8018e40:	f77f af35 	ble.w	8018cae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018e44:	1402      	asrs	r2, r0, #16
 8018e46:	9e00      	ldr	r6, [sp, #0]
 8018e48:	140d      	asrs	r5, r1, #16
 8018e4a:	fb06 2505 	mla	r5, r6, r5, r2
 8018e4e:	9e01      	ldr	r6, [sp, #4]
 8018e50:	086a      	lsrs	r2, r5, #1
 8018e52:	07ed      	lsls	r5, r5, #31
 8018e54:	5cb2      	ldrb	r2, [r6, r2]
 8018e56:	bf54      	ite	pl
 8018e58:	f002 020f 	andpl.w	r2, r2, #15
 8018e5c:	1112      	asrmi	r2, r2, #4
 8018e5e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018e62:	b2d2      	uxtb	r2, r2
 8018e64:	b1c2      	cbz	r2, 8018e98 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018e66:	9d04      	ldr	r5, [sp, #16]
 8018e68:	436a      	muls	r2, r5
 8018e6a:	1c55      	adds	r5, r2, #1
 8018e6c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018e70:	4d2d      	ldr	r5, [pc, #180]	; (8018f28 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018e72:	1212      	asrs	r2, r2, #8
 8018e74:	682e      	ldr	r6, [r5, #0]
 8018e76:	2aff      	cmp	r2, #255	; 0xff
 8018e78:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8018e7c:	d113      	bne.n	8018ea6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018e7e:	0972      	lsrs	r2, r6, #5
 8018e80:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8018e84:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8018e88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018e8c:	f025 0507 	bic.w	r5, r5, #7
 8018e90:	4315      	orrs	r5, r2
 8018e92:	4335      	orrs	r5, r6
 8018e94:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8018e98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018e9a:	f108 0801 	add.w	r8, r8, #1
 8018e9e:	4410      	add	r0, r2
 8018ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ea2:	4411      	add	r1, r2
 8018ea4:	e7c9      	b.n	8018e3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018ea6:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018eaa:	fa1f fa82 	uxth.w	sl, r2
 8018eae:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8018eb2:	43d2      	mvns	r2, r2
 8018eb4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018eb8:	fb17 f70a 	smulbb	r7, r7, sl
 8018ebc:	b2d2      	uxtb	r2, r2
 8018ebe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018ec2:	b2f6      	uxtb	r6, r6
 8018ec4:	b2ed      	uxtb	r5, r5
 8018ec6:	fb0c 7c02 	mla	ip, ip, r2, r7
 8018eca:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018ece:	fb16 f60a 	smulbb	r6, r6, sl
 8018ed2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018ed6:	fa1f fc8c 	uxth.w	ip, ip
 8018eda:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018ede:	fb15 f50a 	smulbb	r5, r5, sl
 8018ee2:	fa5f fe8e 	uxtb.w	lr, lr
 8018ee6:	fb0e 6602 	mla	r6, lr, r2, r6
 8018eea:	fb07 5702 	mla	r7, r7, r2, r5
 8018eee:	f10c 0201 	add.w	r2, ip, #1
 8018ef2:	b2b6      	uxth	r6, r6
 8018ef4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018ef8:	1c75      	adds	r5, r6, #1
 8018efa:	b2bf      	uxth	r7, r7
 8018efc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018f00:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8018f04:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018f08:	ea45 0c0c 	orr.w	ip, r5, ip
 8018f0c:	1c7d      	adds	r5, r7, #1
 8018f0e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8018f12:	096d      	lsrs	r5, r5, #5
 8018f14:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018f18:	ea4c 0c05 	orr.w	ip, ip, r5
 8018f1c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8018f20:	e7ba      	b.n	8018e98 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018f22:	b007      	add	sp, #28
 8018f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f28:	20060c58 	.word	0x20060c58

08018f2c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f30:	b087      	sub	sp, #28
 8018f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018f36:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8019240 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8018f3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018f3c:	9101      	str	r1, [sp, #4]
 8018f3e:	9205      	str	r2, [sp, #20]
 8018f40:	6841      	ldr	r1, [r0, #4]
 8018f42:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8018f46:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018f4a:	fb01 2404 	mla	r4, r1, r4, r2
 8018f4e:	6802      	ldr	r2, [r0, #0]
 8018f50:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018f54:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018f58:	3201      	adds	r2, #1
 8018f5a:	f022 0201 	bic.w	r2, r2, #1
 8018f5e:	9202      	str	r2, [sp, #8]
 8018f60:	f8db 2000 	ldr.w	r2, [fp]
 8018f64:	9203      	str	r2, [sp, #12]
 8018f66:	9a01      	ldr	r2, [sp, #4]
 8018f68:	2a00      	cmp	r2, #0
 8018f6a:	dc03      	bgt.n	8018f74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018f6c:	9a05      	ldr	r2, [sp, #20]
 8018f6e:	2a00      	cmp	r2, #0
 8018f70:	f340 8162 	ble.w	8019238 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8018f74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f76:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8018f7a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018f7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018f80:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8018f84:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	dd0e      	ble.n	8018faa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018f8c:	1402      	asrs	r2, r0, #16
 8018f8e:	d405      	bmi.n	8018f9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f90:	42ba      	cmp	r2, r7
 8018f92:	da03      	bge.n	8018f9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f94:	140a      	asrs	r2, r1, #16
 8018f96:	d401      	bmi.n	8018f9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f98:	42b2      	cmp	r2, r6
 8018f9a:	db07      	blt.n	8018fac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018f9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f9e:	3b01      	subs	r3, #1
 8018fa0:	3402      	adds	r4, #2
 8018fa2:	4410      	add	r0, r2
 8018fa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018fa6:	4411      	add	r1, r2
 8018fa8:	e7ee      	b.n	8018f88 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018faa:	d017      	beq.n	8018fdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018fac:	1e5a      	subs	r2, r3, #1
 8018fae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018fb0:	fb05 0502 	mla	r5, r5, r2, r0
 8018fb4:	142d      	asrs	r5, r5, #16
 8018fb6:	d409      	bmi.n	8018fcc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018fb8:	42bd      	cmp	r5, r7
 8018fba:	da07      	bge.n	8018fcc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018fbc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018fbe:	fb05 1202 	mla	r2, r5, r2, r1
 8018fc2:	1412      	asrs	r2, r2, #16
 8018fc4:	d402      	bmi.n	8018fcc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018fc6:	42b2      	cmp	r2, r6
 8018fc8:	f2c0 80c3 	blt.w	8019152 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8018fcc:	2500      	movs	r5, #0
 8018fce:	195a      	adds	r2, r3, r5
 8018fd0:	2a00      	cmp	r2, #0
 8018fd2:	dc3f      	bgt.n	8019054 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018fd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018fd8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018fdc:	9b01      	ldr	r3, [sp, #4]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	f340 812a 	ble.w	8019238 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8018fe4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018fea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018fee:	eeb0 6a62 	vmov.f32	s12, s5
 8018ff2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ff6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018ffa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ffe:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019002:	eeb0 6a43 	vmov.f32	s12, s6
 8019006:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801900a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801900e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019012:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019016:	ee77 2a62 	vsub.f32	s5, s14, s5
 801901a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801901e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019022:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019026:	ee12 2a90 	vmov	r2, s5
 801902a:	eef0 2a47 	vmov.f32	s5, s14
 801902e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019032:	ee13 2a10 	vmov	r2, s6
 8019036:	9313      	str	r3, [sp, #76]	; 0x4c
 8019038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801903a:	eeb0 3a67 	vmov.f32	s6, s15
 801903e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019042:	9314      	str	r3, [sp, #80]	; 0x50
 8019044:	9b01      	ldr	r3, [sp, #4]
 8019046:	9a05      	ldr	r2, [sp, #20]
 8019048:	3b01      	subs	r3, #1
 801904a:	9301      	str	r3, [sp, #4]
 801904c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801904e:	bf08      	it	eq
 8019050:	4613      	moveq	r3, r2
 8019052:	e788      	b.n	8018f66 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019054:	1406      	asrs	r6, r0, #16
 8019056:	d42c      	bmi.n	80190b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019058:	f8db 2008 	ldr.w	r2, [fp, #8]
 801905c:	42b2      	cmp	r2, r6
 801905e:	dd28      	ble.n	80190b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019060:	140f      	asrs	r7, r1, #16
 8019062:	d426      	bmi.n	80190b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019064:	f8db 200c 	ldr.w	r2, [fp, #12]
 8019068:	42ba      	cmp	r2, r7
 801906a:	dd22      	ble.n	80190b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801906c:	9a02      	ldr	r2, [sp, #8]
 801906e:	fb07 6602 	mla	r6, r7, r2, r6
 8019072:	9f03      	ldr	r7, [sp, #12]
 8019074:	0872      	lsrs	r2, r6, #1
 8019076:	07f6      	lsls	r6, r6, #31
 8019078:	5cba      	ldrb	r2, [r7, r2]
 801907a:	bf54      	ite	pl
 801907c:	f002 020f 	andpl.w	r2, r2, #15
 8019080:	1112      	asrmi	r2, r2, #4
 8019082:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019086:	b2d2      	uxtb	r2, r2
 8019088:	2aff      	cmp	r2, #255	; 0xff
 801908a:	d118      	bne.n	80190be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801908c:	f06f 0601 	mvn.w	r6, #1
 8019090:	f8d8 2000 	ldr.w	r2, [r8]
 8019094:	fb06 f705 	mul.w	r7, r6, r5
 8019098:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801909c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80190a0:	0956      	lsrs	r6, r2, #5
 80190a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80190a6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80190aa:	ea4c 0606 	orr.w	r6, ip, r6
 80190ae:	4316      	orrs	r6, r2
 80190b0:	53e6      	strh	r6, [r4, r7]
 80190b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80190b4:	3d01      	subs	r5, #1
 80190b6:	4410      	add	r0, r2
 80190b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80190ba:	4411      	add	r1, r2
 80190bc:	e787      	b.n	8018fce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80190be:	2a00      	cmp	r2, #0
 80190c0:	d0f7      	beq.n	80190b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80190c2:	f06f 0601 	mvn.w	r6, #1
 80190c6:	f8d8 c000 	ldr.w	ip, [r8]
 80190ca:	fa1f f982 	uxth.w	r9, r2
 80190ce:	43d2      	mvns	r2, r2
 80190d0:	436e      	muls	r6, r5
 80190d2:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80190d6:	b2d2      	uxtb	r2, r2
 80190d8:	f834 e006 	ldrh.w	lr, [r4, r6]
 80190dc:	fb1a fa09 	smulbb	sl, sl, r9
 80190e0:	9604      	str	r6, [sp, #16]
 80190e2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80190e6:	ea4f 272e 	mov.w	r7, lr, asr #8
 80190ea:	fb16 f609 	smulbb	r6, r6, r9
 80190ee:	fa5f fc8c 	uxtb.w	ip, ip
 80190f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80190f6:	fb1c fc09 	smulbb	ip, ip, r9
 80190fa:	fb07 6702 	mla	r7, r7, r2, r6
 80190fe:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019102:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019106:	b2bf      	uxth	r7, r7
 8019108:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801910c:	fa5f fe8e 	uxtb.w	lr, lr
 8019110:	fb06 a602 	mla	r6, r6, r2, sl
 8019114:	fb0e cc02 	mla	ip, lr, r2, ip
 8019118:	1c7a      	adds	r2, r7, #1
 801911a:	b2b6      	uxth	r6, r6
 801911c:	fa1f fc8c 	uxth.w	ip, ip
 8019120:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019124:	9a04      	ldr	r2, [sp, #16]
 8019126:	f10c 0a01 	add.w	sl, ip, #1
 801912a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801912e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019132:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019136:	ea4a 0707 	orr.w	r7, sl, r7
 801913a:	f106 0a01 	add.w	sl, r6, #1
 801913e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019142:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019146:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801914a:	ea47 070a 	orr.w	r7, r7, sl
 801914e:	52a7      	strh	r7, [r4, r2]
 8019150:	e7af      	b.n	80190b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019152:	f04f 0e00 	mov.w	lr, #0
 8019156:	eba3 020e 	sub.w	r2, r3, lr
 801915a:	2a00      	cmp	r2, #0
 801915c:	f77f af3a 	ble.w	8018fd4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019160:	1402      	asrs	r2, r0, #16
 8019162:	9e02      	ldr	r6, [sp, #8]
 8019164:	140d      	asrs	r5, r1, #16
 8019166:	fb06 2505 	mla	r5, r6, r5, r2
 801916a:	9e03      	ldr	r6, [sp, #12]
 801916c:	086a      	lsrs	r2, r5, #1
 801916e:	07ed      	lsls	r5, r5, #31
 8019170:	5cb2      	ldrb	r2, [r6, r2]
 8019172:	bf54      	ite	pl
 8019174:	f002 020f 	andpl.w	r2, r2, #15
 8019178:	1112      	asrmi	r2, r2, #4
 801917a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801917e:	b2d2      	uxtb	r2, r2
 8019180:	2aff      	cmp	r2, #255	; 0xff
 8019182:	d115      	bne.n	80191b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019184:	f8d8 5000 	ldr.w	r5, [r8]
 8019188:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801918c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8019190:	096a      	lsrs	r2, r5, #5
 8019192:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019196:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801919a:	4332      	orrs	r2, r6
 801919c:	432a      	orrs	r2, r5
 801919e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80191a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80191a4:	f10e 0e01 	add.w	lr, lr, #1
 80191a8:	4410      	add	r0, r2
 80191aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80191ac:	4411      	add	r1, r2
 80191ae:	e7d2      	b.n	8019156 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80191b0:	2a00      	cmp	r2, #0
 80191b2:	d0f6      	beq.n	80191a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80191b4:	f8d8 7000 	ldr.w	r7, [r8]
 80191b8:	fa1f f982 	uxth.w	r9, r2
 80191bc:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80191c0:	43d2      	mvns	r2, r2
 80191c2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80191c6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80191ca:	ea4f 262c 	mov.w	r6, ip, asr #8
 80191ce:	fb15 f509 	smulbb	r5, r5, r9
 80191d2:	b2d2      	uxtb	r2, r2
 80191d4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80191d8:	b2ff      	uxtb	r7, r7
 80191da:	fb1a fa09 	smulbb	sl, sl, r9
 80191de:	fb06 5602 	mla	r6, r6, r2, r5
 80191e2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80191e6:	fb17 f709 	smulbb	r7, r7, r9
 80191ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80191ee:	b2b6      	uxth	r6, r6
 80191f0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80191f4:	fa5f fc8c 	uxtb.w	ip, ip
 80191f8:	fb05 a502 	mla	r5, r5, r2, sl
 80191fc:	fb0c 7702 	mla	r7, ip, r2, r7
 8019200:	1c72      	adds	r2, r6, #1
 8019202:	b2ad      	uxth	r5, r5
 8019204:	b2bf      	uxth	r7, r7
 8019206:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801920a:	f107 0a01 	add.w	sl, r7, #1
 801920e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8019212:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019216:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801921a:	ea4a 0606 	orr.w	r6, sl, r6
 801921e:	f105 0a01 	add.w	sl, r5, #1
 8019222:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019226:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801922a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801922e:	ea46 060a 	orr.w	r6, r6, sl
 8019232:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8019236:	e7b4      	b.n	80191a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019238:	b007      	add	sp, #28
 801923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801923e:	bf00      	nop
 8019240:	20060c58 	.word	0x20060c58

08019244 <_ZN8touchgfx8LCD16bppD1Ev>:
 8019244:	4770      	bx	lr

08019246 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019246:	4770      	bx	lr

08019248 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019248:	4770      	bx	lr

0801924a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801924a:	4770      	bx	lr

0801924c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801924c:	4770      	bx	lr

0801924e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801924e:	4770      	bx	lr

08019250 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019250:	4770      	bx	lr

08019252 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019252:	4770      	bx	lr

08019254 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019254:	4770      	bx	lr

08019256 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019256:	4770      	bx	lr

08019258 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019258:	4770      	bx	lr

0801925a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801925a:	4770      	bx	lr

0801925c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801925c:	4770      	bx	lr

0801925e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801925e:	4770      	bx	lr

08019260 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019260:	4770      	bx	lr

08019262 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019262:	4770      	bx	lr

08019264 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019264:	4770      	bx	lr

08019266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019266:	4770      	bx	lr

08019268 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019268:	4770      	bx	lr

0801926a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801926a:	4770      	bx	lr

0801926c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801926c:	4770      	bx	lr

0801926e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801926e:	4770      	bx	lr

08019270 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019270:	4770      	bx	lr

08019272 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019272:	4770      	bx	lr

08019274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019274:	4770      	bx	lr

08019276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019276:	4770      	bx	lr

08019278 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019278:	4770      	bx	lr

0801927a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801927a:	4770      	bx	lr

0801927c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801927c:	4770      	bx	lr
	...

08019280 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8019280:	b508      	push	{r3, lr}
 8019282:	4b06      	ldr	r3, [pc, #24]	; (801929c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8019284:	8818      	ldrh	r0, [r3, #0]
 8019286:	b928      	cbnz	r0, 8019294 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8019288:	4b05      	ldr	r3, [pc, #20]	; (80192a0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801928a:	2150      	movs	r1, #80	; 0x50
 801928c:	4a05      	ldr	r2, [pc, #20]	; (80192a4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801928e:	4806      	ldr	r0, [pc, #24]	; (80192a8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8019290:	f00c f88a 	bl	80253a8 <__assert_func>
 8019294:	0040      	lsls	r0, r0, #1
 8019296:	b280      	uxth	r0, r0
 8019298:	bd08      	pop	{r3, pc}
 801929a:	bf00      	nop
 801929c:	20060c2a 	.word	0x20060c2a
 80192a0:	0802c098 	.word	0x0802c098
 80192a4:	0802c694 	.word	0x0802c694
 80192a8:	0802c0da 	.word	0x0802c0da

080192ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80192ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b0:	b08b      	sub	sp, #44	; 0x2c
 80192b2:	460f      	mov	r7, r1
 80192b4:	4616      	mov	r6, r2
 80192b6:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 80192ba:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80192be:	f1bb 0f00 	cmp.w	fp, #0
 80192c2:	d049      	beq.n	8019358 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80192c4:	6810      	ldr	r0, [r2, #0]
 80192c6:	ad06      	add	r5, sp, #24
 80192c8:	6851      	ldr	r1, [r2, #4]
 80192ca:	c503      	stmia	r5!, {r0, r1}
 80192cc:	6818      	ldr	r0, [r3, #0]
 80192ce:	ad08      	add	r5, sp, #32
 80192d0:	6859      	ldr	r1, [r3, #4]
 80192d2:	c503      	stmia	r5!, {r0, r1}
 80192d4:	a806      	add	r0, sp, #24
 80192d6:	f7fa f807 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80192da:	4631      	mov	r1, r6
 80192dc:	a808      	add	r0, sp, #32
 80192de:	f7fa f847 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80192e2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80192e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80192ea:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80192ee:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80192f2:	fb16 2103 	smlabb	r1, r6, r3, r2
 80192f6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80192fa:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80192fe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019302:	4f5f      	ldr	r7, [pc, #380]	; (8019480 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019304:	440a      	add	r2, r1
 8019306:	6838      	ldr	r0, [r7, #0]
 8019308:	46b9      	mov	r9, r7
 801930a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801930e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019312:	4413      	add	r3, r2
 8019314:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019318:	6803      	ldr	r3, [r0, #0]
 801931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801931c:	4798      	blx	r3
 801931e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019322:	d01c      	beq.n	801935e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8019324:	f010 0f04 	tst.w	r0, #4
 8019328:	d01d      	beq.n	8019366 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801932a:	f8d9 0000 	ldr.w	r0, [r9]
 801932e:	2700      	movs	r7, #0
 8019330:	b2ad      	uxth	r5, r5
 8019332:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8019336:	6801      	ldr	r1, [r0, #0]
 8019338:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801933c:	f8cd b00c 	str.w	fp, [sp, #12]
 8019340:	9501      	str	r5, [sp, #4]
 8019342:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8019346:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801934a:	9402      	str	r4, [sp, #8]
 801934c:	fa1f f488 	uxth.w	r4, r8
 8019350:	9400      	str	r4, [sp, #0]
 8019352:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8019354:	4631      	mov	r1, r6
 8019356:	47a0      	blx	r4
 8019358:	b00b      	add	sp, #44	; 0x2c
 801935a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801935e:	b914      	cbnz	r4, 8019366 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019360:	f010 0f01 	tst.w	r0, #1
 8019364:	e7e0      	b.n	8019328 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8019366:	f8d9 0000 	ldr.w	r0, [r9]
 801936a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801936e:	6803      	ldr	r3, [r0, #0]
 8019370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019372:	4798      	blx	r3
 8019374:	4b43      	ldr	r3, [pc, #268]	; (8019484 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8019376:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801937a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801937e:	881a      	ldrh	r2, [r3, #0]
 8019380:	469a      	mov	sl, r3
 8019382:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8019386:	fb05 f502 	mul.w	r5, r5, r2
 801938a:	fb02 1404 	mla	r4, r2, r4, r1
 801938e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019392:	d059      	beq.n	8019448 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8019394:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8019398:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801939c:	fa1f f28b 	uxth.w	r2, fp
 80193a0:	469e      	mov	lr, r3
 80193a2:	fa1f f989 	uxth.w	r9, r9
 80193a6:	42ac      	cmp	r4, r5
 80193a8:	d264      	bcs.n	8019474 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80193aa:	eb04 0a07 	add.w	sl, r4, r7
 80193ae:	4554      	cmp	r4, sl
 80193b0:	d23d      	bcs.n	801942e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80193b2:	8821      	ldrh	r1, [r4, #0]
 80193b4:	f836 3b02 	ldrh.w	r3, [r6], #2
 80193b8:	1208      	asrs	r0, r1, #8
 80193ba:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80193be:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80193c2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80193c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80193ca:	00c9      	lsls	r1, r1, #3
 80193cc:	fb10 f009 	smulbb	r0, r0, r9
 80193d0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80193d4:	b2c9      	uxtb	r1, r1
 80193d6:	fb0c 0c02 	mla	ip, ip, r2, r0
 80193da:	10d8      	asrs	r0, r3, #3
 80193dc:	fb1b fb09 	smulbb	fp, fp, r9
 80193e0:	00db      	lsls	r3, r3, #3
 80193e2:	fa1f fc8c 	uxth.w	ip, ip
 80193e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80193ea:	fb11 f109 	smulbb	r1, r1, r9
 80193ee:	b2db      	uxtb	r3, r3
 80193f0:	fb00 b002 	mla	r0, r0, r2, fp
 80193f4:	f10c 0b01 	add.w	fp, ip, #1
 80193f8:	fb03 1302 	mla	r3, r3, r2, r1
 80193fc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019400:	b29b      	uxth	r3, r3
 8019402:	b280      	uxth	r0, r0
 8019404:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8019408:	f103 0c01 	add.w	ip, r3, #1
 801940c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019410:	1c43      	adds	r3, r0, #1
 8019412:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019416:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801941a:	0940      	lsrs	r0, r0, #5
 801941c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8019420:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019424:	ea4c 0c00 	orr.w	ip, ip, r0
 8019428:	f824 cb02 	strh.w	ip, [r4], #2
 801942c:	e7bf      	b.n	80193ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801942e:	f8be 3000 	ldrh.w	r3, [lr]
 8019432:	eba3 0308 	sub.w	r3, r3, r8
 8019436:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801943a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801943e:	eba3 0308 	sub.w	r3, r3, r8
 8019442:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019446:	e7ae      	b.n	80193a6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8019448:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801944c:	f8d9 0000 	ldr.w	r0, [r9]
 8019450:	42ac      	cmp	r4, r5
 8019452:	6803      	ldr	r3, [r0, #0]
 8019454:	d20e      	bcs.n	8019474 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8019456:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801945a:	4632      	mov	r2, r6
 801945c:	463b      	mov	r3, r7
 801945e:	4621      	mov	r1, r4
 8019460:	47c0      	blx	r8
 8019462:	f8ba 3000 	ldrh.w	r3, [sl]
 8019466:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801946a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801946e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019472:	e7eb      	b.n	801944c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8019474:	4b02      	ldr	r3, [pc, #8]	; (8019480 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019476:	6818      	ldr	r0, [r3, #0]
 8019478:	6803      	ldr	r3, [r0, #0]
 801947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801947c:	4798      	blx	r3
 801947e:	e76b      	b.n	8019358 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019480:	20060c30 	.word	0x20060c30
 8019484:	20060c2a 	.word	0x20060c2a

08019488 <_ZN8touchgfx8LCD16bppD0Ev>:
 8019488:	b510      	push	{r4, lr}
 801948a:	4604      	mov	r4, r0
 801948c:	2178      	movs	r1, #120	; 0x78
 801948e:	f00b fdb8 	bl	8025002 <_ZdlPvj>
 8019492:	4620      	mov	r0, r4
 8019494:	bd10      	pop	{r4, pc}

08019496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019496:	b510      	push	{r4, lr}
 8019498:	4604      	mov	r4, r0
 801949a:	2104      	movs	r1, #4
 801949c:	f00b fdb1 	bl	8025002 <_ZdlPvj>
 80194a0:	4620      	mov	r0, r4
 80194a2:	bd10      	pop	{r4, pc}

080194a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80194a4:	b510      	push	{r4, lr}
 80194a6:	4604      	mov	r4, r0
 80194a8:	2104      	movs	r1, #4
 80194aa:	f00b fdaa 	bl	8025002 <_ZdlPvj>
 80194ae:	4620      	mov	r0, r4
 80194b0:	bd10      	pop	{r4, pc}

080194b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80194b2:	b510      	push	{r4, lr}
 80194b4:	4604      	mov	r4, r0
 80194b6:	2104      	movs	r1, #4
 80194b8:	f00b fda3 	bl	8025002 <_ZdlPvj>
 80194bc:	4620      	mov	r0, r4
 80194be:	bd10      	pop	{r4, pc}

080194c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80194c0:	b510      	push	{r4, lr}
 80194c2:	4604      	mov	r4, r0
 80194c4:	2104      	movs	r1, #4
 80194c6:	f00b fd9c 	bl	8025002 <_ZdlPvj>
 80194ca:	4620      	mov	r0, r4
 80194cc:	bd10      	pop	{r4, pc}

080194ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80194ce:	b510      	push	{r4, lr}
 80194d0:	4604      	mov	r4, r0
 80194d2:	2104      	movs	r1, #4
 80194d4:	f00b fd95 	bl	8025002 <_ZdlPvj>
 80194d8:	4620      	mov	r0, r4
 80194da:	bd10      	pop	{r4, pc}

080194dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80194dc:	b510      	push	{r4, lr}
 80194de:	4604      	mov	r4, r0
 80194e0:	2104      	movs	r1, #4
 80194e2:	f00b fd8e 	bl	8025002 <_ZdlPvj>
 80194e6:	4620      	mov	r0, r4
 80194e8:	bd10      	pop	{r4, pc}

080194ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80194ea:	b510      	push	{r4, lr}
 80194ec:	4604      	mov	r4, r0
 80194ee:	2104      	movs	r1, #4
 80194f0:	f00b fd87 	bl	8025002 <_ZdlPvj>
 80194f4:	4620      	mov	r0, r4
 80194f6:	bd10      	pop	{r4, pc}

080194f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80194f8:	b510      	push	{r4, lr}
 80194fa:	4604      	mov	r4, r0
 80194fc:	2104      	movs	r1, #4
 80194fe:	f00b fd80 	bl	8025002 <_ZdlPvj>
 8019502:	4620      	mov	r0, r4
 8019504:	bd10      	pop	{r4, pc}

08019506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019506:	b510      	push	{r4, lr}
 8019508:	4604      	mov	r4, r0
 801950a:	2104      	movs	r1, #4
 801950c:	f00b fd79 	bl	8025002 <_ZdlPvj>
 8019510:	4620      	mov	r0, r4
 8019512:	bd10      	pop	{r4, pc}

08019514 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019514:	b510      	push	{r4, lr}
 8019516:	4604      	mov	r4, r0
 8019518:	2104      	movs	r1, #4
 801951a:	f00b fd72 	bl	8025002 <_ZdlPvj>
 801951e:	4620      	mov	r0, r4
 8019520:	bd10      	pop	{r4, pc}

08019522 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019522:	b510      	push	{r4, lr}
 8019524:	4604      	mov	r4, r0
 8019526:	2104      	movs	r1, #4
 8019528:	f00b fd6b 	bl	8025002 <_ZdlPvj>
 801952c:	4620      	mov	r0, r4
 801952e:	bd10      	pop	{r4, pc}

08019530 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019530:	b510      	push	{r4, lr}
 8019532:	4604      	mov	r4, r0
 8019534:	2104      	movs	r1, #4
 8019536:	f00b fd64 	bl	8025002 <_ZdlPvj>
 801953a:	4620      	mov	r0, r4
 801953c:	bd10      	pop	{r4, pc}

0801953e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801953e:	b510      	push	{r4, lr}
 8019540:	4604      	mov	r4, r0
 8019542:	2104      	movs	r1, #4
 8019544:	f00b fd5d 	bl	8025002 <_ZdlPvj>
 8019548:	4620      	mov	r0, r4
 801954a:	bd10      	pop	{r4, pc}

0801954c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801954c:	b510      	push	{r4, lr}
 801954e:	4604      	mov	r4, r0
 8019550:	2104      	movs	r1, #4
 8019552:	f00b fd56 	bl	8025002 <_ZdlPvj>
 8019556:	4620      	mov	r0, r4
 8019558:	bd10      	pop	{r4, pc}

0801955a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801955a:	b510      	push	{r4, lr}
 801955c:	4604      	mov	r4, r0
 801955e:	2104      	movs	r1, #4
 8019560:	f00b fd4f 	bl	8025002 <_ZdlPvj>
 8019564:	4620      	mov	r0, r4
 8019566:	bd10      	pop	{r4, pc}

08019568 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019568:	b510      	push	{r4, lr}
 801956a:	4604      	mov	r4, r0
 801956c:	2104      	movs	r1, #4
 801956e:	f00b fd48 	bl	8025002 <_ZdlPvj>
 8019572:	4620      	mov	r0, r4
 8019574:	bd10      	pop	{r4, pc}

08019576 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019576:	b510      	push	{r4, lr}
 8019578:	4604      	mov	r4, r0
 801957a:	2104      	movs	r1, #4
 801957c:	f00b fd41 	bl	8025002 <_ZdlPvj>
 8019580:	4620      	mov	r0, r4
 8019582:	bd10      	pop	{r4, pc}

08019584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8019584:	b510      	push	{r4, lr}
 8019586:	4604      	mov	r4, r0
 8019588:	2104      	movs	r1, #4
 801958a:	f00b fd3a 	bl	8025002 <_ZdlPvj>
 801958e:	4620      	mov	r0, r4
 8019590:	bd10      	pop	{r4, pc}

08019592 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019592:	b510      	push	{r4, lr}
 8019594:	4604      	mov	r4, r0
 8019596:	2104      	movs	r1, #4
 8019598:	f00b fd33 	bl	8025002 <_ZdlPvj>
 801959c:	4620      	mov	r0, r4
 801959e:	bd10      	pop	{r4, pc}

080195a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 80195a0:	b510      	push	{r4, lr}
 80195a2:	4604      	mov	r4, r0
 80195a4:	2104      	movs	r1, #4
 80195a6:	f00b fd2c 	bl	8025002 <_ZdlPvj>
 80195aa:	4620      	mov	r0, r4
 80195ac:	bd10      	pop	{r4, pc}

080195ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80195ae:	b510      	push	{r4, lr}
 80195b0:	4604      	mov	r4, r0
 80195b2:	2104      	movs	r1, #4
 80195b4:	f00b fd25 	bl	8025002 <_ZdlPvj>
 80195b8:	4620      	mov	r0, r4
 80195ba:	bd10      	pop	{r4, pc}

080195bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80195bc:	b510      	push	{r4, lr}
 80195be:	4604      	mov	r4, r0
 80195c0:	2104      	movs	r1, #4
 80195c2:	f00b fd1e 	bl	8025002 <_ZdlPvj>
 80195c6:	4620      	mov	r0, r4
 80195c8:	bd10      	pop	{r4, pc}

080195ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80195ca:	b510      	push	{r4, lr}
 80195cc:	4604      	mov	r4, r0
 80195ce:	2104      	movs	r1, #4
 80195d0:	f00b fd17 	bl	8025002 <_ZdlPvj>
 80195d4:	4620      	mov	r0, r4
 80195d6:	bd10      	pop	{r4, pc}

080195d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80195d8:	b510      	push	{r4, lr}
 80195da:	4604      	mov	r4, r0
 80195dc:	2104      	movs	r1, #4
 80195de:	f00b fd10 	bl	8025002 <_ZdlPvj>
 80195e2:	4620      	mov	r0, r4
 80195e4:	bd10      	pop	{r4, pc}

080195e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80195e6:	b510      	push	{r4, lr}
 80195e8:	4604      	mov	r4, r0
 80195ea:	2104      	movs	r1, #4
 80195ec:	f00b fd09 	bl	8025002 <_ZdlPvj>
 80195f0:	4620      	mov	r0, r4
 80195f2:	bd10      	pop	{r4, pc}

080195f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80195f4:	b510      	push	{r4, lr}
 80195f6:	4604      	mov	r4, r0
 80195f8:	2104      	movs	r1, #4
 80195fa:	f00b fd02 	bl	8025002 <_ZdlPvj>
 80195fe:	4620      	mov	r0, r4
 8019600:	bd10      	pop	{r4, pc}

08019602 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8019602:	b510      	push	{r4, lr}
 8019604:	4604      	mov	r4, r0
 8019606:	2104      	movs	r1, #4
 8019608:	f00b fcfb 	bl	8025002 <_ZdlPvj>
 801960c:	4620      	mov	r0, r4
 801960e:	bd10      	pop	{r4, pc}

08019610 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8019610:	b510      	push	{r4, lr}
 8019612:	4604      	mov	r4, r0
 8019614:	2104      	movs	r1, #4
 8019616:	f00b fcf4 	bl	8025002 <_ZdlPvj>
 801961a:	4620      	mov	r0, r4
 801961c:	bd10      	pop	{r4, pc}
	...

08019620 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019622:	4606      	mov	r6, r0
 8019624:	b087      	sub	sp, #28
 8019626:	460c      	mov	r4, r1
 8019628:	4617      	mov	r7, r2
 801962a:	461d      	mov	r5, r3
 801962c:	b333      	cbz	r3, 801967c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801962e:	4608      	mov	r0, r1
 8019630:	f7f5 fb6d 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019634:	bb10      	cbnz	r0, 801967c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019636:	6820      	ldr	r0, [r4, #0]
 8019638:	ab04      	add	r3, sp, #16
 801963a:	6861      	ldr	r1, [r4, #4]
 801963c:	4c1b      	ldr	r4, [pc, #108]	; (80196ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801963e:	c303      	stmia	r3!, {r0, r1}
 8019640:	a804      	add	r0, sp, #16
 8019642:	f7f9 fe51 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019646:	6820      	ldr	r0, [r4, #0]
 8019648:	6803      	ldr	r3, [r0, #0]
 801964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801964c:	4798      	blx	r3
 801964e:	2dff      	cmp	r5, #255	; 0xff
 8019650:	d016      	beq.n	8019680 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8019652:	f010 0f08 	tst.w	r0, #8
 8019656:	6820      	ldr	r0, [r4, #0]
 8019658:	d015      	beq.n	8019686 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801965a:	2400      	movs	r4, #0
 801965c:	6801      	ldr	r1, [r0, #0]
 801965e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019662:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019666:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801966a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801966e:	9401      	str	r4, [sp, #4]
 8019670:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019674:	9400      	str	r4, [sp, #0]
 8019676:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8019678:	4639      	mov	r1, r7
 801967a:	47a0      	blx	r4
 801967c:	b007      	add	sp, #28
 801967e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019680:	f010 0f02 	tst.w	r0, #2
 8019684:	e7e7      	b.n	8019656 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801968a:	4798      	blx	r3
 801968c:	4b08      	ldr	r3, [pc, #32]	; (80196b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801968e:	4601      	mov	r1, r0
 8019690:	4630      	mov	r0, r6
 8019692:	881a      	ldrh	r2, [r3, #0]
 8019694:	6833      	ldr	r3, [r6, #0]
 8019696:	e9cd 7500 	strd	r7, r5, [sp]
 801969a:	69dd      	ldr	r5, [r3, #28]
 801969c:	ab04      	add	r3, sp, #16
 801969e:	47a8      	blx	r5
 80196a0:	6820      	ldr	r0, [r4, #0]
 80196a2:	6803      	ldr	r3, [r0, #0]
 80196a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196a6:	4798      	blx	r3
 80196a8:	e7e8      	b.n	801967c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80196aa:	bf00      	nop
 80196ac:	20060c30 	.word	0x20060c30
 80196b0:	20060c2a 	.word	0x20060c2a

080196b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80196b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b8:	4f97      	ldr	r7, [pc, #604]	; (8019918 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 80196ba:	4616      	mov	r6, r2
 80196bc:	b08f      	sub	sp, #60	; 0x3c
 80196be:	4604      	mov	r4, r0
 80196c0:	683a      	ldr	r2, [r7, #0]
 80196c2:	4689      	mov	r9, r1
 80196c4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80196c8:	2a02      	cmp	r2, #2
 80196ca:	d106      	bne.n	80196da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80196cc:	4b93      	ldr	r3, [pc, #588]	; (801991c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 80196ce:	f44f 7159 	mov.w	r1, #868	; 0x364
 80196d2:	4a93      	ldr	r2, [pc, #588]	; (8019920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80196d4:	4893      	ldr	r0, [pc, #588]	; (8019924 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 80196d6:	f00b fe67 	bl	80253a8 <__assert_func>
 80196da:	ad0e      	add	r5, sp, #56	; 0x38
 80196dc:	f825 3d24 	strh.w	r3, [r5, #-36]!
 80196e0:	4628      	mov	r0, r5
 80196e2:	f7fd fac9 	bl	8016c78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80196e6:	6823      	ldr	r3, [r4, #0]
 80196e8:	4680      	mov	r8, r0
 80196ea:	4620      	mov	r0, r4
 80196ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ee:	4798      	blx	r3
 80196f0:	4580      	cmp	r8, r0
 80196f2:	d004      	beq.n	80196fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80196f4:	4b8c      	ldr	r3, [pc, #560]	; (8019928 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80196f6:	f240 3166 	movw	r1, #870	; 0x366
 80196fa:	4a89      	ldr	r2, [pc, #548]	; (8019920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80196fc:	e7ea      	b.n	80196d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80196fe:	4628      	mov	r0, r5
 8019700:	f7fd fa30 	bl	8016b64 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019704:	4680      	mov	r8, r0
 8019706:	b920      	cbnz	r0, 8019712 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8019708:	4b88      	ldr	r3, [pc, #544]	; (801992c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801970a:	f44f 715a 	mov.w	r1, #872	; 0x368
 801970e:	4a84      	ldr	r2, [pc, #528]	; (8019920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8019710:	e7e0      	b.n	80196d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8019712:	6830      	ldr	r0, [r6, #0]
 8019714:	ab06      	add	r3, sp, #24
 8019716:	6871      	ldr	r1, [r6, #4]
 8019718:	f10d 0b20 	add.w	fp, sp, #32
 801971c:	f9b6 a000 	ldrsh.w	sl, [r6]
 8019720:	c303      	stmia	r3!, {r0, r1}
 8019722:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019726:	ab08      	add	r3, sp, #32
 8019728:	f8d9 0000 	ldr.w	r0, [r9]
 801972c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019730:	c303      	stmia	r3!, {r0, r1}
 8019732:	4628      	mov	r0, r5
 8019734:	f7fd f90e 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019738:	4606      	mov	r6, r0
 801973a:	4628      	mov	r0, r5
 801973c:	4d7c      	ldr	r5, [pc, #496]	; (8019930 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801973e:	f7fd f943 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019742:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8019746:	a806      	add	r0, sp, #24
 8019748:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801974c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8019750:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8019754:	f7f9 fdc8 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019758:	4658      	mov	r0, fp
 801975a:	f7f9 fdc5 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801975e:	a80a      	add	r0, sp, #40	; 0x28
 8019760:	f7f9 fdc2 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019764:	4b73      	ldr	r3, [pc, #460]	; (8019934 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8019766:	2100      	movs	r1, #0
 8019768:	f9b5 2000 	ldrsh.w	r2, [r5]
 801976c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019770:	4658      	mov	r0, fp
 8019772:	910c      	str	r1, [sp, #48]	; 0x30
 8019774:	a90c      	add	r1, sp, #48	; 0x30
 8019776:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801977a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801977e:	f7f5 fa83 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 8019782:	4658      	mov	r0, fp
 8019784:	f7f5 fac3 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019788:	2800      	cmp	r0, #0
 801978a:	f040 809a 	bne.w	80198c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801978e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8019792:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8019796:	4288      	cmp	r0, r1
 8019798:	db38      	blt.n	801980c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801979a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801979e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80197a2:	429a      	cmp	r2, r3
 80197a4:	db32      	blt.n	801980c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80197a6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80197aa:	4430      	add	r0, r6
 80197ac:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80197b0:	4431      	add	r1, r6
 80197b2:	b200      	sxth	r0, r0
 80197b4:	b209      	sxth	r1, r1
 80197b6:	4288      	cmp	r0, r1
 80197b8:	dc28      	bgt.n	801980c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80197ba:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80197be:	440a      	add	r2, r1
 80197c0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80197c4:	440b      	add	r3, r1
 80197c6:	b212      	sxth	r2, r2
 80197c8:	b21b      	sxth	r3, r3
 80197ca:	429a      	cmp	r2, r3
 80197cc:	dc1e      	bgt.n	801980c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 80197ce:	6823      	ldr	r3, [r4, #0]
 80197d0:	4620      	mov	r0, r4
 80197d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197d4:	4798      	blx	r3
 80197d6:	4682      	mov	sl, r0
 80197d8:	6838      	ldr	r0, [r7, #0]
 80197da:	6803      	ldr	r3, [r0, #0]
 80197dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80197de:	4798      	blx	r3
 80197e0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80197e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80197e8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80197ec:	1a5b      	subs	r3, r3, r1
 80197ee:	b29b      	uxth	r3, r3
 80197f0:	b21c      	sxth	r4, r3
 80197f2:	2c00      	cmp	r4, #0
 80197f4:	dc0f      	bgt.n	8019816 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 80197f6:	bf18      	it	ne
 80197f8:	f8ad 1020 	strhne.w	r1, [sp, #32]
 80197fc:	4644      	mov	r4, r8
 80197fe:	bf1e      	ittt	ne
 8019800:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8019804:	185b      	addne	r3, r3, r1
 8019806:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801980a:	e009      	b.n	8019820 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801980c:	4b4a      	ldr	r3, [pc, #296]	; (8019938 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801980e:	f240 3176 	movw	r1, #886	; 0x376
 8019812:	4a43      	ldr	r2, [pc, #268]	; (8019920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8019814:	e75e      	b.n	80196d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8019816:	1ad3      	subs	r3, r2, r3
 8019818:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801981c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8019820:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8019824:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8019828:	1b9b      	subs	r3, r3, r6
 801982a:	b29b      	uxth	r3, r3
 801982c:	b219      	sxth	r1, r3
 801982e:	2900      	cmp	r1, #0
 8019830:	dd4b      	ble.n	80198ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8019832:	4351      	muls	r1, r2
 8019834:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8019838:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801983c:	1acb      	subs	r3, r1, r3
 801983e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019842:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8019846:	2e00      	cmp	r6, #0
 8019848:	dd3b      	ble.n	80198c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801984a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801984e:	2b00      	cmp	r3, #0
 8019850:	dd37      	ble.n	80198c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8019852:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019856:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801985a:	fb0a f90c 	mul.w	r9, sl, ip
 801985e:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8019862:	4481      	add	r9, r0
 8019864:	8828      	ldrh	r0, [r5, #0]
 8019866:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801986a:	1a41      	subs	r1, r0, r1
 801986c:	42ae      	cmp	r6, r5
 801986e:	bfa8      	it	ge
 8019870:	462e      	movge	r6, r5
 8019872:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8019876:	428e      	cmp	r6, r1
 8019878:	bfa8      	it	ge
 801987a:	460e      	movge	r6, r1
 801987c:	429d      	cmp	r5, r3
 801987e:	bfa8      	it	ge
 8019880:	461d      	movge	r5, r3
 8019882:	4b2c      	ldr	r3, [pc, #176]	; (8019934 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8019884:	881b      	ldrh	r3, [r3, #0]
 8019886:	eba3 030c 	sub.w	r3, r3, ip
 801988a:	429d      	cmp	r5, r3
 801988c:	bfa8      	it	ge
 801988e:	461d      	movge	r5, r3
 8019890:	42b0      	cmp	r0, r6
 8019892:	d12c      	bne.n	80198ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8019894:	4290      	cmp	r0, r2
 8019896:	d12a      	bne.n	80198ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8019898:	6838      	ldr	r0, [r7, #0]
 801989a:	9203      	str	r2, [sp, #12]
 801989c:	6803      	ldr	r3, [r0, #0]
 801989e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198a0:	4798      	blx	r3
 80198a2:	07c3      	lsls	r3, r0, #31
 80198a4:	d51a      	bpl.n	80198dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80198a6:	9a03      	ldr	r2, [sp, #12]
 80198a8:	6838      	ldr	r0, [r7, #0]
 80198aa:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 80198ae:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80198b2:	6803      	ldr	r3, [r0, #0]
 80198b4:	9200      	str	r2, [sp, #0]
 80198b6:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 80198b8:	4623      	mov	r3, r4
 80198ba:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80198be:	47a8      	blx	r5
 80198c0:	4680      	mov	r8, r0
 80198c2:	4640      	mov	r0, r8
 80198c4:	b00f      	add	sp, #60	; 0x3c
 80198c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ca:	bf1f      	itttt	ne
 80198cc:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 80198d0:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 80198d4:	185b      	addne	r3, r3, r1
 80198d6:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80198da:	e7b2      	b.n	8019842 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 80198dc:	6838      	ldr	r0, [r7, #0]
 80198de:	464a      	mov	r2, r9
 80198e0:	4621      	mov	r1, r4
 80198e2:	6803      	ldr	r3, [r0, #0]
 80198e4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80198e6:	fb05 f30a 	mul.w	r3, r5, sl
 80198ea:	47b0      	blx	r6
 80198ec:	e7e9      	b.n	80198c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80198ee:	4355      	muls	r5, r2
 80198f0:	0076      	lsls	r6, r6, #1
 80198f2:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 80198f6:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 80198fa:	9303      	str	r3, [sp, #12]
 80198fc:	9b03      	ldr	r3, [sp, #12]
 80198fe:	429c      	cmp	r4, r3
 8019900:	d2df      	bcs.n	80198c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8019902:	6838      	ldr	r0, [r7, #0]
 8019904:	464a      	mov	r2, r9
 8019906:	4621      	mov	r1, r4
 8019908:	44d1      	add	r9, sl
 801990a:	6803      	ldr	r3, [r0, #0]
 801990c:	445c      	add	r4, fp
 801990e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019910:	461d      	mov	r5, r3
 8019912:	4633      	mov	r3, r6
 8019914:	47a8      	blx	r5
 8019916:	e7f1      	b.n	80198fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8019918:	20060c30 	.word	0x20060c30
 801991c:	0802be90 	.word	0x0802be90
 8019920:	0802c744 	.word	0x0802c744
 8019924:	0802bf42 	.word	0x0802bf42
 8019928:	0802bf74 	.word	0x0802bf74
 801992c:	0802bfc9 	.word	0x0802bfc9
 8019930:	20060c2a 	.word	0x20060c2a
 8019934:	20060c2c 	.word	0x20060c2c
 8019938:	0802c007 	.word	0x0802c007

0801993c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801993c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019940:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8019944:	4688      	mov	r8, r1
 8019946:	4614      	mov	r4, r2
 8019948:	461d      	mov	r5, r3
 801994a:	9e08      	ldr	r6, [sp, #32]
 801994c:	2f00      	cmp	r7, #0
 801994e:	f000 80b4 	beq.w	8019aba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019952:	4618      	mov	r0, r3
 8019954:	f7f5 f9db 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019958:	2800      	cmp	r0, #0
 801995a:	f040 80ae 	bne.w	8019aba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801995e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8019962:	2fff      	cmp	r7, #255	; 0xff
 8019964:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019968:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801996c:	fb04 1303 	mla	r3, r4, r3, r1
 8019970:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8019974:	eba4 0200 	sub.w	r2, r4, r0
 8019978:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801997c:	fb04 f505 	mul.w	r5, r4, r5
 8019980:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8019984:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8019988:	d04b      	beq.n	8019a22 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801998a:	b2bc      	uxth	r4, r7
 801998c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8019990:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8019994:	fa5f f788 	uxtb.w	r7, r8
 8019998:	b2f3      	uxtb	r3, r6
 801999a:	0040      	lsls	r0, r0, #1
 801999c:	fb0e fe04 	mul.w	lr, lr, r4
 80199a0:	4367      	muls	r7, r4
 80199a2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80199a6:	4363      	muls	r3, r4
 80199a8:	fa1f fc8c 	uxth.w	ip, ip
 80199ac:	42a9      	cmp	r1, r5
 80199ae:	f080 8084 	bcs.w	8019aba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80199b2:	eb01 0900 	add.w	r9, r1, r0
 80199b6:	4549      	cmp	r1, r9
 80199b8:	d231      	bcs.n	8019a1e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 80199ba:	880a      	ldrh	r2, [r1, #0]
 80199bc:	1214      	asrs	r4, r2, #8
 80199be:	10d6      	asrs	r6, r2, #3
 80199c0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80199c4:	00d2      	lsls	r2, r2, #3
 80199c6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80199ca:	b2d2      	uxtb	r2, r2
 80199cc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80199d0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80199d4:	fb14 f40c 	smulbb	r4, r4, ip
 80199d8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80199dc:	fb12 f20c 	smulbb	r2, r2, ip
 80199e0:	fb16 f60c 	smulbb	r6, r6, ip
 80199e4:	4474      	add	r4, lr
 80199e6:	441a      	add	r2, r3
 80199e8:	b2a4      	uxth	r4, r4
 80199ea:	443e      	add	r6, r7
 80199ec:	b292      	uxth	r2, r2
 80199ee:	f104 0a01 	add.w	sl, r4, #1
 80199f2:	b2b6      	uxth	r6, r6
 80199f4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80199f8:	f102 0a01 	add.w	sl, r2, #1
 80199fc:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8019a00:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8019a04:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019a08:	4322      	orrs	r2, r4
 8019a0a:	1c74      	adds	r4, r6, #1
 8019a0c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8019a10:	0976      	lsrs	r6, r6, #5
 8019a12:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019a16:	4332      	orrs	r2, r6
 8019a18:	f821 2b02 	strh.w	r2, [r1], #2
 8019a1c:	e7cb      	b.n	80199b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8019a1e:	4441      	add	r1, r8
 8019a20:	e7c4      	b.n	80199ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8019a22:	0973      	lsrs	r3, r6, #5
 8019a24:	4f26      	ldr	r7, [pc, #152]	; (8019ac0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8019a26:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8019a2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019a2e:	ea08 0707 	and.w	r7, r8, r7
 8019a32:	433b      	orrs	r3, r7
 8019a34:	4333      	orrs	r3, r6
 8019a36:	07e6      	lsls	r6, r4, #31
 8019a38:	b29b      	uxth	r3, r3
 8019a3a:	d50b      	bpl.n	8019a54 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8019a3c:	0040      	lsls	r0, r0, #1
 8019a3e:	0052      	lsls	r2, r2, #1
 8019a40:	42a9      	cmp	r1, r5
 8019a42:	d23a      	bcs.n	8019aba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019a44:	180c      	adds	r4, r1, r0
 8019a46:	42a1      	cmp	r1, r4
 8019a48:	d202      	bcs.n	8019a50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8019a4a:	f821 3b02 	strh.w	r3, [r1], #2
 8019a4e:	e7fa      	b.n	8019a46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8019a50:	4411      	add	r1, r2
 8019a52:	e7f5      	b.n	8019a40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8019a54:	078f      	lsls	r7, r1, #30
 8019a56:	d008      	beq.n	8019a6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8019a58:	0066      	lsls	r6, r4, #1
 8019a5a:	460a      	mov	r2, r1
 8019a5c:	42aa      	cmp	r2, r5
 8019a5e:	d202      	bcs.n	8019a66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8019a60:	8013      	strh	r3, [r2, #0]
 8019a62:	4432      	add	r2, r6
 8019a64:	e7fa      	b.n	8019a5c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8019a66:	3102      	adds	r1, #2
 8019a68:	3801      	subs	r0, #1
 8019a6a:	07c6      	lsls	r6, r0, #31
 8019a6c:	d50b      	bpl.n	8019a86 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8019a6e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8019a72:	0066      	lsls	r6, r4, #1
 8019a74:	3a01      	subs	r2, #1
 8019a76:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8019a7a:	42aa      	cmp	r2, r5
 8019a7c:	d202      	bcs.n	8019a84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8019a7e:	8013      	strh	r3, [r2, #0]
 8019a80:	4432      	add	r2, r6
 8019a82:	e7fa      	b.n	8019a7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8019a84:	3801      	subs	r0, #1
 8019a86:	b1c0      	cbz	r0, 8019aba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019a88:	1040      	asrs	r0, r0, #1
 8019a8a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8019a8e:	0080      	lsls	r0, r0, #2
 8019a90:	0064      	lsls	r4, r4, #1
 8019a92:	42a9      	cmp	r1, r5
 8019a94:	d211      	bcs.n	8019aba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8019a96:	078a      	lsls	r2, r1, #30
 8019a98:	d006      	beq.n	8019aa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019a9a:	4b0a      	ldr	r3, [pc, #40]	; (8019ac4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8019a9c:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8019aa0:	4a09      	ldr	r2, [pc, #36]	; (8019ac8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8019aa2:	480a      	ldr	r0, [pc, #40]	; (8019acc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8019aa4:	f00b fc80 	bl	80253a8 <__assert_func>
 8019aa8:	180e      	adds	r6, r1, r0
 8019aaa:	460a      	mov	r2, r1
 8019aac:	42b2      	cmp	r2, r6
 8019aae:	d202      	bcs.n	8019ab6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8019ab0:	f842 3b04 	str.w	r3, [r2], #4
 8019ab4:	e7fa      	b.n	8019aac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8019ab6:	4421      	add	r1, r4
 8019ab8:	e7eb      	b.n	8019a92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8019aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019abe:	bf00      	nop
 8019ac0:	00fff800 	.word	0x00fff800
 8019ac4:	0802bd41 	.word	0x0802bd41
 8019ac8:	0802c390 	.word	0x0802c390
 8019acc:	0802bf42 	.word	0x0802bf42

08019ad0 <_ZN8touchgfx8LCD16bppC1Ev>:
 8019ad0:	2200      	movs	r2, #0
 8019ad2:	4910      	ldr	r1, [pc, #64]	; (8019b14 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8019ad4:	6042      	str	r2, [r0, #4]
 8019ad6:	6001      	str	r1, [r0, #0]
 8019ad8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8019adc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8019ae0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019ae4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8019ae8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8019aec:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8019af0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8019af4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8019af8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8019afc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8019b00:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8019b04:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8019b08:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8019b0c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8019b10:	4770      	bx	lr
 8019b12:	bf00      	nop
 8019b14:	0802c348 	.word	0x0802c348

08019b18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b1c:	b08d      	sub	sp, #52	; 0x34
 8019b1e:	460d      	mov	r5, r1
 8019b20:	4604      	mov	r4, r0
 8019b22:	4699      	mov	r9, r3
 8019b24:	6808      	ldr	r0, [r1, #0]
 8019b26:	ab08      	add	r3, sp, #32
 8019b28:	6849      	ldr	r1, [r1, #4]
 8019b2a:	c303      	stmia	r3!, {r0, r1}
 8019b2c:	6810      	ldr	r0, [r2, #0]
 8019b2e:	ab0a      	add	r3, sp, #40	; 0x28
 8019b30:	6851      	ldr	r1, [r2, #4]
 8019b32:	c303      	stmia	r3!, {r0, r1}
 8019b34:	a808      	add	r0, sp, #32
 8019b36:	f7f9 fbd7 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b3a:	4629      	mov	r1, r5
 8019b3c:	a80a      	add	r0, sp, #40	; 0x28
 8019b3e:	4d67      	ldr	r5, [pc, #412]	; (8019cdc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019b40:	f7f9 fc16 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019b44:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019b48:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8019b4c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019b50:	6828      	ldr	r0, [r5, #0]
 8019b52:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019b56:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8019b5a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8019b5e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019b62:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8019b66:	440a      	add	r2, r1
 8019b68:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019b6c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019b70:	4413      	add	r3, r2
 8019b72:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019b76:	6803      	ldr	r3, [r0, #0]
 8019b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b7a:	4798      	blx	r3
 8019b7c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019b80:	d119      	bne.n	8019bb6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8019b82:	f010 0f20 	tst.w	r0, #32
 8019b86:	6828      	ldr	r0, [r5, #0]
 8019b88:	d018      	beq.n	8019bbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8019b8a:	2500      	movs	r5, #0
 8019b8c:	6801      	ldr	r1, [r0, #0]
 8019b8e:	b2b6      	uxth	r6, r6
 8019b90:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8019b94:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8019b98:	9601      	str	r6, [sp, #4]
 8019b9a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8019b9e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8019ba2:	9502      	str	r5, [sp, #8]
 8019ba4:	fa1f f588 	uxth.w	r5, r8
 8019ba8:	9500      	str	r5, [sp, #0]
 8019baa:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8019bac:	4621      	mov	r1, r4
 8019bae:	47a8      	blx	r5
 8019bb0:	b00d      	add	sp, #52	; 0x34
 8019bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019bba:	e7e4      	b.n	8019b86 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8019bbc:	6803      	ldr	r3, [r0, #0]
 8019bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bc0:	4798      	blx	r3
 8019bc2:	4947      	ldr	r1, [pc, #284]	; (8019ce0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8019bc4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019bc8:	880b      	ldrh	r3, [r1, #0]
 8019bca:	468a      	mov	sl, r1
 8019bcc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8019bd0:	fb03 5202 	mla	r2, r3, r2, r5
 8019bd4:	4373      	muls	r3, r6
 8019bd6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019bda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019bde:	9307      	str	r3, [sp, #28]
 8019be0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8019be4:	9306      	str	r3, [sp, #24]
 8019be6:	9b07      	ldr	r3, [sp, #28]
 8019be8:	4298      	cmp	r0, r3
 8019bea:	d270      	bcs.n	8019cce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8019bec:	9b06      	ldr	r3, [sp, #24]
 8019bee:	4621      	mov	r1, r4
 8019bf0:	eb00 0b03 	add.w	fp, r0, r3
 8019bf4:	4558      	cmp	r0, fp
 8019bf6:	d25d      	bcs.n	8019cb4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8019bf8:	f851 4b04 	ldr.w	r4, [r1], #4
 8019bfc:	0e23      	lsrs	r3, r4, #24
 8019bfe:	d014      	beq.n	8019c2a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019c00:	2bff      	cmp	r3, #255	; 0xff
 8019c02:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8019c06:	d112      	bne.n	8019c2e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019c08:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019c0c:	d10f      	bne.n	8019c2e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019c0e:	0963      	lsrs	r3, r4, #5
 8019c10:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8019c14:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019c18:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019c1c:	f02c 0c07 	bic.w	ip, ip, #7
 8019c20:	ea43 0c0c 	orr.w	ip, r3, ip
 8019c24:	ea4c 0404 	orr.w	r4, ip, r4
 8019c28:	8004      	strh	r4, [r0, #0]
 8019c2a:	3002      	adds	r0, #2
 8019c2c:	e7e2      	b.n	8019bf4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8019c2e:	fb09 f303 	mul.w	r3, r9, r3
 8019c32:	8807      	ldrh	r7, [r0, #0]
 8019c34:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8019c38:	fa5f fc8c 	uxtb.w	ip, ip
 8019c3c:	1c5a      	adds	r2, r3, #1
 8019c3e:	123e      	asrs	r6, r7, #8
 8019c40:	10fd      	asrs	r5, r7, #3
 8019c42:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8019c46:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019c4a:	00ff      	lsls	r7, r7, #3
 8019c4c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019c50:	1212      	asrs	r2, r2, #8
 8019c52:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019c56:	b293      	uxth	r3, r2
 8019c58:	43d2      	mvns	r2, r2
 8019c5a:	b2ff      	uxtb	r7, r7
 8019c5c:	fb1e fe03 	smulbb	lr, lr, r3
 8019c60:	b2d2      	uxtb	r2, r2
 8019c62:	fb1c fc03 	smulbb	ip, ip, r3
 8019c66:	b2e4      	uxtb	r4, r4
 8019c68:	fb06 e602 	mla	r6, r6, r2, lr
 8019c6c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019c70:	fb14 f403 	smulbb	r4, r4, r3
 8019c74:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8019c78:	b2b6      	uxth	r6, r6
 8019c7a:	fb05 c502 	mla	r5, r5, r2, ip
 8019c7e:	fb07 4702 	mla	r7, r7, r2, r4
 8019c82:	f106 0e01 	add.w	lr, r6, #1
 8019c86:	b2ad      	uxth	r5, r5
 8019c88:	b2bf      	uxth	r7, r7
 8019c8a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8019c8e:	f105 0c01 	add.w	ip, r5, #1
 8019c92:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8019c96:	1c7e      	adds	r6, r7, #1
 8019c98:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8019c9c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019ca0:	096d      	lsrs	r5, r5, #5
 8019ca2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019ca6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019caa:	ea46 060e 	orr.w	r6, r6, lr
 8019cae:	432e      	orrs	r6, r5
 8019cb0:	8006      	strh	r6, [r0, #0]
 8019cb2:	e7ba      	b.n	8019c2a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019cb4:	f8ba 3000 	ldrh.w	r3, [sl]
 8019cb8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8019cbc:	eba3 0308 	sub.w	r3, r3, r8
 8019cc0:	eba4 0408 	sub.w	r4, r4, r8
 8019cc4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019cc8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8019ccc:	e78b      	b.n	8019be6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8019cce:	4b03      	ldr	r3, [pc, #12]	; (8019cdc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019cd0:	6818      	ldr	r0, [r3, #0]
 8019cd2:	6803      	ldr	r3, [r0, #0]
 8019cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cd6:	4798      	blx	r3
 8019cd8:	e76a      	b.n	8019bb0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8019cda:	bf00      	nop
 8019cdc:	20060c30 	.word	0x20060c30
 8019ce0:	20060c2a 	.word	0x20060c2a

08019ce4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8019ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ce8:	b085      	sub	sp, #20
 8019cea:	6810      	ldr	r0, [r2, #0]
 8019cec:	460c      	mov	r4, r1
 8019cee:	6851      	ldr	r1, [r2, #4]
 8019cf0:	466d      	mov	r5, sp
 8019cf2:	4616      	mov	r6, r2
 8019cf4:	c503      	stmia	r5!, {r0, r1}
 8019cf6:	6818      	ldr	r0, [r3, #0]
 8019cf8:	6859      	ldr	r1, [r3, #4]
 8019cfa:	c503      	stmia	r5!, {r0, r1}
 8019cfc:	4668      	mov	r0, sp
 8019cfe:	4d2e      	ldr	r5, [pc, #184]	; (8019db8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8019d00:	f7f9 faf2 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019d04:	4631      	mov	r1, r6
 8019d06:	a802      	add	r0, sp, #8
 8019d08:	4e2c      	ldr	r6, [pc, #176]	; (8019dbc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8019d0a:	f7f9 fb31 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019d0e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019d12:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019d16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8019d1a:	6828      	ldr	r0, [r5, #0]
 8019d1c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019d20:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019d24:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8019d28:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019d2c:	f8bd 1000 	ldrh.w	r1, [sp]
 8019d30:	440a      	add	r2, r1
 8019d32:	f8ad 2008 	strh.w	r2, [sp, #8]
 8019d36:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019d3a:	4413      	add	r3, r2
 8019d3c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019d40:	6803      	ldr	r3, [r0, #0]
 8019d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d44:	4798      	blx	r3
 8019d46:	8833      	ldrh	r3, [r6, #0]
 8019d48:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019d4c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8019d50:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019d54:	f8df e068 	ldr.w	lr, [pc, #104]	; 8019dc0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8019d58:	fb03 1202 	mla	r2, r3, r2, r1
 8019d5c:	fb08 f303 	mul.w	r3, r8, r3
 8019d60:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019d64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019d68:	4298      	cmp	r0, r3
 8019d6a:	d21d      	bcs.n	8019da8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8019d6c:	eb00 080c 	add.w	r8, r0, ip
 8019d70:	4540      	cmp	r0, r8
 8019d72:	d20f      	bcs.n	8019d94 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8019d74:	f854 1b04 	ldr.w	r1, [r4], #4
 8019d78:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8019d7c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8019d80:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8019d84:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019d88:	ea42 0209 	orr.w	r2, r2, r9
 8019d8c:	430a      	orrs	r2, r1
 8019d8e:	f820 2b02 	strh.w	r2, [r0], #2
 8019d92:	e7ed      	b.n	8019d70 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8019d94:	8832      	ldrh	r2, [r6, #0]
 8019d96:	1bd2      	subs	r2, r2, r7
 8019d98:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019d9c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019da0:	1bd2      	subs	r2, r2, r7
 8019da2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8019da6:	e7df      	b.n	8019d68 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8019da8:	6828      	ldr	r0, [r5, #0]
 8019daa:	6803      	ldr	r3, [r0, #0]
 8019dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dae:	4798      	blx	r3
 8019db0:	b005      	add	sp, #20
 8019db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019db6:	bf00      	nop
 8019db8:	20060c30 	.word	0x20060c30
 8019dbc:	20060c2a 	.word	0x20060c2a
 8019dc0:	fffff800 	.word	0xfffff800

08019dc4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8019dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dc8:	b08e      	sub	sp, #56	; 0x38
 8019dca:	460e      	mov	r6, r1
 8019dcc:	4604      	mov	r4, r0
 8019dce:	461d      	mov	r5, r3
 8019dd0:	6808      	ldr	r0, [r1, #0]
 8019dd2:	ab0a      	add	r3, sp, #40	; 0x28
 8019dd4:	6849      	ldr	r1, [r1, #4]
 8019dd6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8019fac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8019dda:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8019fb0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8019dde:	c303      	stmia	r3!, {r0, r1}
 8019de0:	6810      	ldr	r0, [r2, #0]
 8019de2:	ab0c      	add	r3, sp, #48	; 0x30
 8019de4:	6851      	ldr	r1, [r2, #4]
 8019de6:	c303      	stmia	r3!, {r0, r1}
 8019de8:	a80a      	add	r0, sp, #40	; 0x28
 8019dea:	f7f9 fa7d 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019dee:	4631      	mov	r1, r6
 8019df0:	a80c      	add	r0, sp, #48	; 0x30
 8019df2:	f7f9 fabd 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019df6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019dfa:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019dfe:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019e02:	f8d8 0000 	ldr.w	r0, [r8]
 8019e06:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019e0a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8019e0e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8019e12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e16:	440c      	add	r4, r1
 8019e18:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8019e1c:	440a      	add	r2, r1
 8019e1e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8019e22:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8019e26:	4413      	add	r3, r2
 8019e28:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019e2c:	6803      	ldr	r3, [r0, #0]
 8019e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e30:	4798      	blx	r3
 8019e32:	2dff      	cmp	r5, #255	; 0xff
 8019e34:	d124      	bne.n	8019e80 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8019e36:	f010 0f01 	tst.w	r0, #1
 8019e3a:	f8d8 0000 	ldr.w	r0, [r8]
 8019e3e:	d022      	beq.n	8019e86 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8019e40:	2100      	movs	r1, #0
 8019e42:	f04f 0e01 	mov.w	lr, #1
 8019e46:	f8d0 c000 	ldr.w	ip, [r0]
 8019e4a:	b2b6      	uxth	r6, r6
 8019e4c:	f8cd e018 	str.w	lr, [sp, #24]
 8019e50:	b2bf      	uxth	r7, r7
 8019e52:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8019e56:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8019e5a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8019e5e:	f8b9 e000 	ldrh.w	lr, [r9]
 8019e62:	9503      	str	r5, [sp, #12]
 8019e64:	9601      	str	r6, [sp, #4]
 8019e66:	9700      	str	r7, [sp, #0]
 8019e68:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8019e6c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019e70:	9102      	str	r1, [sp, #8]
 8019e72:	4621      	mov	r1, r4
 8019e74:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8019e78:	47a8      	blx	r5
 8019e7a:	b00e      	add	sp, #56	; 0x38
 8019e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e80:	f010 0f04 	tst.w	r0, #4
 8019e84:	e7d9      	b.n	8019e3a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8019e86:	6803      	ldr	r3, [r0, #0]
 8019e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e8a:	4798      	blx	r3
 8019e8c:	f8b9 3000 	ldrh.w	r3, [r9]
 8019e90:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8019e94:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8019e98:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019e9c:	435e      	muls	r6, r3
 8019e9e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8019ea2:	2dff      	cmp	r5, #255	; 0xff
 8019ea4:	fb03 1202 	mla	r2, r3, r2, r1
 8019ea8:	ebac 0c07 	sub.w	ip, ip, r7
 8019eac:	eba3 0707 	sub.w	r7, r3, r7
 8019eb0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019eb4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019eb8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019ebc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8019ec0:	d049      	beq.n	8019f56 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8019ec2:	43eb      	mvns	r3, r5
 8019ec4:	fa1f f985 	uxth.w	r9, r5
 8019ec8:	b2db      	uxtb	r3, r3
 8019eca:	42b0      	cmp	r0, r6
 8019ecc:	d266      	bcs.n	8019f9c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019ece:	eb00 0a0e 	add.w	sl, r0, lr
 8019ed2:	4550      	cmp	r0, sl
 8019ed4:	4621      	mov	r1, r4
 8019ed6:	f104 0403 	add.w	r4, r4, #3
 8019eda:	d25b      	bcs.n	8019f94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8019edc:	8802      	ldrh	r2, [r0, #0]
 8019ede:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8019ee2:	ea4f 2822 	mov.w	r8, r2, asr #8
 8019ee6:	fb11 f109 	smulbb	r1, r1, r9
 8019eea:	10d5      	asrs	r5, r2, #3
 8019eec:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8019ef0:	00d2      	lsls	r2, r2, #3
 8019ef2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019ef6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8019efa:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019efe:	fb08 1803 	mla	r8, r8, r3, r1
 8019f02:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8019f06:	b2d2      	uxtb	r2, r2
 8019f08:	fb11 f109 	smulbb	r1, r1, r9
 8019f0c:	fa1f f888 	uxth.w	r8, r8
 8019f10:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019f14:	fb05 1503 	mla	r5, r5, r3, r1
 8019f18:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019f1c:	fb11 f109 	smulbb	r1, r1, r9
 8019f20:	b2ad      	uxth	r5, r5
 8019f22:	fb02 1203 	mla	r2, r2, r3, r1
 8019f26:	f108 0101 	add.w	r1, r8, #1
 8019f2a:	b292      	uxth	r2, r2
 8019f2c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8019f30:	1c51      	adds	r1, r2, #1
 8019f32:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8019f36:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019f3a:	1c69      	adds	r1, r5, #1
 8019f3c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8019f40:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019f44:	096d      	lsrs	r5, r5, #5
 8019f46:	ea42 0208 	orr.w	r2, r2, r8
 8019f4a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019f4e:	432a      	orrs	r2, r5
 8019f50:	f820 2b02 	strh.w	r2, [r0], #2
 8019f54:	e7bd      	b.n	8019ed2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8019f56:	4a14      	ldr	r2, [pc, #80]	; (8019fa8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8019f58:	42b0      	cmp	r0, r6
 8019f5a:	d21f      	bcs.n	8019f9c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019f5c:	eb00 050e 	add.w	r5, r0, lr
 8019f60:	42a8      	cmp	r0, r5
 8019f62:	4621      	mov	r1, r4
 8019f64:	f104 0403 	add.w	r4, r4, #3
 8019f68:	d210      	bcs.n	8019f8c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8019f6a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8019f6e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8019f72:	00db      	lsls	r3, r3, #3
 8019f74:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8019f78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019f7c:	430b      	orrs	r3, r1
 8019f7e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019f82:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8019f86:	f820 3b02 	strh.w	r3, [r0], #2
 8019f8a:	e7e9      	b.n	8019f60 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8019f8c:	4438      	add	r0, r7
 8019f8e:	eb01 040c 	add.w	r4, r1, ip
 8019f92:	e7e1      	b.n	8019f58 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8019f94:	4438      	add	r0, r7
 8019f96:	eb01 040c 	add.w	r4, r1, ip
 8019f9a:	e796      	b.n	8019eca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8019f9c:	4b03      	ldr	r3, [pc, #12]	; (8019fac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8019f9e:	6818      	ldr	r0, [r3, #0]
 8019fa0:	6803      	ldr	r3, [r0, #0]
 8019fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fa4:	4798      	blx	r3
 8019fa6:	e768      	b.n	8019e7a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8019fa8:	fffff800 	.word	0xfffff800
 8019fac:	20060c30 	.word	0x20060c30
 8019fb0:	20060c2a 	.word	0x20060c2a

08019fb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8019fb4:	b570      	push	{r4, r5, r6, lr}
 8019fb6:	9c04      	ldr	r4, [sp, #16]
 8019fb8:	4605      	mov	r5, r0
 8019fba:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8019fbe:	4608      	mov	r0, r1
 8019fc0:	4619      	mov	r1, r3
 8019fc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019fc6:	2a0d      	cmp	r2, #13
 8019fc8:	d825      	bhi.n	801a016 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8019fca:	e8df f002 	tbb	[pc, r2]
 8019fce:	1807      	.short	0x1807
 8019fd0:	1d1d1d13 	.word	0x1d1d1d13
 8019fd4:	1d1d1d1d 	.word	0x1d1d1d1d
 8019fd8:	1d1d1d1d 	.word	0x1d1d1d1d
 8019fdc:	682a      	ldr	r2, [r5, #0]
 8019fde:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8019fe2:	68d6      	ldr	r6, [r2, #12]
 8019fe4:	4623      	mov	r3, r4
 8019fe6:	460a      	mov	r2, r1
 8019fe8:	4601      	mov	r1, r0
 8019fea:	46b4      	mov	ip, r6
 8019fec:	4628      	mov	r0, r5
 8019fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ff2:	4760      	bx	ip
 8019ff4:	4622      	mov	r2, r4
 8019ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ffa:	f7ff bd8d 	b.w	8019b18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019ffe:	4622      	mov	r2, r4
 801a000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a004:	f7ff bede 	b.w	8019dc4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801a008:	4b03      	ldr	r3, [pc, #12]	; (801a018 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801a00a:	f240 315d 	movw	r1, #861	; 0x35d
 801a00e:	4a03      	ldr	r2, [pc, #12]	; (801a01c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801a010:	4803      	ldr	r0, [pc, #12]	; (801a020 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801a012:	f00b f9c9 	bl	80253a8 <__assert_func>
 801a016:	bd70      	pop	{r4, r5, r6, pc}
 801a018:	0802c067 	.word	0x0802c067
 801a01c:	0802c7ca 	.word	0x0802c7ca
 801a020:	0802bf42 	.word	0x0802bf42

0801a024 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a028:	b093      	sub	sp, #76	; 0x4c
 801a02a:	880e      	ldrh	r6, [r1, #0]
 801a02c:	4681      	mov	r9, r0
 801a02e:	4688      	mov	r8, r1
 801a030:	4615      	mov	r5, r2
 801a032:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801a036:	b136      	cbz	r6, 801a046 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801a038:	4b70      	ldr	r3, [pc, #448]	; (801a1fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801a03a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801a03e:	4a70      	ldr	r2, [pc, #448]	; (801a200 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801a040:	4870      	ldr	r0, [pc, #448]	; (801a204 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801a042:	f00b f9b1 	bl	80253a8 <__assert_func>
 801a046:	6810      	ldr	r0, [r2, #0]
 801a048:	ac0e      	add	r4, sp, #56	; 0x38
 801a04a:	6851      	ldr	r1, [r2, #4]
 801a04c:	4f6e      	ldr	r7, [pc, #440]	; (801a208 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801a04e:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801a20c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801a052:	c403      	stmia	r4!, {r0, r1}
 801a054:	6818      	ldr	r0, [r3, #0]
 801a056:	ac10      	add	r4, sp, #64	; 0x40
 801a058:	6859      	ldr	r1, [r3, #4]
 801a05a:	c403      	stmia	r4!, {r0, r1}
 801a05c:	a80e      	add	r0, sp, #56	; 0x38
 801a05e:	f7f9 f943 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a062:	4629      	mov	r1, r5
 801a064:	a810      	add	r0, sp, #64	; 0x40
 801a066:	f7f9 f983 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a06a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801a06e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801a072:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a076:	6838      	ldr	r0, [r7, #0]
 801a078:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a07c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801a080:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801a084:	4489      	add	r9, r1
 801a086:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801a08a:	440a      	add	r2, r1
 801a08c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a090:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a094:	4413      	add	r3, r2
 801a096:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a09a:	6803      	ldr	r3, [r0, #0]
 801a09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a09e:	4798      	blx	r3
 801a0a0:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a0a4:	6838      	ldr	r0, [r7, #0]
 801a0a6:	d01d      	beq.n	801a0e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801a0a8:	210b      	movs	r1, #11
 801a0aa:	6802      	ldr	r2, [r0, #0]
 801a0ac:	b2a4      	uxth	r4, r4
 801a0ae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a0b2:	9107      	str	r1, [sp, #28]
 801a0b4:	b2ad      	uxth	r5, r5
 801a0b6:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801a0ba:	f8bb 1000 	ldrh.w	r1, [fp]
 801a0be:	9502      	str	r5, [sp, #8]
 801a0c0:	9106      	str	r1, [sp, #24]
 801a0c2:	2101      	movs	r1, #1
 801a0c4:	9401      	str	r4, [sp, #4]
 801a0c6:	e9cd a104 	strd	sl, r1, [sp, #16]
 801a0ca:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a0ce:	9103      	str	r1, [sp, #12]
 801a0d0:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801a0d4:	9100      	str	r1, [sp, #0]
 801a0d6:	4649      	mov	r1, r9
 801a0d8:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801a0da:	4642      	mov	r2, r8
 801a0dc:	47a0      	blx	r4
 801a0de:	b013      	add	sp, #76	; 0x4c
 801a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e4:	6803      	ldr	r3, [r0, #0]
 801a0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0e8:	4798      	blx	r3
 801a0ea:	f8bb 3000 	ldrh.w	r3, [fp]
 801a0ee:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801a0f2:	f04f 0e04 	mov.w	lr, #4
 801a0f6:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801a0fa:	435d      	muls	r5, r3
 801a0fc:	fb03 1202 	mla	r2, r3, r2, r1
 801a100:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a104:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801a108:	920c      	str	r2, [sp, #48]	; 0x30
 801a10a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801a10e:	1b12      	subs	r2, r2, r4
 801a110:	920d      	str	r2, [sp, #52]	; 0x34
 801a112:	0062      	lsls	r2, r4, #1
 801a114:	1b1c      	subs	r4, r3, r4
 801a116:	920a      	str	r2, [sp, #40]	; 0x28
 801a118:	0063      	lsls	r3, r4, #1
 801a11a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a11c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a11e:	4298      	cmp	r0, r3
 801a120:	d266      	bcs.n	801a1f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801a122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a124:	eb00 0b03 	add.w	fp, r0, r3
 801a128:	4558      	cmp	r0, fp
 801a12a:	d25c      	bcs.n	801a1e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801a12c:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a130:	fb1e e303 	smlabb	r3, lr, r3, lr
 801a134:	f858 2003 	ldr.w	r2, [r8, r3]
 801a138:	0e11      	lsrs	r1, r2, #24
 801a13a:	d012      	beq.n	801a162 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801a13c:	29ff      	cmp	r1, #255	; 0xff
 801a13e:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801a142:	d110      	bne.n	801a166 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801a144:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a148:	d10d      	bne.n	801a166 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801a14a:	0953      	lsrs	r3, r2, #5
 801a14c:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801a150:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a154:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a158:	f027 0707 	bic.w	r7, r7, #7
 801a15c:	431f      	orrs	r7, r3
 801a15e:	433a      	orrs	r2, r7
 801a160:	8002      	strh	r2, [r0, #0]
 801a162:	3002      	adds	r0, #2
 801a164:	e7e0      	b.n	801a128 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801a166:	fb0a f101 	mul.w	r1, sl, r1
 801a16a:	8806      	ldrh	r6, [r0, #0]
 801a16c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801a170:	b2d2      	uxtb	r2, r2
 801a172:	1c4b      	adds	r3, r1, #1
 801a174:	1235      	asrs	r5, r6, #8
 801a176:	10f4      	asrs	r4, r6, #3
 801a178:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801a17c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a180:	00f6      	lsls	r6, r6, #3
 801a182:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801a186:	121b      	asrs	r3, r3, #8
 801a188:	b2f6      	uxtb	r6, r6
 801a18a:	b299      	uxth	r1, r3
 801a18c:	43db      	mvns	r3, r3
 801a18e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801a192:	fb1c fc01 	smulbb	ip, ip, r1
 801a196:	b2db      	uxtb	r3, r3
 801a198:	fb12 f201 	smulbb	r2, r2, r1
 801a19c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a1a0:	fb05 c503 	mla	r5, r5, r3, ip
 801a1a4:	b2ff      	uxtb	r7, r7
 801a1a6:	fb06 2203 	mla	r2, r6, r3, r2
 801a1aa:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801a1ae:	fb17 f701 	smulbb	r7, r7, r1
 801a1b2:	b2ad      	uxth	r5, r5
 801a1b4:	b292      	uxth	r2, r2
 801a1b6:	fb04 7403 	mla	r4, r4, r3, r7
 801a1ba:	f105 0c01 	add.w	ip, r5, #1
 801a1be:	1c57      	adds	r7, r2, #1
 801a1c0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a1c4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a1c8:	b2a4      	uxth	r4, r4
 801a1ca:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801a1ce:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a1d2:	433d      	orrs	r5, r7
 801a1d4:	1c67      	adds	r7, r4, #1
 801a1d6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801a1da:	0964      	lsrs	r4, r4, #5
 801a1dc:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801a1e0:	4325      	orrs	r5, r4
 801a1e2:	8005      	strh	r5, [r0, #0]
 801a1e4:	e7bd      	b.n	801a162 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801a1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1e8:	4418      	add	r0, r3
 801a1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1ec:	4499      	add	r9, r3
 801a1ee:	e795      	b.n	801a11c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801a1f0:	4b05      	ldr	r3, [pc, #20]	; (801a208 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801a1f2:	6818      	ldr	r0, [r3, #0]
 801a1f4:	6803      	ldr	r3, [r0, #0]
 801a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1f8:	4798      	blx	r3
 801a1fa:	e770      	b.n	801a0de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801a1fc:	0802be40 	.word	0x0802be40
 801a200:	0802c59b 	.word	0x0802c59b
 801a204:	0802bf42 	.word	0x0802bf42
 801a208:	20060c30 	.word	0x20060c30
 801a20c:	20060c2a 	.word	0x20060c2a

0801a210 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a214:	4614      	mov	r4, r2
 801a216:	880a      	ldrh	r2, [r1, #0]
 801a218:	b087      	sub	sp, #28
 801a21a:	4680      	mov	r8, r0
 801a21c:	2a02      	cmp	r2, #2
 801a21e:	460d      	mov	r5, r1
 801a220:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801a224:	d006      	beq.n	801a234 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801a226:	4b63      	ldr	r3, [pc, #396]	; (801a3b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801a228:	f240 11e1 	movw	r1, #481	; 0x1e1
 801a22c:	4a62      	ldr	r2, [pc, #392]	; (801a3b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a22e:	4863      	ldr	r0, [pc, #396]	; (801a3bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801a230:	f00b f8ba 	bl	80253a8 <__assert_func>
 801a234:	2e00      	cmp	r6, #0
 801a236:	f000 80b9 	beq.w	801a3ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801a23a:	6820      	ldr	r0, [r4, #0]
 801a23c:	af02      	add	r7, sp, #8
 801a23e:	6861      	ldr	r1, [r4, #4]
 801a240:	c703      	stmia	r7!, {r0, r1}
 801a242:	6818      	ldr	r0, [r3, #0]
 801a244:	af04      	add	r7, sp, #16
 801a246:	6859      	ldr	r1, [r3, #4]
 801a248:	c703      	stmia	r7!, {r0, r1}
 801a24a:	a802      	add	r0, sp, #8
 801a24c:	f7f9 f84c 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a250:	4621      	mov	r1, r4
 801a252:	a804      	add	r0, sp, #16
 801a254:	f7f9 f88c 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a258:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a25c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a260:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801a264:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801a268:	fb14 2103 	smlabb	r1, r4, r3, r2
 801a26c:	eb08 0401 	add.w	r4, r8, r1
 801a270:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a274:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a278:	440a      	add	r2, r1
 801a27a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801a27e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a282:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a286:	4413      	add	r3, r2
 801a288:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a28c:	4b4c      	ldr	r3, [pc, #304]	; (801a3c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a28e:	6818      	ldr	r0, [r3, #0]
 801a290:	6803      	ldr	r3, [r0, #0]
 801a292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a294:	4798      	blx	r3
 801a296:	4b4b      	ldr	r3, [pc, #300]	; (801a3c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801a298:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801a29c:	2eff      	cmp	r6, #255	; 0xff
 801a29e:	881a      	ldrh	r2, [r3, #0]
 801a2a0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801a2a4:	fb02 c101 	mla	r1, r2, r1, ip
 801a2a8:	fb02 f207 	mul.w	r2, r2, r7
 801a2ac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a2b0:	f105 0104 	add.w	r1, r5, #4
 801a2b4:	461d      	mov	r5, r3
 801a2b6:	d05a      	beq.n	801a36e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801a2b8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801a2bc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a2c0:	b2b6      	uxth	r6, r6
 801a2c2:	9301      	str	r3, [sp, #4]
 801a2c4:	fa1f fe8e 	uxth.w	lr, lr
 801a2c8:	4282      	cmp	r2, r0
 801a2ca:	d96a      	bls.n	801a3a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801a2cc:	eb00 0b0a 	add.w	fp, r0, sl
 801a2d0:	4583      	cmp	fp, r0
 801a2d2:	d940      	bls.n	801a356 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801a2d4:	8805      	ldrh	r5, [r0, #0]
 801a2d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a2da:	122f      	asrs	r7, r5, #8
 801a2dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a2e0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a2e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a2e8:	00ed      	lsls	r5, r5, #3
 801a2ea:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a2ee:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a2f2:	fb17 f70e 	smulbb	r7, r7, lr
 801a2f6:	b2ed      	uxtb	r5, r5
 801a2f8:	fb19 f90e 	smulbb	r9, r9, lr
 801a2fc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a300:	fb15 f50e 	smulbb	r5, r5, lr
 801a304:	fb0c 7c06 	mla	ip, ip, r6, r7
 801a308:	10df      	asrs	r7, r3, #3
 801a30a:	00db      	lsls	r3, r3, #3
 801a30c:	fa1f fc8c 	uxth.w	ip, ip
 801a310:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a314:	b2db      	uxtb	r3, r3
 801a316:	fb07 9706 	mla	r7, r7, r6, r9
 801a31a:	f10c 0901 	add.w	r9, ip, #1
 801a31e:	fb03 5306 	mla	r3, r3, r6, r5
 801a322:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801a326:	b29b      	uxth	r3, r3
 801a328:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801a32c:	b2bf      	uxth	r7, r7
 801a32e:	f103 0c01 	add.w	ip, r3, #1
 801a332:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a336:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a33a:	ea4c 0c09 	orr.w	ip, ip, r9
 801a33e:	f107 0901 	add.w	r9, r7, #1
 801a342:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a346:	097f      	lsrs	r7, r7, #5
 801a348:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a34c:	ea4c 0c07 	orr.w	ip, ip, r7
 801a350:	f820 cb02 	strh.w	ip, [r0], #2
 801a354:	e7bc      	b.n	801a2d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801a356:	9b01      	ldr	r3, [sp, #4]
 801a358:	881b      	ldrh	r3, [r3, #0]
 801a35a:	eba3 0308 	sub.w	r3, r3, r8
 801a35e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a362:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a366:	eba3 0308 	sub.w	r3, r3, r8
 801a36a:	441c      	add	r4, r3
 801a36c:	e7ac      	b.n	801a2c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801a36e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a372:	4282      	cmp	r2, r0
 801a374:	d915      	bls.n	801a3a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801a376:	eb00 060a 	add.w	r6, r0, sl
 801a37a:	4286      	cmp	r6, r0
 801a37c:	d906      	bls.n	801a38c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801a37e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a382:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a386:	f820 3b02 	strh.w	r3, [r0], #2
 801a38a:	e7f6      	b.n	801a37a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801a38c:	882b      	ldrh	r3, [r5, #0]
 801a38e:	eba3 0308 	sub.w	r3, r3, r8
 801a392:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a396:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a39a:	eba3 0308 	sub.w	r3, r3, r8
 801a39e:	441c      	add	r4, r3
 801a3a0:	e7e7      	b.n	801a372 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801a3a2:	4b07      	ldr	r3, [pc, #28]	; (801a3c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a3a4:	6818      	ldr	r0, [r3, #0]
 801a3a6:	6803      	ldr	r3, [r0, #0]
 801a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3aa:	4798      	blx	r3
 801a3ac:	b007      	add	sp, #28
 801a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3b2:	bf00      	nop
 801a3b4:	0802bd70 	.word	0x0802bd70
 801a3b8:	0802c405 	.word	0x0802c405
 801a3bc:	0802bf42 	.word	0x0802bf42
 801a3c0:	20060c30 	.word	0x20060c30
 801a3c4:	20060c2a 	.word	0x20060c2a

0801a3c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3cc:	f8b1 9000 	ldrh.w	r9, [r1]
 801a3d0:	b091      	sub	sp, #68	; 0x44
 801a3d2:	4604      	mov	r4, r0
 801a3d4:	460f      	mov	r7, r1
 801a3d6:	f1b9 0f01 	cmp.w	r9, #1
 801a3da:	4690      	mov	r8, r2
 801a3dc:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801a3e0:	d006      	beq.n	801a3f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801a3e2:	4b84      	ldr	r3, [pc, #528]	; (801a5f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801a3e4:	f240 212f 	movw	r1, #559	; 0x22f
 801a3e8:	4a83      	ldr	r2, [pc, #524]	; (801a5f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801a3ea:	4884      	ldr	r0, [pc, #528]	; (801a5fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801a3ec:	f00a ffdc 	bl	80253a8 <__assert_func>
 801a3f0:	2d00      	cmp	r5, #0
 801a3f2:	d04f      	beq.n	801a494 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801a3f4:	6810      	ldr	r0, [r2, #0]
 801a3f6:	ae0c      	add	r6, sp, #48	; 0x30
 801a3f8:	6851      	ldr	r1, [r2, #4]
 801a3fa:	f8df b208 	ldr.w	fp, [pc, #520]	; 801a604 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801a3fe:	c603      	stmia	r6!, {r0, r1}
 801a400:	6818      	ldr	r0, [r3, #0]
 801a402:	ae0e      	add	r6, sp, #56	; 0x38
 801a404:	6859      	ldr	r1, [r3, #4]
 801a406:	c603      	stmia	r6!, {r0, r1}
 801a408:	a80c      	add	r0, sp, #48	; 0x30
 801a40a:	f7f8 ff6d 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a40e:	4641      	mov	r1, r8
 801a410:	a80e      	add	r0, sp, #56	; 0x38
 801a412:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801a608 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801a416:	f7f8 ffab 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a41a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a41e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a422:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a426:	f8db 0000 	ldr.w	r0, [fp]
 801a42a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a42e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801a432:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801a436:	440c      	add	r4, r1
 801a438:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a43c:	440a      	add	r2, r1
 801a43e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a442:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a446:	4413      	add	r3, r2
 801a448:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a44c:	6803      	ldr	r3, [r0, #0]
 801a44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a450:	4798      	blx	r3
 801a452:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a456:	f8db 0000 	ldr.w	r0, [fp]
 801a45a:	d01e      	beq.n	801a49a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801a45c:	2200      	movs	r2, #0
 801a45e:	6801      	ldr	r1, [r0, #0]
 801a460:	b2b6      	uxth	r6, r6
 801a462:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a466:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801a46a:	220b      	movs	r2, #11
 801a46c:	9207      	str	r2, [sp, #28]
 801a46e:	f8b8 2000 	ldrh.w	r2, [r8]
 801a472:	9504      	str	r5, [sp, #16]
 801a474:	9601      	str	r6, [sp, #4]
 801a476:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801a47a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a47e:	9203      	str	r2, [sp, #12]
 801a480:	fa1f f28a 	uxth.w	r2, sl
 801a484:	9202      	str	r2, [sp, #8]
 801a486:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a48a:	9200      	str	r2, [sp, #0]
 801a48c:	463a      	mov	r2, r7
 801a48e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801a490:	4621      	mov	r1, r4
 801a492:	47a8      	blx	r5
 801a494:	b011      	add	sp, #68	; 0x44
 801a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a49a:	6803      	ldr	r3, [r0, #0]
 801a49c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801a4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4a2:	4798      	blx	r3
 801a4a4:	f8b8 2000 	ldrh.w	r2, [r8]
 801a4a8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a4ac:	2dff      	cmp	r5, #255	; 0xff
 801a4ae:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801a4b2:	fb0a fa02 	mul.w	sl, sl, r2
 801a4b6:	fb02 1303 	mla	r3, r2, r3, r1
 801a4ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a4be:	d062      	beq.n	801a586 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801a4c0:	ea6f 0c05 	mvn.w	ip, r5
 801a4c4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801a4c8:	b2ad      	uxth	r5, r5
 801a4ca:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801a4ce:	fa5f fc8c 	uxtb.w	ip, ip
 801a4d2:	930a      	str	r3, [sp, #40]	; 0x28
 801a4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4d6:	4298      	cmp	r0, r3
 801a4d8:	f080 8085 	bcs.w	801a5e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801a4dc:	eb00 0b09 	add.w	fp, r0, r9
 801a4e0:	4558      	cmp	r0, fp
 801a4e2:	d246      	bcs.n	801a572 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801a4e4:	f814 eb01 	ldrb.w	lr, [r4], #1
 801a4e8:	2303      	movs	r3, #3
 801a4ea:	2204      	movs	r2, #4
 801a4ec:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801a4f0:	8803      	ldrh	r3, [r0, #0]
 801a4f2:	eb07 0a0e 	add.w	sl, r7, lr
 801a4f6:	1219      	asrs	r1, r3, #8
 801a4f8:	10da      	asrs	r2, r3, #3
 801a4fa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a4fe:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801a502:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a506:	00db      	lsls	r3, r3, #3
 801a508:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a50c:	fb18 f805 	smulbb	r8, r8, r5
 801a510:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801a514:	fb1e fe05 	smulbb	lr, lr, r5
 801a518:	b2db      	uxtb	r3, r3
 801a51a:	fb01 810c 	mla	r1, r1, ip, r8
 801a51e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a522:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801a526:	fb18 f805 	smulbb	r8, r8, r5
 801a52a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801a52e:	b289      	uxth	r1, r1
 801a530:	fb02 820c 	mla	r2, r2, ip, r8
 801a534:	fb03 e30c 	mla	r3, r3, ip, lr
 801a538:	f101 0801 	add.w	r8, r1, #1
 801a53c:	b292      	uxth	r2, r2
 801a53e:	b29b      	uxth	r3, r3
 801a540:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a544:	f102 0801 	add.w	r8, r2, #1
 801a548:	f103 0e01 	add.w	lr, r3, #1
 801a54c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801a550:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801a554:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a558:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a55c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801a560:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a564:	ea4e 0101 	orr.w	r1, lr, r1
 801a568:	ea41 0108 	orr.w	r1, r1, r8
 801a56c:	f820 1b02 	strh.w	r1, [r0], #2
 801a570:	e7b6      	b.n	801a4e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801a572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a574:	881b      	ldrh	r3, [r3, #0]
 801a576:	1b9b      	subs	r3, r3, r6
 801a578:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a57c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a580:	1b9b      	subs	r3, r3, r6
 801a582:	441c      	add	r4, r3
 801a584:	e7a6      	b.n	801a4d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801a586:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801a58a:	2203      	movs	r2, #3
 801a58c:	2504      	movs	r5, #4
 801a58e:	491c      	ldr	r1, [pc, #112]	; (801a600 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801a590:	4550      	cmp	r0, sl
 801a592:	d228      	bcs.n	801a5e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801a594:	eb00 0c09 	add.w	ip, r0, r9
 801a598:	4560      	cmp	r0, ip
 801a59a:	4623      	mov	r3, r4
 801a59c:	d219      	bcs.n	801a5d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801a59e:	f893 e000 	ldrb.w	lr, [r3]
 801a5a2:	3401      	adds	r4, #1
 801a5a4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801a5a8:	eb07 0b0e 	add.w	fp, r7, lr
 801a5ac:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a5b0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801a5b4:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a5b8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801a5bc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a5c0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a5c4:	ea43 030b 	orr.w	r3, r3, fp
 801a5c8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801a5cc:	f820 3b02 	strh.w	r3, [r0], #2
 801a5d0:	e7e2      	b.n	801a598 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801a5d2:	f8b8 3000 	ldrh.w	r3, [r8]
 801a5d6:	1b9b      	subs	r3, r3, r6
 801a5d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a5dc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a5e0:	1b9b      	subs	r3, r3, r6
 801a5e2:	441c      	add	r4, r3
 801a5e4:	e7d4      	b.n	801a590 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801a5e6:	4b07      	ldr	r3, [pc, #28]	; (801a604 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801a5e8:	6818      	ldr	r0, [r3, #0]
 801a5ea:	6803      	ldr	r3, [r0, #0]
 801a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5ee:	4798      	blx	r3
 801a5f0:	e750      	b.n	801a494 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801a5f2:	bf00      	nop
 801a5f4:	0802bdbe 	.word	0x0802bdbe
 801a5f8:	0802c48e 	.word	0x0802c48e
 801a5fc:	0802bf42 	.word	0x0802bf42
 801a600:	fffff800 	.word	0xfffff800
 801a604:	20060c30 	.word	0x20060c30
 801a608:	20060c2a 	.word	0x20060c2a

0801a60c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a60c:	b430      	push	{r4, r5}
 801a60e:	780d      	ldrb	r5, [r1, #0]
 801a610:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801a614:	2d01      	cmp	r5, #1
 801a616:	d00a      	beq.n	801a62e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801a618:	d305      	bcc.n	801a626 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801a61a:	2d02      	cmp	r5, #2
 801a61c:	d10b      	bne.n	801a636 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801a61e:	9402      	str	r4, [sp, #8]
 801a620:	bc30      	pop	{r4, r5}
 801a622:	f7ff bdf5 	b.w	801a210 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801a626:	9402      	str	r4, [sp, #8]
 801a628:	bc30      	pop	{r4, r5}
 801a62a:	f7ff bcfb 	b.w	801a024 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a62e:	9402      	str	r4, [sp, #8]
 801a630:	bc30      	pop	{r4, r5}
 801a632:	f7ff bec9 	b.w	801a3c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801a636:	bc30      	pop	{r4, r5}
 801a638:	4770      	bx	lr
	...

0801a63c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a640:	b087      	sub	sp, #28
 801a642:	4604      	mov	r4, r0
 801a644:	460e      	mov	r6, r1
 801a646:	6810      	ldr	r0, [r2, #0]
 801a648:	6851      	ldr	r1, [r2, #4]
 801a64a:	ad02      	add	r5, sp, #8
 801a64c:	4617      	mov	r7, r2
 801a64e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801a652:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801a884 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801a656:	c503      	stmia	r5!, {r0, r1}
 801a658:	6818      	ldr	r0, [r3, #0]
 801a65a:	ad04      	add	r5, sp, #16
 801a65c:	6859      	ldr	r1, [r3, #4]
 801a65e:	c503      	stmia	r5!, {r0, r1}
 801a660:	a802      	add	r0, sp, #8
 801a662:	f7f8 fe41 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a666:	4639      	mov	r1, r7
 801a668:	a804      	add	r0, sp, #16
 801a66a:	f7f8 fe81 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a66e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a672:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a676:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a67a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a67e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a682:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801a686:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801a68a:	440e      	add	r6, r1
 801a68c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a690:	440a      	add	r2, r1
 801a692:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a696:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a69a:	4413      	add	r3, r2
 801a69c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a6a0:	4b77      	ldr	r3, [pc, #476]	; (801a880 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801a6a2:	6818      	ldr	r0, [r3, #0]
 801a6a4:	6803      	ldr	r3, [r0, #0]
 801a6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6a8:	4798      	blx	r3
 801a6aa:	f8b9 b000 	ldrh.w	fp, [r9]
 801a6ae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a6b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a6b6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a6ba:	fb05 f50b 	mul.w	r5, r5, fp
 801a6be:	fb0b 2303 	mla	r3, fp, r3, r2
 801a6c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a6c6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a6ca:	9300      	str	r3, [sp, #0]
 801a6cc:	d069      	beq.n	801a7a2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801a6ce:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801a6d2:	4558      	cmp	r0, fp
 801a6d4:	f080 80cc 	bcs.w	801a870 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801a6d8:	9b00      	ldr	r3, [sp, #0]
 801a6da:	4631      	mov	r1, r6
 801a6dc:	18c3      	adds	r3, r0, r3
 801a6de:	9301      	str	r3, [sp, #4]
 801a6e0:	9b01      	ldr	r3, [sp, #4]
 801a6e2:	4298      	cmp	r0, r3
 801a6e4:	d24f      	bcs.n	801a786 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801a6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a6ea:	2a00      	cmp	r2, #0
 801a6ec:	d048      	beq.n	801a780 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801a6ee:	fb0a f202 	mul.w	r2, sl, r2
 801a6f2:	1c53      	adds	r3, r2, #1
 801a6f4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a6f8:	121b      	asrs	r3, r3, #8
 801a6fa:	d041      	beq.n	801a780 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801a6fc:	8802      	ldrh	r2, [r0, #0]
 801a6fe:	b29e      	uxth	r6, r3
 801a700:	f8b4 c000 	ldrh.w	ip, [r4]
 801a704:	43db      	mvns	r3, r3
 801a706:	1215      	asrs	r5, r2, #8
 801a708:	b2db      	uxtb	r3, r3
 801a70a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a70e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a712:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801a716:	fb15 f503 	smulbb	r5, r5, r3
 801a71a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a71e:	00d2      	lsls	r2, r2, #3
 801a720:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801a724:	fb07 5706 	mla	r7, r7, r6, r5
 801a728:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801a72c:	b2d2      	uxtb	r2, r2
 801a72e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a732:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a736:	fb1e fe03 	smulbb	lr, lr, r3
 801a73a:	b2bf      	uxth	r7, r7
 801a73c:	fb12 f203 	smulbb	r2, r2, r3
 801a740:	fa5f fc8c 	uxtb.w	ip, ip
 801a744:	fb05 e506 	mla	r5, r5, r6, lr
 801a748:	f107 0e01 	add.w	lr, r7, #1
 801a74c:	fb0c 2c06 	mla	ip, ip, r6, r2
 801a750:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801a754:	fa1f fc8c 	uxth.w	ip, ip
 801a758:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801a75c:	b2ad      	uxth	r5, r5
 801a75e:	f10c 0701 	add.w	r7, ip, #1
 801a762:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a766:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a76a:	ea47 070e 	orr.w	r7, r7, lr
 801a76e:	f105 0e01 	add.w	lr, r5, #1
 801a772:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801a776:	096d      	lsrs	r5, r5, #5
 801a778:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a77c:	432f      	orrs	r7, r5
 801a77e:	8007      	strh	r7, [r0, #0]
 801a780:	3002      	adds	r0, #2
 801a782:	3402      	adds	r4, #2
 801a784:	e7ac      	b.n	801a6e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801a786:	f8b9 3000 	ldrh.w	r3, [r9]
 801a78a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801a78e:	eba3 0308 	sub.w	r3, r3, r8
 801a792:	eba6 0608 	sub.w	r6, r6, r8
 801a796:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a79a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801a79e:	440e      	add	r6, r1
 801a7a0:	e797      	b.n	801a6d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801a7a2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a7a6:	42a8      	cmp	r0, r5
 801a7a8:	d262      	bcs.n	801a870 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801a7aa:	9b00      	ldr	r3, [sp, #0]
 801a7ac:	4631      	mov	r1, r6
 801a7ae:	eb00 0b03 	add.w	fp, r0, r3
 801a7b2:	4558      	cmp	r0, fp
 801a7b4:	d24e      	bcs.n	801a854 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801a7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a7ba:	b12b      	cbz	r3, 801a7c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801a7bc:	2bff      	cmp	r3, #255	; 0xff
 801a7be:	f8b4 e000 	ldrh.w	lr, [r4]
 801a7c2:	d104      	bne.n	801a7ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801a7c4:	f8a0 e000 	strh.w	lr, [r0]
 801a7c8:	3002      	adds	r0, #2
 801a7ca:	3402      	adds	r4, #2
 801a7cc:	e7f1      	b.n	801a7b2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801a7ce:	8802      	ldrh	r2, [r0, #0]
 801a7d0:	b29f      	uxth	r7, r3
 801a7d2:	43db      	mvns	r3, r3
 801a7d4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a7d8:	1216      	asrs	r6, r2, #8
 801a7da:	b2db      	uxtb	r3, r3
 801a7dc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a7e0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a7e4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801a7e8:	00d2      	lsls	r2, r2, #3
 801a7ea:	fb16 f603 	smulbb	r6, r6, r3
 801a7ee:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a7f2:	b2d2      	uxtb	r2, r2
 801a7f4:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a7f8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a7fc:	fb1a fa03 	smulbb	sl, sl, r3
 801a800:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a804:	fa1f fc8c 	uxth.w	ip, ip
 801a808:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a80c:	fb12 f303 	smulbb	r3, r2, r3
 801a810:	fa5f fe8e 	uxtb.w	lr, lr
 801a814:	fb06 a607 	mla	r6, r6, r7, sl
 801a818:	f10c 0201 	add.w	r2, ip, #1
 801a81c:	fb0e 3307 	mla	r3, lr, r7, r3
 801a820:	b2b6      	uxth	r6, r6
 801a822:	b29b      	uxth	r3, r3
 801a824:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801a828:	f106 0a01 	add.w	sl, r6, #1
 801a82c:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801a830:	f103 0c01 	add.w	ip, r3, #1
 801a834:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801a838:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a83c:	0976      	lsrs	r6, r6, #5
 801a83e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a842:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a846:	ea4c 0c02 	orr.w	ip, ip, r2
 801a84a:	ea4c 0c06 	orr.w	ip, ip, r6
 801a84e:	f8a0 c000 	strh.w	ip, [r0]
 801a852:	e7b9      	b.n	801a7c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801a854:	f8b9 3000 	ldrh.w	r3, [r9]
 801a858:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801a85c:	eba3 0308 	sub.w	r3, r3, r8
 801a860:	eba6 0608 	sub.w	r6, r6, r8
 801a864:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a868:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801a86c:	440e      	add	r6, r1
 801a86e:	e79a      	b.n	801a7a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801a870:	4b03      	ldr	r3, [pc, #12]	; (801a880 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801a872:	6818      	ldr	r0, [r3, #0]
 801a874:	6803      	ldr	r3, [r0, #0]
 801a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a878:	4798      	blx	r3
 801a87a:	b007      	add	sp, #28
 801a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a880:	20060c30 	.word	0x20060c30
 801a884:	20060c2a 	.word	0x20060c2a

0801a888 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a88c:	b089      	sub	sp, #36	; 0x24
 801a88e:	4682      	mov	sl, r0
 801a890:	460f      	mov	r7, r1
 801a892:	4691      	mov	r9, r2
 801a894:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801a898:	4698      	mov	r8, r3
 801a89a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a89c:	2e00      	cmp	r6, #0
 801a89e:	d03d      	beq.n	801a91c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801a8a0:	4608      	mov	r0, r1
 801a8a2:	f7fc f857 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a8a6:	4605      	mov	r5, r0
 801a8a8:	4638      	mov	r0, r7
 801a8aa:	f7fc f88d 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a8ae:	f8ad 000e 	strh.w	r0, [sp, #14]
 801a8b2:	4638      	mov	r0, r7
 801a8b4:	f8ad 9008 	strh.w	r9, [sp, #8]
 801a8b8:	f8ad 500c 	strh.w	r5, [sp, #12]
 801a8bc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801a8c0:	f7fc f950 	bl	8016b64 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a8c4:	4605      	mov	r5, r0
 801a8c6:	4638      	mov	r0, r7
 801a8c8:	f7fc f97e 	bl	8016bc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801a8cc:	4681      	mov	r9, r0
 801a8ce:	4638      	mov	r0, r7
 801a8d0:	f7fc f9d2 	bl	8016c78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a8d4:	280b      	cmp	r0, #11
 801a8d6:	f200 816f 	bhi.w	801abb8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801a8da:	e8df f010 	tbh	[pc, r0, lsl #1]
 801a8de:	00c3      	.short	0x00c3
 801a8e0:	000c00b4 	.word	0x000c00b4
 801a8e4:	016d016d 	.word	0x016d016d
 801a8e8:	016d016d 	.word	0x016d016d
 801a8ec:	016d016d 	.word	0x016d016d
 801a8f0:	016d016d 	.word	0x016d016d
 801a8f4:	00bb      	.short	0x00bb
 801a8f6:	4bb3      	ldr	r3, [pc, #716]	; (801abc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801a8f8:	6818      	ldr	r0, [r3, #0]
 801a8fa:	6803      	ldr	r3, [r0, #0]
 801a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8fe:	4798      	blx	r3
 801a900:	2eff      	cmp	r6, #255	; 0xff
 801a902:	d121      	bne.n	801a948 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801a904:	0683      	lsls	r3, r0, #26
 801a906:	d41f      	bmi.n	801a948 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801a908:	4638      	mov	r0, r7
 801a90a:	f7fc f8f1 	bl	8016af0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a90e:	b940      	cbnz	r0, 801a922 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801a910:	4623      	mov	r3, r4
 801a912:	aa02      	add	r2, sp, #8
 801a914:	4629      	mov	r1, r5
 801a916:	4650      	mov	r0, sl
 801a918:	f7ff f9e4 	bl	8019ce4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801a91c:	b009      	add	sp, #36	; 0x24
 801a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a922:	f10d 0818 	add.w	r8, sp, #24
 801a926:	4639      	mov	r1, r7
 801a928:	af04      	add	r7, sp, #16
 801a92a:	4640      	mov	r0, r8
 801a92c:	f7fc f886 	bl	8016a3c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a930:	e898 0003 	ldmia.w	r8, {r0, r1}
 801a934:	e887 0003 	stmia.w	r7, {r0, r1}
 801a938:	4638      	mov	r0, r7
 801a93a:	4621      	mov	r1, r4
 801a93c:	f7f4 f9a4 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 801a940:	4638      	mov	r0, r7
 801a942:	f7f4 f9e4 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a946:	b130      	cbz	r0, 801a956 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801a948:	4633      	mov	r3, r6
 801a94a:	4622      	mov	r2, r4
 801a94c:	a902      	add	r1, sp, #8
 801a94e:	4628      	mov	r0, r5
 801a950:	f7ff f8e2 	bl	8019b18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a954:	e7e2      	b.n	801a91c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801a956:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a95a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a95e:	4293      	cmp	r3, r2
 801a960:	dd12      	ble.n	801a988 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801a962:	1a9b      	subs	r3, r3, r2
 801a964:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a968:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a96c:	f8ad 0018 	strh.w	r0, [sp, #24]
 801a970:	4628      	mov	r0, r5
 801a972:	f8ad 201a 	strh.w	r2, [sp, #26]
 801a976:	4642      	mov	r2, r8
 801a978:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a97c:	a902      	add	r1, sp, #8
 801a97e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a982:	4633      	mov	r3, r6
 801a984:	f7ff f8c8 	bl	8019b18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a988:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801a98c:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a990:	4293      	cmp	r3, r2
 801a992:	dd12      	ble.n	801a9ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801a994:	1a9b      	subs	r3, r3, r2
 801a996:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a99a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801a99e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a9a2:	4642      	mov	r2, r8
 801a9a4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a9ae:	23ff      	movs	r3, #255	; 0xff
 801a9b0:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a9b4:	a902      	add	r1, sp, #8
 801a9b6:	f7ff f8af 	bl	8019b18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a9ba:	463b      	mov	r3, r7
 801a9bc:	aa02      	add	r2, sp, #8
 801a9be:	4629      	mov	r1, r5
 801a9c0:	4650      	mov	r0, sl
 801a9c2:	f7ff f98f 	bl	8019ce4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801a9c6:	88a2      	ldrh	r2, [r4, #4]
 801a9c8:	8823      	ldrh	r3, [r4, #0]
 801a9ca:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801a9ce:	4413      	add	r3, r2
 801a9d0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a9d4:	440a      	add	r2, r1
 801a9d6:	b29b      	uxth	r3, r3
 801a9d8:	b292      	uxth	r2, r2
 801a9da:	b218      	sxth	r0, r3
 801a9dc:	b211      	sxth	r1, r2
 801a9de:	4288      	cmp	r0, r1
 801a9e0:	dd12      	ble.n	801aa08 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801a9e2:	1a9b      	subs	r3, r3, r2
 801a9e4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801a9e8:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801a9ec:	4642      	mov	r2, r8
 801a9ee:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a9f2:	a902      	add	r1, sp, #8
 801a9f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a9f8:	23ff      	movs	r3, #255	; 0xff
 801a9fa:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a9fe:	4628      	mov	r0, r5
 801aa00:	f8ad 601a 	strh.w	r6, [sp, #26]
 801aa04:	f7ff f888 	bl	8019b18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aa08:	88e2      	ldrh	r2, [r4, #6]
 801aa0a:	8863      	ldrh	r3, [r4, #2]
 801aa0c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801aa10:	4413      	add	r3, r2
 801aa12:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801aa16:	440a      	add	r2, r1
 801aa18:	b29b      	uxth	r3, r3
 801aa1a:	b292      	uxth	r2, r2
 801aa1c:	b218      	sxth	r0, r3
 801aa1e:	b211      	sxth	r1, r2
 801aa20:	4288      	cmp	r0, r1
 801aa22:	f77f af7b 	ble.w	801a91c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801aa26:	1a9b      	subs	r3, r3, r2
 801aa28:	f9b4 6000 	ldrsh.w	r6, [r4]
 801aa2c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801aa30:	4642      	mov	r2, r8
 801aa32:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aa36:	23ff      	movs	r3, #255	; 0xff
 801aa38:	f8ad 6018 	strh.w	r6, [sp, #24]
 801aa3c:	f8ad 101a 	strh.w	r1, [sp, #26]
 801aa40:	f8ad 001c 	strh.w	r0, [sp, #28]
 801aa44:	e782      	b.n	801a94c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801aa46:	4633      	mov	r3, r6
 801aa48:	4622      	mov	r2, r4
 801aa4a:	a902      	add	r1, sp, #8
 801aa4c:	4628      	mov	r0, r5
 801aa4e:	f7ff f9b9 	bl	8019dc4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801aa52:	e763      	b.n	801a91c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801aa54:	9600      	str	r6, [sp, #0]
 801aa56:	4623      	mov	r3, r4
 801aa58:	aa02      	add	r2, sp, #8
 801aa5a:	4649      	mov	r1, r9
 801aa5c:	4628      	mov	r0, r5
 801aa5e:	f7ff fdd5 	bl	801a60c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801aa62:	e75b      	b.n	801a91c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801aa64:	4638      	mov	r0, r7
 801aa66:	f7fc f843 	bl	8016af0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801aa6a:	b950      	cbnz	r0, 801aa82 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801aa6c:	f8da 3000 	ldr.w	r3, [sl]
 801aa70:	aa02      	add	r2, sp, #8
 801aa72:	4629      	mov	r1, r5
 801aa74:	e9cd 6000 	strd	r6, r0, [sp]
 801aa78:	4650      	mov	r0, sl
 801aa7a:	68de      	ldr	r6, [r3, #12]
 801aa7c:	4623      	mov	r3, r4
 801aa7e:	47b0      	blx	r6
 801aa80:	e74c      	b.n	801a91c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801aa82:	f10d 0818 	add.w	r8, sp, #24
 801aa86:	4639      	mov	r1, r7
 801aa88:	af04      	add	r7, sp, #16
 801aa8a:	4640      	mov	r0, r8
 801aa8c:	f7fb ffd6 	bl	8016a3c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801aa90:	e898 0003 	ldmia.w	r8, {r0, r1}
 801aa94:	e887 0003 	stmia.w	r7, {r0, r1}
 801aa98:	4638      	mov	r0, r7
 801aa9a:	4621      	mov	r1, r4
 801aa9c:	f7f4 f8f4 	bl	800ec88 <_ZN8touchgfx4RectaNERKS0_>
 801aaa0:	4638      	mov	r0, r7
 801aaa2:	f7f4 f934 	bl	800ed0e <_ZNK8touchgfx4Rect7isEmptyEv>
 801aaa6:	b138      	cbz	r0, 801aab8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801aaa8:	4623      	mov	r3, r4
 801aaaa:	9600      	str	r6, [sp, #0]
 801aaac:	aa02      	add	r2, sp, #8
 801aaae:	4649      	mov	r1, r9
 801aab0:	4628      	mov	r0, r5
 801aab2:	f7ff fdc3 	bl	801a63c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801aab6:	e731      	b.n	801a91c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801aab8:	f8da 3000 	ldr.w	r3, [sl]
 801aabc:	aa02      	add	r2, sp, #8
 801aabe:	4629      	mov	r1, r5
 801aac0:	e9cd 6000 	strd	r6, r0, [sp]
 801aac4:	4650      	mov	r0, sl
 801aac6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801aaca:	463b      	mov	r3, r7
 801aacc:	47d8      	blx	fp
 801aace:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aad2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801aad6:	4293      	cmp	r3, r2
 801aad8:	dd13      	ble.n	801ab02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801aada:	f9b4 0000 	ldrsh.w	r0, [r4]
 801aade:	1a9b      	subs	r3, r3, r2
 801aae0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801aae4:	f8ad 0018 	strh.w	r0, [sp, #24]
 801aae8:	4628      	mov	r0, r5
 801aaea:	f8ad 201a 	strh.w	r2, [sp, #26]
 801aaee:	aa02      	add	r2, sp, #8
 801aaf0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aaf4:	4649      	mov	r1, r9
 801aaf6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aafa:	4643      	mov	r3, r8
 801aafc:	9600      	str	r6, [sp, #0]
 801aafe:	f7ff fd9d 	bl	801a63c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ab02:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ab06:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ab0a:	4293      	cmp	r3, r2
 801ab0c:	dd13      	ble.n	801ab36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801ab0e:	1a9b      	subs	r3, r3, r2
 801ab10:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ab14:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ab18:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ab1c:	aa02      	add	r2, sp, #8
 801ab1e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ab22:	4628      	mov	r0, r5
 801ab24:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ab28:	4643      	mov	r3, r8
 801ab2a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ab2e:	4649      	mov	r1, r9
 801ab30:	9600      	str	r6, [sp, #0]
 801ab32:	f7ff fd83 	bl	801a63c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ab36:	88a2      	ldrh	r2, [r4, #4]
 801ab38:	8823      	ldrh	r3, [r4, #0]
 801ab3a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ab3e:	4413      	add	r3, r2
 801ab40:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ab44:	440a      	add	r2, r1
 801ab46:	b29b      	uxth	r3, r3
 801ab48:	b292      	uxth	r2, r2
 801ab4a:	b218      	sxth	r0, r3
 801ab4c:	b211      	sxth	r1, r2
 801ab4e:	4288      	cmp	r0, r1
 801ab50:	dd13      	ble.n	801ab7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801ab52:	1a9b      	subs	r3, r3, r2
 801ab54:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801ab58:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801ab5c:	aa02      	add	r2, sp, #8
 801ab5e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ab62:	4649      	mov	r1, r9
 801ab64:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ab68:	4643      	mov	r3, r8
 801ab6a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ab6e:	4628      	mov	r0, r5
 801ab70:	9600      	str	r6, [sp, #0]
 801ab72:	f8ad 701a 	strh.w	r7, [sp, #26]
 801ab76:	f7ff fd61 	bl	801a63c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ab7a:	88e2      	ldrh	r2, [r4, #6]
 801ab7c:	8863      	ldrh	r3, [r4, #2]
 801ab7e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ab82:	4413      	add	r3, r2
 801ab84:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ab88:	440a      	add	r2, r1
 801ab8a:	b29b      	uxth	r3, r3
 801ab8c:	b292      	uxth	r2, r2
 801ab8e:	b218      	sxth	r0, r3
 801ab90:	b211      	sxth	r1, r2
 801ab92:	4288      	cmp	r0, r1
 801ab94:	f77f aec2 	ble.w	801a91c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ab98:	f9b4 7000 	ldrsh.w	r7, [r4]
 801ab9c:	1a9b      	subs	r3, r3, r2
 801ab9e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801aba2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aba6:	4643      	mov	r3, r8
 801aba8:	f8ad 7018 	strh.w	r7, [sp, #24]
 801abac:	f8ad 101a 	strh.w	r1, [sp, #26]
 801abb0:	f8ad 001c 	strh.w	r0, [sp, #28]
 801abb4:	9600      	str	r6, [sp, #0]
 801abb6:	e779      	b.n	801aaac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801abb8:	4b03      	ldr	r3, [pc, #12]	; (801abc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801abba:	21b4      	movs	r1, #180	; 0xb4
 801abbc:	4a03      	ldr	r2, [pc, #12]	; (801abcc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801abbe:	4804      	ldr	r0, [pc, #16]	; (801abd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801abc0:	f00a fbf2 	bl	80253a8 <__assert_func>
 801abc4:	20060c30 	.word	0x20060c30
 801abc8:	0802be0c 	.word	0x0802be0c
 801abcc:	0802c517 	.word	0x0802c517
 801abd0:	0802bf42 	.word	0x0802bf42

0801abd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801abd4:	b508      	push	{r3, lr}
 801abd6:	b180      	cbz	r0, 801abfa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801abd8:	2902      	cmp	r1, #2
 801abda:	d014      	beq.n	801ac06 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801abdc:	2903      	cmp	r1, #3
 801abde:	d01d      	beq.n	801ac1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801abe0:	2901      	cmp	r1, #1
 801abe2:	d101      	bne.n	801abe8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801abe4:	2001      	movs	r0, #1
 801abe6:	bd08      	pop	{r3, pc}
 801abe8:	4b0e      	ldr	r3, [pc, #56]	; (801ac24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801abea:	8818      	ldrh	r0, [r3, #0]
 801abec:	b990      	cbnz	r0, 801ac14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801abee:	4b0e      	ldr	r3, [pc, #56]	; (801ac28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801abf0:	2150      	movs	r1, #80	; 0x50
 801abf2:	4a0e      	ldr	r2, [pc, #56]	; (801ac2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801abf4:	480e      	ldr	r0, [pc, #56]	; (801ac30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801abf6:	f00a fbd7 	bl	80253a8 <__assert_func>
 801abfa:	2902      	cmp	r1, #2
 801abfc:	d00e      	beq.n	801ac1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801abfe:	2903      	cmp	r1, #3
 801ac00:	d0f2      	beq.n	801abe8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801ac02:	2901      	cmp	r1, #1
 801ac04:	d1ee      	bne.n	801abe4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801ac06:	4b07      	ldr	r3, [pc, #28]	; (801ac24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ac08:	8818      	ldrh	r0, [r3, #0]
 801ac0a:	2800      	cmp	r0, #0
 801ac0c:	d0ef      	beq.n	801abee <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801ac0e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ac12:	e7e8      	b.n	801abe6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ac14:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ac18:	4240      	negs	r0, r0
 801ac1a:	e7e4      	b.n	801abe6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 801ac20:	e7e1      	b.n	801abe6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ac22:	bf00      	nop
 801ac24:	20060c2a 	.word	0x20060c2a
 801ac28:	0802c098 	.word	0x0802c098
 801ac2c:	0802c694 	.word	0x0802c694
 801ac30:	0802c0da 	.word	0x0802c0da

0801ac34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801ac34:	b508      	push	{r3, lr}
 801ac36:	b180      	cbz	r0, 801ac5a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801ac38:	2902      	cmp	r1, #2
 801ac3a:	d014      	beq.n	801ac66 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801ac3c:	2903      	cmp	r1, #3
 801ac3e:	d018      	beq.n	801ac72 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801ac40:	2901      	cmp	r1, #1
 801ac42:	d001      	beq.n	801ac48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801ac44:	2001      	movs	r0, #1
 801ac46:	e013      	b.n	801ac70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801ac48:	4b0e      	ldr	r3, [pc, #56]	; (801ac84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ac4a:	8818      	ldrh	r0, [r3, #0]
 801ac4c:	b970      	cbnz	r0, 801ac6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801ac4e:	4b0e      	ldr	r3, [pc, #56]	; (801ac88 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801ac50:	2150      	movs	r1, #80	; 0x50
 801ac52:	4a0e      	ldr	r2, [pc, #56]	; (801ac8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801ac54:	480e      	ldr	r0, [pc, #56]	; (801ac90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801ac56:	f00a fba7 	bl	80253a8 <__assert_func>
 801ac5a:	2902      	cmp	r1, #2
 801ac5c:	d009      	beq.n	801ac72 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801ac5e:	2903      	cmp	r1, #3
 801ac60:	d0f0      	beq.n	801ac44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801ac62:	2901      	cmp	r1, #1
 801ac64:	d1f0      	bne.n	801ac48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801ac66:	f04f 30ff 	mov.w	r0, #4294967295
 801ac6a:	e001      	b.n	801ac70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801ac6c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ac70:	bd08      	pop	{r3, pc}
 801ac72:	4b04      	ldr	r3, [pc, #16]	; (801ac84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ac74:	8818      	ldrh	r0, [r3, #0]
 801ac76:	2800      	cmp	r0, #0
 801ac78:	d0e9      	beq.n	801ac4e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801ac7a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ac7e:	4240      	negs	r0, r0
 801ac80:	e7f6      	b.n	801ac70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801ac82:	bf00      	nop
 801ac84:	20060c2a 	.word	0x20060c2a
 801ac88:	0802c098 	.word	0x0802c098
 801ac8c:	0802c694 	.word	0x0802c694
 801ac90:	0802c0da 	.word	0x0802c0da

0801ac94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ac94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac98:	b099      	sub	sp, #100	; 0x64
 801ac9a:	910b      	str	r1, [sp, #44]	; 0x2c
 801ac9c:	a914      	add	r1, sp, #80	; 0x50
 801ac9e:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801aca2:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801aca6:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801acaa:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801acae:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801acb2:	e881 000c 	stmia.w	r1, {r2, r3}
 801acb6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801acba:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801acbe:	930a      	str	r3, [sp, #40]	; 0x28
 801acc0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801acc4:	f891 900d 	ldrb.w	r9, [r1, #13]
 801acc8:	9311      	str	r3, [sp, #68]	; 0x44
 801acca:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801acce:	7988      	ldrb	r0, [r1, #6]
 801acd0:	930c      	str	r3, [sp, #48]	; 0x30
 801acd2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801acd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801acda:	4303      	orrs	r3, r0
 801acdc:	9309      	str	r3, [sp, #36]	; 0x24
 801acde:	f000 81a1 	beq.w	801b024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801ace2:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801ace6:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801acea:	f891 9007 	ldrb.w	r9, [r1, #7]
 801acee:	ea59 0903 	orrs.w	r9, r9, r3
 801acf2:	f000 8197 	beq.w	801b024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801acf6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801acfa:	b29b      	uxth	r3, r3
 801acfc:	2e00      	cmp	r6, #0
 801acfe:	f000 813a 	beq.w	801af76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801ad02:	1af6      	subs	r6, r6, r3
 801ad04:	b2b6      	uxth	r6, r6
 801ad06:	0433      	lsls	r3, r6, #16
 801ad08:	d502      	bpl.n	801ad10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801ad0a:	1bad      	subs	r5, r5, r6
 801ad0c:	2600      	movs	r6, #0
 801ad0e:	b22d      	sxth	r5, r5
 801ad10:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ad14:	a814      	add	r0, sp, #80	; 0x50
 801ad16:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801ad1a:	428d      	cmp	r5, r1
 801ad1c:	b28b      	uxth	r3, r1
 801ad1e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801ad22:	bfbf      	itttt	lt
 801ad24:	18f6      	addlt	r6, r6, r3
 801ad26:	1b75      	sublt	r5, r6, r5
 801ad28:	b2ae      	uxthlt	r6, r5
 801ad2a:	460d      	movlt	r5, r1
 801ad2c:	8891      	ldrh	r1, [r2, #4]
 801ad2e:	440b      	add	r3, r1
 801ad30:	4629      	mov	r1, r5
 801ad32:	b21b      	sxth	r3, r3
 801ad34:	9310      	str	r3, [sp, #64]	; 0x40
 801ad36:	88d3      	ldrh	r3, [r2, #6]
 801ad38:	8852      	ldrh	r2, [r2, #2]
 801ad3a:	4413      	add	r3, r2
 801ad3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad3e:	b21b      	sxth	r3, r3
 801ad40:	930f      	str	r3, [sp, #60]	; 0x3c
 801ad42:	4bbd      	ldr	r3, [pc, #756]	; (801b038 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801ad44:	f893 b000 	ldrb.w	fp, [r3]
 801ad48:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ad4c:	f1dc 0300 	rsbs	r3, ip, #0
 801ad50:	eb43 030c 	adc.w	r3, r3, ip
 801ad54:	930e      	str	r3, [sp, #56]	; 0x38
 801ad56:	4653      	mov	r3, sl
 801ad58:	f7f8 f94a 	bl	8012ff0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ad5c:	4629      	mov	r1, r5
 801ad5e:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801ad62:	4653      	mov	r3, sl
 801ad64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad66:	a814      	add	r0, sp, #80	; 0x50
 801ad68:	f7f8 f95a 	bl	8013020 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ad6c:	a918      	add	r1, sp, #96	; 0x60
 801ad6e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ad72:	a817      	add	r0, sp, #92	; 0x5c
 801ad74:	f7f8 fa76 	bl	8013264 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ad78:	f1ba 0f00 	cmp.w	sl, #0
 801ad7c:	f040 80fe 	bne.w	801af7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801ad80:	f1bb 0f01 	cmp.w	fp, #1
 801ad84:	f040 8102 	bne.w	801af8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801ad88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ad8a:	b153      	cbz	r3, 801ada2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ad8c:	2408      	movs	r4, #8
 801ad8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad90:	fb94 f3f8 	sdiv	r3, r4, r8
 801ad94:	1e5c      	subs	r4, r3, #1
 801ad96:	4414      	add	r4, r2
 801ad98:	fb94 f4f3 	sdiv	r4, r4, r3
 801ad9c:	fb14 f403 	smulbb	r4, r4, r3
 801ada0:	b2a4      	uxth	r4, r4
 801ada2:	b906      	cbnz	r6, 801ada6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801ada4:	b16f      	cbz	r7, 801adc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801ada6:	fb07 6304 	mla	r3, r7, r4, r6
 801adaa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801adac:	463a      	mov	r2, r7
 801adae:	fb08 f303 	mul.w	r3, r8, r3
 801adb2:	f003 0707 	and.w	r7, r3, #7
 801adb6:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801adba:	9328      	str	r3, [sp, #160]	; 0xa0
 801adbc:	eba9 0302 	sub.w	r3, r9, r2
 801adc0:	930d      	str	r3, [sp, #52]	; 0x34
 801adc2:	4651      	mov	r1, sl
 801adc4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801adc6:	f7ff ff05 	bl	801abd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801adca:	4651      	mov	r1, sl
 801adcc:	4681      	mov	r9, r0
 801adce:	980e      	ldr	r0, [sp, #56]	; 0x38
 801add0:	f7ff ff30 	bl	801ac34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801add4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801add6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801add8:	4683      	mov	fp, r0
 801adda:	eba3 0a02 	sub.w	sl, r3, r2
 801adde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ade0:	459a      	cmp	sl, r3
 801ade2:	bfa8      	it	ge
 801ade4:	469a      	movge	sl, r3
 801ade6:	f1ba 0f00 	cmp.w	sl, #0
 801adea:	f340 811b 	ble.w	801b024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801adee:	1bad      	subs	r5, r5, r6
 801adf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801adf2:	1b5d      	subs	r5, r3, r5
 801adf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adf6:	429d      	cmp	r5, r3
 801adf8:	bfd4      	ite	le
 801adfa:	ebc6 0605 	rsble	r6, r6, r5
 801adfe:	ebc6 0603 	rsbgt	r6, r6, r3
 801ae02:	2e00      	cmp	r6, #0
 801ae04:	f340 810e 	ble.w	801b024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801ae08:	1ba4      	subs	r4, r4, r6
 801ae0a:	fb08 f304 	mul.w	r3, r8, r4
 801ae0e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ae10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	f040 810b 	bne.w	801b02e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801ae18:	4b88      	ldr	r3, [pc, #544]	; (801b03c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801ae1a:	6818      	ldr	r0, [r3, #0]
 801ae1c:	6803      	ldr	r3, [r0, #0]
 801ae1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae20:	4798      	blx	r3
 801ae22:	2301      	movs	r3, #1
 801ae24:	4a86      	ldr	r2, [pc, #536]	; (801b040 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801ae26:	fa03 f308 	lsl.w	r3, r3, r8
 801ae2a:	8811      	ldrh	r1, [r2, #0]
 801ae2c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ae30:	3b01      	subs	r3, #1
 801ae32:	b2db      	uxtb	r3, r3
 801ae34:	930e      	str	r3, [sp, #56]	; 0x38
 801ae36:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801ae3a:	fb01 2303 	mla	r3, r1, r3, r2
 801ae3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ae42:	930a      	str	r3, [sp, #40]	; 0x28
 801ae44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae46:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ae4a:	9313      	str	r3, [sp, #76]	; 0x4c
 801ae4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae4e:	0a19      	lsrs	r1, r3, #8
 801ae50:	b2cb      	uxtb	r3, r1
 801ae52:	9312      	str	r3, [sp, #72]	; 0x48
 801ae54:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae56:	b2db      	uxtb	r3, r3
 801ae58:	9311      	str	r3, [sp, #68]	; 0x44
 801ae5a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae5c:	095a      	lsrs	r2, r3, #5
 801ae5e:	4b79      	ldr	r3, [pc, #484]	; (801b044 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801ae60:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ae64:	400b      	ands	r3, r1
 801ae66:	4313      	orrs	r3, r2
 801ae68:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ae6a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ae6e:	4313      	orrs	r3, r2
 801ae70:	b29b      	uxth	r3, r3
 801ae72:	9310      	str	r3, [sp, #64]	; 0x40
 801ae74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae76:	781a      	ldrb	r2, [r3, #0]
 801ae78:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801ae7c:	fb06 b919 	mls	r9, r6, r9, fp
 801ae80:	413a      	asrs	r2, r7
 801ae82:	fb03 fb06 	mul.w	fp, r3, r6
 801ae86:	930d      	str	r3, [sp, #52]	; 0x34
 801ae88:	b2d2      	uxtb	r2, r2
 801ae8a:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801ae8e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801ae92:	f0c0 80ea 	bcc.w	801b06a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801ae96:	46b6      	mov	lr, r6
 801ae98:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801ae9c:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801aea0:	f0c0 80d2 	bcc.w	801b048 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801aea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aea6:	4013      	ands	r3, r2
 801aea8:	d055      	beq.n	801af56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801aeaa:	20ff      	movs	r0, #255	; 0xff
 801aeac:	990e      	ldr	r1, [sp, #56]	; 0x38
 801aeae:	fb90 f1f1 	sdiv	r1, r0, r1
 801aeb2:	434b      	muls	r3, r1
 801aeb4:	2bfe      	cmp	r3, #254	; 0xfe
 801aeb6:	dd03      	ble.n	801aec0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801aeb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aeba:	4281      	cmp	r1, r0
 801aebc:	f000 80b9 	beq.w	801b032 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801aec0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aec2:	f8bc 4000 	ldrh.w	r4, [ip]
 801aec6:	fb11 f303 	smulbb	r3, r1, r3
 801aeca:	1220      	asrs	r0, r4, #8
 801aecc:	b29b      	uxth	r3, r3
 801aece:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801aed2:	1c59      	adds	r1, r3, #1
 801aed4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801aed8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801aedc:	10e1      	asrs	r1, r4, #3
 801aede:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801aee2:	00e4      	lsls	r4, r4, #3
 801aee4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801aee8:	b29d      	uxth	r5, r3
 801aeea:	43db      	mvns	r3, r3
 801aeec:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801aef0:	b2db      	uxtb	r3, r3
 801aef2:	b2e4      	uxtb	r4, r4
 801aef4:	9309      	str	r3, [sp, #36]	; 0x24
 801aef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801aef8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801aefc:	fb13 f905 	smulbb	r9, r3, r5
 801af00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af02:	fb00 9003 	mla	r0, r0, r3, r9
 801af06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801af08:	fb13 f905 	smulbb	r9, r3, r5
 801af0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af0e:	b280      	uxth	r0, r0
 801af10:	fb01 9103 	mla	r1, r1, r3, r9
 801af14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801af16:	fb13 f505 	smulbb	r5, r3, r5
 801af1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af1c:	b289      	uxth	r1, r1
 801af1e:	fb04 5403 	mla	r4, r4, r3, r5
 801af22:	1c43      	adds	r3, r0, #1
 801af24:	b2a4      	uxth	r4, r4
 801af26:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801af2a:	f104 0901 	add.w	r9, r4, #1
 801af2e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801af32:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801af36:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801af3a:	ea49 0000 	orr.w	r0, r9, r0
 801af3e:	f101 0901 	add.w	r9, r1, #1
 801af42:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801af46:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801af4a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801af4e:	ea40 0009 	orr.w	r0, r0, r9
 801af52:	f8ac 0000 	strh.w	r0, [ip]
 801af56:	4447      	add	r7, r8
 801af58:	b2bf      	uxth	r7, r7
 801af5a:	2f07      	cmp	r7, #7
 801af5c:	bf89      	itett	hi
 801af5e:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801af60:	fa42 f208 	asrls.w	r2, r2, r8
 801af64:	2700      	movhi	r7, #0
 801af66:	785a      	ldrbhi	r2, [r3, #1]
 801af68:	bf8a      	itet	hi
 801af6a:	3301      	addhi	r3, #1
 801af6c:	b2d2      	uxtbls	r2, r2
 801af6e:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801af70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af72:	449c      	add	ip, r3
 801af74:	e792      	b.n	801ae9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801af76:	441d      	add	r5, r3
 801af78:	b22d      	sxth	r5, r5
 801af7a:	e6c9      	b.n	801ad10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801af7c:	f1ba 0f01 	cmp.w	sl, #1
 801af80:	f47f af02 	bne.w	801ad88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801af84:	f1bb 0f01 	cmp.w	fp, #1
 801af88:	f47f aefe 	bne.w	801ad88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801af8c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801b03c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801af90:	f8db 0000 	ldr.w	r0, [fp]
 801af94:	6803      	ldr	r3, [r0, #0]
 801af96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af98:	4798      	blx	r3
 801af9a:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801af9e:	465a      	mov	r2, fp
 801afa0:	d006      	beq.n	801afb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801afa2:	f1b8 0f04 	cmp.w	r8, #4
 801afa6:	d140      	bne.n	801b02a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801afa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801afaa:	3300      	adds	r3, #0
 801afac:	bf18      	it	ne
 801afae:	2301      	movne	r3, #1
 801afb0:	0580      	lsls	r0, r0, #22
 801afb2:	d563      	bpl.n	801b07c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801afb4:	f1b8 0f08 	cmp.w	r8, #8
 801afb8:	d160      	bne.n	801b07c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801afba:	2b00      	cmp	r3, #0
 801afbc:	bf0c      	ite	eq
 801afbe:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801afc2:	f44f 7180 	movne.w	r1, #256	; 0x100
 801afc6:	2e00      	cmp	r6, #0
 801afc8:	f47f aede 	bne.w	801ad88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801afcc:	2f00      	cmp	r7, #0
 801afce:	f47f aedb 	bne.w	801ad88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801afd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801afd6:	18eb      	adds	r3, r5, r3
 801afd8:	4283      	cmp	r3, r0
 801afda:	f73f aed5 	bgt.w	801ad88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801afde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afe0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801afe2:	444b      	add	r3, r9
 801afe4:	4283      	cmp	r3, r0
 801afe6:	f73f aecf 	bgt.w	801ad88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801afea:	f1b8 0f08 	cmp.w	r8, #8
 801afee:	6810      	ldr	r0, [r2, #0]
 801aff0:	f04f 0600 	mov.w	r6, #0
 801aff4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801aff8:	bf18      	it	ne
 801affa:	3401      	addne	r4, #1
 801affc:	6805      	ldr	r5, [r0, #0]
 801affe:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801b002:	bf18      	it	ne
 801b004:	f024 0401 	bicne.w	r4, r4, #1
 801b008:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801b00c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b00e:	bf18      	it	ne
 801b010:	b2a4      	uxthne	r4, r4
 801b012:	9104      	str	r1, [sp, #16]
 801b014:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b016:	e9cd 4900 	strd	r4, r9, [sp]
 801b01a:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801b01e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b020:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801b022:	47a0      	blx	r4
 801b024:	b019      	add	sp, #100	; 0x64
 801b026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b02a:	2300      	movs	r3, #0
 801b02c:	e7c0      	b.n	801afb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801b02e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b030:	e6f7      	b.n	801ae22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801b032:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b034:	e78d      	b.n	801af52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801b036:	bf00      	nop
 801b038:	20060c28 	.word	0x20060c28
 801b03c:	20060c30 	.word	0x20060c30
 801b040:	20060c2a 	.word	0x20060c2a
 801b044:	00fff800 	.word	0x00fff800
 801b048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b04a:	b153      	cbz	r3, 801b062 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801b04c:	441f      	add	r7, r3
 801b04e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b050:	b2bf      	uxth	r7, r7
 801b052:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801b056:	f007 0707 	and.w	r7, r7, #7
 801b05a:	781a      	ldrb	r2, [r3, #0]
 801b05c:	9328      	str	r3, [sp, #160]	; 0xa0
 801b05e:	413a      	asrs	r2, r7
 801b060:	b2d2      	uxtb	r2, r2
 801b062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b064:	445b      	add	r3, fp
 801b066:	930a      	str	r3, [sp, #40]	; 0x28
 801b068:	e711      	b.n	801ae8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801b06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d1d9      	bne.n	801b024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b070:	4b05      	ldr	r3, [pc, #20]	; (801b088 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801b072:	6818      	ldr	r0, [r3, #0]
 801b074:	6803      	ldr	r3, [r0, #0]
 801b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b078:	4798      	blx	r3
 801b07a:	e7d3      	b.n	801b024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	f43f ae83 	beq.w	801ad88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b082:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b086:	e79e      	b.n	801afc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801b088:	20060c30 	.word	0x20060c30

0801b08c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801b08c:	b538      	push	{r3, r4, r5, lr}
 801b08e:	4c15      	ldr	r4, [pc, #84]	; (801b0e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801b090:	4605      	mov	r5, r0
 801b092:	7823      	ldrb	r3, [r4, #0]
 801b094:	f3bf 8f5b 	dmb	ish
 801b098:	07da      	lsls	r2, r3, #31
 801b09a:	d40b      	bmi.n	801b0b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b09c:	4620      	mov	r0, r4
 801b09e:	f009 ffb2 	bl	8025006 <__cxa_guard_acquire>
 801b0a2:	b138      	cbz	r0, 801b0b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b0a4:	4620      	mov	r0, r4
 801b0a6:	f009 ffba 	bl	802501e <__cxa_guard_release>
 801b0aa:	4a0f      	ldr	r2, [pc, #60]	; (801b0e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b0ac:	490f      	ldr	r1, [pc, #60]	; (801b0ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801b0ae:	4810      	ldr	r0, [pc, #64]	; (801b0f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b0b0:	f009 ffa2 	bl	8024ff8 <__aeabi_atexit>
 801b0b4:	4c0f      	ldr	r4, [pc, #60]	; (801b0f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801b0b6:	7823      	ldrb	r3, [r4, #0]
 801b0b8:	f3bf 8f5b 	dmb	ish
 801b0bc:	07db      	lsls	r3, r3, #31
 801b0be:	d40b      	bmi.n	801b0d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	f009 ffa0 	bl	8025006 <__cxa_guard_acquire>
 801b0c6:	b138      	cbz	r0, 801b0d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	f009 ffa8 	bl	802501e <__cxa_guard_release>
 801b0ce:	4a06      	ldr	r2, [pc, #24]	; (801b0e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b0d0:	4909      	ldr	r1, [pc, #36]	; (801b0f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801b0d2:	480a      	ldr	r0, [pc, #40]	; (801b0fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801b0d4:	f009 ff90 	bl	8024ff8 <__aeabi_atexit>
 801b0d8:	4b05      	ldr	r3, [pc, #20]	; (801b0f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b0da:	612b      	str	r3, [r5, #16]
 801b0dc:	4b07      	ldr	r3, [pc, #28]	; (801b0fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801b0de:	616b      	str	r3, [r5, #20]
 801b0e0:	bd38      	pop	{r3, r4, r5, pc}
 801b0e2:	bf00      	nop
 801b0e4:	20060d1c 	.word	0x20060d1c
 801b0e8:	20000000 	.word	0x20000000
 801b0ec:	08019279 	.word	0x08019279
 801b0f0:	200000b4 	.word	0x200000b4
 801b0f4:	20060d20 	.word	0x20060d20
 801b0f8:	08019277 	.word	0x08019277
 801b0fc:	200000b8 	.word	0x200000b8

0801b100 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801b100:	b538      	push	{r3, r4, r5, lr}
 801b102:	4c15      	ldr	r4, [pc, #84]	; (801b158 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801b104:	4605      	mov	r5, r0
 801b106:	7823      	ldrb	r3, [r4, #0]
 801b108:	f3bf 8f5b 	dmb	ish
 801b10c:	07da      	lsls	r2, r3, #31
 801b10e:	d40b      	bmi.n	801b128 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801b110:	4620      	mov	r0, r4
 801b112:	f009 ff78 	bl	8025006 <__cxa_guard_acquire>
 801b116:	b138      	cbz	r0, 801b128 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801b118:	4620      	mov	r0, r4
 801b11a:	f009 ff80 	bl	802501e <__cxa_guard_release>
 801b11e:	4a0f      	ldr	r2, [pc, #60]	; (801b15c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801b120:	490f      	ldr	r1, [pc, #60]	; (801b160 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801b122:	4810      	ldr	r0, [pc, #64]	; (801b164 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801b124:	f009 ff68 	bl	8024ff8 <__aeabi_atexit>
 801b128:	4c0f      	ldr	r4, [pc, #60]	; (801b168 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801b12a:	7823      	ldrb	r3, [r4, #0]
 801b12c:	f3bf 8f5b 	dmb	ish
 801b130:	07db      	lsls	r3, r3, #31
 801b132:	d40b      	bmi.n	801b14c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801b134:	4620      	mov	r0, r4
 801b136:	f009 ff66 	bl	8025006 <__cxa_guard_acquire>
 801b13a:	b138      	cbz	r0, 801b14c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801b13c:	4620      	mov	r0, r4
 801b13e:	f009 ff6e 	bl	802501e <__cxa_guard_release>
 801b142:	4a06      	ldr	r2, [pc, #24]	; (801b15c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801b144:	4909      	ldr	r1, [pc, #36]	; (801b16c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801b146:	480a      	ldr	r0, [pc, #40]	; (801b170 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801b148:	f009 ff56 	bl	8024ff8 <__aeabi_atexit>
 801b14c:	4b05      	ldr	r3, [pc, #20]	; (801b164 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801b14e:	60ab      	str	r3, [r5, #8]
 801b150:	4b07      	ldr	r3, [pc, #28]	; (801b170 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801b152:	60eb      	str	r3, [r5, #12]
 801b154:	bd38      	pop	{r3, r4, r5, pc}
 801b156:	bf00      	nop
 801b158:	20060cf4 	.word	0x20060cf4
 801b15c:	20000000 	.word	0x20000000
 801b160:	0801927d 	.word	0x0801927d
 801b164:	2000008c 	.word	0x2000008c
 801b168:	20060cf8 	.word	0x20060cf8
 801b16c:	0801927b 	.word	0x0801927b
 801b170:	20000090 	.word	0x20000090

0801b174 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801b174:	b510      	push	{r4, lr}
 801b176:	4604      	mov	r4, r0
 801b178:	f7ff ff88 	bl	801b08c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801b17c:	4620      	mov	r0, r4
 801b17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b182:	f7ff bfbd 	b.w	801b100 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801b188 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b188:	b538      	push	{r3, r4, r5, lr}
 801b18a:	4c15      	ldr	r4, [pc, #84]	; (801b1e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b18c:	4605      	mov	r5, r0
 801b18e:	7823      	ldrb	r3, [r4, #0]
 801b190:	f3bf 8f5b 	dmb	ish
 801b194:	07da      	lsls	r2, r3, #31
 801b196:	d40b      	bmi.n	801b1b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b198:	4620      	mov	r0, r4
 801b19a:	f009 ff34 	bl	8025006 <__cxa_guard_acquire>
 801b19e:	b138      	cbz	r0, 801b1b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	f009 ff3c 	bl	802501e <__cxa_guard_release>
 801b1a6:	4a0f      	ldr	r2, [pc, #60]	; (801b1e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b1a8:	490f      	ldr	r1, [pc, #60]	; (801b1e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b1aa:	4810      	ldr	r0, [pc, #64]	; (801b1ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b1ac:	f009 ff24 	bl	8024ff8 <__aeabi_atexit>
 801b1b0:	4c0f      	ldr	r4, [pc, #60]	; (801b1f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b1b2:	7823      	ldrb	r3, [r4, #0]
 801b1b4:	f3bf 8f5b 	dmb	ish
 801b1b8:	07db      	lsls	r3, r3, #31
 801b1ba:	d40b      	bmi.n	801b1d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b1bc:	4620      	mov	r0, r4
 801b1be:	f009 ff22 	bl	8025006 <__cxa_guard_acquire>
 801b1c2:	b138      	cbz	r0, 801b1d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b1c4:	4620      	mov	r0, r4
 801b1c6:	f009 ff2a 	bl	802501e <__cxa_guard_release>
 801b1ca:	4a06      	ldr	r2, [pc, #24]	; (801b1e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b1cc:	4909      	ldr	r1, [pc, #36]	; (801b1f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b1ce:	480a      	ldr	r0, [pc, #40]	; (801b1f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b1d0:	f009 ff12 	bl	8024ff8 <__aeabi_atexit>
 801b1d4:	4b05      	ldr	r3, [pc, #20]	; (801b1ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b1d6:	622b      	str	r3, [r5, #32]
 801b1d8:	4b07      	ldr	r3, [pc, #28]	; (801b1f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b1da:	626b      	str	r3, [r5, #36]	; 0x24
 801b1dc:	bd38      	pop	{r3, r4, r5, pc}
 801b1de:	bf00      	nop
 801b1e0:	20060d24 	.word	0x20060d24
 801b1e4:	20000000 	.word	0x20000000
 801b1e8:	08019271 	.word	0x08019271
 801b1ec:	200000bc 	.word	0x200000bc
 801b1f0:	20060d28 	.word	0x20060d28
 801b1f4:	0801926f 	.word	0x0801926f
 801b1f8:	200000c0 	.word	0x200000c0

0801b1fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b1fc:	b538      	push	{r3, r4, r5, lr}
 801b1fe:	4c15      	ldr	r4, [pc, #84]	; (801b254 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b200:	4605      	mov	r5, r0
 801b202:	7823      	ldrb	r3, [r4, #0]
 801b204:	f3bf 8f5b 	dmb	ish
 801b208:	07da      	lsls	r2, r3, #31
 801b20a:	d40b      	bmi.n	801b224 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b20c:	4620      	mov	r0, r4
 801b20e:	f009 fefa 	bl	8025006 <__cxa_guard_acquire>
 801b212:	b138      	cbz	r0, 801b224 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b214:	4620      	mov	r0, r4
 801b216:	f009 ff02 	bl	802501e <__cxa_guard_release>
 801b21a:	4a0f      	ldr	r2, [pc, #60]	; (801b258 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b21c:	490f      	ldr	r1, [pc, #60]	; (801b25c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b21e:	4810      	ldr	r0, [pc, #64]	; (801b260 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b220:	f009 feea 	bl	8024ff8 <__aeabi_atexit>
 801b224:	4c0f      	ldr	r4, [pc, #60]	; (801b264 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b226:	7823      	ldrb	r3, [r4, #0]
 801b228:	f3bf 8f5b 	dmb	ish
 801b22c:	07db      	lsls	r3, r3, #31
 801b22e:	d40b      	bmi.n	801b248 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b230:	4620      	mov	r0, r4
 801b232:	f009 fee8 	bl	8025006 <__cxa_guard_acquire>
 801b236:	b138      	cbz	r0, 801b248 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b238:	4620      	mov	r0, r4
 801b23a:	f009 fef0 	bl	802501e <__cxa_guard_release>
 801b23e:	4a06      	ldr	r2, [pc, #24]	; (801b258 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b240:	4909      	ldr	r1, [pc, #36]	; (801b268 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b242:	480a      	ldr	r0, [pc, #40]	; (801b26c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b244:	f009 fed8 	bl	8024ff8 <__aeabi_atexit>
 801b248:	4b05      	ldr	r3, [pc, #20]	; (801b260 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b24a:	61ab      	str	r3, [r5, #24]
 801b24c:	4b07      	ldr	r3, [pc, #28]	; (801b26c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b24e:	61eb      	str	r3, [r5, #28]
 801b250:	bd38      	pop	{r3, r4, r5, pc}
 801b252:	bf00      	nop
 801b254:	20060cfc 	.word	0x20060cfc
 801b258:	20000000 	.word	0x20000000
 801b25c:	08019275 	.word	0x08019275
 801b260:	20000094 	.word	0x20000094
 801b264:	20060d00 	.word	0x20060d00
 801b268:	08019273 	.word	0x08019273
 801b26c:	20000098 	.word	0x20000098

0801b270 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801b270:	b510      	push	{r4, lr}
 801b272:	4604      	mov	r4, r0
 801b274:	f7ff ff88 	bl	801b188 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b278:	4620      	mov	r0, r4
 801b27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b27e:	f7ff bfbd 	b.w	801b1fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b284 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b284:	b538      	push	{r3, r4, r5, lr}
 801b286:	4c15      	ldr	r4, [pc, #84]	; (801b2dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b288:	4605      	mov	r5, r0
 801b28a:	7823      	ldrb	r3, [r4, #0]
 801b28c:	f3bf 8f5b 	dmb	ish
 801b290:	07da      	lsls	r2, r3, #31
 801b292:	d40b      	bmi.n	801b2ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b294:	4620      	mov	r0, r4
 801b296:	f009 feb6 	bl	8025006 <__cxa_guard_acquire>
 801b29a:	b138      	cbz	r0, 801b2ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b29c:	4620      	mov	r0, r4
 801b29e:	f009 febe 	bl	802501e <__cxa_guard_release>
 801b2a2:	4a0f      	ldr	r2, [pc, #60]	; (801b2e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b2a4:	490f      	ldr	r1, [pc, #60]	; (801b2e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b2a6:	4810      	ldr	r0, [pc, #64]	; (801b2e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b2a8:	f009 fea6 	bl	8024ff8 <__aeabi_atexit>
 801b2ac:	4c0f      	ldr	r4, [pc, #60]	; (801b2ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b2ae:	7823      	ldrb	r3, [r4, #0]
 801b2b0:	f3bf 8f5b 	dmb	ish
 801b2b4:	07db      	lsls	r3, r3, #31
 801b2b6:	d40b      	bmi.n	801b2d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b2b8:	4620      	mov	r0, r4
 801b2ba:	f009 fea4 	bl	8025006 <__cxa_guard_acquire>
 801b2be:	b138      	cbz	r0, 801b2d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	f009 feac 	bl	802501e <__cxa_guard_release>
 801b2c6:	4a06      	ldr	r2, [pc, #24]	; (801b2e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b2c8:	4909      	ldr	r1, [pc, #36]	; (801b2f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b2ca:	480a      	ldr	r0, [pc, #40]	; (801b2f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b2cc:	f009 fe94 	bl	8024ff8 <__aeabi_atexit>
 801b2d0:	4b05      	ldr	r3, [pc, #20]	; (801b2e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b2d2:	632b      	str	r3, [r5, #48]	; 0x30
 801b2d4:	4b07      	ldr	r3, [pc, #28]	; (801b2f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b2d6:	636b      	str	r3, [r5, #52]	; 0x34
 801b2d8:	bd38      	pop	{r3, r4, r5, pc}
 801b2da:	bf00      	nop
 801b2dc:	20060d34 	.word	0x20060d34
 801b2e0:	20000000 	.word	0x20000000
 801b2e4:	08019269 	.word	0x08019269
 801b2e8:	200000cc 	.word	0x200000cc
 801b2ec:	20060d38 	.word	0x20060d38
 801b2f0:	08019267 	.word	0x08019267
 801b2f4:	200000d0 	.word	0x200000d0

0801b2f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b2f8:	b538      	push	{r3, r4, r5, lr}
 801b2fa:	4c15      	ldr	r4, [pc, #84]	; (801b350 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b2fc:	4605      	mov	r5, r0
 801b2fe:	7823      	ldrb	r3, [r4, #0]
 801b300:	f3bf 8f5b 	dmb	ish
 801b304:	07da      	lsls	r2, r3, #31
 801b306:	d40b      	bmi.n	801b320 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b308:	4620      	mov	r0, r4
 801b30a:	f009 fe7c 	bl	8025006 <__cxa_guard_acquire>
 801b30e:	b138      	cbz	r0, 801b320 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b310:	4620      	mov	r0, r4
 801b312:	f009 fe84 	bl	802501e <__cxa_guard_release>
 801b316:	4a0f      	ldr	r2, [pc, #60]	; (801b354 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b318:	490f      	ldr	r1, [pc, #60]	; (801b358 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b31a:	4810      	ldr	r0, [pc, #64]	; (801b35c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b31c:	f009 fe6c 	bl	8024ff8 <__aeabi_atexit>
 801b320:	4c0f      	ldr	r4, [pc, #60]	; (801b360 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b322:	7823      	ldrb	r3, [r4, #0]
 801b324:	f3bf 8f5b 	dmb	ish
 801b328:	07db      	lsls	r3, r3, #31
 801b32a:	d40b      	bmi.n	801b344 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b32c:	4620      	mov	r0, r4
 801b32e:	f009 fe6a 	bl	8025006 <__cxa_guard_acquire>
 801b332:	b138      	cbz	r0, 801b344 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b334:	4620      	mov	r0, r4
 801b336:	f009 fe72 	bl	802501e <__cxa_guard_release>
 801b33a:	4a06      	ldr	r2, [pc, #24]	; (801b354 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b33c:	4909      	ldr	r1, [pc, #36]	; (801b364 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b33e:	480a      	ldr	r0, [pc, #40]	; (801b368 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b340:	f009 fe5a 	bl	8024ff8 <__aeabi_atexit>
 801b344:	4b05      	ldr	r3, [pc, #20]	; (801b35c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b346:	62ab      	str	r3, [r5, #40]	; 0x28
 801b348:	4b07      	ldr	r3, [pc, #28]	; (801b368 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b34a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b34c:	bd38      	pop	{r3, r4, r5, pc}
 801b34e:	bf00      	nop
 801b350:	20060d04 	.word	0x20060d04
 801b354:	20000000 	.word	0x20000000
 801b358:	0801926d 	.word	0x0801926d
 801b35c:	2000009c 	.word	0x2000009c
 801b360:	20060d08 	.word	0x20060d08
 801b364:	0801926b 	.word	0x0801926b
 801b368:	200000a0 	.word	0x200000a0

0801b36c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b36c:	b510      	push	{r4, lr}
 801b36e:	4604      	mov	r4, r0
 801b370:	f7ff ff88 	bl	801b284 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b374:	4620      	mov	r0, r4
 801b376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b37a:	f7ff bfbd 	b.w	801b2f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b380 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801b380:	b538      	push	{r3, r4, r5, lr}
 801b382:	4c15      	ldr	r4, [pc, #84]	; (801b3d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801b384:	4605      	mov	r5, r0
 801b386:	7823      	ldrb	r3, [r4, #0]
 801b388:	f3bf 8f5b 	dmb	ish
 801b38c:	07da      	lsls	r2, r3, #31
 801b38e:	d40b      	bmi.n	801b3a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801b390:	4620      	mov	r0, r4
 801b392:	f009 fe38 	bl	8025006 <__cxa_guard_acquire>
 801b396:	b138      	cbz	r0, 801b3a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801b398:	4620      	mov	r0, r4
 801b39a:	f009 fe40 	bl	802501e <__cxa_guard_release>
 801b39e:	4a0f      	ldr	r2, [pc, #60]	; (801b3dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801b3a0:	490f      	ldr	r1, [pc, #60]	; (801b3e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801b3a2:	4810      	ldr	r0, [pc, #64]	; (801b3e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801b3a4:	f009 fe28 	bl	8024ff8 <__aeabi_atexit>
 801b3a8:	4c0f      	ldr	r4, [pc, #60]	; (801b3e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801b3aa:	7823      	ldrb	r3, [r4, #0]
 801b3ac:	f3bf 8f5b 	dmb	ish
 801b3b0:	07db      	lsls	r3, r3, #31
 801b3b2:	d40b      	bmi.n	801b3cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	f009 fe26 	bl	8025006 <__cxa_guard_acquire>
 801b3ba:	b138      	cbz	r0, 801b3cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801b3bc:	4620      	mov	r0, r4
 801b3be:	f009 fe2e 	bl	802501e <__cxa_guard_release>
 801b3c2:	4a06      	ldr	r2, [pc, #24]	; (801b3dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801b3c4:	4909      	ldr	r1, [pc, #36]	; (801b3ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801b3c6:	480a      	ldr	r0, [pc, #40]	; (801b3f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801b3c8:	f009 fe16 	bl	8024ff8 <__aeabi_atexit>
 801b3cc:	4b05      	ldr	r3, [pc, #20]	; (801b3e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801b3ce:	652b      	str	r3, [r5, #80]	; 0x50
 801b3d0:	4b07      	ldr	r3, [pc, #28]	; (801b3f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801b3d2:	656b      	str	r3, [r5, #84]	; 0x54
 801b3d4:	bd38      	pop	{r3, r4, r5, pc}
 801b3d6:	bf00      	nop
 801b3d8:	20060d3c 	.word	0x20060d3c
 801b3dc:	20000000 	.word	0x20000000
 801b3e0:	08019259 	.word	0x08019259
 801b3e4:	200000d4 	.word	0x200000d4
 801b3e8:	20060d40 	.word	0x20060d40
 801b3ec:	08019257 	.word	0x08019257
 801b3f0:	200000d8 	.word	0x200000d8

0801b3f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801b3f4:	b538      	push	{r3, r4, r5, lr}
 801b3f6:	4c15      	ldr	r4, [pc, #84]	; (801b44c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801b3f8:	4605      	mov	r5, r0
 801b3fa:	7823      	ldrb	r3, [r4, #0]
 801b3fc:	f3bf 8f5b 	dmb	ish
 801b400:	07da      	lsls	r2, r3, #31
 801b402:	d40b      	bmi.n	801b41c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801b404:	4620      	mov	r0, r4
 801b406:	f009 fdfe 	bl	8025006 <__cxa_guard_acquire>
 801b40a:	b138      	cbz	r0, 801b41c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801b40c:	4620      	mov	r0, r4
 801b40e:	f009 fe06 	bl	802501e <__cxa_guard_release>
 801b412:	4a0f      	ldr	r2, [pc, #60]	; (801b450 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801b414:	490f      	ldr	r1, [pc, #60]	; (801b454 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801b416:	4810      	ldr	r0, [pc, #64]	; (801b458 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801b418:	f009 fdee 	bl	8024ff8 <__aeabi_atexit>
 801b41c:	4c0f      	ldr	r4, [pc, #60]	; (801b45c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801b41e:	7823      	ldrb	r3, [r4, #0]
 801b420:	f3bf 8f5b 	dmb	ish
 801b424:	07db      	lsls	r3, r3, #31
 801b426:	d40b      	bmi.n	801b440 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801b428:	4620      	mov	r0, r4
 801b42a:	f009 fdec 	bl	8025006 <__cxa_guard_acquire>
 801b42e:	b138      	cbz	r0, 801b440 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801b430:	4620      	mov	r0, r4
 801b432:	f009 fdf4 	bl	802501e <__cxa_guard_release>
 801b436:	4a06      	ldr	r2, [pc, #24]	; (801b450 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801b438:	4909      	ldr	r1, [pc, #36]	; (801b460 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801b43a:	480a      	ldr	r0, [pc, #40]	; (801b464 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801b43c:	f009 fddc 	bl	8024ff8 <__aeabi_atexit>
 801b440:	4b05      	ldr	r3, [pc, #20]	; (801b458 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801b442:	64ab      	str	r3, [r5, #72]	; 0x48
 801b444:	4b07      	ldr	r3, [pc, #28]	; (801b464 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801b446:	64eb      	str	r3, [r5, #76]	; 0x4c
 801b448:	bd38      	pop	{r3, r4, r5, pc}
 801b44a:	bf00      	nop
 801b44c:	20060d44 	.word	0x20060d44
 801b450:	20000000 	.word	0x20000000
 801b454:	0801925d 	.word	0x0801925d
 801b458:	200000dc 	.word	0x200000dc
 801b45c:	20060d48 	.word	0x20060d48
 801b460:	0801925b 	.word	0x0801925b
 801b464:	200000e0 	.word	0x200000e0

0801b468 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801b468:	b538      	push	{r3, r4, r5, lr}
 801b46a:	4c15      	ldr	r4, [pc, #84]	; (801b4c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801b46c:	4605      	mov	r5, r0
 801b46e:	7823      	ldrb	r3, [r4, #0]
 801b470:	f3bf 8f5b 	dmb	ish
 801b474:	07da      	lsls	r2, r3, #31
 801b476:	d40b      	bmi.n	801b490 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801b478:	4620      	mov	r0, r4
 801b47a:	f009 fdc4 	bl	8025006 <__cxa_guard_acquire>
 801b47e:	b138      	cbz	r0, 801b490 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801b480:	4620      	mov	r0, r4
 801b482:	f009 fdcc 	bl	802501e <__cxa_guard_release>
 801b486:	4a0f      	ldr	r2, [pc, #60]	; (801b4c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801b488:	490f      	ldr	r1, [pc, #60]	; (801b4c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801b48a:	4810      	ldr	r0, [pc, #64]	; (801b4cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801b48c:	f009 fdb4 	bl	8024ff8 <__aeabi_atexit>
 801b490:	4c0f      	ldr	r4, [pc, #60]	; (801b4d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801b492:	7823      	ldrb	r3, [r4, #0]
 801b494:	f3bf 8f5b 	dmb	ish
 801b498:	07db      	lsls	r3, r3, #31
 801b49a:	d40b      	bmi.n	801b4b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801b49c:	4620      	mov	r0, r4
 801b49e:	f009 fdb2 	bl	8025006 <__cxa_guard_acquire>
 801b4a2:	b138      	cbz	r0, 801b4b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	f009 fdba 	bl	802501e <__cxa_guard_release>
 801b4aa:	4a06      	ldr	r2, [pc, #24]	; (801b4c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801b4ac:	4909      	ldr	r1, [pc, #36]	; (801b4d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801b4ae:	480a      	ldr	r0, [pc, #40]	; (801b4d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801b4b0:	f009 fda2 	bl	8024ff8 <__aeabi_atexit>
 801b4b4:	4b05      	ldr	r3, [pc, #20]	; (801b4cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801b4b6:	642b      	str	r3, [r5, #64]	; 0x40
 801b4b8:	4b07      	ldr	r3, [pc, #28]	; (801b4d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801b4ba:	646b      	str	r3, [r5, #68]	; 0x44
 801b4bc:	bd38      	pop	{r3, r4, r5, pc}
 801b4be:	bf00      	nop
 801b4c0:	20060d0c 	.word	0x20060d0c
 801b4c4:	20000000 	.word	0x20000000
 801b4c8:	08019261 	.word	0x08019261
 801b4cc:	200000a4 	.word	0x200000a4
 801b4d0:	20060d10 	.word	0x20060d10
 801b4d4:	0801925f 	.word	0x0801925f
 801b4d8:	200000a8 	.word	0x200000a8

0801b4dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801b4dc:	b538      	push	{r3, r4, r5, lr}
 801b4de:	4c15      	ldr	r4, [pc, #84]	; (801b534 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801b4e0:	4605      	mov	r5, r0
 801b4e2:	7823      	ldrb	r3, [r4, #0]
 801b4e4:	f3bf 8f5b 	dmb	ish
 801b4e8:	07da      	lsls	r2, r3, #31
 801b4ea:	d40b      	bmi.n	801b504 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	f009 fd8a 	bl	8025006 <__cxa_guard_acquire>
 801b4f2:	b138      	cbz	r0, 801b504 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801b4f4:	4620      	mov	r0, r4
 801b4f6:	f009 fd92 	bl	802501e <__cxa_guard_release>
 801b4fa:	4a0f      	ldr	r2, [pc, #60]	; (801b538 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801b4fc:	490f      	ldr	r1, [pc, #60]	; (801b53c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801b4fe:	4810      	ldr	r0, [pc, #64]	; (801b540 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801b500:	f009 fd7a 	bl	8024ff8 <__aeabi_atexit>
 801b504:	4c0f      	ldr	r4, [pc, #60]	; (801b544 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801b506:	7823      	ldrb	r3, [r4, #0]
 801b508:	f3bf 8f5b 	dmb	ish
 801b50c:	07db      	lsls	r3, r3, #31
 801b50e:	d40b      	bmi.n	801b528 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801b510:	4620      	mov	r0, r4
 801b512:	f009 fd78 	bl	8025006 <__cxa_guard_acquire>
 801b516:	b138      	cbz	r0, 801b528 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801b518:	4620      	mov	r0, r4
 801b51a:	f009 fd80 	bl	802501e <__cxa_guard_release>
 801b51e:	4a06      	ldr	r2, [pc, #24]	; (801b538 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801b520:	4909      	ldr	r1, [pc, #36]	; (801b548 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801b522:	480a      	ldr	r0, [pc, #40]	; (801b54c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801b524:	f009 fd68 	bl	8024ff8 <__aeabi_atexit>
 801b528:	4b05      	ldr	r3, [pc, #20]	; (801b540 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801b52a:	63ab      	str	r3, [r5, #56]	; 0x38
 801b52c:	4b07      	ldr	r3, [pc, #28]	; (801b54c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801b52e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801b530:	bd38      	pop	{r3, r4, r5, pc}
 801b532:	bf00      	nop
 801b534:	20060d2c 	.word	0x20060d2c
 801b538:	20000000 	.word	0x20000000
 801b53c:	08019265 	.word	0x08019265
 801b540:	200000c4 	.word	0x200000c4
 801b544:	20060d30 	.word	0x20060d30
 801b548:	08019263 	.word	0x08019263
 801b54c:	200000c8 	.word	0x200000c8

0801b550 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801b550:	b510      	push	{r4, lr}
 801b552:	4604      	mov	r4, r0
 801b554:	f7ff ff14 	bl	801b380 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801b558:	4620      	mov	r0, r4
 801b55a:	f7ff ff85 	bl	801b468 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801b55e:	4620      	mov	r0, r4
 801b560:	f7ff ff48 	bl	801b3f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801b564:	4620      	mov	r0, r4
 801b566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b56a:	f7ff bfb7 	b.w	801b4dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801b570 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b570:	b538      	push	{r3, r4, r5, lr}
 801b572:	4c15      	ldr	r4, [pc, #84]	; (801b5c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b574:	4605      	mov	r5, r0
 801b576:	7823      	ldrb	r3, [r4, #0]
 801b578:	f3bf 8f5b 	dmb	ish
 801b57c:	07da      	lsls	r2, r3, #31
 801b57e:	d40b      	bmi.n	801b598 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b580:	4620      	mov	r0, r4
 801b582:	f009 fd40 	bl	8025006 <__cxa_guard_acquire>
 801b586:	b138      	cbz	r0, 801b598 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b588:	4620      	mov	r0, r4
 801b58a:	f009 fd48 	bl	802501e <__cxa_guard_release>
 801b58e:	4a0f      	ldr	r2, [pc, #60]	; (801b5cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b590:	490f      	ldr	r1, [pc, #60]	; (801b5d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b592:	4810      	ldr	r0, [pc, #64]	; (801b5d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b594:	f009 fd30 	bl	8024ff8 <__aeabi_atexit>
 801b598:	4c0f      	ldr	r4, [pc, #60]	; (801b5d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b59a:	7823      	ldrb	r3, [r4, #0]
 801b59c:	f3bf 8f5b 	dmb	ish
 801b5a0:	07db      	lsls	r3, r3, #31
 801b5a2:	d40b      	bmi.n	801b5bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	f009 fd2e 	bl	8025006 <__cxa_guard_acquire>
 801b5aa:	b138      	cbz	r0, 801b5bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	f009 fd36 	bl	802501e <__cxa_guard_release>
 801b5b2:	4a06      	ldr	r2, [pc, #24]	; (801b5cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b5b4:	4909      	ldr	r1, [pc, #36]	; (801b5dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b5b6:	480a      	ldr	r0, [pc, #40]	; (801b5e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b5b8:	f009 fd1e 	bl	8024ff8 <__aeabi_atexit>
 801b5bc:	4b05      	ldr	r3, [pc, #20]	; (801b5d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b5be:	662b      	str	r3, [r5, #96]	; 0x60
 801b5c0:	4b07      	ldr	r3, [pc, #28]	; (801b5e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b5c2:	666b      	str	r3, [r5, #100]	; 0x64
 801b5c4:	bd38      	pop	{r3, r4, r5, pc}
 801b5c6:	bf00      	nop
 801b5c8:	20060d14 	.word	0x20060d14
 801b5cc:	20000000 	.word	0x20000000
 801b5d0:	08019251 	.word	0x08019251
 801b5d4:	200000ac 	.word	0x200000ac
 801b5d8:	20060d18 	.word	0x20060d18
 801b5dc:	0801924f 	.word	0x0801924f
 801b5e0:	200000b0 	.word	0x200000b0

0801b5e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b5e4:	b538      	push	{r3, r4, r5, lr}
 801b5e6:	4c15      	ldr	r4, [pc, #84]	; (801b63c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b5e8:	4605      	mov	r5, r0
 801b5ea:	7823      	ldrb	r3, [r4, #0]
 801b5ec:	f3bf 8f5b 	dmb	ish
 801b5f0:	07da      	lsls	r2, r3, #31
 801b5f2:	d40b      	bmi.n	801b60c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	f009 fd06 	bl	8025006 <__cxa_guard_acquire>
 801b5fa:	b138      	cbz	r0, 801b60c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	f009 fd0e 	bl	802501e <__cxa_guard_release>
 801b602:	4a0f      	ldr	r2, [pc, #60]	; (801b640 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b604:	490f      	ldr	r1, [pc, #60]	; (801b644 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b606:	4810      	ldr	r0, [pc, #64]	; (801b648 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b608:	f009 fcf6 	bl	8024ff8 <__aeabi_atexit>
 801b60c:	4c0f      	ldr	r4, [pc, #60]	; (801b64c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b60e:	7823      	ldrb	r3, [r4, #0]
 801b610:	f3bf 8f5b 	dmb	ish
 801b614:	07db      	lsls	r3, r3, #31
 801b616:	d40b      	bmi.n	801b630 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b618:	4620      	mov	r0, r4
 801b61a:	f009 fcf4 	bl	8025006 <__cxa_guard_acquire>
 801b61e:	b138      	cbz	r0, 801b630 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b620:	4620      	mov	r0, r4
 801b622:	f009 fcfc 	bl	802501e <__cxa_guard_release>
 801b626:	4a06      	ldr	r2, [pc, #24]	; (801b640 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b628:	4909      	ldr	r1, [pc, #36]	; (801b650 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b62a:	480a      	ldr	r0, [pc, #40]	; (801b654 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b62c:	f009 fce4 	bl	8024ff8 <__aeabi_atexit>
 801b630:	4b05      	ldr	r3, [pc, #20]	; (801b648 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b632:	65ab      	str	r3, [r5, #88]	; 0x58
 801b634:	4b07      	ldr	r3, [pc, #28]	; (801b654 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b636:	65eb      	str	r3, [r5, #92]	; 0x5c
 801b638:	bd38      	pop	{r3, r4, r5, pc}
 801b63a:	bf00      	nop
 801b63c:	20060cec 	.word	0x20060cec
 801b640:	20000000 	.word	0x20000000
 801b644:	08019255 	.word	0x08019255
 801b648:	20000084 	.word	0x20000084
 801b64c:	20060cf0 	.word	0x20060cf0
 801b650:	08019253 	.word	0x08019253
 801b654:	20000088 	.word	0x20000088

0801b658 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801b658:	b510      	push	{r4, lr}
 801b65a:	4604      	mov	r4, r0
 801b65c:	f7ff ff88 	bl	801b570 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b660:	4620      	mov	r0, r4
 801b662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b666:	f7ff bfbd 	b.w	801b5e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b66c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b66c:	b538      	push	{r3, r4, r5, lr}
 801b66e:	4c15      	ldr	r4, [pc, #84]	; (801b6c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b670:	4605      	mov	r5, r0
 801b672:	7823      	ldrb	r3, [r4, #0]
 801b674:	f3bf 8f5b 	dmb	ish
 801b678:	07da      	lsls	r2, r3, #31
 801b67a:	d40b      	bmi.n	801b694 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b67c:	4620      	mov	r0, r4
 801b67e:	f009 fcc2 	bl	8025006 <__cxa_guard_acquire>
 801b682:	b138      	cbz	r0, 801b694 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b684:	4620      	mov	r0, r4
 801b686:	f009 fcca 	bl	802501e <__cxa_guard_release>
 801b68a:	4a0f      	ldr	r2, [pc, #60]	; (801b6c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b68c:	490f      	ldr	r1, [pc, #60]	; (801b6cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b68e:	4810      	ldr	r0, [pc, #64]	; (801b6d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b690:	f009 fcb2 	bl	8024ff8 <__aeabi_atexit>
 801b694:	4c0f      	ldr	r4, [pc, #60]	; (801b6d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b696:	7823      	ldrb	r3, [r4, #0]
 801b698:	f3bf 8f5b 	dmb	ish
 801b69c:	07db      	lsls	r3, r3, #31
 801b69e:	d40b      	bmi.n	801b6b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b6a0:	4620      	mov	r0, r4
 801b6a2:	f009 fcb0 	bl	8025006 <__cxa_guard_acquire>
 801b6a6:	b138      	cbz	r0, 801b6b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	f009 fcb8 	bl	802501e <__cxa_guard_release>
 801b6ae:	4a06      	ldr	r2, [pc, #24]	; (801b6c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b6b0:	4909      	ldr	r1, [pc, #36]	; (801b6d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b6b2:	480a      	ldr	r0, [pc, #40]	; (801b6dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b6b4:	f009 fca0 	bl	8024ff8 <__aeabi_atexit>
 801b6b8:	4b05      	ldr	r3, [pc, #20]	; (801b6d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b6ba:	672b      	str	r3, [r5, #112]	; 0x70
 801b6bc:	4b07      	ldr	r3, [pc, #28]	; (801b6dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b6be:	676b      	str	r3, [r5, #116]	; 0x74
 801b6c0:	bd38      	pop	{r3, r4, r5, pc}
 801b6c2:	bf00      	nop
 801b6c4:	20060ce4 	.word	0x20060ce4
 801b6c8:	20000000 	.word	0x20000000
 801b6cc:	08019249 	.word	0x08019249
 801b6d0:	2000007c 	.word	0x2000007c
 801b6d4:	20060ce8 	.word	0x20060ce8
 801b6d8:	08019247 	.word	0x08019247
 801b6dc:	20000080 	.word	0x20000080

0801b6e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b6e0:	b538      	push	{r3, r4, r5, lr}
 801b6e2:	4c15      	ldr	r4, [pc, #84]	; (801b738 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b6e4:	4605      	mov	r5, r0
 801b6e6:	7823      	ldrb	r3, [r4, #0]
 801b6e8:	f3bf 8f5b 	dmb	ish
 801b6ec:	07da      	lsls	r2, r3, #31
 801b6ee:	d40b      	bmi.n	801b708 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b6f0:	4620      	mov	r0, r4
 801b6f2:	f009 fc88 	bl	8025006 <__cxa_guard_acquire>
 801b6f6:	b138      	cbz	r0, 801b708 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b6f8:	4620      	mov	r0, r4
 801b6fa:	f009 fc90 	bl	802501e <__cxa_guard_release>
 801b6fe:	4a0f      	ldr	r2, [pc, #60]	; (801b73c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b700:	490f      	ldr	r1, [pc, #60]	; (801b740 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b702:	4810      	ldr	r0, [pc, #64]	; (801b744 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b704:	f009 fc78 	bl	8024ff8 <__aeabi_atexit>
 801b708:	4c0f      	ldr	r4, [pc, #60]	; (801b748 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b70a:	7823      	ldrb	r3, [r4, #0]
 801b70c:	f3bf 8f5b 	dmb	ish
 801b710:	07db      	lsls	r3, r3, #31
 801b712:	d40b      	bmi.n	801b72c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b714:	4620      	mov	r0, r4
 801b716:	f009 fc76 	bl	8025006 <__cxa_guard_acquire>
 801b71a:	b138      	cbz	r0, 801b72c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b71c:	4620      	mov	r0, r4
 801b71e:	f009 fc7e 	bl	802501e <__cxa_guard_release>
 801b722:	4a06      	ldr	r2, [pc, #24]	; (801b73c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b724:	4909      	ldr	r1, [pc, #36]	; (801b74c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b726:	480a      	ldr	r0, [pc, #40]	; (801b750 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b728:	f009 fc66 	bl	8024ff8 <__aeabi_atexit>
 801b72c:	4b05      	ldr	r3, [pc, #20]	; (801b744 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b72e:	66ab      	str	r3, [r5, #104]	; 0x68
 801b730:	4b07      	ldr	r3, [pc, #28]	; (801b750 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b732:	66eb      	str	r3, [r5, #108]	; 0x6c
 801b734:	bd38      	pop	{r3, r4, r5, pc}
 801b736:	bf00      	nop
 801b738:	20060cdc 	.word	0x20060cdc
 801b73c:	20000000 	.word	0x20000000
 801b740:	0801924d 	.word	0x0801924d
 801b744:	20000074 	.word	0x20000074
 801b748:	20060ce0 	.word	0x20060ce0
 801b74c:	0801924b 	.word	0x0801924b
 801b750:	20000078 	.word	0x20000078

0801b754 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801b754:	b510      	push	{r4, lr}
 801b756:	4604      	mov	r4, r0
 801b758:	f7ff ff88 	bl	801b66c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b75c:	4620      	mov	r0, r4
 801b75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b762:	f7ff bfbd 	b.w	801b6e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801b766 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801b766:	b510      	push	{r4, lr}
 801b768:	4604      	mov	r4, r0
 801b76a:	f7ff fff3 	bl	801b754 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801b76e:	4620      	mov	r0, r4
 801b770:	f7ff ff72 	bl	801b658 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801b774:	4620      	mov	r0, r4
 801b776:	f7ff fdf9 	bl	801b36c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801b77a:	4620      	mov	r0, r4
 801b77c:	f7ff fcfa 	bl	801b174 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801b780:	4620      	mov	r0, r4
 801b782:	f7ff fd75 	bl	801b270 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801b786:	4620      	mov	r0, r4
 801b788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b78c:	f7ff bee0 	b.w	801b550 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801b790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801b790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b794:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801b798:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b79c:	f1be 0f00 	cmp.w	lr, #0
 801b7a0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801b7a4:	fb0e 4708 	mla	r7, lr, r8, r4
 801b7a8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b7ac:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801b7b0:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801b7b4:	eb02 0a07 	add.w	sl, r2, r7
 801b7b8:	8808      	ldrh	r0, [r1, #0]
 801b7ba:	db37      	blt.n	801b82c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801b7bc:	45f3      	cmp	fp, lr
 801b7be:	dd35      	ble.n	801b82c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801b7c0:	2c00      	cmp	r4, #0
 801b7c2:	db31      	blt.n	801b828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801b7c4:	45a0      	cmp	r8, r4
 801b7c6:	dd2f      	ble.n	801b828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801b7c8:	5dd2      	ldrb	r2, [r2, r7]
 801b7ca:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801b7ce:	1c62      	adds	r2, r4, #1
 801b7d0:	d42f      	bmi.n	801b832 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801b7d2:	4590      	cmp	r8, r2
 801b7d4:	dd2d      	ble.n	801b832 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801b7d6:	b366      	cbz	r6, 801b832 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801b7d8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801b7dc:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801b7e0:	f11e 0e01 	adds.w	lr, lr, #1
 801b7e4:	d429      	bmi.n	801b83a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801b7e6:	45f3      	cmp	fp, lr
 801b7e8:	dd27      	ble.n	801b83a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801b7ea:	f1bc 0f00 	cmp.w	ip, #0
 801b7ee:	f000 80a1 	beq.w	801b934 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 801b7f2:	2c00      	cmp	r4, #0
 801b7f4:	db1f      	blt.n	801b836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801b7f6:	45a0      	cmp	r8, r4
 801b7f8:	dd1d      	ble.n	801b836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801b7fa:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801b7fe:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801b802:	3401      	adds	r4, #1
 801b804:	d41c      	bmi.n	801b840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801b806:	45a0      	cmp	r8, r4
 801b808:	dd1a      	ble.n	801b840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801b80a:	b1de      	cbz	r6, 801b844 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801b80c:	44d0      	add	r8, sl
 801b80e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b812:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801b816:	2e0f      	cmp	r6, #15
 801b818:	d915      	bls.n	801b846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801b81a:	4b49      	ldr	r3, [pc, #292]	; (801b940 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801b81c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801b820:	4a48      	ldr	r2, [pc, #288]	; (801b944 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801b822:	4849      	ldr	r0, [pc, #292]	; (801b948 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801b824:	f009 fdc0 	bl	80253a8 <__assert_func>
 801b828:	4681      	mov	r9, r0
 801b82a:	e7d0      	b.n	801b7ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801b82c:	4607      	mov	r7, r0
 801b82e:	4681      	mov	r9, r0
 801b830:	e7d6      	b.n	801b7e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801b832:	4607      	mov	r7, r0
 801b834:	e7d4      	b.n	801b7e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801b836:	4686      	mov	lr, r0
 801b838:	e7e3      	b.n	801b802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801b83a:	4603      	mov	r3, r0
 801b83c:	4686      	mov	lr, r0
 801b83e:	e7ea      	b.n	801b816 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801b840:	4603      	mov	r3, r0
 801b842:	e7e8      	b.n	801b816 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801b844:	4603      	mov	r3, r0
 801b846:	f1bc 0f0f 	cmp.w	ip, #15
 801b84a:	d8e6      	bhi.n	801b81a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801b84c:	fb16 f80c 	smulbb	r8, r6, ip
 801b850:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801b854:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801b858:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801b85c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801b860:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801b864:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b868:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801b86c:	ea44 0909 	orr.w	r9, r4, r9
 801b870:	f1cc 0410 	rsb	r4, ip, #16
 801b874:	041a      	lsls	r2, r3, #16
 801b876:	ea4a 0707 	orr.w	r7, sl, r7
 801b87a:	1ba4      	subs	r4, r4, r6
 801b87c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801b880:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b884:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b888:	4377      	muls	r7, r6
 801b88a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801b88e:	4313      	orrs	r3, r2
 801b890:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801b894:	fb04 7409 	mla	r4, r4, r9, r7
 801b898:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801b89c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b8a0:	b2af      	uxth	r7, r5
 801b8a2:	fb08 4303 	mla	r3, r8, r3, r4
 801b8a6:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801b8aa:	43ed      	mvns	r5, r5
 801b8ac:	10c6      	asrs	r6, r0, #3
 801b8ae:	4322      	orrs	r2, r4
 801b8b0:	b2ed      	uxtb	r5, r5
 801b8b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b8b6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b8ba:	fb16 f605 	smulbb	r6, r6, r5
 801b8be:	0d53      	lsrs	r3, r2, #21
 801b8c0:	0952      	lsrs	r2, r2, #5
 801b8c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b8c6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b8ca:	431a      	orrs	r2, r3
 801b8cc:	b293      	uxth	r3, r2
 801b8ce:	1202      	asrs	r2, r0, #8
 801b8d0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b8d4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801b8d8:	00dc      	lsls	r4, r3, #3
 801b8da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b8de:	fb12 f205 	smulbb	r2, r2, r5
 801b8e2:	b2e4      	uxtb	r4, r4
 801b8e4:	fb0c 2c07 	mla	ip, ip, r7, r2
 801b8e8:	10da      	asrs	r2, r3, #3
 801b8ea:	00c3      	lsls	r3, r0, #3
 801b8ec:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b8f0:	fa1f fc8c 	uxth.w	ip, ip
 801b8f4:	b2db      	uxtb	r3, r3
 801b8f6:	fb02 6207 	mla	r2, r2, r7, r6
 801b8fa:	fb13 f305 	smulbb	r3, r3, r5
 801b8fe:	b296      	uxth	r6, r2
 801b900:	fb04 3307 	mla	r3, r4, r7, r3
 801b904:	b29a      	uxth	r2, r3
 801b906:	f10c 0301 	add.w	r3, ip, #1
 801b90a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b90e:	1c53      	adds	r3, r2, #1
 801b910:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b914:	1c72      	adds	r2, r6, #1
 801b916:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b91a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801b91e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b922:	0952      	lsrs	r2, r2, #5
 801b924:	ea43 030c 	orr.w	r3, r3, ip
 801b928:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b92c:	4313      	orrs	r3, r2
 801b92e:	800b      	strh	r3, [r1, #0]
 801b930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b934:	2e0f      	cmp	r6, #15
 801b936:	f63f af70 	bhi.w	801b81a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801b93a:	4603      	mov	r3, r0
 801b93c:	4686      	mov	lr, r0
 801b93e:	e785      	b.n	801b84c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801b940:	0802c056 	.word	0x0802c056
 801b944:	0802c6cf 	.word	0x0802c6cf
 801b948:	0802c0da 	.word	0x0802c0da

0801b94c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b950:	ed2d 8b08 	vpush	{d8-d11}
 801b954:	b099      	sub	sp, #100	; 0x64
 801b956:	eeb0 aa40 	vmov.f32	s20, s0
 801b95a:	eef0 9a60 	vmov.f32	s19, s1
 801b95e:	9215      	str	r2, [sp, #84]	; 0x54
 801b960:	eeb0 9a41 	vmov.f32	s18, s2
 801b964:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801b966:	eeb0 8a62 	vmov.f32	s16, s5
 801b96a:	9309      	str	r3, [sp, #36]	; 0x24
 801b96c:	eef0 8a43 	vmov.f32	s17, s6
 801b970:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801b974:	eef0 ba44 	vmov.f32	s23, s8
 801b978:	9016      	str	r0, [sp, #88]	; 0x58
 801b97a:	eeb0 ba64 	vmov.f32	s22, s9
 801b97e:	930d      	str	r3, [sp, #52]	; 0x34
 801b980:	eef0 aa45 	vmov.f32	s21, s10
 801b984:	6850      	ldr	r0, [r2, #4]
 801b986:	910c      	str	r1, [sp, #48]	; 0x30
 801b988:	6812      	ldr	r2, [r2, #0]
 801b98a:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801b98e:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 801b992:	fb00 1303 	mla	r3, r0, r3, r1
 801b996:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801b99a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b9a0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801b9a2:	685e      	ldr	r6, [r3, #4]
 801b9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9a6:	3604      	adds	r6, #4
 801b9a8:	43db      	mvns	r3, r3
 801b9aa:	b2db      	uxtb	r3, r3
 801b9ac:	930a      	str	r3, [sp, #40]	; 0x28
 801b9ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	dc03      	bgt.n	801b9bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b9b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	f340 8225 	ble.w	801be06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801b9bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801b9be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b9c6:	1e48      	subs	r0, r1, #1
 801b9c8:	1e57      	subs	r7, r2, #1
 801b9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	f340 80e3 	ble.w	801bb98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 801b9d2:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801b9d6:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b9da:	d406      	bmi.n	801b9ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b9dc:	4584      	cmp	ip, r0
 801b9de:	da04      	bge.n	801b9ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	db02      	blt.n	801b9ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b9e4:	42bb      	cmp	r3, r7
 801b9e6:	f2c0 80d8 	blt.w	801bb9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801b9ea:	f11c 0c01 	adds.w	ip, ip, #1
 801b9ee:	f100 80c9 	bmi.w	801bb84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801b9f2:	4561      	cmp	r1, ip
 801b9f4:	f2c0 80c6 	blt.w	801bb84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801b9f8:	3301      	adds	r3, #1
 801b9fa:	f100 80c3 	bmi.w	801bb84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801b9fe:	429a      	cmp	r2, r3
 801ba00:	f2c0 80c0 	blt.w	801bb84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ba04:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ba08:	4647      	mov	r7, r8
 801ba0a:	f1bb 0f00 	cmp.w	fp, #0
 801ba0e:	f340 80e3 	ble.w	801bbd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ba12:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801ba14:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ba18:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ba1a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801ba1e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ba22:	ea5f 422a 	movs.w	r2, sl, asr #16
 801ba26:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ba2a:	689b      	ldr	r3, [r3, #8]
 801ba2c:	f100 8121 	bmi.w	801bc72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ba30:	f103 39ff 	add.w	r9, r3, #4294967295
 801ba34:	454a      	cmp	r2, r9
 801ba36:	f280 811c 	bge.w	801bc72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ba3a:	f1bc 0f00 	cmp.w	ip, #0
 801ba3e:	f2c0 8118 	blt.w	801bc72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ba42:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ba46:	45cc      	cmp	ip, r9
 801ba48:	f280 8113 	bge.w	801bc72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ba4c:	b21b      	sxth	r3, r3
 801ba4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ba50:	fb0c 2203 	mla	r2, ip, r3, r2
 801ba54:	eb04 0902 	add.w	r9, r4, r2
 801ba58:	5ca2      	ldrb	r2, [r4, r2]
 801ba5a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801ba5e:	2800      	cmp	r0, #0
 801ba60:	f000 80fe 	beq.w	801bc60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801ba64:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ba68:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801ba6c:	9211      	str	r2, [sp, #68]	; 0x44
 801ba6e:	b151      	cbz	r1, 801ba86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ba70:	eb09 0203 	add.w	r2, r9, r3
 801ba74:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ba78:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ba7c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba7e:	7853      	ldrb	r3, [r2, #1]
 801ba80:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ba84:	9312      	str	r3, [sp, #72]	; 0x48
 801ba86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba88:	fb10 f201 	smulbb	r2, r0, r1
 801ba8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ba8e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ba92:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ba96:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801ba9a:	10d2      	asrs	r2, r2, #3
 801ba9c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801baa0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801baa4:	ea4c 0c03 	orr.w	ip, ip, r3
 801baa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801baaa:	041b      	lsls	r3, r3, #16
 801baac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bab0:	4323      	orrs	r3, r4
 801bab2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bab4:	4353      	muls	r3, r2
 801bab6:	fb09 330c 	mla	r3, r9, ip, r3
 801baba:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801babe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801bac2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bac6:	ea4c 0e0e 	orr.w	lr, ip, lr
 801baca:	f1c1 0c10 	rsb	ip, r1, #16
 801bace:	ebac 0c00 	sub.w	ip, ip, r0
 801bad2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bad6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801bada:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801bade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bae0:	0418      	lsls	r0, r3, #16
 801bae2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bae6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801baea:	4318      	orrs	r0, r3
 801baec:	fb02 c200 	mla	r2, r2, r0, ip
 801baf0:	8838      	ldrh	r0, [r7, #0]
 801baf2:	0d53      	lsrs	r3, r2, #21
 801baf4:	0952      	lsrs	r2, r2, #5
 801baf6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bafa:	1201      	asrs	r1, r0, #8
 801bafc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bb00:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801bb04:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801bb08:	00c0      	lsls	r0, r0, #3
 801bb0a:	431a      	orrs	r2, r3
 801bb0c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801bb10:	fb11 f104 	smulbb	r1, r1, r4
 801bb14:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801bb18:	b292      	uxth	r2, r2
 801bb1a:	fb1e fe04 	smulbb	lr, lr, r4
 801bb1e:	b2c0      	uxtb	r0, r0
 801bb20:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801bb24:	fb10 f004 	smulbb	r0, r0, r4
 801bb28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bb2c:	fb0c 1c03 	mla	ip, ip, r3, r1
 801bb30:	10d1      	asrs	r1, r2, #3
 801bb32:	00d2      	lsls	r2, r2, #3
 801bb34:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bb38:	fa1f fc8c 	uxth.w	ip, ip
 801bb3c:	b2d2      	uxtb	r2, r2
 801bb3e:	fb01 e103 	mla	r1, r1, r3, lr
 801bb42:	fb02 0303 	mla	r3, r2, r3, r0
 801bb46:	b289      	uxth	r1, r1
 801bb48:	b29a      	uxth	r2, r3
 801bb4a:	f10c 0301 	add.w	r3, ip, #1
 801bb4e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bb52:	1c53      	adds	r3, r2, #1
 801bb54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bb58:	1c4a      	adds	r2, r1, #1
 801bb5a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bb5e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801bb62:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801bb66:	0949      	lsrs	r1, r1, #5
 801bb68:	ea43 030c 	orr.w	r3, r3, ip
 801bb6c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bb70:	430b      	orrs	r3, r1
 801bb72:	803b      	strh	r3, [r7, #0]
 801bb74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801bb76:	3702      	adds	r7, #2
 801bb78:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bb7c:	449a      	add	sl, r3
 801bb7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bb80:	441d      	add	r5, r3
 801bb82:	e742      	b.n	801ba0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801bb84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801bb86:	f108 0802 	add.w	r8, r8, #2
 801bb8a:	449a      	add	sl, r3
 801bb8c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bb8e:	441d      	add	r5, r3
 801bb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb92:	3b01      	subs	r3, #1
 801bb94:	9309      	str	r3, [sp, #36]	; 0x24
 801bb96:	e718      	b.n	801b9ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bb98:	d023      	beq.n	801bbe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801bb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb9c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801bb9e:	3b01      	subs	r3, #1
 801bba0:	fb00 a003 	mla	r0, r0, r3, sl
 801bba4:	1400      	asrs	r0, r0, #16
 801bba6:	f53f af2d 	bmi.w	801ba04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801bbaa:	3901      	subs	r1, #1
 801bbac:	4288      	cmp	r0, r1
 801bbae:	f6bf af29 	bge.w	801ba04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801bbb2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801bbb4:	fb01 5303 	mla	r3, r1, r3, r5
 801bbb8:	141b      	asrs	r3, r3, #16
 801bbba:	f53f af23 	bmi.w	801ba04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801bbbe:	3a01      	subs	r2, #1
 801bbc0:	4293      	cmp	r3, r2
 801bbc2:	f6bf af1f 	bge.w	801ba04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801bbc6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801bbca:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801bbce:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801bbd2:	f1be 0f00 	cmp.w	lr, #0
 801bbd6:	dc6c      	bgt.n	801bcb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801bbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbda:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bbde:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801bbe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	f340 810e 	ble.w	801be06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801bbea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bbee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bbf0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801bbf4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801bbf8:	eef0 6a48 	vmov.f32	s13, s16
 801bbfc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801bc00:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801bc04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc08:	ee16 aa90 	vmov	sl, s13
 801bc0c:	eef0 6a68 	vmov.f32	s13, s17
 801bc10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc14:	ee16 5a90 	vmov	r5, s13
 801bc18:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bc1c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801bc20:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bc24:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801bc28:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801bc2c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bc30:	ee18 2a10 	vmov	r2, s16
 801bc34:	eeb0 8a47 	vmov.f32	s16, s14
 801bc38:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc3c:	ee18 2a90 	vmov	r2, s17
 801bc40:	932d      	str	r3, [sp, #180]	; 0xb4
 801bc42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bc44:	eef0 8a67 	vmov.f32	s17, s15
 801bc48:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc4c:	932e      	str	r3, [sp, #184]	; 0xb8
 801bc4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bc52:	3b01      	subs	r3, #1
 801bc54:	930c      	str	r3, [sp, #48]	; 0x30
 801bc56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bc58:	bf08      	it	eq
 801bc5a:	4613      	moveq	r3, r2
 801bc5c:	9309      	str	r3, [sp, #36]	; 0x24
 801bc5e:	e6a6      	b.n	801b9ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bc60:	2900      	cmp	r1, #0
 801bc62:	f43f af10 	beq.w	801ba86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bc66:	f819 3003 	ldrb.w	r3, [r9, r3]
 801bc6a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bc6e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc70:	e709      	b.n	801ba86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bc72:	f112 0901 	adds.w	r9, r2, #1
 801bc76:	f53f af7d 	bmi.w	801bb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801bc7a:	454b      	cmp	r3, r9
 801bc7c:	f6ff af7a 	blt.w	801bb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801bc80:	f11c 0901 	adds.w	r9, ip, #1
 801bc84:	f53f af76 	bmi.w	801bb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801bc88:	45ce      	cmp	lr, r9
 801bc8a:	f6ff af73 	blt.w	801bb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801bc8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bc90:	b21b      	sxth	r3, r3
 801bc92:	9202      	str	r2, [sp, #8]
 801bc94:	fa0f f28e 	sxth.w	r2, lr
 801bc98:	9300      	str	r3, [sp, #0]
 801bc9a:	4633      	mov	r3, r6
 801bc9c:	9201      	str	r2, [sp, #4]
 801bc9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bca0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801bca4:	e9cd c003 	strd	ip, r0, [sp, #12]
 801bca8:	4639      	mov	r1, r7
 801bcaa:	9816      	ldr	r0, [sp, #88]	; 0x58
 801bcac:	f7ff fd70 	bl	801b790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801bcb0:	e760      	b.n	801bb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801bcb2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801bcb4:	ea4f 422a 	mov.w	r2, sl, asr #16
 801bcb8:	1429      	asrs	r1, r5, #16
 801bcba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bcbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801bcc0:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801bcc4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bcc8:	fb03 2101 	mla	r1, r3, r1, r2
 801bccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bcce:	440a      	add	r2, r1
 801bcd0:	5c61      	ldrb	r1, [r4, r1]
 801bcd2:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801bcd6:	f1bc 0f00 	cmp.w	ip, #0
 801bcda:	f000 808c 	beq.w	801bdf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 801bcde:	7857      	ldrb	r7, [r2, #1]
 801bce0:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801bce4:	9413      	str	r4, [sp, #76]	; 0x4c
 801bce6:	b140      	cbz	r0, 801bcfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801bce8:	18d7      	adds	r7, r2, r3
 801bcea:	5cd3      	ldrb	r3, [r2, r3]
 801bcec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bcf0:	9310      	str	r3, [sp, #64]	; 0x40
 801bcf2:	787b      	ldrb	r3, [r7, #1]
 801bcf4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bcf8:	9314      	str	r3, [sp, #80]	; 0x50
 801bcfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bcfc:	fb1c f200 	smulbb	r2, ip, r0
 801bd00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bd02:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bd06:	041f      	lsls	r7, r3, #16
 801bd08:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bd0c:	10d2      	asrs	r2, r2, #3
 801bd0e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801bd12:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801bd16:	431f      	orrs	r7, r3
 801bd18:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801bd1c:	9317      	str	r3, [sp, #92]	; 0x5c
 801bd1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bd20:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801bd22:	041b      	lsls	r3, r3, #16
 801bd24:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bd28:	ea43 030b 	orr.w	r3, r3, fp
 801bd2c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801bd30:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801bd34:	4353      	muls	r3, r2
 801bd36:	fb04 3707 	mla	r7, r4, r7, r3
 801bd3a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801bd3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bd40:	ea43 0b01 	orr.w	fp, r3, r1
 801bd44:	f1c0 0110 	rsb	r1, r0, #16
 801bd48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd4a:	eba1 0c0c 	sub.w	ip, r1, ip
 801bd4e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bd52:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801bd56:	fb0c 770b 	mla	r7, ip, fp, r7
 801bd5a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801bd5e:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801bd62:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bd66:	ea4c 0c0b 	orr.w	ip, ip, fp
 801bd6a:	fb02 770c 	mla	r7, r2, ip, r7
 801bd6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd70:	0d79      	lsrs	r1, r7, #21
 801bd72:	8812      	ldrh	r2, [r2, #0]
 801bd74:	097f      	lsrs	r7, r7, #5
 801bd76:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bd7a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801bd7e:	430f      	orrs	r7, r1
 801bd80:	1211      	asrs	r1, r2, #8
 801bd82:	b2bb      	uxth	r3, r7
 801bd84:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801bd88:	10d7      	asrs	r7, r2, #3
 801bd8a:	fb11 f104 	smulbb	r1, r1, r4
 801bd8e:	1218      	asrs	r0, r3, #8
 801bd90:	00d2      	lsls	r2, r2, #3
 801bd92:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bd96:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bd9a:	fb17 f704 	smulbb	r7, r7, r4
 801bd9e:	b2d2      	uxtb	r2, r2
 801bda0:	fb00 1009 	mla	r0, r0, r9, r1
 801bda4:	10d9      	asrs	r1, r3, #3
 801bda6:	fb12 f204 	smulbb	r2, r2, r4
 801bdaa:	00db      	lsls	r3, r3, #3
 801bdac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bdb0:	b280      	uxth	r0, r0
 801bdb2:	b2db      	uxtb	r3, r3
 801bdb4:	fb01 7109 	mla	r1, r1, r9, r7
 801bdb8:	fb03 2309 	mla	r3, r3, r9, r2
 801bdbc:	1c42      	adds	r2, r0, #1
 801bdbe:	b289      	uxth	r1, r1
 801bdc0:	b29b      	uxth	r3, r3
 801bdc2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bdc6:	1c4f      	adds	r7, r1, #1
 801bdc8:	1c5a      	adds	r2, r3, #1
 801bdca:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801bdce:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801bdd2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801bdd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdd8:	0949      	lsrs	r1, r1, #5
 801bdda:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bdde:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bde2:	4310      	orrs	r0, r2
 801bde4:	4308      	orrs	r0, r1
 801bde6:	f823 0b02 	strh.w	r0, [r3], #2
 801bdea:	930e      	str	r3, [sp, #56]	; 0x38
 801bdec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801bdee:	449a      	add	sl, r3
 801bdf0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bdf2:	441d      	add	r5, r3
 801bdf4:	e6ed      	b.n	801bbd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801bdf6:	2800      	cmp	r0, #0
 801bdf8:	f43f af7f 	beq.w	801bcfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801bdfc:	5cd3      	ldrb	r3, [r2, r3]
 801bdfe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801be02:	9310      	str	r3, [sp, #64]	; 0x40
 801be04:	e779      	b.n	801bcfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801be06:	b019      	add	sp, #100	; 0x64
 801be08:	ecbd 8b08 	vpop	{d8-d11}
 801be0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be14:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801be18:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801be1c:	2e00      	cmp	r6, #0
 801be1e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801be22:	fb06 570e 	mla	r7, r6, lr, r5
 801be26:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801be2a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801be2e:	eb02 0807 	add.w	r8, r2, r7
 801be32:	8808      	ldrh	r0, [r1, #0]
 801be34:	db38      	blt.n	801bea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801be36:	45b1      	cmp	r9, r6
 801be38:	dd36      	ble.n	801bea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801be3a:	2d00      	cmp	r5, #0
 801be3c:	db32      	blt.n	801bea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801be3e:	45ae      	cmp	lr, r5
 801be40:	dd30      	ble.n	801bea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801be42:	5dd2      	ldrb	r2, [r2, r7]
 801be44:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801be48:	1c6a      	adds	r2, r5, #1
 801be4a:	d430      	bmi.n	801beae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801be4c:	4596      	cmp	lr, r2
 801be4e:	dd2e      	ble.n	801beae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801be50:	b36c      	cbz	r4, 801beae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801be52:	f898 2001 	ldrb.w	r2, [r8, #1]
 801be56:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801be5a:	3601      	adds	r6, #1
 801be5c:	d42b      	bmi.n	801beb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801be5e:	45b1      	cmp	r9, r6
 801be60:	dd29      	ble.n	801beb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801be62:	f1bc 0f00 	cmp.w	ip, #0
 801be66:	d028      	beq.n	801beba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801be68:	2d00      	cmp	r5, #0
 801be6a:	db22      	blt.n	801beb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801be6c:	45ae      	cmp	lr, r5
 801be6e:	dd20      	ble.n	801beb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801be70:	f818 600e 	ldrb.w	r6, [r8, lr]
 801be74:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801be78:	3501      	adds	r5, #1
 801be7a:	d407      	bmi.n	801be8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801be7c:	45ae      	cmp	lr, r5
 801be7e:	dd05      	ble.n	801be8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801be80:	b134      	cbz	r4, 801be90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801be82:	44c6      	add	lr, r8
 801be84:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801be88:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801be8c:	2c0f      	cmp	r4, #15
 801be8e:	d802      	bhi.n	801be96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801be90:	f1bc 0f0f 	cmp.w	ip, #15
 801be94:	d914      	bls.n	801bec0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801be96:	4b26      	ldr	r3, [pc, #152]	; (801bf30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801be98:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801be9c:	4a25      	ldr	r2, [pc, #148]	; (801bf34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801be9e:	4826      	ldr	r0, [pc, #152]	; (801bf38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801bea0:	f009 fa82 	bl	80253a8 <__assert_func>
 801bea4:	4607      	mov	r7, r0
 801bea6:	e7cf      	b.n	801be48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801bea8:	4602      	mov	r2, r0
 801beaa:	4607      	mov	r7, r0
 801beac:	e7d5      	b.n	801be5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801beae:	4602      	mov	r2, r0
 801beb0:	e7d3      	b.n	801be5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801beb2:	4606      	mov	r6, r0
 801beb4:	e7e0      	b.n	801be78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801beb6:	4606      	mov	r6, r0
 801beb8:	e7e8      	b.n	801be8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801beba:	2c0f      	cmp	r4, #15
 801bebc:	d8eb      	bhi.n	801be96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801bebe:	4606      	mov	r6, r0
 801bec0:	fb14 f30c 	smulbb	r3, r4, ip
 801bec4:	043d      	lsls	r5, r7, #16
 801bec6:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801beca:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801bece:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801bed2:	10db      	asrs	r3, r3, #3
 801bed4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801bed8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bedc:	432f      	orrs	r7, r5
 801bede:	f1cc 0510 	rsb	r5, ip, #16
 801bee2:	ea4e 0202 	orr.w	r2, lr, r2
 801bee6:	1b2d      	subs	r5, r5, r4
 801bee8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801beec:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801bef0:	4354      	muls	r4, r2
 801bef2:	fb05 4507 	mla	r5, r5, r7, r4
 801bef6:	0404      	lsls	r4, r0, #16
 801bef8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801befc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801bf00:	4320      	orrs	r0, r4
 801bf02:	fb03 5400 	mla	r4, r3, r0, r5
 801bf06:	0430      	lsls	r0, r6, #16
 801bf08:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801bf0c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801bf10:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801bf14:	4330      	orrs	r0, r6
 801bf16:	fb03 4000 	mla	r0, r3, r0, r4
 801bf1a:	0d43      	lsrs	r3, r0, #21
 801bf1c:	0940      	lsrs	r0, r0, #5
 801bf1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bf22:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bf26:	4318      	orrs	r0, r3
 801bf28:	8008      	strh	r0, [r1, #0]
 801bf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf2e:	bf00      	nop
 801bf30:	0802c056 	.word	0x0802c056
 801bf34:	0802c6cf 	.word	0x0802c6cf
 801bf38:	0802c0da 	.word	0x0802c0da

0801bf3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf40:	ed2d 8b0a 	vpush	{d8-d12}
 801bf44:	b093      	sub	sp, #76	; 0x4c
 801bf46:	eeb0 aa40 	vmov.f32	s20, s0
 801bf4a:	eef0 9a60 	vmov.f32	s19, s1
 801bf4e:	920f      	str	r2, [sp, #60]	; 0x3c
 801bf50:	eeb0 9a41 	vmov.f32	s18, s2
 801bf54:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801bf56:	eeb0 8a62 	vmov.f32	s16, s5
 801bf5a:	9010      	str	r0, [sp, #64]	; 0x40
 801bf5c:	eef0 8a43 	vmov.f32	s17, s6
 801bf60:	6850      	ldr	r0, [r2, #4]
 801bf62:	eeb0 ca44 	vmov.f32	s24, s8
 801bf66:	9108      	str	r1, [sp, #32]
 801bf68:	eef0 ba64 	vmov.f32	s23, s9
 801bf6c:	9306      	str	r3, [sp, #24]
 801bf6e:	eeb0 ba45 	vmov.f32	s22, s10
 801bf72:	6812      	ldr	r2, [r2, #0]
 801bf74:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801bf78:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801bf7c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801bf80:	fb00 1303 	mla	r3, r0, r3, r1
 801bf84:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801bf88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	9307      	str	r3, [sp, #28]
 801bf8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bf90:	685f      	ldr	r7, [r3, #4]
 801bf92:	3704      	adds	r7, #4
 801bf94:	9b08      	ldr	r3, [sp, #32]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	dc03      	bgt.n	801bfa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	f340 81b2 	ble.w	801c306 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801bfa2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bfa4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bfa8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bfac:	1e48      	subs	r0, r1, #1
 801bfae:	f102 3cff 	add.w	ip, r2, #4294967295
 801bfb2:	9b06      	ldr	r3, [sp, #24]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	f340 80a9 	ble.w	801c10c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801bfba:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801bfbe:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bfc2:	d406      	bmi.n	801bfd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bfc4:	4586      	cmp	lr, r0
 801bfc6:	da04      	bge.n	801bfd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	db02      	blt.n	801bfd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bfcc:	4563      	cmp	r3, ip
 801bfce:	f2c0 809e 	blt.w	801c10e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801bfd2:	f11e 0e01 	adds.w	lr, lr, #1
 801bfd6:	f100 808f 	bmi.w	801c0f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801bfda:	4571      	cmp	r1, lr
 801bfdc:	f2c0 808c 	blt.w	801c0f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801bfe0:	3301      	adds	r3, #1
 801bfe2:	f100 8089 	bmi.w	801c0f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801bfe6:	429a      	cmp	r2, r3
 801bfe8:	f2c0 8086 	blt.w	801c0f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801bfec:	f8dd b018 	ldr.w	fp, [sp, #24]
 801bff0:	46c8      	mov	r8, r9
 801bff2:	f1bb 0f00 	cmp.w	fp, #0
 801bff6:	f340 80a6 	ble.w	801c146 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801bffa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801bffc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c000:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c002:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c006:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c00a:	1422      	asrs	r2, r4, #16
 801c00c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c010:	689b      	ldr	r3, [r3, #8]
 801c012:	f100 80e3 	bmi.w	801c1dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c016:	f103 3aff 	add.w	sl, r3, #4294967295
 801c01a:	4552      	cmp	r2, sl
 801c01c:	f280 80de 	bge.w	801c1dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c020:	f1bc 0f00 	cmp.w	ip, #0
 801c024:	f2c0 80da 	blt.w	801c1dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c028:	f10e 3aff 	add.w	sl, lr, #4294967295
 801c02c:	45d4      	cmp	ip, sl
 801c02e:	f280 80d5 	bge.w	801c1dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c032:	b21b      	sxth	r3, r3
 801c034:	9d07      	ldr	r5, [sp, #28]
 801c036:	fb0c 2203 	mla	r2, ip, r3, r2
 801c03a:	eb05 0a02 	add.w	sl, r5, r2
 801c03e:	5caa      	ldrb	r2, [r5, r2]
 801c040:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801c044:	2800      	cmp	r0, #0
 801c046:	f000 80c0 	beq.w	801c1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801c04a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c04e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801c052:	920b      	str	r2, [sp, #44]	; 0x2c
 801c054:	b151      	cbz	r1, 801c06c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801c056:	eb0a 0203 	add.w	r2, sl, r3
 801c05a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c05e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c062:	9309      	str	r3, [sp, #36]	; 0x24
 801c064:	7853      	ldrb	r3, [r2, #1]
 801c066:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c06a:	930c      	str	r3, [sp, #48]	; 0x30
 801c06c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c06e:	fb10 f201 	smulbb	r2, r0, r1
 801c072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c074:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c078:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c07c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c080:	10d2      	asrs	r2, r2, #3
 801c082:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c086:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801c08a:	ea4c 0c03 	orr.w	ip, ip, r3
 801c08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c090:	041b      	lsls	r3, r3, #16
 801c092:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c096:	432b      	orrs	r3, r5
 801c098:	4353      	muls	r3, r2
 801c09a:	fb0a 330c 	mla	r3, sl, ip, r3
 801c09e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c0a2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c0a6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c0aa:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c0ae:	f1c1 0c10 	rsb	ip, r1, #16
 801c0b2:	ebac 0c00 	sub.w	ip, ip, r0
 801c0b6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c0ba:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c0be:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0c4:	0418      	lsls	r0, r3, #16
 801c0c6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c0ca:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c0ce:	4318      	orrs	r0, r3
 801c0d0:	fb02 c200 	mla	r2, r2, r0, ip
 801c0d4:	0d53      	lsrs	r3, r2, #21
 801c0d6:	0952      	lsrs	r2, r2, #5
 801c0d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c0dc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c0e0:	431a      	orrs	r2, r3
 801c0e2:	f8a8 2000 	strh.w	r2, [r8]
 801c0e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c0e8:	f108 0802 	add.w	r8, r8, #2
 801c0ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c0f0:	441c      	add	r4, r3
 801c0f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c0f4:	441e      	add	r6, r3
 801c0f6:	e77c      	b.n	801bff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801c0f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c0fa:	f109 0902 	add.w	r9, r9, #2
 801c0fe:	441c      	add	r4, r3
 801c100:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c102:	441e      	add	r6, r3
 801c104:	9b06      	ldr	r3, [sp, #24]
 801c106:	3b01      	subs	r3, #1
 801c108:	9306      	str	r3, [sp, #24]
 801c10a:	e752      	b.n	801bfb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c10c:	d020      	beq.n	801c150 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c10e:	9b06      	ldr	r3, [sp, #24]
 801c110:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801c112:	3b01      	subs	r3, #1
 801c114:	fb00 4003 	mla	r0, r0, r3, r4
 801c118:	1400      	asrs	r0, r0, #16
 801c11a:	f53f af67 	bmi.w	801bfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c11e:	3901      	subs	r1, #1
 801c120:	4288      	cmp	r0, r1
 801c122:	f6bf af63 	bge.w	801bfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c126:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801c128:	fb01 6303 	mla	r3, r1, r3, r6
 801c12c:	141b      	asrs	r3, r3, #16
 801c12e:	f53f af5d 	bmi.w	801bfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c132:	3a01      	subs	r2, #1
 801c134:	4293      	cmp	r3, r2
 801c136:	f6bf af59 	bge.w	801bfec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c13a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c13e:	46ca      	mov	sl, r9
 801c140:	f1b8 0f00 	cmp.w	r8, #0
 801c144:	dc67      	bgt.n	801c216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801c146:	9b06      	ldr	r3, [sp, #24]
 801c148:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c14c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801c150:	9b08      	ldr	r3, [sp, #32]
 801c152:	2b00      	cmp	r3, #0
 801c154:	f340 80d7 	ble.w	801c306 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801c158:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801c15c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c15e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801c162:	eef0 6a48 	vmov.f32	s13, s16
 801c166:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801c16a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801c16e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c172:	ee16 4a90 	vmov	r4, s13
 801c176:	eef0 6a68 	vmov.f32	s13, s17
 801c17a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c17e:	ee16 6a90 	vmov	r6, s13
 801c182:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c186:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c18a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c18e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c192:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c196:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c19a:	ee18 2a10 	vmov	r2, s16
 801c19e:	eeb0 8a47 	vmov.f32	s16, s14
 801c1a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1a6:	ee18 2a90 	vmov	r2, s17
 801c1aa:	9329      	str	r3, [sp, #164]	; 0xa4
 801c1ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c1ae:	eef0 8a67 	vmov.f32	s17, s15
 801c1b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1b6:	932a      	str	r3, [sp, #168]	; 0xa8
 801c1b8:	9b08      	ldr	r3, [sp, #32]
 801c1ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1bc:	3b01      	subs	r3, #1
 801c1be:	9308      	str	r3, [sp, #32]
 801c1c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c1c2:	bf08      	it	eq
 801c1c4:	4613      	moveq	r3, r2
 801c1c6:	9306      	str	r3, [sp, #24]
 801c1c8:	e6e4      	b.n	801bf94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c1ca:	2900      	cmp	r1, #0
 801c1cc:	f43f af4e 	beq.w	801c06c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801c1d0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c1d4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c1d8:	9309      	str	r3, [sp, #36]	; 0x24
 801c1da:	e747      	b.n	801c06c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801c1dc:	f112 0a01 	adds.w	sl, r2, #1
 801c1e0:	d481      	bmi.n	801c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c1e2:	4553      	cmp	r3, sl
 801c1e4:	f6ff af7f 	blt.w	801c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c1e8:	f11c 0a01 	adds.w	sl, ip, #1
 801c1ec:	f53f af7b 	bmi.w	801c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c1f0:	45d6      	cmp	lr, sl
 801c1f2:	f6ff af78 	blt.w	801c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c1f6:	b21b      	sxth	r3, r3
 801c1f8:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801c1fc:	fa0f f28e 	sxth.w	r2, lr
 801c200:	9300      	str	r3, [sp, #0]
 801c202:	463b      	mov	r3, r7
 801c204:	9201      	str	r2, [sp, #4]
 801c206:	9a07      	ldr	r2, [sp, #28]
 801c208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c20c:	4641      	mov	r1, r8
 801c20e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c210:	f7ff fdfe 	bl	801be10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801c214:	e767      	b.n	801c0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c216:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c218:	1422      	asrs	r2, r4, #16
 801c21a:	1431      	asrs	r1, r6, #16
 801c21c:	9d07      	ldr	r5, [sp, #28]
 801c21e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c222:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801c226:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c22a:	fb03 2101 	mla	r1, r3, r1, r2
 801c22e:	9a07      	ldr	r2, [sp, #28]
 801c230:	440a      	add	r2, r1
 801c232:	5c69      	ldrb	r1, [r5, r1]
 801c234:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801c238:	f1be 0f00 	cmp.w	lr, #0
 801c23c:	d05c      	beq.n	801c2f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801c23e:	f892 c001 	ldrb.w	ip, [r2, #1]
 801c242:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801c246:	950d      	str	r5, [sp, #52]	; 0x34
 801c248:	b150      	cbz	r0, 801c260 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801c24a:	eb02 0c03 	add.w	ip, r2, r3
 801c24e:	5cd3      	ldrb	r3, [r2, r3]
 801c250:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c254:	930a      	str	r3, [sp, #40]	; 0x28
 801c256:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c25a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c25e:	930e      	str	r3, [sp, #56]	; 0x38
 801c260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c262:	fb1e f200 	smulbb	r2, lr, r0
 801c266:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c268:	f108 38ff 	add.w	r8, r8, #4294967295
 801c26c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c270:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c274:	10d2      	asrs	r2, r2, #3
 801c276:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801c27a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c27e:	ea4c 0c03 	orr.w	ip, ip, r3
 801c282:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801c286:	9311      	str	r3, [sp, #68]	; 0x44
 801c288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c28a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c28c:	041b      	lsls	r3, r3, #16
 801c28e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c292:	ea43 030b 	orr.w	r3, r3, fp
 801c296:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c29a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c29e:	4353      	muls	r3, r2
 801c2a0:	fb05 3c0c 	mla	ip, r5, ip, r3
 801c2a4:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801c2a8:	ea43 0b01 	orr.w	fp, r3, r1
 801c2ac:	f1c0 0110 	rsb	r1, r0, #16
 801c2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2b2:	eba1 0e0e 	sub.w	lr, r1, lr
 801c2b6:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801c2ba:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801c2be:	fb0e cc0b 	mla	ip, lr, fp, ip
 801c2c2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801c2c6:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801c2ca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c2ce:	ea4b 0e0e 	orr.w	lr, fp, lr
 801c2d2:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c2d6:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801c2da:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c2de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c2e2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c2e6:	ea43 0c0c 	orr.w	ip, r3, ip
 801c2ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c2ec:	441c      	add	r4, r3
 801c2ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c2f0:	f82a cb02 	strh.w	ip, [sl], #2
 801c2f4:	441e      	add	r6, r3
 801c2f6:	e723      	b.n	801c140 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c2f8:	2800      	cmp	r0, #0
 801c2fa:	d0b1      	beq.n	801c260 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801c2fc:	5cd3      	ldrb	r3, [r2, r3]
 801c2fe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c302:	930a      	str	r3, [sp, #40]	; 0x28
 801c304:	e7ac      	b.n	801c260 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801c306:	b013      	add	sp, #76	; 0x4c
 801c308:	ecbd 8b0a 	vpop	{d8-d12}
 801c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c310 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c314:	468b      	mov	fp, r1
 801c316:	8809      	ldrh	r1, [r1, #0]
 801c318:	b089      	sub	sp, #36	; 0x24
 801c31a:	10cd      	asrs	r5, r1, #3
 801c31c:	ea4f 2921 	mov.w	r9, r1, asr #8
 801c320:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801c324:	00c9      	lsls	r1, r1, #3
 801c326:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c32a:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801c32e:	9202      	str	r2, [sp, #8]
 801c330:	b2c9      	uxtb	r1, r1
 801c332:	9500      	str	r5, [sp, #0]
 801c334:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801c338:	9101      	str	r1, [sp, #4]
 801c33a:	9900      	ldr	r1, [sp, #0]
 801c33c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801c340:	0209      	lsls	r1, r1, #8
 801c342:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801c346:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801c34a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801c34e:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801c352:	fb04 650e 	mla	r5, r4, lr, r6
 801c356:	2c00      	cmp	r4, #0
 801c358:	eb02 0805 	add.w	r8, r2, r5
 801c35c:	9a01      	ldr	r2, [sp, #4]
 801c35e:	ea41 0102 	orr.w	r1, r1, r2
 801c362:	9107      	str	r1, [sp, #28]
 801c364:	db43      	blt.n	801c3ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801c366:	45a2      	cmp	sl, r4
 801c368:	dd41      	ble.n	801c3ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801c36a:	2e00      	cmp	r6, #0
 801c36c:	db3d      	blt.n	801c3ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801c36e:	45b6      	cmp	lr, r6
 801c370:	dd3b      	ble.n	801c3ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801c372:	9a02      	ldr	r2, [sp, #8]
 801c374:	5d55      	ldrb	r5, [r2, r5]
 801c376:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c37a:	441d      	add	r5, r3
 801c37c:	1c72      	adds	r2, r6, #1
 801c37e:	d439      	bmi.n	801c3f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801c380:	4596      	cmp	lr, r2
 801c382:	dd37      	ble.n	801c3f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801c384:	2f00      	cmp	r7, #0
 801c386:	d035      	beq.n	801c3f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801c388:	f898 1001 	ldrb.w	r1, [r8, #1]
 801c38c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c390:	4419      	add	r1, r3
 801c392:	3401      	adds	r4, #1
 801c394:	d432      	bmi.n	801c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801c396:	45a2      	cmp	sl, r4
 801c398:	dd30      	ble.n	801c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801c39a:	b378      	cbz	r0, 801c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801c39c:	2e00      	cmp	r6, #0
 801c39e:	db2b      	blt.n	801c3f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801c3a0:	45b6      	cmp	lr, r6
 801c3a2:	dd29      	ble.n	801c3f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801c3a4:	f818 400e 	ldrb.w	r4, [r8, lr]
 801c3a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c3ac:	441c      	add	r4, r3
 801c3ae:	3601      	adds	r6, #1
 801c3b0:	d427      	bmi.n	801c402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801c3b2:	45b6      	cmp	lr, r6
 801c3b4:	dd25      	ble.n	801c402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801c3b6:	b327      	cbz	r7, 801c402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801c3b8:	44c6      	add	lr, r8
 801c3ba:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c3be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c3c2:	4413      	add	r3, r2
 801c3c4:	782a      	ldrb	r2, [r5, #0]
 801c3c6:	2f0f      	cmp	r7, #15
 801c3c8:	9202      	str	r2, [sp, #8]
 801c3ca:	780a      	ldrb	r2, [r1, #0]
 801c3cc:	9203      	str	r2, [sp, #12]
 801c3ce:	7822      	ldrb	r2, [r4, #0]
 801c3d0:	9204      	str	r2, [sp, #16]
 801c3d2:	781a      	ldrb	r2, [r3, #0]
 801c3d4:	9205      	str	r2, [sp, #20]
 801c3d6:	d801      	bhi.n	801c3dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 801c3d8:	280f      	cmp	r0, #15
 801c3da:	d914      	bls.n	801c406 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 801c3dc:	4b3f      	ldr	r3, [pc, #252]	; (801c4dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801c3de:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801c3e2:	4a3f      	ldr	r2, [pc, #252]	; (801c4e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801c3e4:	483f      	ldr	r0, [pc, #252]	; (801c4e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 801c3e6:	f008 ffdf 	bl	80253a8 <__assert_func>
 801c3ea:	ad07      	add	r5, sp, #28
 801c3ec:	e7c6      	b.n	801c37c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 801c3ee:	a907      	add	r1, sp, #28
 801c3f0:	460d      	mov	r5, r1
 801c3f2:	e7ce      	b.n	801c392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801c3f4:	a907      	add	r1, sp, #28
 801c3f6:	e7cc      	b.n	801c392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801c3f8:	ac07      	add	r4, sp, #28
 801c3fa:	e7d8      	b.n	801c3ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 801c3fc:	ab07      	add	r3, sp, #28
 801c3fe:	461c      	mov	r4, r3
 801c400:	e7e0      	b.n	801c3c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801c402:	ab07      	add	r3, sp, #28
 801c404:	e7de      	b.n	801c3c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801c406:	b2ba      	uxth	r2, r7
 801c408:	f891 8002 	ldrb.w	r8, [r1, #2]
 801c40c:	b280      	uxth	r0, r0
 801c40e:	7849      	ldrb	r1, [r1, #1]
 801c410:	78ae      	ldrb	r6, [r5, #2]
 801c412:	fa1f f78c 	uxth.w	r7, ip
 801c416:	fb02 fa00 	mul.w	sl, r2, r0
 801c41a:	0112      	lsls	r2, r2, #4
 801c41c:	786d      	ldrb	r5, [r5, #1]
 801c41e:	ea6f 0c0c 	mvn.w	ip, ip
 801c422:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c426:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801c42a:	eba2 020a 	sub.w	r2, r2, sl
 801c42e:	fa5f fc8c 	uxtb.w	ip, ip
 801c432:	b280      	uxth	r0, r0
 801c434:	fb19 f90c 	smulbb	r9, r9, ip
 801c438:	b292      	uxth	r2, r2
 801c43a:	ebae 0e00 	sub.w	lr, lr, r0
 801c43e:	4351      	muls	r1, r2
 801c440:	fa1f fe8e 	uxth.w	lr, lr
 801c444:	fb02 f808 	mul.w	r8, r2, r8
 801c448:	fb0e 1505 	mla	r5, lr, r5, r1
 801c44c:	7861      	ldrb	r1, [r4, #1]
 801c44e:	fb0e 8806 	mla	r8, lr, r6, r8
 801c452:	78a6      	ldrb	r6, [r4, #2]
 801c454:	fb00 5501 	mla	r5, r0, r1, r5
 801c458:	7859      	ldrb	r1, [r3, #1]
 801c45a:	fb00 8806 	mla	r8, r0, r6, r8
 801c45e:	789e      	ldrb	r6, [r3, #2]
 801c460:	9b00      	ldr	r3, [sp, #0]
 801c462:	fb0a 5101 	mla	r1, sl, r1, r5
 801c466:	fb0a 8606 	mla	r6, sl, r6, r8
 801c46a:	fb13 f50c 	smulbb	r5, r3, ip
 801c46e:	9b03      	ldr	r3, [sp, #12]
 801c470:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c474:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c478:	435a      	muls	r2, r3
 801c47a:	9b02      	ldr	r3, [sp, #8]
 801c47c:	fb06 9607 	mla	r6, r6, r7, r9
 801c480:	fb0e 2203 	mla	r2, lr, r3, r2
 801c484:	9b04      	ldr	r3, [sp, #16]
 801c486:	b2b6      	uxth	r6, r6
 801c488:	fb01 5107 	mla	r1, r1, r7, r5
 801c48c:	fb00 2003 	mla	r0, r0, r3, r2
 801c490:	9b05      	ldr	r3, [sp, #20]
 801c492:	f106 0901 	add.w	r9, r6, #1
 801c496:	b289      	uxth	r1, r1
 801c498:	fb0a 0a03 	mla	sl, sl, r3, r0
 801c49c:	9b01      	ldr	r3, [sp, #4]
 801c49e:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801c4a2:	1c4d      	adds	r5, r1, #1
 801c4a4:	fb13 fc0c 	smulbb	ip, r3, ip
 801c4a8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801c4ac:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 801c4b0:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801c4b4:	fb0a c707 	mla	r7, sl, r7, ip
 801c4b8:	0949      	lsrs	r1, r1, #5
 801c4ba:	b2bf      	uxth	r7, r7
 801c4bc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c4c0:	1c7e      	adds	r6, r7, #1
 801c4c2:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801c4c6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c4ca:	ea46 0609 	orr.w	r6, r6, r9
 801c4ce:	430e      	orrs	r6, r1
 801c4d0:	f8ab 6000 	strh.w	r6, [fp]
 801c4d4:	b009      	add	sp, #36	; 0x24
 801c4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4da:	bf00      	nop
 801c4dc:	0802c056 	.word	0x0802c056
 801c4e0:	0802c626 	.word	0x0802c626
 801c4e4:	0802c0da 	.word	0x0802c0da

0801c4e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4ec:	ed2d 8b08 	vpush	{d8-d11}
 801c4f0:	b095      	sub	sp, #84	; 0x54
 801c4f2:	eeb0 aa40 	vmov.f32	s20, s0
 801c4f6:	eef0 9a60 	vmov.f32	s19, s1
 801c4fa:	9212      	str	r2, [sp, #72]	; 0x48
 801c4fc:	eeb0 9a41 	vmov.f32	s18, s2
 801c500:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c502:	eeb0 8a62 	vmov.f32	s16, s5
 801c506:	9309      	str	r3, [sp, #36]	; 0x24
 801c508:	eef0 8a43 	vmov.f32	s17, s6
 801c50c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801c510:	eef0 ba44 	vmov.f32	s23, s8
 801c514:	9013      	str	r0, [sp, #76]	; 0x4c
 801c516:	eeb0 ba64 	vmov.f32	s22, s9
 801c51a:	930f      	str	r3, [sp, #60]	; 0x3c
 801c51c:	eef0 aa45 	vmov.f32	s21, s10
 801c520:	6850      	ldr	r0, [r2, #4]
 801c522:	910e      	str	r1, [sp, #56]	; 0x38
 801c524:	6812      	ldr	r2, [r2, #0]
 801c526:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801c52a:	fb00 1303 	mla	r3, r0, r3, r1
 801c52e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c532:	930a      	str	r3, [sp, #40]	; 0x28
 801c534:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	930d      	str	r3, [sp, #52]	; 0x34
 801c53a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c53c:	685c      	ldr	r4, [r3, #4]
 801c53e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c540:	3404      	adds	r4, #4
 801c542:	43db      	mvns	r3, r3
 801c544:	b2db      	uxtb	r3, r3
 801c546:	930b      	str	r3, [sp, #44]	; 0x2c
 801c548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	dc03      	bgt.n	801c556 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c54e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c550:	2b00      	cmp	r3, #0
 801c552:	f340 8255 	ble.w	801ca00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801c556:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c558:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c55c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c560:	1e48      	subs	r0, r1, #1
 801c562:	1e55      	subs	r5, r2, #1
 801c564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c566:	2b00      	cmp	r3, #0
 801c568:	f340 80f9 	ble.w	801c75e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c56c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801c56e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c570:	1436      	asrs	r6, r6, #16
 801c572:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c576:	d406      	bmi.n	801c586 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c578:	4286      	cmp	r6, r0
 801c57a:	da04      	bge.n	801c586 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	db02      	blt.n	801c586 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c580:	42ab      	cmp	r3, r5
 801c582:	f2c0 80ed 	blt.w	801c760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c586:	3601      	adds	r6, #1
 801c588:	f100 80da 	bmi.w	801c740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801c58c:	42b1      	cmp	r1, r6
 801c58e:	f2c0 80d7 	blt.w	801c740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801c592:	3301      	adds	r3, #1
 801c594:	f100 80d4 	bmi.w	801c740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801c598:	429a      	cmp	r2, r3
 801c59a:	f2c0 80d1 	blt.w	801c740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801c59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5a0:	9311      	str	r3, [sp, #68]	; 0x44
 801c5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5a4:	930c      	str	r3, [sp, #48]	; 0x30
 801c5a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	f340 80fa 	ble.w	801c7a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c5ae:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801c5b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c5b2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801c5b4:	68c6      	ldr	r6, [r0, #12]
 801c5b6:	141d      	asrs	r5, r3, #16
 801c5b8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801c5ba:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c5be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c5c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801c5c2:	1400      	asrs	r0, r0, #16
 801c5c4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c5c8:	6892      	ldr	r2, [r2, #8]
 801c5ca:	f100 813e 	bmi.w	801c84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c5ce:	1e57      	subs	r7, r2, #1
 801c5d0:	42b8      	cmp	r0, r7
 801c5d2:	f280 813a 	bge.w	801c84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c5d6:	2d00      	cmp	r5, #0
 801c5d8:	f2c0 8137 	blt.w	801c84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c5dc:	1e77      	subs	r7, r6, #1
 801c5de:	42bd      	cmp	r5, r7
 801c5e0:	f280 8133 	bge.w	801c84a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801c5e4:	b212      	sxth	r2, r2
 801c5e6:	fb05 0002 	mla	r0, r5, r2, r0
 801c5ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c5ec:	f815 a000 	ldrb.w	sl, [r5, r0]
 801c5f0:	182e      	adds	r6, r5, r0
 801c5f2:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801c5f6:	eb04 050a 	add.w	r5, r4, sl
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	f000 8117 	beq.w	801c82e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801c600:	f896 c001 	ldrb.w	ip, [r6, #1]
 801c604:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c608:	44a4      	add	ip, r4
 801c60a:	2900      	cmp	r1, #0
 801c60c:	f000 8117 	beq.w	801c83e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c610:	18b0      	adds	r0, r6, r2
 801c612:	5cb2      	ldrb	r2, [r6, r2]
 801c614:	7840      	ldrb	r0, [r0, #1]
 801c616:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c61a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c61e:	4422      	add	r2, r4
 801c620:	4420      	add	r0, r4
 801c622:	b29b      	uxth	r3, r3
 801c624:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801c628:	b289      	uxth	r1, r1
 801c62a:	f895 b002 	ldrb.w	fp, [r5, #2]
 801c62e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c630:	fb03 f901 	mul.w	r9, r3, r1
 801c634:	011b      	lsls	r3, r3, #4
 801c636:	f8b6 e000 	ldrh.w	lr, [r6]
 801c63a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c63e:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801c642:	eba3 0309 	sub.w	r3, r3, r9
 801c646:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801c64a:	b289      	uxth	r1, r1
 801c64c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801c650:	b29b      	uxth	r3, r3
 801c652:	eba8 0801 	sub.w	r8, r8, r1
 801c656:	435f      	muls	r7, r3
 801c658:	fa1f f888 	uxth.w	r8, r8
 801c65c:	9310      	str	r3, [sp, #64]	; 0x40
 801c65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c660:	fb08 770b 	mla	r7, r8, fp, r7
 801c664:	f892 b002 	ldrb.w	fp, [r2, #2]
 801c668:	fb01 770b 	mla	r7, r1, fp, r7
 801c66c:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c670:	fb09 770b 	mla	r7, r9, fp, r7
 801c674:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801c678:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801c67c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c680:	fb1b fb03 	smulbb	fp, fp, r3
 801c684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c686:	fb07 b706 	mla	r7, r7, r6, fp
 801c68a:	f895 b001 	ldrb.w	fp, [r5, #1]
 801c68e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c692:	f89c c000 	ldrb.w	ip, [ip]
 801c696:	b2bf      	uxth	r7, r7
 801c698:	435d      	muls	r5, r3
 801c69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c69c:	fb08 550b 	mla	r5, r8, fp, r5
 801c6a0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c6a4:	fb01 550b 	mla	r5, r1, fp, r5
 801c6a8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c6ac:	fb09 550b 	mla	r5, r9, fp, r5
 801c6b0:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801c6b4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c6b8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c6bc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801c6c0:	fa5f fe8e 	uxtb.w	lr, lr
 801c6c4:	fb1b fb03 	smulbb	fp, fp, r3
 801c6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6ca:	fb03 f30c 	mul.w	r3, r3, ip
 801c6ce:	f892 c000 	ldrb.w	ip, [r2]
 801c6d2:	fb05 b506 	mla	r5, r5, r6, fp
 801c6d6:	fb08 330a 	mla	r3, r8, sl, r3
 801c6da:	b2ad      	uxth	r5, r5
 801c6dc:	fb01 330c 	mla	r3, r1, ip, r3
 801c6e0:	f890 c000 	ldrb.w	ip, [r0]
 801c6e4:	f105 0b01 	add.w	fp, r5, #1
 801c6e8:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c6ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c6ee:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801c6f2:	fb1e fe03 	smulbb	lr, lr, r3
 801c6f6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c6fa:	1c7b      	adds	r3, r7, #1
 801c6fc:	096d      	lsrs	r5, r5, #5
 801c6fe:	fb0c e606 	mla	r6, ip, r6, lr
 801c702:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801c706:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c70a:	b2b6      	uxth	r6, r6
 801c70c:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801c710:	1c77      	adds	r7, r6, #1
 801c712:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801c716:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c71a:	431f      	orrs	r7, r3
 801c71c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c71e:	433d      	orrs	r5, r7
 801c720:	801d      	strh	r5, [r3, #0]
 801c722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c724:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c726:	3302      	adds	r3, #2
 801c728:	930c      	str	r3, [sp, #48]	; 0x30
 801c72a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c72c:	4413      	add	r3, r2
 801c72e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c730:	9327      	str	r3, [sp, #156]	; 0x9c
 801c732:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c734:	4413      	add	r3, r2
 801c736:	9328      	str	r3, [sp, #160]	; 0xa0
 801c738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c73a:	3b01      	subs	r3, #1
 801c73c:	9311      	str	r3, [sp, #68]	; 0x44
 801c73e:	e732      	b.n	801c5a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801c740:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c742:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801c744:	4433      	add	r3, r6
 801c746:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 801c748:	9327      	str	r3, [sp, #156]	; 0x9c
 801c74a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c74c:	4433      	add	r3, r6
 801c74e:	9328      	str	r3, [sp, #160]	; 0xa0
 801c750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c752:	3b01      	subs	r3, #1
 801c754:	9309      	str	r3, [sp, #36]	; 0x24
 801c756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c758:	3302      	adds	r3, #2
 801c75a:	930a      	str	r3, [sp, #40]	; 0x28
 801c75c:	e702      	b.n	801c564 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c75e:	d027      	beq.n	801c7b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c762:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801c764:	3b01      	subs	r3, #1
 801c766:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801c768:	fb00 5003 	mla	r0, r0, r3, r5
 801c76c:	1400      	asrs	r0, r0, #16
 801c76e:	f53f af16 	bmi.w	801c59e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801c772:	3901      	subs	r1, #1
 801c774:	4288      	cmp	r0, r1
 801c776:	f6bf af12 	bge.w	801c59e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801c77a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801c77c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801c77e:	fb01 0303 	mla	r3, r1, r3, r0
 801c782:	141b      	asrs	r3, r3, #16
 801c784:	f53f af0b 	bmi.w	801c59e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801c788:	3a01      	subs	r2, #1
 801c78a:	4293      	cmp	r3, r2
 801c78c:	f6bf af07 	bge.w	801c59e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801c790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c792:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801c796:	9311      	str	r3, [sp, #68]	; 0x44
 801c798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c79a:	930c      	str	r3, [sp, #48]	; 0x30
 801c79c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	dc70      	bgt.n	801c884 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 801c7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c7a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c7ae:	930a      	str	r3, [sp, #40]	; 0x28
 801c7b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	f340 8124 	ble.w	801ca00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801c7b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c7bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c7be:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c7c2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c7c6:	eef0 6a48 	vmov.f32	s13, s16
 801c7ca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c7ce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c7d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7d6:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801c7da:	eef0 6a68 	vmov.f32	s13, s17
 801c7de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7e2:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801c7e6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c7ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c7ee:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c7f2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c7f6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c7fa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c7fe:	ee18 2a10 	vmov	r2, s16
 801c802:	eeb0 8a47 	vmov.f32	s16, s14
 801c806:	fb92 f3f3 	sdiv	r3, r2, r3
 801c80a:	ee18 2a90 	vmov	r2, s17
 801c80e:	9329      	str	r3, [sp, #164]	; 0xa4
 801c810:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c812:	eef0 8a67 	vmov.f32	s17, s15
 801c816:	fb92 f3f3 	sdiv	r3, r2, r3
 801c81a:	932a      	str	r3, [sp, #168]	; 0xa8
 801c81c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c81e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c820:	3b01      	subs	r3, #1
 801c822:	930e      	str	r3, [sp, #56]	; 0x38
 801c824:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c826:	bf08      	it	eq
 801c828:	4613      	moveq	r3, r2
 801c82a:	9309      	str	r3, [sp, #36]	; 0x24
 801c82c:	e68c      	b.n	801c548 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c82e:	b149      	cbz	r1, 801c844 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801c830:	5cb2      	ldrb	r2, [r6, r2]
 801c832:	4628      	mov	r0, r5
 801c834:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c838:	4422      	add	r2, r4
 801c83a:	46ac      	mov	ip, r5
 801c83c:	e6f1      	b.n	801c622 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c83e:	4628      	mov	r0, r5
 801c840:	462a      	mov	r2, r5
 801c842:	e6ee      	b.n	801c622 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c844:	4628      	mov	r0, r5
 801c846:	462a      	mov	r2, r5
 801c848:	e7f7      	b.n	801c83a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801c84a:	1c47      	adds	r7, r0, #1
 801c84c:	f53f af69 	bmi.w	801c722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c850:	42ba      	cmp	r2, r7
 801c852:	f6ff af66 	blt.w	801c722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c856:	1c6f      	adds	r7, r5, #1
 801c858:	f53f af63 	bmi.w	801c722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c85c:	42be      	cmp	r6, r7
 801c85e:	f6ff af60 	blt.w	801c722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c862:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c864:	b236      	sxth	r6, r6
 801c866:	b212      	sxth	r2, r2
 801c868:	9002      	str	r0, [sp, #8]
 801c86a:	9601      	str	r6, [sp, #4]
 801c86c:	9200      	str	r2, [sp, #0]
 801c86e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c870:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801c874:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801c878:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801c87c:	4623      	mov	r3, r4
 801c87e:	f7ff fd47 	bl	801c310 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801c882:	e74e      	b.n	801c722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c884:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801c886:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801c888:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c88c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801c88e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801c890:	1400      	asrs	r0, r0, #16
 801c892:	142d      	asrs	r5, r5, #16
 801c894:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c896:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c89a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c89e:	fb02 5000 	mla	r0, r2, r0, r5
 801c8a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c8a4:	f815 9000 	ldrb.w	r9, [r5, r0]
 801c8a8:	182e      	adds	r6, r5, r0
 801c8aa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c8ae:	eb04 0509 	add.w	r5, r4, r9
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	f000 8096 	beq.w	801c9e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 801c8b8:	7877      	ldrb	r7, [r6, #1]
 801c8ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c8be:	4427      	add	r7, r4
 801c8c0:	2900      	cmp	r1, #0
 801c8c2:	f000 8097 	beq.w	801c9f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 801c8c6:	18b0      	adds	r0, r6, r2
 801c8c8:	5cb2      	ldrb	r2, [r6, r2]
 801c8ca:	7840      	ldrb	r0, [r0, #1]
 801c8cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c8d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c8d4:	4422      	add	r2, r4
 801c8d6:	4420      	add	r0, r4
 801c8d8:	b29b      	uxth	r3, r3
 801c8da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c8dc:	b289      	uxth	r1, r1
 801c8de:	f895 b002 	ldrb.w	fp, [r5, #2]
 801c8e2:	f8b6 c000 	ldrh.w	ip, [r6]
 801c8e6:	fb03 f801 	mul.w	r8, r3, r1
 801c8ea:	011b      	lsls	r3, r3, #4
 801c8ec:	78be      	ldrb	r6, [r7, #2]
 801c8ee:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801c8f2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c8f6:	eba3 0308 	sub.w	r3, r3, r8
 801c8fa:	f814 9009 	ldrb.w	r9, [r4, r9]
 801c8fe:	b289      	uxth	r1, r1
 801c900:	b29b      	uxth	r3, r3
 801c902:	ebae 0e01 	sub.w	lr, lr, r1
 801c906:	435e      	muls	r6, r3
 801c908:	fa1f fe8e 	uxth.w	lr, lr
 801c90c:	9310      	str	r3, [sp, #64]	; 0x40
 801c90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c910:	fb0e 660b 	mla	r6, lr, fp, r6
 801c914:	f892 b002 	ldrb.w	fp, [r2, #2]
 801c918:	fb01 660b 	mla	r6, r1, fp, r6
 801c91c:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c920:	fb08 660b 	mla	r6, r8, fp, r6
 801c924:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801c928:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801c92c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c930:	fb1b fb03 	smulbb	fp, fp, r3
 801c934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c936:	fb06 b60a 	mla	r6, r6, sl, fp
 801c93a:	f895 b001 	ldrb.w	fp, [r5, #1]
 801c93e:	787d      	ldrb	r5, [r7, #1]
 801c940:	783f      	ldrb	r7, [r7, #0]
 801c942:	b2b6      	uxth	r6, r6
 801c944:	435d      	muls	r5, r3
 801c946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c948:	fb0e 550b 	mla	r5, lr, fp, r5
 801c94c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c950:	fb01 550b 	mla	r5, r1, fp, r5
 801c954:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c958:	fb08 550b 	mla	r5, r8, fp, r5
 801c95c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801c960:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c964:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c968:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801c96c:	fa5f fc8c 	uxtb.w	ip, ip
 801c970:	fb1b fb03 	smulbb	fp, fp, r3
 801c974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c976:	437b      	muls	r3, r7
 801c978:	7817      	ldrb	r7, [r2, #0]
 801c97a:	fb05 b50a 	mla	r5, r5, sl, fp
 801c97e:	fb0e 3309 	mla	r3, lr, r9, r3
 801c982:	b2ad      	uxth	r5, r5
 801c984:	fb01 3307 	mla	r3, r1, r7, r3
 801c988:	7807      	ldrb	r7, [r0, #0]
 801c98a:	f105 0b01 	add.w	fp, r5, #1
 801c98e:	fb08 3707 	mla	r7, r8, r7, r3
 801c992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c994:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801c998:	fb1c fc03 	smulbb	ip, ip, r3
 801c99c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c9a0:	1c73      	adds	r3, r6, #1
 801c9a2:	096d      	lsrs	r5, r5, #5
 801c9a4:	fb07 c70a 	mla	r7, r7, sl, ip
 801c9a8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c9ac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c9b0:	b2bf      	uxth	r7, r7
 801c9b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9b4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c9b8:	1c7a      	adds	r2, r7, #1
 801c9ba:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801c9be:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c9c2:	4316      	orrs	r6, r2
 801c9c4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c9c6:	432e      	orrs	r6, r5
 801c9c8:	f823 6b02 	strh.w	r6, [r3], #2
 801c9cc:	930c      	str	r3, [sp, #48]	; 0x30
 801c9ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c9d0:	4413      	add	r3, r2
 801c9d2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c9d4:	9327      	str	r3, [sp, #156]	; 0x9c
 801c9d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c9d8:	4413      	add	r3, r2
 801c9da:	9328      	str	r3, [sp, #160]	; 0xa0
 801c9dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c9de:	3b01      	subs	r3, #1
 801c9e0:	9311      	str	r3, [sp, #68]	; 0x44
 801c9e2:	e6db      	b.n	801c79c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 801c9e4:	b149      	cbz	r1, 801c9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801c9e6:	5cb2      	ldrb	r2, [r6, r2]
 801c9e8:	4628      	mov	r0, r5
 801c9ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c9ee:	4422      	add	r2, r4
 801c9f0:	462f      	mov	r7, r5
 801c9f2:	e771      	b.n	801c8d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801c9f4:	4628      	mov	r0, r5
 801c9f6:	462a      	mov	r2, r5
 801c9f8:	e76e      	b.n	801c8d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801c9fa:	4628      	mov	r0, r5
 801c9fc:	462a      	mov	r2, r5
 801c9fe:	e7f7      	b.n	801c9f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801ca00:	b015      	add	sp, #84	; 0x54
 801ca02:	ecbd 8b08 	vpop	{d8-d11}
 801ca06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ca0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca10:	880e      	ldrh	r6, [r1, #0]
 801ca12:	b085      	sub	sp, #20
 801ca14:	4691      	mov	r9, r2
 801ca16:	0230      	lsls	r0, r6, #8
 801ca18:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801ca1c:	9101      	str	r1, [sp, #4]
 801ca1e:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801ca22:	0170      	lsls	r0, r6, #5
 801ca24:	00f6      	lsls	r6, r6, #3
 801ca26:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ca2a:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801ca2e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801ca32:	b2f6      	uxtb	r6, r6
 801ca34:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ca38:	ea4b 0000 	orr.w	r0, fp, r0
 801ca3c:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801ca40:	4306      	orrs	r6, r0
 801ca42:	fb05 7a0c 	mla	sl, r5, ip, r7
 801ca46:	2d00      	cmp	r5, #0
 801ca48:	9603      	str	r6, [sp, #12]
 801ca4a:	eb09 0e0a 	add.w	lr, r9, sl
 801ca4e:	db42      	blt.n	801cad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801ca50:	45a8      	cmp	r8, r5
 801ca52:	dd40      	ble.n	801cad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801ca54:	2f00      	cmp	r7, #0
 801ca56:	db3c      	blt.n	801cad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801ca58:	45bc      	cmp	ip, r7
 801ca5a:	dd3a      	ble.n	801cad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801ca5c:	f819 600a 	ldrb.w	r6, [r9, sl]
 801ca60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ca64:	441e      	add	r6, r3
 801ca66:	1c78      	adds	r0, r7, #1
 801ca68:	d438      	bmi.n	801cadc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801ca6a:	4584      	cmp	ip, r0
 801ca6c:	dd36      	ble.n	801cadc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801ca6e:	b3aa      	cbz	r2, 801cadc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801ca70:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801ca74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ca78:	4418      	add	r0, r3
 801ca7a:	3501      	adds	r5, #1
 801ca7c:	d432      	bmi.n	801cae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801ca7e:	45a8      	cmp	r8, r5
 801ca80:	dd30      	ble.n	801cae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801ca82:	b37c      	cbz	r4, 801cae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801ca84:	2f00      	cmp	r7, #0
 801ca86:	db2b      	blt.n	801cae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801ca88:	45bc      	cmp	ip, r7
 801ca8a:	dd29      	ble.n	801cae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801ca8c:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801ca90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca94:	441d      	add	r5, r3
 801ca96:	3701      	adds	r7, #1
 801ca98:	d427      	bmi.n	801caea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801ca9a:	45bc      	cmp	ip, r7
 801ca9c:	dd25      	ble.n	801caea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801ca9e:	b322      	cbz	r2, 801caea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801caa0:	44f4      	add	ip, lr
 801caa2:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801caa6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801caaa:	443b      	add	r3, r7
 801caac:	781f      	ldrb	r7, [r3, #0]
 801caae:	2a0f      	cmp	r2, #15
 801cab0:	f896 9000 	ldrb.w	r9, [r6]
 801cab4:	f890 a000 	ldrb.w	sl, [r0]
 801cab8:	4639      	mov	r1, r7
 801caba:	f895 8000 	ldrb.w	r8, [r5]
 801cabe:	d801      	bhi.n	801cac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 801cac0:	2c0f      	cmp	r4, #15
 801cac2:	d914      	bls.n	801caee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 801cac4:	4b2c      	ldr	r3, [pc, #176]	; (801cb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801cac6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801caca:	4a2c      	ldr	r2, [pc, #176]	; (801cb7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801cacc:	482c      	ldr	r0, [pc, #176]	; (801cb80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 801cace:	f008 fc6b 	bl	80253a8 <__assert_func>
 801cad2:	ae03      	add	r6, sp, #12
 801cad4:	e7c7      	b.n	801ca66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 801cad6:	a803      	add	r0, sp, #12
 801cad8:	4606      	mov	r6, r0
 801cada:	e7ce      	b.n	801ca7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801cadc:	a803      	add	r0, sp, #12
 801cade:	e7cc      	b.n	801ca7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801cae0:	ad03      	add	r5, sp, #12
 801cae2:	e7d8      	b.n	801ca96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 801cae4:	ab03      	add	r3, sp, #12
 801cae6:	461d      	mov	r5, r3
 801cae8:	e7e0      	b.n	801caac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801caea:	ab03      	add	r3, sp, #12
 801caec:	e7de      	b.n	801caac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801caee:	b292      	uxth	r2, r2
 801caf0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801caf4:	b2a4      	uxth	r4, r4
 801caf6:	f896 b002 	ldrb.w	fp, [r6, #2]
 801cafa:	7840      	ldrb	r0, [r0, #1]
 801cafc:	fb02 fe04 	mul.w	lr, r2, r4
 801cb00:	0112      	lsls	r2, r2, #4
 801cb02:	7876      	ldrb	r6, [r6, #1]
 801cb04:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801cb08:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801cb0c:	eba2 020e 	sub.w	r2, r2, lr
 801cb10:	b2a4      	uxth	r4, r4
 801cb12:	b292      	uxth	r2, r2
 801cb14:	1b3f      	subs	r7, r7, r4
 801cb16:	fb02 fc0c 	mul.w	ip, r2, ip
 801cb1a:	b2bf      	uxth	r7, r7
 801cb1c:	fb07 cc0b 	mla	ip, r7, fp, ip
 801cb20:	f895 b002 	ldrb.w	fp, [r5, #2]
 801cb24:	fb04 cc0b 	mla	ip, r4, fp, ip
 801cb28:	f893 b002 	ldrb.w	fp, [r3, #2]
 801cb2c:	785b      	ldrb	r3, [r3, #1]
 801cb2e:	fb0e cc0b 	mla	ip, lr, fp, ip
 801cb32:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801cb36:	fb02 fc0a 	mul.w	ip, r2, sl
 801cb3a:	4342      	muls	r2, r0
 801cb3c:	7868      	ldrb	r0, [r5, #1]
 801cb3e:	fb07 cc09 	mla	ip, r7, r9, ip
 801cb42:	fb07 2206 	mla	r2, r7, r6, r2
 801cb46:	fb04 cc08 	mla	ip, r4, r8, ip
 801cb4a:	fb04 2400 	mla	r4, r4, r0, r2
 801cb4e:	fb0e cc01 	mla	ip, lr, r1, ip
 801cb52:	fb0e 4e03 	mla	lr, lr, r3, r4
 801cb56:	9b01      	ldr	r3, [sp, #4]
 801cb58:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cb5c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801cb60:	ea4c 0c0b 	orr.w	ip, ip, fp
 801cb64:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801cb68:	ea4c 0c0e 	orr.w	ip, ip, lr
 801cb6c:	f8a3 c000 	strh.w	ip, [r3]
 801cb70:	b005      	add	sp, #20
 801cb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb76:	bf00      	nop
 801cb78:	0802c056 	.word	0x0802c056
 801cb7c:	0802c626 	.word	0x0802c626
 801cb80:	0802c0da 	.word	0x0802c0da

0801cb84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb88:	ed2d 8b08 	vpush	{d8-d11}
 801cb8c:	b08f      	sub	sp, #60	; 0x3c
 801cb8e:	eeb0 aa40 	vmov.f32	s20, s0
 801cb92:	eef0 9a60 	vmov.f32	s19, s1
 801cb96:	920c      	str	r2, [sp, #48]	; 0x30
 801cb98:	eeb0 9a41 	vmov.f32	s18, s2
 801cb9c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cb9e:	eeb0 8a62 	vmov.f32	s16, s5
 801cba2:	900d      	str	r0, [sp, #52]	; 0x34
 801cba4:	eef0 8a43 	vmov.f32	s17, s6
 801cba8:	6850      	ldr	r0, [r2, #4]
 801cbaa:	eef0 ba44 	vmov.f32	s23, s8
 801cbae:	910a      	str	r1, [sp, #40]	; 0x28
 801cbb0:	eeb0 ba64 	vmov.f32	s22, s9
 801cbb4:	9306      	str	r3, [sp, #24]
 801cbb6:	eef0 aa45 	vmov.f32	s21, s10
 801cbba:	6812      	ldr	r2, [r2, #0]
 801cbbc:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801cbc0:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 801cbc4:	fb00 1303 	mla	r3, r0, r3, r1
 801cbc8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cbcc:	9307      	str	r3, [sp, #28]
 801cbce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	9308      	str	r3, [sp, #32]
 801cbd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cbd6:	685c      	ldr	r4, [r3, #4]
 801cbd8:	3404      	adds	r4, #4
 801cbda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	dc03      	bgt.n	801cbe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801cbe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	f340 81d5 	ble.w	801cf92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801cbe8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cbea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cbee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cbf2:	1e48      	subs	r0, r1, #1
 801cbf4:	1e56      	subs	r6, r2, #1
 801cbf6:	9b06      	ldr	r3, [sp, #24]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	f340 80b6 	ble.w	801cd6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801cbfe:	ea5f 472b 	movs.w	r7, fp, asr #16
 801cc02:	ea4f 4325 	mov.w	r3, r5, asr #16
 801cc06:	d406      	bmi.n	801cc16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cc08:	4287      	cmp	r7, r0
 801cc0a:	da04      	bge.n	801cc16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	db02      	blt.n	801cc16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cc10:	42b3      	cmp	r3, r6
 801cc12:	f2c0 80ab 	blt.w	801cd6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cc16:	3701      	adds	r7, #1
 801cc18:	f100 809c 	bmi.w	801cd54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801cc1c:	42b9      	cmp	r1, r7
 801cc1e:	f2c0 8099 	blt.w	801cd54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801cc22:	3301      	adds	r3, #1
 801cc24:	f100 8096 	bmi.w	801cd54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801cc28:	429a      	cmp	r2, r3
 801cc2a:	f2c0 8093 	blt.w	801cd54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801cc2e:	9b06      	ldr	r3, [sp, #24]
 801cc30:	930b      	str	r3, [sp, #44]	; 0x2c
 801cc32:	9b07      	ldr	r3, [sp, #28]
 801cc34:	9309      	str	r3, [sp, #36]	; 0x24
 801cc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	f340 80b4 	ble.w	801cda6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801cc3e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801cc40:	142e      	asrs	r6, r5, #16
 801cc42:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801cc44:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801cc48:	68c7      	ldr	r7, [r0, #12]
 801cc4a:	ea5f 402b 	movs.w	r0, fp, asr #16
 801cc4e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cc52:	6892      	ldr	r2, [r2, #8]
 801cc54:	f100 80fb 	bmi.w	801ce4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801cc58:	f102 3cff 	add.w	ip, r2, #4294967295
 801cc5c:	4560      	cmp	r0, ip
 801cc5e:	f280 80f6 	bge.w	801ce4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801cc62:	2e00      	cmp	r6, #0
 801cc64:	f2c0 80f3 	blt.w	801ce4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801cc68:	f107 3cff 	add.w	ip, r7, #4294967295
 801cc6c:	4566      	cmp	r6, ip
 801cc6e:	f280 80ee 	bge.w	801ce4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801cc72:	b212      	sxth	r2, r2
 801cc74:	fb06 0002 	mla	r0, r6, r2, r0
 801cc78:	9e08      	ldr	r6, [sp, #32]
 801cc7a:	1837      	adds	r7, r6, r0
 801cc7c:	5c30      	ldrb	r0, [r6, r0]
 801cc7e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801cc82:	eb04 0c08 	add.w	ip, r4, r8
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	f000 80d3 	beq.w	801ce32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801cc8c:	787e      	ldrb	r6, [r7, #1]
 801cc8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cc92:	4426      	add	r6, r4
 801cc94:	2900      	cmp	r1, #0
 801cc96:	f000 80d4 	beq.w	801ce42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801cc9a:	18b8      	adds	r0, r7, r2
 801cc9c:	5cba      	ldrb	r2, [r7, r2]
 801cc9e:	7840      	ldrb	r0, [r0, #1]
 801cca0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cca4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cca8:	4422      	add	r2, r4
 801ccaa:	4420      	add	r0, r4
 801ccac:	b29b      	uxth	r3, r3
 801ccae:	78b7      	ldrb	r7, [r6, #2]
 801ccb0:	b289      	uxth	r1, r1
 801ccb2:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ccb6:	f89c c001 	ldrb.w	ip, [ip, #1]
 801ccba:	fb03 f901 	mul.w	r9, r3, r1
 801ccbe:	011b      	lsls	r3, r3, #4
 801ccc0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ccc4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ccc8:	eba3 0309 	sub.w	r3, r3, r9
 801cccc:	b289      	uxth	r1, r1
 801ccce:	b29b      	uxth	r3, r3
 801ccd0:	ebae 0e01 	sub.w	lr, lr, r1
 801ccd4:	435f      	muls	r7, r3
 801ccd6:	fa1f fe8e 	uxth.w	lr, lr
 801ccda:	fb0e 770a 	mla	r7, lr, sl, r7
 801ccde:	f892 a002 	ldrb.w	sl, [r2, #2]
 801cce2:	fb01 770a 	mla	r7, r1, sl, r7
 801cce6:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ccea:	fb09 7a0a 	mla	sl, r9, sl, r7
 801ccee:	f814 7008 	ldrb.w	r7, [r4, r8]
 801ccf2:	f896 8000 	ldrb.w	r8, [r6]
 801ccf6:	7876      	ldrb	r6, [r6, #1]
 801ccf8:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801ccfc:	fb03 f808 	mul.w	r8, r3, r8
 801cd00:	4373      	muls	r3, r6
 801cd02:	fb0e 8807 	mla	r8, lr, r7, r8
 801cd06:	7817      	ldrb	r7, [r2, #0]
 801cd08:	fb0e 330c 	mla	r3, lr, ip, r3
 801cd0c:	fb01 8807 	mla	r8, r1, r7, r8
 801cd10:	7807      	ldrb	r7, [r0, #0]
 801cd12:	fb09 8707 	mla	r7, r9, r7, r8
 801cd16:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cd1a:	ea47 070a 	orr.w	r7, r7, sl
 801cd1e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cd22:	fb01 310a 	mla	r1, r1, sl, r3
 801cd26:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cd2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd2c:	fb09 1a0a 	mla	sl, r9, sl, r1
 801cd30:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cd34:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cd38:	ea47 070a 	orr.w	r7, r7, sl
 801cd3c:	801f      	strh	r7, [r3, #0]
 801cd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd40:	3302      	adds	r3, #2
 801cd42:	9309      	str	r3, [sp, #36]	; 0x24
 801cd44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd46:	449b      	add	fp, r3
 801cd48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd4a:	441d      	add	r5, r3
 801cd4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd4e:	3b01      	subs	r3, #1
 801cd50:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd52:	e770      	b.n	801cc36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801cd54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd56:	449b      	add	fp, r3
 801cd58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd5a:	441d      	add	r5, r3
 801cd5c:	9b06      	ldr	r3, [sp, #24]
 801cd5e:	3b01      	subs	r3, #1
 801cd60:	9306      	str	r3, [sp, #24]
 801cd62:	9b07      	ldr	r3, [sp, #28]
 801cd64:	3302      	adds	r3, #2
 801cd66:	9307      	str	r3, [sp, #28]
 801cd68:	e745      	b.n	801cbf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd6a:	d023      	beq.n	801cdb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801cd6c:	9b06      	ldr	r3, [sp, #24]
 801cd6e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801cd70:	3b01      	subs	r3, #1
 801cd72:	fb00 b003 	mla	r0, r0, r3, fp
 801cd76:	1400      	asrs	r0, r0, #16
 801cd78:	f53f af59 	bmi.w	801cc2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cd7c:	3901      	subs	r1, #1
 801cd7e:	4288      	cmp	r0, r1
 801cd80:	f6bf af55 	bge.w	801cc2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cd84:	9924      	ldr	r1, [sp, #144]	; 0x90
 801cd86:	fb01 5303 	mla	r3, r1, r3, r5
 801cd8a:	141b      	asrs	r3, r3, #16
 801cd8c:	f53f af4f 	bmi.w	801cc2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cd90:	3a01      	subs	r2, #1
 801cd92:	4293      	cmp	r3, r2
 801cd94:	f6bf af4b 	bge.w	801cc2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cd98:	9b06      	ldr	r3, [sp, #24]
 801cd9a:	9309      	str	r3, [sp, #36]	; 0x24
 801cd9c:	9b07      	ldr	r3, [sp, #28]
 801cd9e:	930b      	str	r3, [sp, #44]	; 0x2c
 801cda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	dc70      	bgt.n	801ce88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 801cda6:	9b06      	ldr	r3, [sp, #24]
 801cda8:	9a07      	ldr	r2, [sp, #28]
 801cdaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cdae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cdb2:	9307      	str	r3, [sp, #28]
 801cdb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	f340 80eb 	ble.w	801cf92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801cdbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cdc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cdc2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cdc6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cdca:	eef0 6a48 	vmov.f32	s13, s16
 801cdce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cdd2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cdd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cdda:	ee16 ba90 	vmov	fp, s13
 801cdde:	eef0 6a68 	vmov.f32	s13, s17
 801cde2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cde6:	ee16 5a90 	vmov	r5, s13
 801cdea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cdee:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cdf2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cdf6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cdfa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cdfe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ce02:	ee18 2a10 	vmov	r2, s16
 801ce06:	eeb0 8a47 	vmov.f32	s16, s14
 801ce0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce0e:	ee18 2a90 	vmov	r2, s17
 801ce12:	9323      	str	r3, [sp, #140]	; 0x8c
 801ce14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce16:	eef0 8a67 	vmov.f32	s17, s15
 801ce1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce1e:	9324      	str	r3, [sp, #144]	; 0x90
 801ce20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ce24:	3b01      	subs	r3, #1
 801ce26:	930a      	str	r3, [sp, #40]	; 0x28
 801ce28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce2a:	bf08      	it	eq
 801ce2c:	4613      	moveq	r3, r2
 801ce2e:	9306      	str	r3, [sp, #24]
 801ce30:	e6d3      	b.n	801cbda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ce32:	b149      	cbz	r1, 801ce48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 801ce34:	5cba      	ldrb	r2, [r7, r2]
 801ce36:	4660      	mov	r0, ip
 801ce38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce3c:	4422      	add	r2, r4
 801ce3e:	4666      	mov	r6, ip
 801ce40:	e734      	b.n	801ccac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ce42:	4660      	mov	r0, ip
 801ce44:	4662      	mov	r2, ip
 801ce46:	e731      	b.n	801ccac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ce48:	4660      	mov	r0, ip
 801ce4a:	4662      	mov	r2, ip
 801ce4c:	e7f7      	b.n	801ce3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ce4e:	f110 0c01 	adds.w	ip, r0, #1
 801ce52:	f53f af74 	bmi.w	801cd3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ce56:	4562      	cmp	r2, ip
 801ce58:	f6ff af71 	blt.w	801cd3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ce5c:	f116 0c01 	adds.w	ip, r6, #1
 801ce60:	f53f af6d 	bmi.w	801cd3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ce64:	4567      	cmp	r7, ip
 801ce66:	f6ff af6a 	blt.w	801cd3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ce6a:	b23f      	sxth	r7, r7
 801ce6c:	b212      	sxth	r2, r2
 801ce6e:	9701      	str	r7, [sp, #4]
 801ce70:	9200      	str	r2, [sp, #0]
 801ce72:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801ce76:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801ce7a:	4623      	mov	r3, r4
 801ce7c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ce7e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ce82:	f7ff fdc3 	bl	801ca0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801ce86:	e75a      	b.n	801cd3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ce88:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ce8a:	ea4f 462b 	mov.w	r6, fp, asr #16
 801ce8e:	1428      	asrs	r0, r5, #16
 801ce90:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ce94:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ce98:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ce9c:	fb02 6000 	mla	r0, r2, r0, r6
 801cea0:	9e08      	ldr	r6, [sp, #32]
 801cea2:	f816 8000 	ldrb.w	r8, [r6, r0]
 801cea6:	1837      	adds	r7, r6, r0
 801cea8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ceac:	eb04 0c08 	add.w	ip, r4, r8
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d060      	beq.n	801cf76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801ceb4:	787e      	ldrb	r6, [r7, #1]
 801ceb6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ceba:	4426      	add	r6, r4
 801cebc:	2900      	cmp	r1, #0
 801cebe:	d062      	beq.n	801cf86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 801cec0:	18b8      	adds	r0, r7, r2
 801cec2:	5cba      	ldrb	r2, [r7, r2]
 801cec4:	7840      	ldrb	r0, [r0, #1]
 801cec6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ceca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cece:	4422      	add	r2, r4
 801ced0:	4420      	add	r0, r4
 801ced2:	b29b      	uxth	r3, r3
 801ced4:	78b7      	ldrb	r7, [r6, #2]
 801ced6:	b289      	uxth	r1, r1
 801ced8:	f89c a002 	ldrb.w	sl, [ip, #2]
 801cedc:	f89c c001 	ldrb.w	ip, [ip, #1]
 801cee0:	fb03 f901 	mul.w	r9, r3, r1
 801cee4:	011b      	lsls	r3, r3, #4
 801cee6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ceea:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ceee:	eba3 0309 	sub.w	r3, r3, r9
 801cef2:	b289      	uxth	r1, r1
 801cef4:	b29b      	uxth	r3, r3
 801cef6:	ebae 0e01 	sub.w	lr, lr, r1
 801cefa:	435f      	muls	r7, r3
 801cefc:	fa1f fe8e 	uxth.w	lr, lr
 801cf00:	fb0e 770a 	mla	r7, lr, sl, r7
 801cf04:	f892 a002 	ldrb.w	sl, [r2, #2]
 801cf08:	fb01 770a 	mla	r7, r1, sl, r7
 801cf0c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801cf10:	fb09 7a0a 	mla	sl, r9, sl, r7
 801cf14:	f814 7008 	ldrb.w	r7, [r4, r8]
 801cf18:	f896 8000 	ldrb.w	r8, [r6]
 801cf1c:	7876      	ldrb	r6, [r6, #1]
 801cf1e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801cf22:	fb03 f808 	mul.w	r8, r3, r8
 801cf26:	4373      	muls	r3, r6
 801cf28:	7856      	ldrb	r6, [r2, #1]
 801cf2a:	fb0e 8807 	mla	r8, lr, r7, r8
 801cf2e:	7817      	ldrb	r7, [r2, #0]
 801cf30:	fb0e 330c 	mla	r3, lr, ip, r3
 801cf34:	fb01 8807 	mla	r8, r1, r7, r8
 801cf38:	7807      	ldrb	r7, [r0, #0]
 801cf3a:	fb01 3306 	mla	r3, r1, r6, r3
 801cf3e:	fb09 8707 	mla	r7, r9, r7, r8
 801cf42:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cf46:	ea47 070a 	orr.w	r7, r7, sl
 801cf4a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cf4e:	fb09 3a0a 	mla	sl, r9, sl, r3
 801cf52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf54:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cf58:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cf5c:	ea47 070a 	orr.w	r7, r7, sl
 801cf60:	f823 7b02 	strh.w	r7, [r3], #2
 801cf64:	930b      	str	r3, [sp, #44]	; 0x2c
 801cf66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cf68:	449b      	add	fp, r3
 801cf6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cf6c:	441d      	add	r5, r3
 801cf6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf70:	3b01      	subs	r3, #1
 801cf72:	9309      	str	r3, [sp, #36]	; 0x24
 801cf74:	e714      	b.n	801cda0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801cf76:	b149      	cbz	r1, 801cf8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 801cf78:	5cba      	ldrb	r2, [r7, r2]
 801cf7a:	4660      	mov	r0, ip
 801cf7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf80:	4422      	add	r2, r4
 801cf82:	4666      	mov	r6, ip
 801cf84:	e7a5      	b.n	801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801cf86:	4660      	mov	r0, ip
 801cf88:	4662      	mov	r2, ip
 801cf8a:	e7a2      	b.n	801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801cf8c:	4660      	mov	r0, ip
 801cf8e:	4662      	mov	r2, ip
 801cf90:	e7f7      	b.n	801cf82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 801cf92:	b00f      	add	sp, #60	; 0x3c
 801cf94:	ecbd 8b08 	vpop	{d8-d11}
 801cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801cf9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfa0:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 801cfa4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801cfa8:	2c00      	cmp	r4, #0
 801cfaa:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801cfae:	fb04 560c 	mla	r6, r4, ip, r5
 801cfb2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801cfb6:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801cfba:	eb02 0e06 	add.w	lr, r2, r6
 801cfbe:	db3d      	blt.n	801d03c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 801cfc0:	45a0      	cmp	r8, r4
 801cfc2:	dd3b      	ble.n	801d03c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 801cfc4:	2d00      	cmp	r5, #0
 801cfc6:	db37      	blt.n	801d038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 801cfc8:	45ac      	cmp	ip, r5
 801cfca:	dd35      	ble.n	801d038 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 801cfcc:	5d92      	ldrb	r2, [r2, r6]
 801cfce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cfd2:	1c6e      	adds	r6, r5, #1
 801cfd4:	d435      	bmi.n	801d042 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801cfd6:	45b4      	cmp	ip, r6
 801cfd8:	dd33      	ble.n	801d042 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801cfda:	b3a0      	cbz	r0, 801d046 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 801cfdc:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801cfe0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801cfe4:	3401      	adds	r4, #1
 801cfe6:	d432      	bmi.n	801d04e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 801cfe8:	45a0      	cmp	r8, r4
 801cfea:	dd30      	ble.n	801d04e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 801cfec:	b397      	cbz	r7, 801d054 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 801cfee:	2d00      	cmp	r5, #0
 801cff0:	db2b      	blt.n	801d04a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 801cff2:	45ac      	cmp	ip, r5
 801cff4:	dd29      	ble.n	801d04a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 801cff6:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801cffa:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801cffe:	3501      	adds	r5, #1
 801d000:	d42b      	bmi.n	801d05a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801d002:	45ac      	cmp	ip, r5
 801d004:	dd29      	ble.n	801d05a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801d006:	b350      	cbz	r0, 801d05e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 801d008:	44f4      	add	ip, lr
 801d00a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d00e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801d012:	280f      	cmp	r0, #15
 801d014:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801d018:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d01c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d020:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801d024:	d801      	bhi.n	801d02a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 801d026:	2f0f      	cmp	r7, #15
 801d028:	d91b      	bls.n	801d062 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 801d02a:	4b8d      	ldr	r3, [pc, #564]	; (801d260 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801d02c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801d030:	4a8c      	ldr	r2, [pc, #560]	; (801d264 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 801d032:	488d      	ldr	r0, [pc, #564]	; (801d268 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 801d034:	f008 f9b8 	bl	80253a8 <__assert_func>
 801d038:	2200      	movs	r2, #0
 801d03a:	e7ca      	b.n	801cfd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 801d03c:	2600      	movs	r6, #0
 801d03e:	4632      	mov	r2, r6
 801d040:	e7d0      	b.n	801cfe4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801d042:	2600      	movs	r6, #0
 801d044:	e7ce      	b.n	801cfe4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801d046:	4606      	mov	r6, r0
 801d048:	e7cc      	b.n	801cfe4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801d04a:	2400      	movs	r4, #0
 801d04c:	e7d7      	b.n	801cffe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 801d04e:	2300      	movs	r3, #0
 801d050:	461c      	mov	r4, r3
 801d052:	e7de      	b.n	801d012 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801d054:	463b      	mov	r3, r7
 801d056:	463c      	mov	r4, r7
 801d058:	e7db      	b.n	801d012 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801d05a:	2300      	movs	r3, #0
 801d05c:	e7d9      	b.n	801d012 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801d05e:	4603      	mov	r3, r0
 801d060:	e7d7      	b.n	801d012 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801d062:	b280      	uxth	r0, r0
 801d064:	b2bf      	uxth	r7, r7
 801d066:	fb07 fe00 	mul.w	lr, r7, r0
 801d06a:	0100      	lsls	r0, r0, #4
 801d06c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801d070:	eba0 0c0e 	sub.w	ip, r0, lr
 801d074:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801d078:	b2bf      	uxth	r7, r7
 801d07a:	fa1f fc8c 	uxth.w	ip, ip
 801d07e:	1bed      	subs	r5, r5, r7
 801d080:	fb0a f00c 	mul.w	r0, sl, ip
 801d084:	b2ad      	uxth	r5, r5
 801d086:	fb0b 0005 	mla	r0, fp, r5, r0
 801d08a:	fb07 0009 	mla	r0, r7, r9, r0
 801d08e:	fb0e 0008 	mla	r0, lr, r8, r0
 801d092:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d096:	9001      	str	r0, [sp, #4]
 801d098:	2800      	cmp	r0, #0
 801d09a:	f000 80de 	beq.w	801d25a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 801d09e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d0a2:	d018      	beq.n	801d0d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 801d0a4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801d0a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d0ac:	fb0b f000 	mul.w	r0, fp, r0
 801d0b0:	fb0b fb02 	mul.w	fp, fp, r2
 801d0b4:	0a02      	lsrs	r2, r0, #8
 801d0b6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801d0ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d0be:	4402      	add	r2, r0
 801d0c0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801d0c4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801d0c8:	0a12      	lsrs	r2, r2, #8
 801d0ca:	0a00      	lsrs	r0, r0, #8
 801d0cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d0d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d0d4:	4302      	orrs	r2, r0
 801d0d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d0da:	d01a      	beq.n	801d112 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 801d0dc:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801d0e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d0e4:	fb0a f000 	mul.w	r0, sl, r0
 801d0e8:	fb0a fa06 	mul.w	sl, sl, r6
 801d0ec:	0a06      	lsrs	r6, r0, #8
 801d0ee:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801d0f2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d0f6:	4406      	add	r6, r0
 801d0f8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801d0fc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d100:	0a36      	lsrs	r6, r6, #8
 801d102:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d106:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d10a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d10e:	ea46 060a 	orr.w	r6, r6, sl
 801d112:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d116:	d01b      	beq.n	801d150 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 801d118:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801d11c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d120:	fb09 fa0a 	mul.w	sl, r9, sl
 801d124:	fb09 f004 	mul.w	r0, r9, r4
 801d128:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801d12c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d130:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801d134:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d138:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801d13c:	4454      	add	r4, sl
 801d13e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d142:	0a24      	lsrs	r4, r4, #8
 801d144:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d148:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d14c:	ea44 0409 	orr.w	r4, r4, r9
 801d150:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d154:	d01b      	beq.n	801d18e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 801d156:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801d15a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d15e:	fb08 f909 	mul.w	r9, r8, r9
 801d162:	fb08 f003 	mul.w	r0, r8, r3
 801d166:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801d16a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801d16e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801d172:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d176:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801d17a:	444b      	add	r3, r9
 801d17c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d180:	0a1b      	lsrs	r3, r3, #8
 801d182:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d186:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d18a:	ea43 0308 	orr.w	r3, r3, r8
 801d18e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801d192:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d196:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 801d19a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d19e:	fb0c f808 	mul.w	r8, ip, r8
 801d1a2:	8808      	ldrh	r0, [r1, #0]
 801d1a4:	fb0c f606 	mul.w	r6, ip, r6
 801d1a8:	fb05 8909 	mla	r9, r5, r9, r8
 801d1ac:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801d1b0:	fb05 6502 	mla	r5, r5, r2, r6
 801d1b4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d1b8:	fb07 9908 	mla	r9, r7, r8, r9
 801d1bc:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801d1c0:	fb07 5704 	mla	r7, r7, r4, r5
 801d1c4:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801d1c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d1cc:	b2b6      	uxth	r6, r6
 801d1ce:	fb0e 9808 	mla	r8, lr, r8, r9
 801d1d2:	9a01      	ldr	r2, [sp, #4]
 801d1d4:	fb0e 7e03 	mla	lr, lr, r3, r7
 801d1d8:	1205      	asrs	r5, r0, #8
 801d1da:	4372      	muls	r2, r6
 801d1dc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d1e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d1e4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d1e8:	1c53      	adds	r3, r2, #1
 801d1ea:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801d1ee:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d1f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d1f6:	ea48 0e0e 	orr.w	lr, r8, lr
 801d1fa:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d1fe:	ea4f 421e 	mov.w	r2, lr, lsr #16
 801d202:	f3ce 2407 	ubfx	r4, lr, #8, #8
 801d206:	b2db      	uxtb	r3, r3
 801d208:	fb12 f206 	smulbb	r2, r2, r6
 801d20c:	fa5f fe8e 	uxtb.w	lr, lr
 801d210:	fb14 f406 	smulbb	r4, r4, r6
 801d214:	fb05 2503 	mla	r5, r5, r3, r2
 801d218:	10c2      	asrs	r2, r0, #3
 801d21a:	fb1e fe06 	smulbb	lr, lr, r6
 801d21e:	00c0      	lsls	r0, r0, #3
 801d220:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d224:	b2ad      	uxth	r5, r5
 801d226:	b2c0      	uxtb	r0, r0
 801d228:	fb02 4203 	mla	r2, r2, r3, r4
 801d22c:	fb00 e303 	mla	r3, r0, r3, lr
 801d230:	b294      	uxth	r4, r2
 801d232:	b298      	uxth	r0, r3
 801d234:	1c6b      	adds	r3, r5, #1
 801d236:	1c62      	adds	r2, r4, #1
 801d238:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d23c:	1c43      	adds	r3, r0, #1
 801d23e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d242:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d246:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d24a:	0952      	lsrs	r2, r2, #5
 801d24c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d250:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d254:	432b      	orrs	r3, r5
 801d256:	4313      	orrs	r3, r2
 801d258:	800b      	strh	r3, [r1, #0]
 801d25a:	b003      	add	sp, #12
 801d25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d260:	0802c056 	.word	0x0802c056
 801d264:	0802c626 	.word	0x0802c626
 801d268:	0802c0da 	.word	0x0802c0da

0801d26c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d270:	ed2d 8b08 	vpush	{d8-d11}
 801d274:	b09f      	sub	sp, #124	; 0x7c
 801d276:	eeb0 aa40 	vmov.f32	s20, s0
 801d27a:	eef0 9a60 	vmov.f32	s19, s1
 801d27e:	921b      	str	r2, [sp, #108]	; 0x6c
 801d280:	eeb0 9a41 	vmov.f32	s18, s2
 801d284:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801d286:	eeb0 8a62 	vmov.f32	s16, s5
 801d28a:	9309      	str	r3, [sp, #36]	; 0x24
 801d28c:	eef0 8a43 	vmov.f32	s17, s6
 801d290:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801d294:	eef0 ba44 	vmov.f32	s23, s8
 801d298:	901d      	str	r0, [sp, #116]	; 0x74
 801d29a:	eeb0 ba64 	vmov.f32	s22, s9
 801d29e:	931c      	str	r3, [sp, #112]	; 0x70
 801d2a0:	eef0 aa45 	vmov.f32	s21, s10
 801d2a4:	6850      	ldr	r0, [r2, #4]
 801d2a6:	9119      	str	r1, [sp, #100]	; 0x64
 801d2a8:	6812      	ldr	r2, [r2, #0]
 801d2aa:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801d2ac:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801d2b0:	fb00 1303 	mla	r3, r0, r3, r1
 801d2b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d2b8:	930c      	str	r3, [sp, #48]	; 0x30
 801d2ba:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	9312      	str	r3, [sp, #72]	; 0x48
 801d2c0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d2c2:	685e      	ldr	r6, [r3, #4]
 801d2c4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801d2c8:	3604      	adds	r6, #4
 801d2ca:	930d      	str	r3, [sp, #52]	; 0x34
 801d2cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	dc03      	bgt.n	801d2da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d2d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	f340 8387 	ble.w	801d9e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 801d2da:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d2dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d2e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d2e4:	1e48      	subs	r0, r1, #1
 801d2e6:	1e57      	subs	r7, r2, #1
 801d2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	f340 8194 	ble.w	801d618 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 801d2f0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801d2f2:	142b      	asrs	r3, r5, #16
 801d2f4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d2f8:	d406      	bmi.n	801d308 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d2fa:	4584      	cmp	ip, r0
 801d2fc:	da04      	bge.n	801d308 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	db02      	blt.n	801d308 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d302:	42bb      	cmp	r3, r7
 801d304:	f2c0 8189 	blt.w	801d61a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801d308:	f11c 0c01 	adds.w	ip, ip, #1
 801d30c:	f100 8177 	bmi.w	801d5fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801d310:	4561      	cmp	r1, ip
 801d312:	f2c0 8174 	blt.w	801d5fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801d316:	3301      	adds	r3, #1
 801d318:	f100 8171 	bmi.w	801d5fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801d31c:	429a      	cmp	r2, r3
 801d31e:	f2c0 816e 	blt.w	801d5fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801d322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d324:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d326:	931a      	str	r3, [sp, #104]	; 0x68
 801d328:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	f340 8193 	ble.w	801d656 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d330:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801d332:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d336:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d33a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d33e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d340:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d344:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801d346:	141b      	asrs	r3, r3, #16
 801d348:	f100 81d6 	bmi.w	801d6f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801d34c:	f100 38ff 	add.w	r8, r0, #4294967295
 801d350:	4543      	cmp	r3, r8
 801d352:	f280 81d1 	bge.w	801d6f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801d356:	f1bc 0f00 	cmp.w	ip, #0
 801d35a:	f2c0 81cd 	blt.w	801d6f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801d35e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d362:	45c4      	cmp	ip, r8
 801d364:	f280 81c8 	bge.w	801d6f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801d368:	b200      	sxth	r0, r0
 801d36a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d36c:	fb0c 3300 	mla	r3, ip, r0, r3
 801d370:	eb04 0803 	add.w	r8, r4, r3
 801d374:	5ce3      	ldrb	r3, [r4, r3]
 801d376:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d37a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d37e:	2a00      	cmp	r2, #0
 801d380:	f000 81af 	beq.w	801d6e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801d384:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d388:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d38c:	940e      	str	r4, [sp, #56]	; 0x38
 801d38e:	0e24      	lsrs	r4, r4, #24
 801d390:	9415      	str	r4, [sp, #84]	; 0x54
 801d392:	b179      	cbz	r1, 801d3b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d394:	eb08 0c00 	add.w	ip, r8, r0
 801d398:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d39c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d3a0:	900a      	str	r0, [sp, #40]	; 0x28
 801d3a2:	0e00      	lsrs	r0, r0, #24
 801d3a4:	9013      	str	r0, [sp, #76]	; 0x4c
 801d3a6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d3aa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d3ae:	900f      	str	r0, [sp, #60]	; 0x3c
 801d3b0:	0e00      	lsrs	r0, r0, #24
 801d3b2:	9016      	str	r0, [sp, #88]	; 0x58
 801d3b4:	b292      	uxth	r2, r2
 801d3b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d3b8:	b289      	uxth	r1, r1
 801d3ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d3bc:	fb02 f901 	mul.w	r9, r2, r1
 801d3c0:	0112      	lsls	r2, r2, #4
 801d3c2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d3c6:	eba2 0809 	sub.w	r8, r2, r9
 801d3ca:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d3ce:	b289      	uxth	r1, r1
 801d3d0:	fa1f f888 	uxth.w	r8, r8
 801d3d4:	1a52      	subs	r2, r2, r1
 801d3d6:	fb08 f000 	mul.w	r0, r8, r0
 801d3da:	b292      	uxth	r2, r2
 801d3dc:	fb02 000e 	mla	r0, r2, lr, r0
 801d3e0:	fb01 0004 	mla	r0, r1, r4, r0
 801d3e4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d3e6:	fb09 0004 	mla	r0, r9, r4, r0
 801d3ea:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d3ee:	2800      	cmp	r0, #0
 801d3f0:	f000 80fa 	beq.w	801d5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d3f4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d3f8:	d01b      	beq.n	801d432 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801d3fa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d3fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d402:	fb0e fa0a 	mul.w	sl, lr, sl
 801d406:	fb0e fe03 	mul.w	lr, lr, r3
 801d40a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d40e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d412:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d416:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d41a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d41e:	4453      	add	r3, sl
 801d420:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d424:	0a1b      	lsrs	r3, r3, #8
 801d426:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d42a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d42e:	ea43 030c 	orr.w	r3, r3, ip
 801d432:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d434:	2cff      	cmp	r4, #255	; 0xff
 801d436:	d021      	beq.n	801d47c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d438:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d43a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d43e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d440:	fb04 fb0b 	mul.w	fp, r4, fp
 801d444:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d446:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d44a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d44c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d450:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d454:	fb04 fa0a 	mul.w	sl, r4, sl
 801d458:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d45c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d460:	44de      	add	lr, fp
 801d462:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d466:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d46a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d46e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d472:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d476:	ea4e 040a 	orr.w	r4, lr, sl
 801d47a:	940e      	str	r4, [sp, #56]	; 0x38
 801d47c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d47e:	2cff      	cmp	r4, #255	; 0xff
 801d480:	d021      	beq.n	801d4c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801d482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d484:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d488:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d48a:	fb04 fb0b 	mul.w	fp, r4, fp
 801d48e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d490:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d494:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d496:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d49a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d49e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d4a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d4a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d4aa:	44de      	add	lr, fp
 801d4ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d4b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d4b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d4b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d4bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d4c0:	ea4e 040a 	orr.w	r4, lr, sl
 801d4c4:	940a      	str	r4, [sp, #40]	; 0x28
 801d4c6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d4c8:	2cff      	cmp	r4, #255	; 0xff
 801d4ca:	d021      	beq.n	801d510 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801d4cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d4ce:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d4d2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d4d4:	fb04 fb0b 	mul.w	fp, r4, fp
 801d4d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d4da:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d4de:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d4e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d4e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d4e8:	fb04 fa0a 	mul.w	sl, r4, sl
 801d4ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d4f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d4f4:	44de      	add	lr, fp
 801d4f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d4fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d4fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d502:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d506:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d50a:	ea4e 040a 	orr.w	r4, lr, sl
 801d50e:	940f      	str	r4, [sp, #60]	; 0x3c
 801d510:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d512:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d51a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d51e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d520:	fb08 fc0c 	mul.w	ip, r8, ip
 801d524:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d528:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d52c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d52e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d532:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d536:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d538:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d53c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d540:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d542:	fb08 f80e 	mul.w	r8, r8, lr
 801d546:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d54a:	fb02 8303 	mla	r3, r2, r3, r8
 801d54e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d550:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d554:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d55a:	fb01 330a 	mla	r3, r1, sl, r3
 801d55e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801d562:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d564:	fb09 3901 	mla	r9, r9, r1, r3
 801d568:	883b      	ldrh	r3, [r7, #0]
 801d56a:	4342      	muls	r2, r0
 801d56c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d570:	1c50      	adds	r0, r2, #1
 801d572:	1219      	asrs	r1, r3, #8
 801d574:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d578:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801d57c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d580:	ea4c 0c09 	orr.w	ip, ip, r9
 801d584:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d588:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801d58c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801d590:	b2c0      	uxtb	r0, r0
 801d592:	fb12 f204 	smulbb	r2, r2, r4
 801d596:	fa5f fc8c 	uxtb.w	ip, ip
 801d59a:	fb1e fe04 	smulbb	lr, lr, r4
 801d59e:	fb01 2100 	mla	r1, r1, r0, r2
 801d5a2:	10da      	asrs	r2, r3, #3
 801d5a4:	fb1c fc04 	smulbb	ip, ip, r4
 801d5a8:	00db      	lsls	r3, r3, #3
 801d5aa:	b289      	uxth	r1, r1
 801d5ac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d5b0:	b2db      	uxtb	r3, r3
 801d5b2:	fb02 e200 	mla	r2, r2, r0, lr
 801d5b6:	fb03 c300 	mla	r3, r3, r0, ip
 801d5ba:	b292      	uxth	r2, r2
 801d5bc:	fa1f fc83 	uxth.w	ip, r3
 801d5c0:	1c4b      	adds	r3, r1, #1
 801d5c2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d5c6:	f10c 0301 	add.w	r3, ip, #1
 801d5ca:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d5ce:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d5d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d5d6:	430b      	orrs	r3, r1
 801d5d8:	1c51      	adds	r1, r2, #1
 801d5da:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d5de:	0952      	lsrs	r2, r2, #5
 801d5e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d5e4:	4313      	orrs	r3, r2
 801d5e6:	803b      	strh	r3, [r7, #0]
 801d5e8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801d5ea:	3702      	adds	r7, #2
 801d5ec:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801d5ee:	441a      	add	r2, r3
 801d5f0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801d5f2:	441d      	add	r5, r3
 801d5f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d5f6:	9231      	str	r2, [sp, #196]	; 0xc4
 801d5f8:	3b01      	subs	r3, #1
 801d5fa:	931a      	str	r3, [sp, #104]	; 0x68
 801d5fc:	e694      	b.n	801d328 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801d5fe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801d600:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801d602:	441c      	add	r4, r3
 801d604:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801d606:	441d      	add	r5, r3
 801d608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d60a:	9431      	str	r4, [sp, #196]	; 0xc4
 801d60c:	3b01      	subs	r3, #1
 801d60e:	9309      	str	r3, [sp, #36]	; 0x24
 801d610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d612:	3302      	adds	r3, #2
 801d614:	930c      	str	r3, [sp, #48]	; 0x30
 801d616:	e667      	b.n	801d2e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d618:	d024      	beq.n	801d664 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801d61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d61c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801d61e:	3b01      	subs	r3, #1
 801d620:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801d622:	fb00 4003 	mla	r0, r0, r3, r4
 801d626:	1400      	asrs	r0, r0, #16
 801d628:	f53f ae7b 	bmi.w	801d322 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d62c:	3901      	subs	r1, #1
 801d62e:	4288      	cmp	r0, r1
 801d630:	f6bf ae77 	bge.w	801d322 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d634:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801d636:	fb01 5303 	mla	r3, r1, r3, r5
 801d63a:	141b      	asrs	r3, r3, #16
 801d63c:	f53f ae71 	bmi.w	801d322 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d640:	3a01      	subs	r2, #1
 801d642:	4293      	cmp	r3, r2
 801d644:	f6bf ae6d 	bge.w	801d322 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d648:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801d64c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801d650:	f1bb 0f00 	cmp.w	fp, #0
 801d654:	dc70      	bgt.n	801d738 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 801d656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d658:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d65c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d65e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d662:	930c      	str	r3, [sp, #48]	; 0x30
 801d664:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d666:	2b00      	cmp	r3, #0
 801d668:	f340 81be 	ble.w	801d9e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 801d66c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d670:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d672:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d676:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d67a:	eef0 6a48 	vmov.f32	s13, s16
 801d67e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d682:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d686:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d68a:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801d68e:	eef0 6a68 	vmov.f32	s13, s17
 801d692:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d696:	ee16 5a90 	vmov	r5, s13
 801d69a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d69e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d6a2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d6a6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d6aa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d6ae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d6b2:	ee18 2a10 	vmov	r2, s16
 801d6b6:	eeb0 8a47 	vmov.f32	s16, s14
 801d6ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6be:	ee18 2a90 	vmov	r2, s17
 801d6c2:	9333      	str	r3, [sp, #204]	; 0xcc
 801d6c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d6c6:	eef0 8a67 	vmov.f32	s17, s15
 801d6ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6ce:	9334      	str	r3, [sp, #208]	; 0xd0
 801d6d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d6d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801d6d4:	3b01      	subs	r3, #1
 801d6d6:	9319      	str	r3, [sp, #100]	; 0x64
 801d6d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d6da:	bf08      	it	eq
 801d6dc:	4613      	moveq	r3, r2
 801d6de:	9309      	str	r3, [sp, #36]	; 0x24
 801d6e0:	e5f4      	b.n	801d2cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d6e2:	2900      	cmp	r1, #0
 801d6e4:	f43f ae66 	beq.w	801d3b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d6e8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d6ec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d6f0:	900a      	str	r0, [sp, #40]	; 0x28
 801d6f2:	0e00      	lsrs	r0, r0, #24
 801d6f4:	9013      	str	r0, [sp, #76]	; 0x4c
 801d6f6:	e65d      	b.n	801d3b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d6f8:	f113 0801 	adds.w	r8, r3, #1
 801d6fc:	f53f af74 	bmi.w	801d5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d700:	4540      	cmp	r0, r8
 801d702:	f6ff af71 	blt.w	801d5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d706:	f11c 0801 	adds.w	r8, ip, #1
 801d70a:	f53f af6d 	bmi.w	801d5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d70e:	45c6      	cmp	lr, r8
 801d710:	f6ff af6a 	blt.w	801d5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d714:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d716:	b200      	sxth	r0, r0
 801d718:	9302      	str	r3, [sp, #8]
 801d71a:	fa0f f38e 	sxth.w	r3, lr
 801d71e:	9000      	str	r0, [sp, #0]
 801d720:	9301      	str	r3, [sp, #4]
 801d722:	4633      	mov	r3, r6
 801d724:	981d      	ldr	r0, [sp, #116]	; 0x74
 801d726:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d72a:	e9cd c203 	strd	ip, r2, [sp, #12]
 801d72e:	4639      	mov	r1, r7
 801d730:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d732:	f7ff fc33 	bl	801cf9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801d736:	e757      	b.n	801d5e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d738:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801d73a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d73e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801d740:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d744:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d746:	1427      	asrs	r7, r4, #16
 801d748:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d74a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d74e:	142b      	asrs	r3, r5, #16
 801d750:	fb01 7303 	mla	r3, r1, r3, r7
 801d754:	18e7      	adds	r7, r4, r3
 801d756:	5ce3      	ldrb	r3, [r4, r3]
 801d758:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d75c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d760:	2a00      	cmp	r2, #0
 801d762:	f000 8137 	beq.w	801d9d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 801d766:	f897 e001 	ldrb.w	lr, [r7, #1]
 801d76a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801d76e:	9410      	str	r4, [sp, #64]	; 0x40
 801d770:	0e24      	lsrs	r4, r4, #24
 801d772:	9417      	str	r4, [sp, #92]	; 0x5c
 801d774:	b170      	cbz	r0, 801d794 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801d776:	eb07 0e01 	add.w	lr, r7, r1
 801d77a:	5c79      	ldrb	r1, [r7, r1]
 801d77c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d780:	910b      	str	r1, [sp, #44]	; 0x2c
 801d782:	0e09      	lsrs	r1, r1, #24
 801d784:	9114      	str	r1, [sp, #80]	; 0x50
 801d786:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801d78a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d78e:	9111      	str	r1, [sp, #68]	; 0x44
 801d790:	0e09      	lsrs	r1, r1, #24
 801d792:	9118      	str	r1, [sp, #96]	; 0x60
 801d794:	b292      	uxth	r2, r2
 801d796:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d798:	b280      	uxth	r0, r0
 801d79a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d79c:	fb02 f800 	mul.w	r8, r2, r0
 801d7a0:	0112      	lsls	r2, r2, #4
 801d7a2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801d7a6:	eba2 0e08 	sub.w	lr, r2, r8
 801d7aa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d7ae:	b280      	uxth	r0, r0
 801d7b0:	fa1f fe8e 	uxth.w	lr, lr
 801d7b4:	1a12      	subs	r2, r2, r0
 801d7b6:	fb0e f101 	mul.w	r1, lr, r1
 801d7ba:	b292      	uxth	r2, r2
 801d7bc:	fb02 110c 	mla	r1, r2, ip, r1
 801d7c0:	fb00 1104 	mla	r1, r0, r4, r1
 801d7c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d7c6:	fb08 1104 	mla	r1, r8, r4, r1
 801d7ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d7ce:	2900      	cmp	r1, #0
 801d7d0:	f000 80f5 	beq.w	801d9be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 801d7d4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d7d8:	d019      	beq.n	801d80e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 801d7da:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d7de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d7e2:	fb0c fa0a 	mul.w	sl, ip, sl
 801d7e6:	fb0c fc03 	mul.w	ip, ip, r3
 801d7ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d7ee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d7f2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d7f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d7fa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d7fe:	4453      	add	r3, sl
 801d800:	0a3f      	lsrs	r7, r7, #8
 801d802:	0a1b      	lsrs	r3, r3, #8
 801d804:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d808:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d80c:	433b      	orrs	r3, r7
 801d80e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d810:	2cff      	cmp	r4, #255	; 0xff
 801d812:	d020      	beq.n	801d856 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 801d814:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d816:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d81a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d81c:	4367      	muls	r7, r4
 801d81e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d820:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d824:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d828:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d82a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d82e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d832:	fb04 fa0a 	mul.w	sl, r4, sl
 801d836:	44bc      	add	ip, r7
 801d838:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d83c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d840:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d844:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d848:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d84c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d850:	ea4c 040a 	orr.w	r4, ip, sl
 801d854:	9410      	str	r4, [sp, #64]	; 0x40
 801d856:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d858:	2cff      	cmp	r4, #255	; 0xff
 801d85a:	d020      	beq.n	801d89e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 801d85c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d85e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d862:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d864:	4367      	muls	r7, r4
 801d866:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d868:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d86c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d870:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d872:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d876:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d87a:	fb04 fa0a 	mul.w	sl, r4, sl
 801d87e:	44bc      	add	ip, r7
 801d880:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d884:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d888:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d88c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d890:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d894:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d898:	ea4c 040a 	orr.w	r4, ip, sl
 801d89c:	940b      	str	r4, [sp, #44]	; 0x2c
 801d89e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d8a0:	2cff      	cmp	r4, #255	; 0xff
 801d8a2:	d020      	beq.n	801d8e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 801d8a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d8a6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d8aa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d8ac:	4367      	muls	r7, r4
 801d8ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d8b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d8b4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d8b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d8ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d8be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d8c2:	fb04 fa0a 	mul.w	sl, r4, sl
 801d8c6:	44bc      	add	ip, r7
 801d8c8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d8cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d8d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d8d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d8d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d8dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d8e0:	ea4c 040a 	orr.w	r4, ip, sl
 801d8e4:	9411      	str	r4, [sp, #68]	; 0x44
 801d8e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d8e8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d8ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d8f0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d8f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d8f6:	fb0e f707 	mul.w	r7, lr, r7
 801d8fa:	fb02 770c 	mla	r7, r2, ip, r7
 801d8fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d902:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d904:	fb00 770c 	mla	r7, r0, ip, r7
 801d908:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d90c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d90e:	fb08 770c 	mla	r7, r8, ip, r7
 801d912:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d916:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d918:	fb0e fe0c 	mul.w	lr, lr, ip
 801d91c:	0a3f      	lsrs	r7, r7, #8
 801d91e:	fb02 e303 	mla	r3, r2, r3, lr
 801d922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d924:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d928:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d92c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d92e:	fb00 330a 	mla	r3, r0, sl, r3
 801d932:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d936:	f8b9 0000 	ldrh.w	r0, [r9]
 801d93a:	fb08 3c0c 	mla	ip, r8, ip, r3
 801d93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d940:	1202      	asrs	r2, r0, #8
 801d942:	434b      	muls	r3, r1
 801d944:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d948:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d94c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d950:	1c59      	adds	r1, r3, #1
 801d952:	ea47 070c 	orr.w	r7, r7, ip
 801d956:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d95a:	0c3b      	lsrs	r3, r7, #16
 801d95c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d960:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801d964:	b2ff      	uxtb	r7, r7
 801d966:	fb13 f304 	smulbb	r3, r3, r4
 801d96a:	b2c9      	uxtb	r1, r1
 801d96c:	fb1c fc04 	smulbb	ip, ip, r4
 801d970:	fb02 3201 	mla	r2, r2, r1, r3
 801d974:	10c3      	asrs	r3, r0, #3
 801d976:	fb17 f704 	smulbb	r7, r7, r4
 801d97a:	00c0      	lsls	r0, r0, #3
 801d97c:	b292      	uxth	r2, r2
 801d97e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d982:	b2c0      	uxtb	r0, r0
 801d984:	fb03 c301 	mla	r3, r3, r1, ip
 801d988:	f102 0c01 	add.w	ip, r2, #1
 801d98c:	fb00 7001 	mla	r0, r0, r1, r7
 801d990:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d994:	b280      	uxth	r0, r0
 801d996:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801d99a:	b29b      	uxth	r3, r3
 801d99c:	1c42      	adds	r2, r0, #1
 801d99e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801d9a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d9a6:	ea42 020c 	orr.w	r2, r2, ip
 801d9aa:	f103 0c01 	add.w	ip, r3, #1
 801d9ae:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d9b2:	095b      	lsrs	r3, r3, #5
 801d9b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d9b8:	431a      	orrs	r2, r3
 801d9ba:	f8a9 2000 	strh.w	r2, [r9]
 801d9be:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801d9c0:	f109 0902 	add.w	r9, r9, #2
 801d9c4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801d9c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d9ca:	441a      	add	r2, r3
 801d9cc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801d9ce:	9231      	str	r2, [sp, #196]	; 0xc4
 801d9d0:	441d      	add	r5, r3
 801d9d2:	e63d      	b.n	801d650 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801d9d4:	2800      	cmp	r0, #0
 801d9d6:	f43f aedd 	beq.w	801d794 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801d9da:	5c79      	ldrb	r1, [r7, r1]
 801d9dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d9e0:	910b      	str	r1, [sp, #44]	; 0x2c
 801d9e2:	0e09      	lsrs	r1, r1, #24
 801d9e4:	9114      	str	r1, [sp, #80]	; 0x50
 801d9e6:	e6d5      	b.n	801d794 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801d9e8:	b01f      	add	sp, #124	; 0x7c
 801d9ea:	ecbd 8b08 	vpop	{d8-d11}
 801d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d9f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9f8:	880e      	ldrh	r6, [r1, #0]
 801d9fa:	b085      	sub	sp, #20
 801d9fc:	4691      	mov	r9, r2
 801d9fe:	ea4f 2826 	mov.w	r8, r6, asr #8
 801da02:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801da06:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 801da0a:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 801da0e:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801da12:	00f6      	lsls	r6, r6, #3
 801da14:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801da18:	9200      	str	r2, [sp, #0]
 801da1a:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 801da1e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801da22:	9201      	str	r2, [sp, #4]
 801da24:	b2f2      	uxtb	r2, r6
 801da26:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801da2a:	9202      	str	r2, [sp, #8]
 801da2c:	fb04 560c 	mla	r6, r4, ip, r5
 801da30:	2c00      	cmp	r4, #0
 801da32:	eb09 0806 	add.w	r8, r9, r6
 801da36:	db3f      	blt.n	801dab8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 801da38:	45a6      	cmp	lr, r4
 801da3a:	dd3d      	ble.n	801dab8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 801da3c:	2d00      	cmp	r5, #0
 801da3e:	db39      	blt.n	801dab4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 801da40:	45ac      	cmp	ip, r5
 801da42:	dd37      	ble.n	801dab4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 801da44:	f819 2006 	ldrb.w	r2, [r9, r6]
 801da48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801da4c:	1c6e      	adds	r6, r5, #1
 801da4e:	d436      	bmi.n	801dabe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 801da50:	45b4      	cmp	ip, r6
 801da52:	dd34      	ble.n	801dabe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 801da54:	b3a8      	cbz	r0, 801dac2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 801da56:	f898 6001 	ldrb.w	r6, [r8, #1]
 801da5a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801da5e:	3401      	adds	r4, #1
 801da60:	d433      	bmi.n	801daca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801da62:	45a6      	cmp	lr, r4
 801da64:	dd31      	ble.n	801daca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801da66:	b39f      	cbz	r7, 801dad0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 801da68:	2d00      	cmp	r5, #0
 801da6a:	eb08 0e0c 	add.w	lr, r8, ip
 801da6e:	db2a      	blt.n	801dac6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 801da70:	45ac      	cmp	ip, r5
 801da72:	dd28      	ble.n	801dac6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 801da74:	f818 400c 	ldrb.w	r4, [r8, ip]
 801da78:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801da7c:	3501      	adds	r5, #1
 801da7e:	d42a      	bmi.n	801dad6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801da80:	45ac      	cmp	ip, r5
 801da82:	dd28      	ble.n	801dad6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801da84:	b348      	cbz	r0, 801dada <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 801da86:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801da8a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801da8e:	280f      	cmp	r0, #15
 801da90:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801da94:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801da98:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801da9c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801daa0:	d801      	bhi.n	801daa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 801daa2:	2f0f      	cmp	r7, #15
 801daa4:	d91b      	bls.n	801dade <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 801daa6:	4b7e      	ldr	r3, [pc, #504]	; (801dca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801daa8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801daac:	4a7d      	ldr	r2, [pc, #500]	; (801dca4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 801daae:	487e      	ldr	r0, [pc, #504]	; (801dca8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 801dab0:	f007 fc7a 	bl	80253a8 <__assert_func>
 801dab4:	2200      	movs	r2, #0
 801dab6:	e7c9      	b.n	801da4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 801dab8:	2600      	movs	r6, #0
 801daba:	4632      	mov	r2, r6
 801dabc:	e7cf      	b.n	801da5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801dabe:	2600      	movs	r6, #0
 801dac0:	e7cd      	b.n	801da5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801dac2:	4606      	mov	r6, r0
 801dac4:	e7cb      	b.n	801da5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801dac6:	2400      	movs	r4, #0
 801dac8:	e7d8      	b.n	801da7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 801daca:	2300      	movs	r3, #0
 801dacc:	461c      	mov	r4, r3
 801dace:	e7de      	b.n	801da8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801dad0:	463b      	mov	r3, r7
 801dad2:	463c      	mov	r4, r7
 801dad4:	e7db      	b.n	801da8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801dad6:	2300      	movs	r3, #0
 801dad8:	e7d9      	b.n	801da8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801dada:	4603      	mov	r3, r0
 801dadc:	e7d7      	b.n	801da8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801dade:	b280      	uxth	r0, r0
 801dae0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801dae4:	b2bf      	uxth	r7, r7
 801dae6:	fb00 fe07 	mul.w	lr, r0, r7
 801daea:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801daee:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801daf2:	eba0 0c0e 	sub.w	ip, r0, lr
 801daf6:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801dafa:	b2bf      	uxth	r7, r7
 801dafc:	fa1f fc8c 	uxth.w	ip, ip
 801db00:	eba5 0507 	sub.w	r5, r5, r7
 801db04:	fb0c f00a 	mul.w	r0, ip, sl
 801db08:	b2ad      	uxth	r5, r5
 801db0a:	fb05 000b 	mla	r0, r5, fp, r0
 801db0e:	fb07 0009 	mla	r0, r7, r9, r0
 801db12:	fb0e 0008 	mla	r0, lr, r8, r0
 801db16:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801db1a:	9003      	str	r0, [sp, #12]
 801db1c:	d018      	beq.n	801db50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 801db1e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801db22:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801db26:	fb0b f000 	mul.w	r0, fp, r0
 801db2a:	fb0b fb02 	mul.w	fp, fp, r2
 801db2e:	0a02      	lsrs	r2, r0, #8
 801db30:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801db34:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801db38:	4402      	add	r2, r0
 801db3a:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801db3e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801db42:	0a12      	lsrs	r2, r2, #8
 801db44:	0a00      	lsrs	r0, r0, #8
 801db46:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801db4a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801db4e:	4302      	orrs	r2, r0
 801db50:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801db54:	d019      	beq.n	801db8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 801db56:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801db5a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801db5e:	fb0a fb0b 	mul.w	fp, sl, fp
 801db62:	fb0a fa06 	mul.w	sl, sl, r6
 801db66:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801db6a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801db6e:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801db72:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801db76:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801db7a:	445e      	add	r6, fp
 801db7c:	0a00      	lsrs	r0, r0, #8
 801db7e:	0a36      	lsrs	r6, r6, #8
 801db80:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801db84:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801db88:	4306      	orrs	r6, r0
 801db8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801db8e:	d019      	beq.n	801dbc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 801db90:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801db94:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801db98:	fb09 fa0a 	mul.w	sl, r9, sl
 801db9c:	fb09 f904 	mul.w	r9, r9, r4
 801dba0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801dba4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dba8:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801dbac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dbb0:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801dbb4:	4454      	add	r4, sl
 801dbb6:	0a00      	lsrs	r0, r0, #8
 801dbb8:	0a24      	lsrs	r4, r4, #8
 801dbba:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dbbe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dbc2:	4304      	orrs	r4, r0
 801dbc4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dbc8:	d019      	beq.n	801dbfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 801dbca:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801dbce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dbd2:	fb08 f909 	mul.w	r9, r8, r9
 801dbd6:	fb08 f803 	mul.w	r8, r8, r3
 801dbda:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801dbde:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801dbe2:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801dbe6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dbea:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801dbee:	444b      	add	r3, r9
 801dbf0:	0a00      	lsrs	r0, r0, #8
 801dbf2:	0a1b      	lsrs	r3, r3, #8
 801dbf4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dbf8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dbfc:	4303      	orrs	r3, r0
 801dbfe:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801dc02:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801dc06:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dc0a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dc0e:	fb0c f808 	mul.w	r8, ip, r8
 801dc12:	fb0c f606 	mul.w	r6, ip, r6
 801dc16:	fb05 8800 	mla	r8, r5, r0, r8
 801dc1a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801dc1e:	fb05 6202 	mla	r2, r5, r2, r6
 801dc22:	9d00      	ldr	r5, [sp, #0]
 801dc24:	fb07 8800 	mla	r8, r7, r0, r8
 801dc28:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801dc2c:	fb0e 8000 	mla	r0, lr, r0, r8
 801dc30:	0a00      	lsrs	r0, r0, #8
 801dc32:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801dc36:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801dc3a:	fb07 2700 	mla	r7, r7, r0, r2
 801dc3e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801dc42:	9b03      	ldr	r3, [sp, #12]
 801dc44:	fb0e 7000 	mla	r0, lr, r0, r7
 801dc48:	9a02      	ldr	r2, [sp, #8]
 801dc4a:	43dc      	mvns	r4, r3
 801dc4c:	9b01      	ldr	r3, [sp, #4]
 801dc4e:	0a00      	lsrs	r0, r0, #8
 801dc50:	b2e4      	uxtb	r4, r4
 801dc52:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dc56:	4363      	muls	r3, r4
 801dc58:	4365      	muls	r5, r4
 801dc5a:	ea48 0000 	orr.w	r0, r8, r0
 801dc5e:	4362      	muls	r2, r4
 801dc60:	1c5e      	adds	r6, r3, #1
 801dc62:	4614      	mov	r4, r2
 801dc64:	1c6a      	adds	r2, r5, #1
 801dc66:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 801dc6a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801dc6e:	0a03      	lsrs	r3, r0, #8
 801dc70:	0c02      	lsrs	r2, r0, #16
 801dc72:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801dc76:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801dc7a:	00db      	lsls	r3, r3, #3
 801dc7c:	0212      	lsls	r2, r2, #8
 801dc7e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dc82:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801dc86:	4313      	orrs	r3, r2
 801dc88:	1c62      	adds	r2, r4, #1
 801dc8a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801dc8e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801dc92:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dc96:	4318      	orrs	r0, r3
 801dc98:	8008      	strh	r0, [r1, #0]
 801dc9a:	b005      	add	sp, #20
 801dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dca0:	0802c056 	.word	0x0802c056
 801dca4:	0802c626 	.word	0x0802c626
 801dca8:	0802c0da 	.word	0x0802c0da

0801dcac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcb0:	ed2d 8b08 	vpush	{d8-d11}
 801dcb4:	b09b      	sub	sp, #108	; 0x6c
 801dcb6:	eeb0 aa40 	vmov.f32	s20, s0
 801dcba:	eef0 9a60 	vmov.f32	s19, s1
 801dcbe:	9218      	str	r2, [sp, #96]	; 0x60
 801dcc0:	eeb0 9a41 	vmov.f32	s18, s2
 801dcc4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801dcc6:	eeb0 8a62 	vmov.f32	s16, s5
 801dcca:	9019      	str	r0, [sp, #100]	; 0x64
 801dccc:	eef0 8a43 	vmov.f32	s17, s6
 801dcd0:	6850      	ldr	r0, [r2, #4]
 801dcd2:	eef0 ba44 	vmov.f32	s23, s8
 801dcd6:	9116      	str	r1, [sp, #88]	; 0x58
 801dcd8:	eeb0 ba64 	vmov.f32	s22, s9
 801dcdc:	9307      	str	r3, [sp, #28]
 801dcde:	eef0 aa45 	vmov.f32	s21, s10
 801dce2:	6812      	ldr	r2, [r2, #0]
 801dce4:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 801dce6:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801dcea:	fb00 1303 	mla	r3, r0, r3, r1
 801dcee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dcf2:	930a      	str	r3, [sp, #40]	; 0x28
 801dcf4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	930f      	str	r3, [sp, #60]	; 0x3c
 801dcfa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dcfc:	685e      	ldr	r6, [r3, #4]
 801dcfe:	3604      	adds	r6, #4
 801dd00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	dc03      	bgt.n	801dd0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801dd06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	f340 8373 	ble.w	801e3f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801dd0e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dd10:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dd14:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dd18:	1e48      	subs	r0, r1, #1
 801dd1a:	1e57      	subs	r7, r2, #1
 801dd1c:	9b07      	ldr	r3, [sp, #28]
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	f340 818f 	ble.w	801e042 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 801dd24:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801dd26:	142b      	asrs	r3, r5, #16
 801dd28:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801dd2c:	d406      	bmi.n	801dd3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dd2e:	4584      	cmp	ip, r0
 801dd30:	da04      	bge.n	801dd3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	db02      	blt.n	801dd3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dd36:	42bb      	cmp	r3, r7
 801dd38:	f2c0 8184 	blt.w	801e044 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801dd3c:	f11c 0c01 	adds.w	ip, ip, #1
 801dd40:	f100 8172 	bmi.w	801e028 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801dd44:	4561      	cmp	r1, ip
 801dd46:	f2c0 816f 	blt.w	801e028 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801dd4a:	3301      	adds	r3, #1
 801dd4c:	f100 816c 	bmi.w	801e028 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801dd50:	429a      	cmp	r2, r3
 801dd52:	f2c0 8169 	blt.w	801e028 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801dd56:	9b07      	ldr	r3, [sp, #28]
 801dd58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801dd5a:	9317      	str	r3, [sp, #92]	; 0x5c
 801dd5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	f340 818e 	ble.w	801e080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801dd64:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801dd66:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801dd6a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dd6e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dd72:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dd74:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801dd78:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801dd7a:	141b      	asrs	r3, r3, #16
 801dd7c:	f100 81d1 	bmi.w	801e122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801dd80:	f101 38ff 	add.w	r8, r1, #4294967295
 801dd84:	4543      	cmp	r3, r8
 801dd86:	f280 81cc 	bge.w	801e122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801dd8a:	f1bc 0f00 	cmp.w	ip, #0
 801dd8e:	f2c0 81c8 	blt.w	801e122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801dd92:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dd96:	45c4      	cmp	ip, r8
 801dd98:	f280 81c3 	bge.w	801e122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801dd9c:	b209      	sxth	r1, r1
 801dd9e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dda0:	fb0c 3301 	mla	r3, ip, r1, r3
 801dda4:	eb04 0803 	add.w	r8, r4, r3
 801dda8:	5ce3      	ldrb	r3, [r4, r3]
 801ddaa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ddae:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ddb2:	2a00      	cmp	r2, #0
 801ddb4:	f000 81aa 	beq.w	801e10c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 801ddb8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ddbc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ddc0:	940b      	str	r4, [sp, #44]	; 0x2c
 801ddc2:	0e24      	lsrs	r4, r4, #24
 801ddc4:	9412      	str	r4, [sp, #72]	; 0x48
 801ddc6:	b178      	cbz	r0, 801dde8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801ddc8:	eb08 0c01 	add.w	ip, r8, r1
 801ddcc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ddd0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ddd4:	9108      	str	r1, [sp, #32]
 801ddd6:	0e09      	lsrs	r1, r1, #24
 801ddd8:	9110      	str	r1, [sp, #64]	; 0x40
 801ddda:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ddde:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dde2:	910c      	str	r1, [sp, #48]	; 0x30
 801dde4:	0e09      	lsrs	r1, r1, #24
 801dde6:	9113      	str	r1, [sp, #76]	; 0x4c
 801dde8:	b292      	uxth	r2, r2
 801ddea:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ddec:	b280      	uxth	r0, r0
 801ddee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ddf0:	fb02 f900 	mul.w	r9, r2, r0
 801ddf4:	0112      	lsls	r2, r2, #4
 801ddf6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ddfa:	eba2 0809 	sub.w	r8, r2, r9
 801ddfe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801de02:	b280      	uxth	r0, r0
 801de04:	fa1f f888 	uxth.w	r8, r8
 801de08:	1a12      	subs	r2, r2, r0
 801de0a:	fb08 f101 	mul.w	r1, r8, r1
 801de0e:	b292      	uxth	r2, r2
 801de10:	fb02 110e 	mla	r1, r2, lr, r1
 801de14:	fb00 1104 	mla	r1, r0, r4, r1
 801de18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de1a:	fb09 1104 	mla	r1, r9, r4, r1
 801de1e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801de22:	2900      	cmp	r1, #0
 801de24:	f000 80f5 	beq.w	801e012 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801de28:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801de2c:	d01b      	beq.n	801de66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801de2e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801de32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801de36:	fb0e fa0a 	mul.w	sl, lr, sl
 801de3a:	fb0e fe03 	mul.w	lr, lr, r3
 801de3e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801de42:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801de46:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801de4a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801de4e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801de52:	4453      	add	r3, sl
 801de54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de58:	0a1b      	lsrs	r3, r3, #8
 801de5a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801de5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801de62:	ea43 030c 	orr.w	r3, r3, ip
 801de66:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801de68:	2cff      	cmp	r4, #255	; 0xff
 801de6a:	d021      	beq.n	801deb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801de6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801de6e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801de72:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801de74:	fb04 fb0b 	mul.w	fp, r4, fp
 801de78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801de7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801de7e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801de80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801de84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801de88:	fb04 fa0a 	mul.w	sl, r4, sl
 801de8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de90:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801de94:	44de      	add	lr, fp
 801de96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801de9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801de9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dea2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dea6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801deaa:	ea4e 040a 	orr.w	r4, lr, sl
 801deae:	940b      	str	r4, [sp, #44]	; 0x2c
 801deb0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801deb2:	2cff      	cmp	r4, #255	; 0xff
 801deb4:	d021      	beq.n	801defa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801deb6:	9c08      	ldr	r4, [sp, #32]
 801deb8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801debc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801debe:	fb04 fb0b 	mul.w	fp, r4, fp
 801dec2:	9c08      	ldr	r4, [sp, #32]
 801dec4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dec8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801deca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dece:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ded2:	fb04 fa0a 	mul.w	sl, r4, sl
 801ded6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801deda:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dede:	44de      	add	lr, fp
 801dee0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dee4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dee8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801deec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801def0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801def4:	ea4e 040a 	orr.w	r4, lr, sl
 801def8:	9408      	str	r4, [sp, #32]
 801defa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801defc:	2cff      	cmp	r4, #255	; 0xff
 801defe:	d021      	beq.n	801df44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801df00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801df02:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801df06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801df08:	fb04 fb0b 	mul.w	fp, r4, fp
 801df0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801df0e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801df12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801df14:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801df18:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801df1c:	fb04 fa0a 	mul.w	sl, r4, sl
 801df20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801df24:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801df28:	44de      	add	lr, fp
 801df2a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801df2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801df32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801df36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801df3a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801df3e:	ea4e 040a 	orr.w	r4, lr, sl
 801df42:	940c      	str	r4, [sp, #48]	; 0x30
 801df44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801df46:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801df4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df4e:	43c9      	mvns	r1, r1
 801df50:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801df54:	9c08      	ldr	r4, [sp, #32]
 801df56:	fb08 fc0c 	mul.w	ip, r8, ip
 801df5a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801df5e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801df62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801df64:	fb00 cc0e 	mla	ip, r0, lr, ip
 801df68:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801df6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801df6e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801df72:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801df76:	fb08 f80e 	mul.w	r8, r8, lr
 801df7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df7e:	fa5f fe81 	uxtb.w	lr, r1
 801df82:	fb02 8303 	mla	r3, r2, r3, r8
 801df86:	9a08      	ldr	r2, [sp, #32]
 801df88:	f8b7 8000 	ldrh.w	r8, [r7]
 801df8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801df90:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801df94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801df96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801df9a:	fb00 330a 	mla	r3, r0, sl, r3
 801df9e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801dfa2:	ea4f 2228 	mov.w	r2, r8, asr #8
 801dfa6:	fb09 3900 	mla	r9, r9, r0, r3
 801dfaa:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801dfae:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801dfb2:	b2c9      	uxtb	r1, r1
 801dfb4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dfb8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801dfbc:	fb02 f20e 	mul.w	r2, r2, lr
 801dfc0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801dfc4:	fb00 f00e 	mul.w	r0, r0, lr
 801dfc8:	1c53      	adds	r3, r2, #1
 801dfca:	fb01 f10e 	mul.w	r1, r1, lr
 801dfce:	ea4c 0c09 	orr.w	ip, ip, r9
 801dfd2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801dfd6:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801dfda:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dfde:	4a60      	ldr	r2, [pc, #384]	; (801e160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 801dfe0:	b2db      	uxtb	r3, r3
 801dfe2:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801dfe6:	1c43      	adds	r3, r0, #1
 801dfe8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dfec:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801dff0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801dff4:	00db      	lsls	r3, r3, #3
 801dff6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dffa:	4313      	orrs	r3, r2
 801dffc:	1c4a      	adds	r2, r1, #1
 801dffe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e002:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e006:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801e00a:	ea4c 0c03 	orr.w	ip, ip, r3
 801e00e:	f8a7 c000 	strh.w	ip, [r7]
 801e012:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e014:	3702      	adds	r7, #2
 801e016:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e018:	441a      	add	r2, r3
 801e01a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e01c:	441d      	add	r5, r3
 801e01e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e020:	922d      	str	r2, [sp, #180]	; 0xb4
 801e022:	3b01      	subs	r3, #1
 801e024:	9317      	str	r3, [sp, #92]	; 0x5c
 801e026:	e699      	b.n	801dd5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e028:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e02a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e02c:	441c      	add	r4, r3
 801e02e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e030:	441d      	add	r5, r3
 801e032:	9b07      	ldr	r3, [sp, #28]
 801e034:	942d      	str	r4, [sp, #180]	; 0xb4
 801e036:	3b01      	subs	r3, #1
 801e038:	9307      	str	r3, [sp, #28]
 801e03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e03c:	3302      	adds	r3, #2
 801e03e:	930a      	str	r3, [sp, #40]	; 0x28
 801e040:	e66c      	b.n	801dd1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e042:	d024      	beq.n	801e08e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801e044:	9b07      	ldr	r3, [sp, #28]
 801e046:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801e048:	3b01      	subs	r3, #1
 801e04a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e04c:	fb00 4003 	mla	r0, r0, r3, r4
 801e050:	1400      	asrs	r0, r0, #16
 801e052:	f53f ae80 	bmi.w	801dd56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e056:	3901      	subs	r1, #1
 801e058:	4288      	cmp	r0, r1
 801e05a:	f6bf ae7c 	bge.w	801dd56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e05e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801e060:	fb01 5303 	mla	r3, r1, r3, r5
 801e064:	141b      	asrs	r3, r3, #16
 801e066:	f53f ae76 	bmi.w	801dd56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e06a:	3a01      	subs	r2, #1
 801e06c:	4293      	cmp	r3, r2
 801e06e:	f6bf ae72 	bge.w	801dd56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e072:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e076:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e07a:	f1bb 0f00 	cmp.w	fp, #0
 801e07e:	dc71      	bgt.n	801e164 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801e080:	9b07      	ldr	r3, [sp, #28]
 801e082:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e088:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e08c:	930a      	str	r3, [sp, #40]	; 0x28
 801e08e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e090:	2b00      	cmp	r3, #0
 801e092:	f340 81af 	ble.w	801e3f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801e096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e09a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e09c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e0a0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e0a4:	eef0 6a48 	vmov.f32	s13, s16
 801e0a8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e0ac:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e0b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e0b4:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801e0b8:	eef0 6a68 	vmov.f32	s13, s17
 801e0bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e0c0:	ee16 5a90 	vmov	r5, s13
 801e0c4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e0c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e0cc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e0d0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e0d4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e0d8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e0dc:	ee18 2a10 	vmov	r2, s16
 801e0e0:	eeb0 8a47 	vmov.f32	s16, s14
 801e0e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0e8:	ee18 2a90 	vmov	r2, s17
 801e0ec:	932f      	str	r3, [sp, #188]	; 0xbc
 801e0ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e0f0:	eef0 8a67 	vmov.f32	s17, s15
 801e0f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0f8:	9330      	str	r3, [sp, #192]	; 0xc0
 801e0fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e0fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e0fe:	3b01      	subs	r3, #1
 801e100:	9316      	str	r3, [sp, #88]	; 0x58
 801e102:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e104:	bf08      	it	eq
 801e106:	4613      	moveq	r3, r2
 801e108:	9307      	str	r3, [sp, #28]
 801e10a:	e5f9      	b.n	801dd00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e10c:	2800      	cmp	r0, #0
 801e10e:	f43f ae6b 	beq.w	801dde8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801e112:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e116:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e11a:	9108      	str	r1, [sp, #32]
 801e11c:	0e09      	lsrs	r1, r1, #24
 801e11e:	9110      	str	r1, [sp, #64]	; 0x40
 801e120:	e662      	b.n	801dde8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801e122:	f113 0801 	adds.w	r8, r3, #1
 801e126:	f53f af74 	bmi.w	801e012 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e12a:	4541      	cmp	r1, r8
 801e12c:	f6ff af71 	blt.w	801e012 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e130:	f11c 0801 	adds.w	r8, ip, #1
 801e134:	f53f af6d 	bmi.w	801e012 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e138:	45c6      	cmp	lr, r8
 801e13a:	f6ff af6a 	blt.w	801e012 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e13e:	b209      	sxth	r1, r1
 801e140:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e144:	fa0f f38e 	sxth.w	r3, lr
 801e148:	9100      	str	r1, [sp, #0]
 801e14a:	4639      	mov	r1, r7
 801e14c:	9301      	str	r3, [sp, #4]
 801e14e:	4633      	mov	r3, r6
 801e150:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e156:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e158:	f7ff fc4c 	bl	801d9f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801e15c:	e759      	b.n	801e012 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e15e:	bf00      	nop
 801e160:	fffff800 	.word	0xfffff800
 801e164:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e166:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e16a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e16c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e170:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e172:	1427      	asrs	r7, r4, #16
 801e174:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e176:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e17a:	142b      	asrs	r3, r5, #16
 801e17c:	fb01 7303 	mla	r3, r1, r3, r7
 801e180:	18e7      	adds	r7, r4, r3
 801e182:	5ce3      	ldrb	r3, [r4, r3]
 801e184:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e188:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e18c:	2a00      	cmp	r2, #0
 801e18e:	f000 8127 	beq.w	801e3e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 801e192:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e196:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e19a:	940d      	str	r4, [sp, #52]	; 0x34
 801e19c:	0e24      	lsrs	r4, r4, #24
 801e19e:	9414      	str	r4, [sp, #80]	; 0x50
 801e1a0:	b170      	cbz	r0, 801e1c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801e1a2:	eb07 0e01 	add.w	lr, r7, r1
 801e1a6:	5c79      	ldrb	r1, [r7, r1]
 801e1a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e1ac:	9109      	str	r1, [sp, #36]	; 0x24
 801e1ae:	0e09      	lsrs	r1, r1, #24
 801e1b0:	9111      	str	r1, [sp, #68]	; 0x44
 801e1b2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e1b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e1ba:	910e      	str	r1, [sp, #56]	; 0x38
 801e1bc:	0e09      	lsrs	r1, r1, #24
 801e1be:	9115      	str	r1, [sp, #84]	; 0x54
 801e1c0:	b292      	uxth	r2, r2
 801e1c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e1c4:	b280      	uxth	r0, r0
 801e1c6:	fb02 f800 	mul.w	r8, r2, r0
 801e1ca:	0112      	lsls	r2, r2, #4
 801e1cc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e1d0:	eba2 0e08 	sub.w	lr, r2, r8
 801e1d4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e1d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e1da:	b280      	uxth	r0, r0
 801e1dc:	fa1f fe8e 	uxth.w	lr, lr
 801e1e0:	1a09      	subs	r1, r1, r0
 801e1e2:	fb0e f202 	mul.w	r2, lr, r2
 801e1e6:	b289      	uxth	r1, r1
 801e1e8:	fb01 220c 	mla	r2, r1, ip, r2
 801e1ec:	fb00 2204 	mla	r2, r0, r4, r2
 801e1f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e1f2:	fb08 2204 	mla	r2, r8, r4, r2
 801e1f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e1fa:	2a00      	cmp	r2, #0
 801e1fc:	f000 80e5 	beq.w	801e3ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801e200:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e204:	d019      	beq.n	801e23a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 801e206:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e20a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e20e:	fb0c fa0a 	mul.w	sl, ip, sl
 801e212:	fb0c fc03 	mul.w	ip, ip, r3
 801e216:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e21a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e21e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e222:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e226:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e22a:	4453      	add	r3, sl
 801e22c:	0a3f      	lsrs	r7, r7, #8
 801e22e:	0a1b      	lsrs	r3, r3, #8
 801e230:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e234:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e238:	433b      	orrs	r3, r7
 801e23a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e23c:	2cff      	cmp	r4, #255	; 0xff
 801e23e:	d020      	beq.n	801e282 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 801e240:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e242:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e246:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e248:	4367      	muls	r7, r4
 801e24a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e24c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e250:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e254:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e256:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e25a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e25e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e262:	44bc      	add	ip, r7
 801e264:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e268:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e26c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e270:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e274:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e278:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e27c:	ea4c 040a 	orr.w	r4, ip, sl
 801e280:	940d      	str	r4, [sp, #52]	; 0x34
 801e282:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e284:	2cff      	cmp	r4, #255	; 0xff
 801e286:	d020      	beq.n	801e2ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 801e288:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e28a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e28e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e290:	4367      	muls	r7, r4
 801e292:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e294:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e298:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e29c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e29e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e2a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e2a6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e2aa:	44bc      	add	ip, r7
 801e2ac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e2b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e2b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e2bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e2c4:	ea4c 040a 	orr.w	r4, ip, sl
 801e2c8:	9409      	str	r4, [sp, #36]	; 0x24
 801e2ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e2cc:	2cff      	cmp	r4, #255	; 0xff
 801e2ce:	d020      	beq.n	801e312 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 801e2d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e2d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e2d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e2d8:	4367      	muls	r7, r4
 801e2da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e2dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e2e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e2e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e2e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e2ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e2ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801e2f2:	44bc      	add	ip, r7
 801e2f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e2f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e300:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e304:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e308:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e30c:	ea4c 040a 	orr.w	r4, ip, sl
 801e310:	940e      	str	r4, [sp, #56]	; 0x38
 801e312:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e314:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e31c:	43d2      	mvns	r2, r2
 801e31e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e322:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e324:	b2d2      	uxtb	r2, r2
 801e326:	fb0e f707 	mul.w	r7, lr, r7
 801e32a:	fb01 770c 	mla	r7, r1, ip, r7
 801e32e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e332:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e334:	fb00 770c 	mla	r7, r0, ip, r7
 801e338:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e33c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e33e:	fb08 770c 	mla	r7, r8, ip, r7
 801e342:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e346:	fb0e fe0c 	mul.w	lr, lr, ip
 801e34a:	0a3f      	lsrs	r7, r7, #8
 801e34c:	fb01 e303 	mla	r3, r1, r3, lr
 801e350:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e352:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e356:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801e35a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e35c:	fb00 330a 	mla	r3, r0, sl, r3
 801e360:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801e364:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e368:	f8b9 3000 	ldrh.w	r3, [r9]
 801e36c:	1218      	asrs	r0, r3, #8
 801e36e:	10d9      	asrs	r1, r3, #3
 801e370:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e374:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e378:	00db      	lsls	r3, r3, #3
 801e37a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e37e:	4350      	muls	r0, r2
 801e380:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e384:	b2db      	uxtb	r3, r3
 801e386:	4351      	muls	r1, r2
 801e388:	ea47 070c 	orr.w	r7, r7, ip
 801e38c:	4353      	muls	r3, r2
 801e38e:	1c42      	adds	r2, r0, #1
 801e390:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e394:	0c3a      	lsrs	r2, r7, #16
 801e396:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e39a:	4a19      	ldr	r2, [pc, #100]	; (801e400 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 801e39c:	b2c0      	uxtb	r0, r0
 801e39e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801e3a2:	1c4a      	adds	r2, r1, #1
 801e3a4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e3a8:	0a3a      	lsrs	r2, r7, #8
 801e3aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e3ae:	00c9      	lsls	r1, r1, #3
 801e3b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e3b4:	4301      	orrs	r1, r0
 801e3b6:	1c58      	adds	r0, r3, #1
 801e3b8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e3bc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801e3c0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801e3c4:	4308      	orrs	r0, r1
 801e3c6:	f8a9 0000 	strh.w	r0, [r9]
 801e3ca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e3cc:	f109 0902 	add.w	r9, r9, #2
 801e3d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e3d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e3d6:	441a      	add	r2, r3
 801e3d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e3da:	922d      	str	r2, [sp, #180]	; 0xb4
 801e3dc:	441d      	add	r5, r3
 801e3de:	e64c      	b.n	801e07a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801e3e0:	2800      	cmp	r0, #0
 801e3e2:	f43f aeed 	beq.w	801e1c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801e3e6:	5c79      	ldrb	r1, [r7, r1]
 801e3e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e3ec:	9109      	str	r1, [sp, #36]	; 0x24
 801e3ee:	0e09      	lsrs	r1, r1, #24
 801e3f0:	9111      	str	r1, [sp, #68]	; 0x44
 801e3f2:	e6e5      	b.n	801e1c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801e3f4:	b01b      	add	sp, #108	; 0x6c
 801e3f6:	ecbd 8b08 	vpop	{d8-d11}
 801e3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3fe:	bf00      	nop
 801e400:	fffff800 	.word	0xfffff800

0801e404 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801e404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e408:	b085      	sub	sp, #20
 801e40a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801e40e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801e412:	9103      	str	r1, [sp, #12]
 801e414:	2d00      	cmp	r5, #0
 801e416:	fb05 7106 	mla	r1, r5, r6, r7
 801e41a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801e41e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801e422:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 801e426:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801e42a:	eb03 0901 	add.w	r9, r3, r1
 801e42e:	9401      	str	r4, [sp, #4]
 801e430:	f2c0 80c0 	blt.w	801e5b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801e434:	45a8      	cmp	r8, r5
 801e436:	f340 80bd 	ble.w	801e5b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801e43a:	2f00      	cmp	r7, #0
 801e43c:	f2c0 80b6 	blt.w	801e5ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801e440:	42be      	cmp	r6, r7
 801e442:	f340 80b3 	ble.w	801e5ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801e446:	f813 c001 	ldrb.w	ip, [r3, r1]
 801e44a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 801e44e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e452:	d019      	beq.n	801e488 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 801e454:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801e458:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801e45c:	435a      	muls	r2, r3
 801e45e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801e462:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801e466:	fb0c f403 	mul.w	r4, ip, r3
 801e46a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801e46e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801e472:	441a      	add	r2, r3
 801e474:	f104 0320 	add.w	r3, r4, #32
 801e478:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801e47c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801e480:	0a1b      	lsrs	r3, r3, #8
 801e482:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e486:	4319      	orrs	r1, r3
 801e488:	b289      	uxth	r1, r1
 801e48a:	1c7b      	adds	r3, r7, #1
 801e48c:	f100 8097 	bmi.w	801e5be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801e490:	429e      	cmp	r6, r3
 801e492:	f340 8094 	ble.w	801e5be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801e496:	2800      	cmp	r0, #0
 801e498:	f000 8094 	beq.w	801e5c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 801e49c:	f899 4001 	ldrb.w	r4, [r9, #1]
 801e4a0:	9b01      	ldr	r3, [sp, #4]
 801e4a2:	2cff      	cmp	r4, #255	; 0xff
 801e4a4:	885b      	ldrh	r3, [r3, #2]
 801e4a6:	d01b      	beq.n	801e4e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 801e4a8:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801e4ac:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801e4b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e4b4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801e4b8:	fb0a f202 	mul.w	r2, sl, r2
 801e4bc:	fb04 fa03 	mul.w	sl, r4, r3
 801e4c0:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801e4c4:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801e4c8:	441a      	add	r2, r3
 801e4ca:	f10a 0320 	add.w	r3, sl, #32
 801e4ce:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801e4d2:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801e4d6:	0a1b      	lsrs	r3, r3, #8
 801e4d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e4dc:	ea4b 0303 	orr.w	r3, fp, r3
 801e4e0:	b29b      	uxth	r3, r3
 801e4e2:	3501      	adds	r5, #1
 801e4e4:	d474      	bmi.n	801e5d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801e4e6:	45a8      	cmp	r8, r5
 801e4e8:	dd72      	ble.n	801e5d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801e4ea:	f1be 0f00 	cmp.w	lr, #0
 801e4ee:	f000 8120 	beq.w	801e732 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 801e4f2:	2f00      	cmp	r7, #0
 801e4f4:	db69      	blt.n	801e5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801e4f6:	42be      	cmp	r6, r7
 801e4f8:	dd67      	ble.n	801e5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801e4fa:	f819 5006 	ldrb.w	r5, [r9, r6]
 801e4fe:	9a01      	ldr	r2, [sp, #4]
 801e500:	2dff      	cmp	r5, #255	; 0xff
 801e502:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801e506:	d01c      	beq.n	801e542 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 801e508:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801e50c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e510:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e514:	fb08 f802 	mul.w	r8, r8, r2
 801e518:	fb05 fa0b 	mul.w	sl, r5, fp
 801e51c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801e520:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801e524:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e528:	4490      	add	r8, r2
 801e52a:	f10a 0220 	add.w	r2, sl, #32
 801e52e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801e532:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801e536:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e53a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e53e:	ea4b 0b0a 	orr.w	fp, fp, sl
 801e542:	fa1f fb8b 	uxth.w	fp, fp
 801e546:	3701      	adds	r7, #1
 801e548:	d447      	bmi.n	801e5da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801e54a:	42be      	cmp	r6, r7
 801e54c:	dd45      	ble.n	801e5da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801e54e:	2800      	cmp	r0, #0
 801e550:	d046      	beq.n	801e5e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 801e552:	3601      	adds	r6, #1
 801e554:	9a01      	ldr	r2, [sp, #4]
 801e556:	f819 7006 	ldrb.w	r7, [r9, r6]
 801e55a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801e55e:	2fff      	cmp	r7, #255	; 0xff
 801e560:	d01a      	beq.n	801e598 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 801e562:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801e566:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801e56a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e56e:	fb08 f806 	mul.w	r8, r8, r6
 801e572:	fb07 f902 	mul.w	r9, r7, r2
 801e576:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801e57a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801e57e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e582:	44b0      	add	r8, r6
 801e584:	f109 0620 	add.w	r6, r9, #32
 801e588:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801e58c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801e590:	0a36      	lsrs	r6, r6, #8
 801e592:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e596:	4332      	orrs	r2, r6
 801e598:	b292      	uxth	r2, r2
 801e59a:	280f      	cmp	r0, #15
 801e59c:	d922      	bls.n	801e5e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801e59e:	4b69      	ldr	r3, [pc, #420]	; (801e744 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 801e5a0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801e5a4:	4a68      	ldr	r2, [pc, #416]	; (801e748 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 801e5a6:	4869      	ldr	r0, [pc, #420]	; (801e74c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 801e5a8:	f006 fefe 	bl	80253a8 <__assert_func>
 801e5ac:	f04f 0c00 	mov.w	ip, #0
 801e5b0:	4661      	mov	r1, ip
 801e5b2:	e76a      	b.n	801e48a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 801e5b4:	2400      	movs	r4, #0
 801e5b6:	46a4      	mov	ip, r4
 801e5b8:	4623      	mov	r3, r4
 801e5ba:	4621      	mov	r1, r4
 801e5bc:	e791      	b.n	801e4e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801e5be:	2400      	movs	r4, #0
 801e5c0:	4623      	mov	r3, r4
 801e5c2:	e78e      	b.n	801e4e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801e5c4:	4604      	mov	r4, r0
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	e78b      	b.n	801e4e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801e5ca:	2500      	movs	r5, #0
 801e5cc:	46ab      	mov	fp, r5
 801e5ce:	e7ba      	b.n	801e546 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 801e5d0:	2700      	movs	r7, #0
 801e5d2:	463d      	mov	r5, r7
 801e5d4:	463a      	mov	r2, r7
 801e5d6:	46bb      	mov	fp, r7
 801e5d8:	e7df      	b.n	801e59a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801e5da:	2700      	movs	r7, #0
 801e5dc:	463a      	mov	r2, r7
 801e5de:	e7dc      	b.n	801e59a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801e5e0:	4607      	mov	r7, r0
 801e5e2:	4602      	mov	r2, r0
 801e5e4:	f1be 0f0f 	cmp.w	lr, #15
 801e5e8:	d8d9      	bhi.n	801e59e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801e5ea:	b286      	uxth	r6, r0
 801e5ec:	fa1f f98e 	uxth.w	r9, lr
 801e5f0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801e5f4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e5f8:	fb06 f809 	mul.w	r8, r6, r9
 801e5fc:	0136      	lsls	r6, r6, #4
 801e5fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e602:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801e606:	9601      	str	r6, [sp, #4]
 801e608:	ea4a 0101 	orr.w	r1, sl, r1
 801e60c:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801e610:	fa1f f689 	uxth.w	r6, r9
 801e614:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e618:	fb10 f90e 	smulbb	r9, r0, lr
 801e61c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e620:	9602      	str	r6, [sp, #8]
 801e622:	460e      	mov	r6, r1
 801e624:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801e628:	f1ce 0110 	rsb	r1, lr, #16
 801e62c:	ea4a 0303 	orr.w	r3, sl, r3
 801e630:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e634:	1a09      	subs	r1, r1, r0
 801e636:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801e63a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e63e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e642:	4343      	muls	r3, r0
 801e644:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801e648:	9801      	ldr	r0, [sp, #4]
 801e64a:	ea4a 0202 	orr.w	r2, sl, r2
 801e64e:	fb01 3106 	mla	r1, r1, r6, r3
 801e652:	9e02      	ldr	r6, [sp, #8]
 801e654:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801e658:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801e65c:	fb09 1302 	mla	r3, r9, r2, r1
 801e660:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801e664:	1b80      	subs	r0, r0, r6
 801e666:	9e01      	ldr	r6, [sp, #4]
 801e668:	9a03      	ldr	r2, [sp, #12]
 801e66a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e66e:	eba6 0608 	sub.w	r6, r6, r8
 801e672:	b280      	uxth	r0, r0
 801e674:	8811      	ldrh	r1, [r2, #0]
 801e676:	ea4a 0b0b 	orr.w	fp, sl, fp
 801e67a:	b2b6      	uxth	r6, r6
 801e67c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e680:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801e684:	4374      	muls	r4, r6
 801e686:	b292      	uxth	r2, r2
 801e688:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801e68c:	fb0c 4400 	mla	r4, ip, r0, r4
 801e690:	9802      	ldr	r0, [sp, #8]
 801e692:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801e696:	fb00 4505 	mla	r5, r0, r5, r4
 801e69a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e69e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e6a2:	1208      	asrs	r0, r1, #8
 801e6a4:	fb08 5707 	mla	r7, r8, r7, r5
 801e6a8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e6ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e6b0:	10cd      	asrs	r5, r1, #3
 801e6b2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e6b6:	ea43 0e0e 	orr.w	lr, r3, lr
 801e6ba:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e6be:	4357      	muls	r7, r2
 801e6c0:	fa1f f38e 	uxth.w	r3, lr
 801e6c4:	f107 0801 	add.w	r8, r7, #1
 801e6c8:	121c      	asrs	r4, r3, #8
 801e6ca:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801e6ce:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e6d2:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801e6d6:	b2ff      	uxtb	r7, r7
 801e6d8:	fb10 f007 	smulbb	r0, r0, r7
 801e6dc:	fb15 f507 	smulbb	r5, r5, r7
 801e6e0:	fb04 0402 	mla	r4, r4, r2, r0
 801e6e4:	10d8      	asrs	r0, r3, #3
 801e6e6:	00db      	lsls	r3, r3, #3
 801e6e8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e6ec:	b2a4      	uxth	r4, r4
 801e6ee:	fb00 5002 	mla	r0, r0, r2, r5
 801e6f2:	b2dd      	uxtb	r5, r3
 801e6f4:	00cb      	lsls	r3, r1, #3
 801e6f6:	b280      	uxth	r0, r0
 801e6f8:	b2db      	uxtb	r3, r3
 801e6fa:	fb13 f307 	smulbb	r3, r3, r7
 801e6fe:	fb05 3202 	mla	r2, r5, r2, r3
 801e702:	1c63      	adds	r3, r4, #1
 801e704:	b292      	uxth	r2, r2
 801e706:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e70a:	1c53      	adds	r3, r2, #1
 801e70c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e710:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e714:	1c42      	adds	r2, r0, #1
 801e716:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e71a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e71e:	9a03      	ldr	r2, [sp, #12]
 801e720:	0940      	lsrs	r0, r0, #5
 801e722:	4323      	orrs	r3, r4
 801e724:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e728:	4303      	orrs	r3, r0
 801e72a:	8013      	strh	r3, [r2, #0]
 801e72c:	b005      	add	sp, #20
 801e72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e732:	280f      	cmp	r0, #15
 801e734:	f63f af33 	bhi.w	801e59e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801e738:	4677      	mov	r7, lr
 801e73a:	4675      	mov	r5, lr
 801e73c:	4672      	mov	r2, lr
 801e73e:	46f3      	mov	fp, lr
 801e740:	e753      	b.n	801e5ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 801e742:	bf00      	nop
 801e744:	0802c056 	.word	0x0802c056
 801e748:	0802c626 	.word	0x0802c626
 801e74c:	0802c0da 	.word	0x0802c0da

0801e750 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e754:	ed2d 8b08 	vpush	{d8-d11}
 801e758:	b097      	sub	sp, #92	; 0x5c
 801e75a:	eeb0 aa40 	vmov.f32	s20, s0
 801e75e:	eef0 9a60 	vmov.f32	s19, s1
 801e762:	9214      	str	r2, [sp, #80]	; 0x50
 801e764:	eeb0 9a41 	vmov.f32	s18, s2
 801e768:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e76a:	eeb0 8a62 	vmov.f32	s16, s5
 801e76e:	9308      	str	r3, [sp, #32]
 801e770:	eef0 8a43 	vmov.f32	s17, s6
 801e774:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e778:	eef0 ba44 	vmov.f32	s23, s8
 801e77c:	9015      	str	r0, [sp, #84]	; 0x54
 801e77e:	eeb0 ba64 	vmov.f32	s22, s9
 801e782:	9312      	str	r3, [sp, #72]	; 0x48
 801e784:	eef0 aa45 	vmov.f32	s21, s10
 801e788:	6850      	ldr	r0, [r2, #4]
 801e78a:	9111      	str	r1, [sp, #68]	; 0x44
 801e78c:	6812      	ldr	r2, [r2, #0]
 801e78e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e792:	fb00 1303 	mla	r3, r0, r3, r1
 801e796:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e79a:	9309      	str	r3, [sp, #36]	; 0x24
 801e79c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e79e:	681b      	ldr	r3, [r3, #0]
 801e7a0:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e7a4:	685b      	ldr	r3, [r3, #4]
 801e7a6:	930c      	str	r3, [sp, #48]	; 0x30
 801e7a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e7ac:	930a      	str	r3, [sp, #40]	; 0x28
 801e7ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	dc03      	bgt.n	801e7bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e7b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	f340 83cd 	ble.w	801ef56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 801e7bc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e7be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e7c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e7c6:	1e48      	subs	r0, r1, #1
 801e7c8:	1e55      	subs	r5, r2, #1
 801e7ca:	9b08      	ldr	r3, [sp, #32]
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	f340 81a5 	ble.w	801eb1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801e7d2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801e7d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e7d6:	1436      	asrs	r6, r6, #16
 801e7d8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e7dc:	d406      	bmi.n	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e7de:	4286      	cmp	r6, r0
 801e7e0:	da04      	bge.n	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e7e2:	2b00      	cmp	r3, #0
 801e7e4:	db02      	blt.n	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e7e6:	42ab      	cmp	r3, r5
 801e7e8:	f2c0 8199 	blt.w	801eb1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801e7ec:	3601      	adds	r6, #1
 801e7ee:	f100 8186 	bmi.w	801eafe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801e7f2:	42b1      	cmp	r1, r6
 801e7f4:	f2c0 8183 	blt.w	801eafe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801e7f8:	3301      	adds	r3, #1
 801e7fa:	f100 8180 	bmi.w	801eafe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801e7fe:	429a      	cmp	r2, r3
 801e800:	f2c0 817d 	blt.w	801eafe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801e804:	9b08      	ldr	r3, [sp, #32]
 801e806:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e80a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e80c:	9313      	str	r3, [sp, #76]	; 0x4c
 801e80e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e810:	2b00      	cmp	r3, #0
 801e812:	f340 81a6 	ble.w	801eb62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801e816:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e818:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801e81a:	1418      	asrs	r0, r3, #16
 801e81c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e81e:	142d      	asrs	r5, r5, #16
 801e820:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e824:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e826:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801e82a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e82c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e830:	f100 81fa 	bmi.w	801ec28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801e834:	f102 3eff 	add.w	lr, r2, #4294967295
 801e838:	4575      	cmp	r5, lr
 801e83a:	f280 81f5 	bge.w	801ec28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801e83e:	2800      	cmp	r0, #0
 801e840:	f2c0 81f2 	blt.w	801ec28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801e844:	f103 3eff 	add.w	lr, r3, #4294967295
 801e848:	4570      	cmp	r0, lr
 801e84a:	f280 81ed 	bge.w	801ec28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801e84e:	b212      	sxth	r2, r2
 801e850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e852:	fa1f fe81 	uxth.w	lr, r1
 801e856:	fb00 5002 	mla	r0, r0, r2, r5
 801e85a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801e85e:	eb03 0a00 	add.w	sl, r3, r0
 801e862:	f813 9000 	ldrb.w	r9, [r3, r0]
 801e866:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801e86a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e86e:	b29b      	uxth	r3, r3
 801e870:	f1bc 0f00 	cmp.w	ip, #0
 801e874:	f000 81bb 	beq.w	801ebee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e878:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801e87c:	eb0a 0b02 	add.w	fp, sl, r2
 801e880:	fa1f fa8c 	uxth.w	sl, ip
 801e884:	940d      	str	r4, [sp, #52]	; 0x34
 801e886:	fb0a fe0e 	mul.w	lr, sl, lr
 801e88a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801e88e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801e892:	eba5 050e 	sub.w	r5, r5, lr
 801e896:	940e      	str	r4, [sp, #56]	; 0x38
 801e898:	fa1f fa8a 	uxth.w	sl, sl
 801e89c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e89e:	b2ad      	uxth	r5, r5
 801e8a0:	eba3 030a 	sub.w	r3, r3, sl
 801e8a4:	fb08 f505 	mul.w	r5, r8, r5
 801e8a8:	b29b      	uxth	r3, r3
 801e8aa:	fb09 5303 	mla	r3, r9, r3, r5
 801e8ae:	fb0a 3304 	mla	r3, sl, r4, r3
 801e8b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e8b4:	fb0e 3304 	mla	r3, lr, r4, r3
 801e8b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	f000 8111 	beq.w	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801e8c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e8c4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e8c8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801e8cc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801e8d0:	f000 8192 	beq.w	801ebf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801e8d4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e8d8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e8dc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e8e0:	fb0a fe0e 	mul.w	lr, sl, lr
 801e8e4:	fb09 f000 	mul.w	r0, r9, r0
 801e8e8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801e8ec:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e8f0:	f100 0b20 	add.w	fp, r0, #32
 801e8f4:	44ce      	add	lr, r9
 801e8f6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801e8fa:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e8fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e902:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e906:	ea4e 0909 	orr.w	r9, lr, r9
 801e90a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e90e:	8868      	ldrh	r0, [r5, #2]
 801e910:	d019      	beq.n	801e946 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e912:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e916:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e91a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e91e:	fb0a fe0e 	mul.w	lr, sl, lr
 801e922:	fb08 f800 	mul.w	r8, r8, r0
 801e926:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801e92a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e92e:	f108 0b20 	add.w	fp, r8, #32
 801e932:	4486      	add	lr, r0
 801e934:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801e938:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e93c:	0a00      	lsrs	r0, r0, #8
 801e93e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e942:	ea4e 0000 	orr.w	r0, lr, r0
 801e946:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801e94a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e94e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e952:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e956:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e95a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e95e:	ea4e 0909 	orr.w	r9, lr, r9
 801e962:	ea4a 0000 	orr.w	r0, sl, r0
 801e966:	f1bc 0f00 	cmp.w	ip, #0
 801e96a:	f000 8147 	beq.w	801ebfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801e96e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801e972:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e974:	3a01      	subs	r2, #1
 801e976:	2cff      	cmp	r4, #255	; 0xff
 801e978:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e97c:	f102 0202 	add.w	r2, r2, #2
 801e980:	eb05 0e02 	add.w	lr, r5, r2
 801e984:	5aaa      	ldrh	r2, [r5, r2]
 801e986:	d018      	beq.n	801e9ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e988:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801e98c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e990:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e994:	fb04 fa02 	mul.w	sl, r4, r2
 801e998:	fb08 f805 	mul.w	r8, r8, r5
 801e99c:	f10a 0520 	add.w	r5, sl, #32
 801e9a0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801e9a4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e9a8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801e9ac:	4442      	add	r2, r8
 801e9ae:	0a2d      	lsrs	r5, r5, #8
 801e9b0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801e9b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e9b8:	432a      	orrs	r2, r5
 801e9ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e9bc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801e9c0:	2cff      	cmp	r4, #255	; 0xff
 801e9c2:	d01a      	beq.n	801e9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 801e9c4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801e9c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e9cc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e9d0:	fb04 fa05 	mul.w	sl, r4, r5
 801e9d4:	fb08 f80e 	mul.w	r8, r8, lr
 801e9d8:	f10a 0e20 	add.w	lr, sl, #32
 801e9dc:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801e9e0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e9e4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801e9e8:	4445      	add	r5, r8
 801e9ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e9ee:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801e9f2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801e9f6:	ea45 050e 	orr.w	r5, r5, lr
 801e9fa:	fb1c fe01 	smulbb	lr, ip, r1
 801e9fe:	f1cc 0810 	rsb	r8, ip, #16
 801ea02:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ea06:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ea0a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801ea0e:	eba8 0801 	sub.w	r8, r8, r1
 801ea12:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801ea16:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ea1a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801ea1e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ea22:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801ea26:	ea4a 0202 	orr.w	r2, sl, r2
 801ea2a:	4341      	muls	r1, r0
 801ea2c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801ea30:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ea34:	fb09 1108 	mla	r1, r9, r8, r1
 801ea38:	ea4b 0505 	orr.w	r5, fp, r5
 801ea3c:	fb0c 1102 	mla	r1, ip, r2, r1
 801ea40:	fb0e 1e05 	mla	lr, lr, r5, r1
 801ea44:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801ea48:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ea4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ea50:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ea54:	ea42 0e0e 	orr.w	lr, r2, lr
 801ea58:	fa1f f28e 	uxth.w	r2, lr
 801ea5c:	2bff      	cmp	r3, #255	; 0xff
 801ea5e:	d103      	bne.n	801ea68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801ea60:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ea62:	29ff      	cmp	r1, #255	; 0xff
 801ea64:	f000 80de 	beq.w	801ec24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 801ea68:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ea6a:	1215      	asrs	r5, r2, #8
 801ea6c:	8838      	ldrh	r0, [r7, #0]
 801ea6e:	434b      	muls	r3, r1
 801ea70:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ea74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ea76:	f103 0c01 	add.w	ip, r3, #1
 801ea7a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801ea7e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801ea82:	fa5f fc83 	uxtb.w	ip, r3
 801ea86:	1203      	asrs	r3, r0, #8
 801ea88:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ea8c:	fb13 f30c 	smulbb	r3, r3, ip
 801ea90:	fb05 3501 	mla	r5, r5, r1, r3
 801ea94:	10c3      	asrs	r3, r0, #3
 801ea96:	10d1      	asrs	r1, r2, #3
 801ea98:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801ea9c:	00d2      	lsls	r2, r2, #3
 801ea9e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eaa2:	b2ad      	uxth	r5, r5
 801eaa4:	fb13 f30c 	smulbb	r3, r3, ip
 801eaa8:	b2d2      	uxtb	r2, r2
 801eaaa:	fb01 3104 	mla	r1, r1, r4, r3
 801eaae:	00c3      	lsls	r3, r0, #3
 801eab0:	b2db      	uxtb	r3, r3
 801eab2:	b289      	uxth	r1, r1
 801eab4:	fb13 f30c 	smulbb	r3, r3, ip
 801eab8:	fb02 3304 	mla	r3, r2, r4, r3
 801eabc:	b29a      	uxth	r2, r3
 801eabe:	1c6b      	adds	r3, r5, #1
 801eac0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801eac4:	1c53      	adds	r3, r2, #1
 801eac6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eaca:	1c4a      	adds	r2, r1, #1
 801eacc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ead0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ead4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ead8:	0949      	lsrs	r1, r1, #5
 801eada:	432b      	orrs	r3, r5
 801eadc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eae0:	430b      	orrs	r3, r1
 801eae2:	803b      	strh	r3, [r7, #0]
 801eae4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eae6:	3702      	adds	r7, #2
 801eae8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801eaea:	4413      	add	r3, r2
 801eaec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eaee:	9329      	str	r3, [sp, #164]	; 0xa4
 801eaf0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eaf2:	441a      	add	r2, r3
 801eaf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eaf6:	3b01      	subs	r3, #1
 801eaf8:	922a      	str	r2, [sp, #168]	; 0xa8
 801eafa:	9313      	str	r3, [sp, #76]	; 0x4c
 801eafc:	e687      	b.n	801e80e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801eafe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eb00:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801eb02:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801eb04:	4433      	add	r3, r6
 801eb06:	9329      	str	r3, [sp, #164]	; 0xa4
 801eb08:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb0a:	441c      	add	r4, r3
 801eb0c:	9b08      	ldr	r3, [sp, #32]
 801eb0e:	3b01      	subs	r3, #1
 801eb10:	942a      	str	r4, [sp, #168]	; 0xa8
 801eb12:	9308      	str	r3, [sp, #32]
 801eb14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb16:	3302      	adds	r3, #2
 801eb18:	9309      	str	r3, [sp, #36]	; 0x24
 801eb1a:	e656      	b.n	801e7ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eb1c:	d028      	beq.n	801eb70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801eb1e:	9b08      	ldr	r3, [sp, #32]
 801eb20:	982b      	ldr	r0, [sp, #172]	; 0xac
 801eb22:	3b01      	subs	r3, #1
 801eb24:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801eb26:	fb00 5003 	mla	r0, r0, r3, r5
 801eb2a:	1400      	asrs	r0, r0, #16
 801eb2c:	f53f ae6a 	bmi.w	801e804 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801eb30:	3901      	subs	r1, #1
 801eb32:	4288      	cmp	r0, r1
 801eb34:	f6bf ae66 	bge.w	801e804 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801eb38:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801eb3a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801eb3c:	fb01 0303 	mla	r3, r1, r3, r0
 801eb40:	141b      	asrs	r3, r3, #16
 801eb42:	f53f ae5f 	bmi.w	801e804 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801eb46:	3a01      	subs	r2, #1
 801eb48:	4293      	cmp	r3, r2
 801eb4a:	f6bf ae5b 	bge.w	801e804 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801eb4e:	9b08      	ldr	r3, [sp, #32]
 801eb50:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801eb54:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801eb58:	9313      	str	r3, [sp, #76]	; 0x4c
 801eb5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	f300 8082 	bgt.w	801ec66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 801eb62:	9b08      	ldr	r3, [sp, #32]
 801eb64:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801eb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb6a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801eb6e:	9309      	str	r3, [sp, #36]	; 0x24
 801eb70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	f340 81ef 	ble.w	801ef56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 801eb78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb7e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801eb82:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801eb86:	eef0 6a48 	vmov.f32	s13, s16
 801eb8a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801eb8e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eb92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb96:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801eb9a:	eef0 6a68 	vmov.f32	s13, s17
 801eb9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eba2:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801eba6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ebaa:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ebae:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ebb2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ebb6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ebba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ebbe:	ee18 2a10 	vmov	r2, s16
 801ebc2:	eeb0 8a47 	vmov.f32	s16, s14
 801ebc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebca:	ee18 2a90 	vmov	r2, s17
 801ebce:	932b      	str	r3, [sp, #172]	; 0xac
 801ebd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ebd2:	eef0 8a67 	vmov.f32	s17, s15
 801ebd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebda:	932c      	str	r3, [sp, #176]	; 0xb0
 801ebdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ebde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ebe0:	3b01      	subs	r3, #1
 801ebe2:	9311      	str	r3, [sp, #68]	; 0x44
 801ebe4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ebe6:	bf08      	it	eq
 801ebe8:	4613      	moveq	r3, r2
 801ebea:	9308      	str	r3, [sp, #32]
 801ebec:	e5df      	b.n	801e7ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ebee:	fb08 f505 	mul.w	r5, r8, r5
 801ebf2:	fb09 5303 	mla	r3, r9, r3, r5
 801ebf6:	e65f      	b.n	801e8b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 801ebf8:	4681      	mov	r9, r0
 801ebfa:	e686      	b.n	801e90a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ebfc:	f1c1 0210 	rsb	r2, r1, #16
 801ec00:	4341      	muls	r1, r0
 801ec02:	fb09 1902 	mla	r9, r9, r2, r1
 801ec06:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ec0a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801ec0e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ec12:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec16:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ec1a:	ea42 0909 	orr.w	r9, r2, r9
 801ec1e:	fa1f f289 	uxth.w	r2, r9
 801ec22:	e71b      	b.n	801ea5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801ec24:	803a      	strh	r2, [r7, #0]
 801ec26:	e75d      	b.n	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801ec28:	f115 0e01 	adds.w	lr, r5, #1
 801ec2c:	f53f af5a 	bmi.w	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801ec30:	4572      	cmp	r2, lr
 801ec32:	f6ff af57 	blt.w	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801ec36:	f110 0e01 	adds.w	lr, r0, #1
 801ec3a:	f53f af53 	bmi.w	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801ec3e:	4573      	cmp	r3, lr
 801ec40:	f6ff af50 	blt.w	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801ec44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ec46:	b21b      	sxth	r3, r3
 801ec48:	b212      	sxth	r2, r2
 801ec4a:	9502      	str	r5, [sp, #8]
 801ec4c:	9301      	str	r3, [sp, #4]
 801ec4e:	9200      	str	r2, [sp, #0]
 801ec50:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801ec54:	e9cd c405 	strd	ip, r4, [sp, #20]
 801ec58:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801ec5c:	4639      	mov	r1, r7
 801ec5e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ec60:	f7ff fbd0 	bl	801e404 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801ec64:	e73e      	b.n	801eae4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801ec66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ec68:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ec6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ec6e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801ec72:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ec74:	fa1f fc82 	uxth.w	ip, r2
 801ec78:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ec7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ec7e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801ec82:	141f      	asrs	r7, r3, #16
 801ec84:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ec86:	141b      	asrs	r3, r3, #16
 801ec88:	fb01 3707 	mla	r7, r1, r7, r3
 801ec8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec8e:	eb03 0a07 	add.w	sl, r3, r7
 801ec92:	f813 9007 	ldrb.w	r9, [r3, r7]
 801ec96:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801ec9a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ec9e:	b29b      	uxth	r3, r3
 801eca0:	2d00      	cmp	r5, #0
 801eca2:	f000 813d 	beq.w	801ef20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 801eca6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801ecaa:	eb0a 0b01 	add.w	fp, sl, r1
 801ecae:	fa1f fa85 	uxth.w	sl, r5
 801ecb2:	940f      	str	r4, [sp, #60]	; 0x3c
 801ecb4:	fb0a fc0c 	mul.w	ip, sl, ip
 801ecb8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ecbc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801ecc0:	eba0 000c 	sub.w	r0, r0, ip
 801ecc4:	9410      	str	r4, [sp, #64]	; 0x40
 801ecc6:	fa1f fa8a 	uxth.w	sl, sl
 801ecca:	b280      	uxth	r0, r0
 801eccc:	eba3 030a 	sub.w	r3, r3, sl
 801ecd0:	fb08 f000 	mul.w	r0, r8, r0
 801ecd4:	b29b      	uxth	r3, r3
 801ecd6:	fb09 0303 	mla	r3, r9, r3, r0
 801ecda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ecdc:	fb0a 3300 	mla	r3, sl, r0, r3
 801ece0:	fb0c 3304 	mla	r3, ip, r4, r3
 801ece4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	f000 810b 	beq.w	801ef04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 801ecee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ecf0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ecf4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ecf6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801ecfa:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801ecfe:	f000 8114 	beq.w	801ef2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 801ed02:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801ed06:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ed0a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ed0e:	fb0a fc0c 	mul.w	ip, sl, ip
 801ed12:	fb09 f707 	mul.w	r7, r9, r7
 801ed16:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801ed1a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801ed1e:	f107 0b20 	add.w	fp, r7, #32
 801ed22:	44cc      	add	ip, r9
 801ed24:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801ed28:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ed2c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ed30:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ed34:	ea4c 0909 	orr.w	r9, ip, r9
 801ed38:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ed3c:	8847      	ldrh	r7, [r0, #2]
 801ed3e:	d019      	beq.n	801ed74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 801ed40:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801ed44:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801ed48:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ed4c:	fb0a fc0c 	mul.w	ip, sl, ip
 801ed50:	fb08 f807 	mul.w	r8, r8, r7
 801ed54:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801ed58:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801ed5c:	f108 0b20 	add.w	fp, r8, #32
 801ed60:	44bc      	add	ip, r7
 801ed62:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801ed66:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ed6a:	0a3f      	lsrs	r7, r7, #8
 801ed6c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ed70:	ea4c 0707 	orr.w	r7, ip, r7
 801ed74:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801ed78:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ed7c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801ed80:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ed84:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ed88:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ed8c:	ea4c 0909 	orr.w	r9, ip, r9
 801ed90:	ea4a 0707 	orr.w	r7, sl, r7
 801ed94:	2d00      	cmp	r5, #0
 801ed96:	f000 80ca 	beq.w	801ef2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801ed9a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801ed9e:	3901      	subs	r1, #1
 801eda0:	0049      	lsls	r1, r1, #1
 801eda2:	3102      	adds	r1, #2
 801eda4:	eb00 0c01 	add.w	ip, r0, r1
 801eda8:	5a41      	ldrh	r1, [r0, r1]
 801edaa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801edac:	28ff      	cmp	r0, #255	; 0xff
 801edae:	d019      	beq.n	801ede4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 801edb0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801edb4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801edb6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801edba:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801edbe:	fb04 fa01 	mul.w	sl, r4, r1
 801edc2:	fb08 f800 	mul.w	r8, r8, r0
 801edc6:	f10a 0020 	add.w	r0, sl, #32
 801edca:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801edce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801edd2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801edd6:	4441      	add	r1, r8
 801edd8:	0a00      	lsrs	r0, r0, #8
 801edda:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801edde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ede2:	4301      	orrs	r1, r0
 801ede4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ede6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801edea:	2cff      	cmp	r4, #255	; 0xff
 801edec:	d01a      	beq.n	801ee24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 801edee:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801edf2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801edf6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801edfa:	fb04 fa00 	mul.w	sl, r4, r0
 801edfe:	fb08 f80c 	mul.w	r8, r8, ip
 801ee02:	f10a 0c20 	add.w	ip, sl, #32
 801ee06:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801ee0a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ee0e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801ee12:	4440      	add	r0, r8
 801ee14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee18:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801ee1c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801ee20:	ea40 000c 	orr.w	r0, r0, ip
 801ee24:	fb15 fc02 	smulbb	ip, r5, r2
 801ee28:	f1c5 0810 	rsb	r8, r5, #16
 801ee2c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ee30:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ee34:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801ee38:	eba8 0802 	sub.w	r8, r8, r2
 801ee3c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801ee40:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ee44:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801ee48:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ee4c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801ee50:	ea4a 0101 	orr.w	r1, sl, r1
 801ee54:	437a      	muls	r2, r7
 801ee56:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801ee5a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ee5e:	fb09 2208 	mla	r2, r9, r8, r2
 801ee62:	ea4b 0000 	orr.w	r0, fp, r0
 801ee66:	fb05 2201 	mla	r2, r5, r1, r2
 801ee6a:	fb0c 2200 	mla	r2, ip, r0, r2
 801ee6e:	0d57      	lsrs	r7, r2, #21
 801ee70:	0952      	lsrs	r2, r2, #5
 801ee72:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ee76:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ee7a:	433a      	orrs	r2, r7
 801ee7c:	2bff      	cmp	r3, #255	; 0xff
 801ee7e:	b292      	uxth	r2, r2
 801ee80:	d102      	bne.n	801ee88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 801ee82:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ee84:	29ff      	cmp	r1, #255	; 0xff
 801ee86:	d063      	beq.n	801ef50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 801ee88:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ee8a:	1215      	asrs	r5, r2, #8
 801ee8c:	f8be 1000 	ldrh.w	r1, [lr]
 801ee90:	4343      	muls	r3, r0
 801ee92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ee94:	10cf      	asrs	r7, r1, #3
 801ee96:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ee9a:	1c58      	adds	r0, r3, #1
 801ee9c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eea0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801eea4:	1208      	asrs	r0, r1, #8
 801eea6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801eeaa:	00c9      	lsls	r1, r1, #3
 801eeac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eeb0:	b2db      	uxtb	r3, r3
 801eeb2:	b2c9      	uxtb	r1, r1
 801eeb4:	fb10 f003 	smulbb	r0, r0, r3
 801eeb8:	fb11 f103 	smulbb	r1, r1, r3
 801eebc:	fb05 0504 	mla	r5, r5, r4, r0
 801eec0:	10d0      	asrs	r0, r2, #3
 801eec2:	fb17 f703 	smulbb	r7, r7, r3
 801eec6:	00d2      	lsls	r2, r2, #3
 801eec8:	b2ad      	uxth	r5, r5
 801eeca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801eece:	b2d2      	uxtb	r2, r2
 801eed0:	fb00 7004 	mla	r0, r0, r4, r7
 801eed4:	1c6b      	adds	r3, r5, #1
 801eed6:	fb02 1204 	mla	r2, r2, r4, r1
 801eeda:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801eede:	b292      	uxth	r2, r2
 801eee0:	b280      	uxth	r0, r0
 801eee2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801eee6:	1c57      	adds	r7, r2, #1
 801eee8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801eeec:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801eef0:	433d      	orrs	r5, r7
 801eef2:	1c47      	adds	r7, r0, #1
 801eef4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801eef8:	097f      	lsrs	r7, r7, #5
 801eefa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eefe:	433d      	orrs	r5, r7
 801ef00:	f8ae 5000 	strh.w	r5, [lr]
 801ef04:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ef06:	f10e 0e02 	add.w	lr, lr, #2
 801ef0a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ef0c:	4413      	add	r3, r2
 801ef0e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ef10:	9329      	str	r3, [sp, #164]	; 0xa4
 801ef12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ef14:	441a      	add	r2, r3
 801ef16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ef18:	3b01      	subs	r3, #1
 801ef1a:	922a      	str	r2, [sp, #168]	; 0xa8
 801ef1c:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef1e:	e61c      	b.n	801eb5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801ef20:	fb08 f000 	mul.w	r0, r8, r0
 801ef24:	fb09 0303 	mla	r3, r9, r3, r0
 801ef28:	e6dc      	b.n	801ece4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 801ef2a:	46b9      	mov	r9, r7
 801ef2c:	e704      	b.n	801ed38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 801ef2e:	f1c2 0110 	rsb	r1, r2, #16
 801ef32:	437a      	muls	r2, r7
 801ef34:	fb09 2901 	mla	r9, r9, r1, r2
 801ef38:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ef3c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801ef40:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801ef44:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ef48:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ef4c:	4302      	orrs	r2, r0
 801ef4e:	e795      	b.n	801ee7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 801ef50:	f8ae 2000 	strh.w	r2, [lr]
 801ef54:	e7d6      	b.n	801ef04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 801ef56:	b017      	add	sp, #92	; 0x5c
 801ef58:	ecbd 8b08 	vpop	{d8-d11}
 801ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef64:	b085      	sub	sp, #20
 801ef66:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801ef6a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801ef6e:	9103      	str	r1, [sp, #12]
 801ef70:	2d00      	cmp	r5, #0
 801ef72:	fb05 7106 	mla	r1, r5, r6, r7
 801ef76:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ef7a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801ef7e:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 801ef82:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801ef86:	eb02 0901 	add.w	r9, r2, r1
 801ef8a:	9401      	str	r4, [sp, #4]
 801ef8c:	f2c0 80c0 	blt.w	801f110 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801ef90:	45a8      	cmp	r8, r5
 801ef92:	f340 80bd 	ble.w	801f110 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801ef96:	2f00      	cmp	r7, #0
 801ef98:	f2c0 80b6 	blt.w	801f108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801ef9c:	42be      	cmp	r6, r7
 801ef9e:	f340 80b3 	ble.w	801f108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801efa2:	f812 c001 	ldrb.w	ip, [r2, r1]
 801efa6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 801efaa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801efae:	d019      	beq.n	801efe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 801efb0:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801efb4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801efb8:	435a      	muls	r2, r3
 801efba:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801efbe:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801efc2:	fb0c f403 	mul.w	r4, ip, r3
 801efc6:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801efca:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801efce:	441a      	add	r2, r3
 801efd0:	f104 0320 	add.w	r3, r4, #32
 801efd4:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801efd8:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801efdc:	0a1b      	lsrs	r3, r3, #8
 801efde:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801efe2:	4319      	orrs	r1, r3
 801efe4:	b289      	uxth	r1, r1
 801efe6:	1c7b      	adds	r3, r7, #1
 801efe8:	f100 8097 	bmi.w	801f11a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 801efec:	429e      	cmp	r6, r3
 801efee:	f340 8094 	ble.w	801f11a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 801eff2:	2800      	cmp	r0, #0
 801eff4:	f000 8094 	beq.w	801f120 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 801eff8:	f899 4001 	ldrb.w	r4, [r9, #1]
 801effc:	9b01      	ldr	r3, [sp, #4]
 801effe:	2cff      	cmp	r4, #255	; 0xff
 801f000:	885b      	ldrh	r3, [r3, #2]
 801f002:	d01b      	beq.n	801f03c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 801f004:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801f008:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801f00c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f010:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f014:	fb0a f202 	mul.w	r2, sl, r2
 801f018:	fb04 fa03 	mul.w	sl, r4, r3
 801f01c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801f020:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801f024:	441a      	add	r2, r3
 801f026:	f10a 0320 	add.w	r3, sl, #32
 801f02a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f02e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801f032:	0a1b      	lsrs	r3, r3, #8
 801f034:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f038:	ea4b 0303 	orr.w	r3, fp, r3
 801f03c:	b29b      	uxth	r3, r3
 801f03e:	3501      	adds	r5, #1
 801f040:	d474      	bmi.n	801f12c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801f042:	45a8      	cmp	r8, r5
 801f044:	dd72      	ble.n	801f12c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801f046:	f1be 0f00 	cmp.w	lr, #0
 801f04a:	f000 8110 	beq.w	801f26e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 801f04e:	2f00      	cmp	r7, #0
 801f050:	db69      	blt.n	801f126 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801f052:	42be      	cmp	r6, r7
 801f054:	dd67      	ble.n	801f126 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801f056:	f819 5006 	ldrb.w	r5, [r9, r6]
 801f05a:	9a01      	ldr	r2, [sp, #4]
 801f05c:	2dff      	cmp	r5, #255	; 0xff
 801f05e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801f062:	d01c      	beq.n	801f09e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 801f064:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801f068:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f06c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f070:	fb08 f802 	mul.w	r8, r8, r2
 801f074:	fb05 fa0b 	mul.w	sl, r5, fp
 801f078:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f07c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801f080:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f084:	4490      	add	r8, r2
 801f086:	f10a 0220 	add.w	r2, sl, #32
 801f08a:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801f08e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801f092:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f096:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f09a:	ea4b 0b0a 	orr.w	fp, fp, sl
 801f09e:	fa1f fb8b 	uxth.w	fp, fp
 801f0a2:	3701      	adds	r7, #1
 801f0a4:	d447      	bmi.n	801f136 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 801f0a6:	42be      	cmp	r6, r7
 801f0a8:	dd45      	ble.n	801f136 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 801f0aa:	2800      	cmp	r0, #0
 801f0ac:	d046      	beq.n	801f13c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 801f0ae:	3601      	adds	r6, #1
 801f0b0:	9a01      	ldr	r2, [sp, #4]
 801f0b2:	f819 7006 	ldrb.w	r7, [r9, r6]
 801f0b6:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801f0ba:	2fff      	cmp	r7, #255	; 0xff
 801f0bc:	d01a      	beq.n	801f0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 801f0be:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801f0c2:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801f0c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f0ca:	fb08 f806 	mul.w	r8, r8, r6
 801f0ce:	fb07 f902 	mul.w	r9, r7, r2
 801f0d2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801f0d6:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801f0da:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f0de:	44b0      	add	r8, r6
 801f0e0:	f109 0620 	add.w	r6, r9, #32
 801f0e4:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801f0e8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801f0ec:	0a36      	lsrs	r6, r6, #8
 801f0ee:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f0f2:	4332      	orrs	r2, r6
 801f0f4:	b292      	uxth	r2, r2
 801f0f6:	280f      	cmp	r0, #15
 801f0f8:	d922      	bls.n	801f140 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801f0fa:	4b61      	ldr	r3, [pc, #388]	; (801f280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 801f0fc:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801f100:	4a60      	ldr	r2, [pc, #384]	; (801f284 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 801f102:	4861      	ldr	r0, [pc, #388]	; (801f288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 801f104:	f006 f950 	bl	80253a8 <__assert_func>
 801f108:	f04f 0c00 	mov.w	ip, #0
 801f10c:	4661      	mov	r1, ip
 801f10e:	e76a      	b.n	801efe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801f110:	2400      	movs	r4, #0
 801f112:	46a4      	mov	ip, r4
 801f114:	4623      	mov	r3, r4
 801f116:	4621      	mov	r1, r4
 801f118:	e791      	b.n	801f03e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801f11a:	2400      	movs	r4, #0
 801f11c:	4623      	mov	r3, r4
 801f11e:	e78e      	b.n	801f03e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801f120:	4604      	mov	r4, r0
 801f122:	4603      	mov	r3, r0
 801f124:	e78b      	b.n	801f03e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801f126:	2500      	movs	r5, #0
 801f128:	46ab      	mov	fp, r5
 801f12a:	e7ba      	b.n	801f0a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 801f12c:	2700      	movs	r7, #0
 801f12e:	463d      	mov	r5, r7
 801f130:	463a      	mov	r2, r7
 801f132:	46bb      	mov	fp, r7
 801f134:	e7df      	b.n	801f0f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 801f136:	2700      	movs	r7, #0
 801f138:	463a      	mov	r2, r7
 801f13a:	e7dc      	b.n	801f0f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 801f13c:	4607      	mov	r7, r0
 801f13e:	4602      	mov	r2, r0
 801f140:	f1be 0f0f 	cmp.w	lr, #15
 801f144:	d8d9      	bhi.n	801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801f146:	b286      	uxth	r6, r0
 801f148:	fa1f f98e 	uxth.w	r9, lr
 801f14c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f150:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f154:	fb06 f809 	mul.w	r8, r6, r9
 801f158:	0136      	lsls	r6, r6, #4
 801f15a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f15e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801f162:	9601      	str	r6, [sp, #4]
 801f164:	ea4a 0101 	orr.w	r1, sl, r1
 801f168:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801f16c:	fa1f f689 	uxth.w	r6, r9
 801f170:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f174:	fb10 f90e 	smulbb	r9, r0, lr
 801f178:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f17c:	9602      	str	r6, [sp, #8]
 801f17e:	460e      	mov	r6, r1
 801f180:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801f184:	f1ce 0110 	rsb	r1, lr, #16
 801f188:	ea4a 0303 	orr.w	r3, sl, r3
 801f18c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f190:	1a09      	subs	r1, r1, r0
 801f192:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801f196:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f19a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f19e:	4343      	muls	r3, r0
 801f1a0:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801f1a4:	ea4a 0202 	orr.w	r2, sl, r2
 801f1a8:	9802      	ldr	r0, [sp, #8]
 801f1aa:	fb01 3106 	mla	r1, r1, r6, r3
 801f1ae:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801f1b2:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f1b6:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801f1ba:	fb09 1302 	mla	r3, r9, r2, r1
 801f1be:	9a03      	ldr	r2, [sp, #12]
 801f1c0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f1c4:	8811      	ldrh	r1, [r2, #0]
 801f1c6:	9a01      	ldr	r2, [sp, #4]
 801f1c8:	ea4a 0b0b 	orr.w	fp, sl, fp
 801f1cc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f1d0:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801f1d4:	1a12      	subs	r2, r2, r0
 801f1d6:	9801      	ldr	r0, [sp, #4]
 801f1d8:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801f1dc:	eba0 0608 	sub.w	r6, r0, r8
 801f1e0:	b292      	uxth	r2, r2
 801f1e2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f1e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f1ea:	b2b6      	uxth	r6, r6
 801f1ec:	10c8      	asrs	r0, r1, #3
 801f1ee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f1f2:	4374      	muls	r4, r6
 801f1f4:	ea43 0e0e 	orr.w	lr, r3, lr
 801f1f8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f1fc:	fb0c 4402 	mla	r4, ip, r2, r4
 801f200:	9a02      	ldr	r2, [sp, #8]
 801f202:	fa1f f38e 	uxth.w	r3, lr
 801f206:	fb02 4505 	mla	r5, r2, r5, r4
 801f20a:	120a      	asrs	r2, r1, #8
 801f20c:	00c9      	lsls	r1, r1, #3
 801f20e:	fb08 5707 	mla	r7, r8, r7, r5
 801f212:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f216:	b2c9      	uxtb	r1, r1
 801f218:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801f21c:	b2ff      	uxtb	r7, r7
 801f21e:	437a      	muls	r2, r7
 801f220:	4378      	muls	r0, r7
 801f222:	434f      	muls	r7, r1
 801f224:	1c51      	adds	r1, r2, #1
 801f226:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f22a:	121a      	asrs	r2, r3, #8
 801f22c:	f022 0207 	bic.w	r2, r2, #7
 801f230:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801f234:	1c41      	adds	r1, r0, #1
 801f236:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f23a:	10d9      	asrs	r1, r3, #3
 801f23c:	0212      	lsls	r2, r2, #8
 801f23e:	f021 0103 	bic.w	r1, r1, #3
 801f242:	00db      	lsls	r3, r3, #3
 801f244:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801f248:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f24c:	00c9      	lsls	r1, r1, #3
 801f24e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f252:	430a      	orrs	r2, r1
 801f254:	1c79      	adds	r1, r7, #1
 801f256:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f25a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801f25e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801f262:	4313      	orrs	r3, r2
 801f264:	9a03      	ldr	r2, [sp, #12]
 801f266:	8013      	strh	r3, [r2, #0]
 801f268:	b005      	add	sp, #20
 801f26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f26e:	280f      	cmp	r0, #15
 801f270:	f63f af43 	bhi.w	801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801f274:	4677      	mov	r7, lr
 801f276:	4675      	mov	r5, lr
 801f278:	4672      	mov	r2, lr
 801f27a:	46f3      	mov	fp, lr
 801f27c:	e763      	b.n	801f146 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 801f27e:	bf00      	nop
 801f280:	0802c056 	.word	0x0802c056
 801f284:	0802c626 	.word	0x0802c626
 801f288:	0802c0da 	.word	0x0802c0da

0801f28c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f290:	ed2d 8b08 	vpush	{d8-d11}
 801f294:	b093      	sub	sp, #76	; 0x4c
 801f296:	eeb0 aa40 	vmov.f32	s20, s0
 801f29a:	eef0 9a60 	vmov.f32	s19, s1
 801f29e:	9210      	str	r2, [sp, #64]	; 0x40
 801f2a0:	eeb0 9a41 	vmov.f32	s18, s2
 801f2a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f2a6:	eeb0 8a62 	vmov.f32	s16, s5
 801f2aa:	9011      	str	r0, [sp, #68]	; 0x44
 801f2ac:	eef0 8a43 	vmov.f32	s17, s6
 801f2b0:	6850      	ldr	r0, [r2, #4]
 801f2b2:	eef0 ba44 	vmov.f32	s23, s8
 801f2b6:	910e      	str	r1, [sp, #56]	; 0x38
 801f2b8:	eeb0 ba64 	vmov.f32	s22, s9
 801f2bc:	9306      	str	r3, [sp, #24]
 801f2be:	eef0 aa45 	vmov.f32	s21, s10
 801f2c2:	6812      	ldr	r2, [r2, #0]
 801f2c4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f2c8:	fb00 1303 	mla	r3, r0, r3, r1
 801f2cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f2d0:	9307      	str	r3, [sp, #28]
 801f2d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	9308      	str	r3, [sp, #32]
 801f2d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f2da:	685b      	ldr	r3, [r3, #4]
 801f2dc:	9309      	str	r3, [sp, #36]	; 0x24
 801f2de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2e0:	2b00      	cmp	r3, #0
 801f2e2:	dc03      	bgt.n	801f2ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	f340 83b6 	ble.w	801fa58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 801f2ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f2ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f2f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f2f6:	1e48      	subs	r0, r1, #1
 801f2f8:	1e55      	subs	r5, r2, #1
 801f2fa:	9b06      	ldr	r3, [sp, #24]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	f340 8165 	ble.w	801f5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801f302:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801f304:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f306:	1436      	asrs	r6, r6, #16
 801f308:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f30c:	d406      	bmi.n	801f31c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f30e:	4286      	cmp	r6, r0
 801f310:	da04      	bge.n	801f31c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f312:	2b00      	cmp	r3, #0
 801f314:	db02      	blt.n	801f31c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f316:	42ab      	cmp	r3, r5
 801f318:	f2c0 8159 	blt.w	801f5ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801f31c:	3601      	adds	r6, #1
 801f31e:	f100 8146 	bmi.w	801f5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f322:	42b1      	cmp	r1, r6
 801f324:	f2c0 8143 	blt.w	801f5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f328:	3301      	adds	r3, #1
 801f32a:	f100 8140 	bmi.w	801f5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f32e:	429a      	cmp	r2, r3
 801f330:	f2c0 813d 	blt.w	801f5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f334:	9b06      	ldr	r3, [sp, #24]
 801f336:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f33a:	9f07      	ldr	r7, [sp, #28]
 801f33c:	930f      	str	r3, [sp, #60]	; 0x3c
 801f33e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f340:	2b00      	cmp	r3, #0
 801f342:	f340 8166 	ble.w	801f612 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801f346:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f348:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801f34a:	1418      	asrs	r0, r3, #16
 801f34c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f34e:	142d      	asrs	r5, r5, #16
 801f350:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f354:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f356:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f35a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f35c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f360:	f100 81f0 	bmi.w	801f744 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801f364:	f102 3eff 	add.w	lr, r2, #4294967295
 801f368:	4575      	cmp	r5, lr
 801f36a:	f280 81eb 	bge.w	801f744 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801f36e:	2800      	cmp	r0, #0
 801f370:	f2c0 81e8 	blt.w	801f744 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801f374:	f103 3eff 	add.w	lr, r3, #4294967295
 801f378:	4570      	cmp	r0, lr
 801f37a:	f280 81e3 	bge.w	801f744 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801f37e:	b212      	sxth	r2, r2
 801f380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f382:	fa1f fe81 	uxth.w	lr, r1
 801f386:	fb00 5002 	mla	r0, r0, r2, r5
 801f38a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801f38e:	eb03 0a00 	add.w	sl, r3, r0
 801f392:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f396:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801f39a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f39e:	b29b      	uxth	r3, r3
 801f3a0:	f1bc 0f00 	cmp.w	ip, #0
 801f3a4:	f000 817b 	beq.w	801f69e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801f3a8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f3ac:	eb0a 0b02 	add.w	fp, sl, r2
 801f3b0:	fa1f fa8c 	uxth.w	sl, ip
 801f3b4:	940a      	str	r4, [sp, #40]	; 0x28
 801f3b6:	fb0a fe0e 	mul.w	lr, sl, lr
 801f3ba:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f3be:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f3c2:	eba5 050e 	sub.w	r5, r5, lr
 801f3c6:	940b      	str	r4, [sp, #44]	; 0x2c
 801f3c8:	fa1f fa8a 	uxth.w	sl, sl
 801f3cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f3ce:	b2ad      	uxth	r5, r5
 801f3d0:	eba3 030a 	sub.w	r3, r3, sl
 801f3d4:	fb08 f505 	mul.w	r5, r8, r5
 801f3d8:	b29b      	uxth	r3, r3
 801f3da:	fb09 5303 	mla	r3, r9, r3, r5
 801f3de:	fb0a 3304 	mla	r3, sl, r4, r3
 801f3e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f3e4:	fb0e 3304 	mla	r3, lr, r4, r3
 801f3e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	f000 80d1 	beq.w	801f594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801f3f2:	9c08      	ldr	r4, [sp, #32]
 801f3f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f3f8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f3fc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f400:	f000 8152 	beq.w	801f6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 801f404:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f408:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f40c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f410:	fb0a fe0e 	mul.w	lr, sl, lr
 801f414:	fb09 f000 	mul.w	r0, r9, r0
 801f418:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f41c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f420:	f100 0b20 	add.w	fp, r0, #32
 801f424:	44ce      	add	lr, r9
 801f426:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f42a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f42e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f432:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f436:	ea4e 0909 	orr.w	r9, lr, r9
 801f43a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f43e:	8868      	ldrh	r0, [r5, #2]
 801f440:	d019      	beq.n	801f476 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f442:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f446:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f44a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f44e:	fb0a fe0e 	mul.w	lr, sl, lr
 801f452:	fb08 f800 	mul.w	r8, r8, r0
 801f456:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f45a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f45e:	f108 0b20 	add.w	fp, r8, #32
 801f462:	4486      	add	lr, r0
 801f464:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f468:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f46c:	0a00      	lsrs	r0, r0, #8
 801f46e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f472:	ea4e 0000 	orr.w	r0, lr, r0
 801f476:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f47a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f47e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f482:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f486:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f48a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f48e:	ea4e 0909 	orr.w	r9, lr, r9
 801f492:	ea4a 0000 	orr.w	r0, sl, r0
 801f496:	f1bc 0f00 	cmp.w	ip, #0
 801f49a:	f000 8107 	beq.w	801f6ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801f49e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f4a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f4a4:	3a01      	subs	r2, #1
 801f4a6:	2cff      	cmp	r4, #255	; 0xff
 801f4a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f4ac:	f102 0202 	add.w	r2, r2, #2
 801f4b0:	eb05 0e02 	add.w	lr, r5, r2
 801f4b4:	5aaa      	ldrh	r2, [r5, r2]
 801f4b6:	d018      	beq.n	801f4ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f4b8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f4bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f4c0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f4c4:	fb04 fa02 	mul.w	sl, r4, r2
 801f4c8:	fb08 f805 	mul.w	r8, r8, r5
 801f4cc:	f10a 0520 	add.w	r5, sl, #32
 801f4d0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f4d4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f4d8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f4dc:	4442      	add	r2, r8
 801f4de:	0a2d      	lsrs	r5, r5, #8
 801f4e0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f4e4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f4e8:	432a      	orrs	r2, r5
 801f4ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f4ec:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f4f0:	2cff      	cmp	r4, #255	; 0xff
 801f4f2:	d01a      	beq.n	801f52a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801f4f4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f4f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f4fc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f500:	fb04 fa05 	mul.w	sl, r4, r5
 801f504:	fb08 f80e 	mul.w	r8, r8, lr
 801f508:	f10a 0e20 	add.w	lr, sl, #32
 801f50c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f510:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f514:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f518:	4445      	add	r5, r8
 801f51a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f51e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f522:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f526:	ea45 050e 	orr.w	r5, r5, lr
 801f52a:	fb1c fe01 	smulbb	lr, ip, r1
 801f52e:	f1cc 0810 	rsb	r8, ip, #16
 801f532:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f536:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f53a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f53e:	eba8 0801 	sub.w	r8, r8, r1
 801f542:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f546:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f54a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f54e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f552:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f556:	ea4a 0202 	orr.w	r2, sl, r2
 801f55a:	4341      	muls	r1, r0
 801f55c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f560:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f564:	fb09 1108 	mla	r1, r9, r8, r1
 801f568:	ea4b 0505 	orr.w	r5, fp, r5
 801f56c:	fb0c 1102 	mla	r1, ip, r2, r1
 801f570:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f574:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f578:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f57c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f580:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f584:	ea42 0e0e 	orr.w	lr, r2, lr
 801f588:	fa1f f28e 	uxth.w	r2, lr
 801f58c:	2bff      	cmp	r3, #255	; 0xff
 801f58e:	f040 80a1 	bne.w	801f6d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801f592:	803a      	strh	r2, [r7, #0]
 801f594:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f596:	3702      	adds	r7, #2
 801f598:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f59a:	4413      	add	r3, r2
 801f59c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f59e:	9325      	str	r3, [sp, #148]	; 0x94
 801f5a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f5a2:	441a      	add	r2, r3
 801f5a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f5a6:	3b01      	subs	r3, #1
 801f5a8:	9226      	str	r2, [sp, #152]	; 0x98
 801f5aa:	930f      	str	r3, [sp, #60]	; 0x3c
 801f5ac:	e6c7      	b.n	801f33e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f5ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f5b0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801f5b2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801f5b4:	4433      	add	r3, r6
 801f5b6:	9325      	str	r3, [sp, #148]	; 0x94
 801f5b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f5ba:	441c      	add	r4, r3
 801f5bc:	9b06      	ldr	r3, [sp, #24]
 801f5be:	3b01      	subs	r3, #1
 801f5c0:	9426      	str	r4, [sp, #152]	; 0x98
 801f5c2:	9306      	str	r3, [sp, #24]
 801f5c4:	9b07      	ldr	r3, [sp, #28]
 801f5c6:	3302      	adds	r3, #2
 801f5c8:	9307      	str	r3, [sp, #28]
 801f5ca:	e696      	b.n	801f2fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f5cc:	d028      	beq.n	801f620 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f5ce:	9b06      	ldr	r3, [sp, #24]
 801f5d0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f5d2:	3b01      	subs	r3, #1
 801f5d4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801f5d6:	fb00 5003 	mla	r0, r0, r3, r5
 801f5da:	1400      	asrs	r0, r0, #16
 801f5dc:	f53f aeaa 	bmi.w	801f334 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f5e0:	3901      	subs	r1, #1
 801f5e2:	4288      	cmp	r0, r1
 801f5e4:	f6bf aea6 	bge.w	801f334 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f5e8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f5ea:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f5ec:	fb01 0303 	mla	r3, r1, r3, r0
 801f5f0:	141b      	asrs	r3, r3, #16
 801f5f2:	f53f ae9f 	bmi.w	801f334 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f5f6:	3a01      	subs	r2, #1
 801f5f8:	4293      	cmp	r3, r2
 801f5fa:	f6bf ae9b 	bge.w	801f334 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f5fe:	9b06      	ldr	r3, [sp, #24]
 801f600:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f604:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801f608:	930f      	str	r3, [sp, #60]	; 0x3c
 801f60a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	f300 80b6 	bgt.w	801f77e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801f612:	9b06      	ldr	r3, [sp, #24]
 801f614:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f618:	9b07      	ldr	r3, [sp, #28]
 801f61a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f61e:	9307      	str	r3, [sp, #28]
 801f620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f622:	2b00      	cmp	r3, #0
 801f624:	f340 8218 	ble.w	801fa58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 801f628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f62c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f62e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f632:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f636:	eef0 6a48 	vmov.f32	s13, s16
 801f63a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f63e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f642:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f646:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801f64a:	eef0 6a68 	vmov.f32	s13, s17
 801f64e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f652:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801f656:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f65a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f65e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f662:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f666:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f66a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f66e:	ee18 2a10 	vmov	r2, s16
 801f672:	eeb0 8a47 	vmov.f32	s16, s14
 801f676:	fb92 f3f3 	sdiv	r3, r2, r3
 801f67a:	ee18 2a90 	vmov	r2, s17
 801f67e:	9327      	str	r3, [sp, #156]	; 0x9c
 801f680:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f682:	eef0 8a67 	vmov.f32	s17, s15
 801f686:	fb92 f3f3 	sdiv	r3, r2, r3
 801f68a:	9328      	str	r3, [sp, #160]	; 0xa0
 801f68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f68e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f690:	3b01      	subs	r3, #1
 801f692:	930e      	str	r3, [sp, #56]	; 0x38
 801f694:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f696:	bf08      	it	eq
 801f698:	4613      	moveq	r3, r2
 801f69a:	9306      	str	r3, [sp, #24]
 801f69c:	e61f      	b.n	801f2de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f69e:	fb08 f505 	mul.w	r5, r8, r5
 801f6a2:	fb09 5303 	mla	r3, r9, r3, r5
 801f6a6:	e69f      	b.n	801f3e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f6a8:	4681      	mov	r9, r0
 801f6aa:	e6c6      	b.n	801f43a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f6ac:	f1c1 0210 	rsb	r2, r1, #16
 801f6b0:	4341      	muls	r1, r0
 801f6b2:	fb09 1902 	mla	r9, r9, r2, r1
 801f6b6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f6ba:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f6be:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f6c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f6c6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f6ca:	ea42 0909 	orr.w	r9, r2, r9
 801f6ce:	fa1f f289 	uxth.w	r2, r9
 801f6d2:	e75b      	b.n	801f58c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f6d4:	f8b7 c000 	ldrh.w	ip, [r7]
 801f6d8:	43db      	mvns	r3, r3
 801f6da:	ea4f 202c 	mov.w	r0, ip, asr #8
 801f6de:	fa5f fe83 	uxtb.w	lr, r3
 801f6e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f6e6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f6ea:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801f6ee:	fb00 f00e 	mul.w	r0, r0, lr
 801f6f2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f6f6:	b2db      	uxtb	r3, r3
 801f6f8:	1c41      	adds	r1, r0, #1
 801f6fa:	fb05 f50e 	mul.w	r5, r5, lr
 801f6fe:	fb03 f30e 	mul.w	r3, r3, lr
 801f702:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f706:	1211      	asrs	r1, r2, #8
 801f708:	f021 0107 	bic.w	r1, r1, #7
 801f70c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f710:	48d4      	ldr	r0, [pc, #848]	; (801fa64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 801f712:	b2c9      	uxtb	r1, r1
 801f714:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801f718:	1c69      	adds	r1, r5, #1
 801f71a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f71e:	10d1      	asrs	r1, r2, #3
 801f720:	00d2      	lsls	r2, r2, #3
 801f722:	f021 0103 	bic.w	r1, r1, #3
 801f726:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f72a:	00c9      	lsls	r1, r1, #3
 801f72c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f730:	4301      	orrs	r1, r0
 801f732:	1c58      	adds	r0, r3, #1
 801f734:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f738:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f73c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f740:	430a      	orrs	r2, r1
 801f742:	e726      	b.n	801f592 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f744:	f115 0e01 	adds.w	lr, r5, #1
 801f748:	f53f af24 	bmi.w	801f594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801f74c:	4572      	cmp	r2, lr
 801f74e:	f6ff af21 	blt.w	801f594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801f752:	f110 0e01 	adds.w	lr, r0, #1
 801f756:	f53f af1d 	bmi.w	801f594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801f75a:	4573      	cmp	r3, lr
 801f75c:	f6ff af1a 	blt.w	801f594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801f760:	b21b      	sxth	r3, r3
 801f762:	b212      	sxth	r2, r2
 801f764:	9301      	str	r3, [sp, #4]
 801f766:	9200      	str	r2, [sp, #0]
 801f768:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801f76c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801f770:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801f774:	4639      	mov	r1, r7
 801f776:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f778:	f7ff fbf2 	bl	801ef60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f77c:	e70a      	b.n	801f594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801f77e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f780:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f784:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f786:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f78a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f78c:	fa1f fc82 	uxth.w	ip, r2
 801f790:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f794:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f796:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f79a:	141f      	asrs	r7, r3, #16
 801f79c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f79e:	141b      	asrs	r3, r3, #16
 801f7a0:	fb01 3707 	mla	r7, r1, r7, r3
 801f7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7a6:	eb03 0a07 	add.w	sl, r3, r7
 801f7aa:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f7ae:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f7b2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f7b6:	b29b      	uxth	r3, r3
 801f7b8:	2d00      	cmp	r5, #0
 801f7ba:	f000 80fe 	beq.w	801f9ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801f7be:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f7c2:	eb0a 0b01 	add.w	fp, sl, r1
 801f7c6:	fa1f fa85 	uxth.w	sl, r5
 801f7ca:	940c      	str	r4, [sp, #48]	; 0x30
 801f7cc:	fb0a fc0c 	mul.w	ip, sl, ip
 801f7d0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f7d4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f7d8:	eba0 000c 	sub.w	r0, r0, ip
 801f7dc:	940d      	str	r4, [sp, #52]	; 0x34
 801f7de:	fa1f fa8a 	uxth.w	sl, sl
 801f7e2:	b280      	uxth	r0, r0
 801f7e4:	eba3 030a 	sub.w	r3, r3, sl
 801f7e8:	fb08 f000 	mul.w	r0, r8, r0
 801f7ec:	b29b      	uxth	r3, r3
 801f7ee:	fb09 0303 	mla	r3, r9, r3, r0
 801f7f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f7f4:	fb0a 3300 	mla	r3, sl, r0, r3
 801f7f8:	fb0c 3304 	mla	r3, ip, r4, r3
 801f7fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f800:	2b00      	cmp	r3, #0
 801f802:	f000 80cc 	beq.w	801f99e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801f806:	9808      	ldr	r0, [sp, #32]
 801f808:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f80c:	9c08      	ldr	r4, [sp, #32]
 801f80e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f812:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f816:	f000 80d5 	beq.w	801f9c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 801f81a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f81e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f822:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f826:	fb0a fc0c 	mul.w	ip, sl, ip
 801f82a:	fb09 f707 	mul.w	r7, r9, r7
 801f82e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f832:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f836:	f107 0b20 	add.w	fp, r7, #32
 801f83a:	44cc      	add	ip, r9
 801f83c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f840:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f844:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f848:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f84c:	ea4c 0909 	orr.w	r9, ip, r9
 801f850:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f854:	8847      	ldrh	r7, [r0, #2]
 801f856:	d019      	beq.n	801f88c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801f858:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f85c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f860:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f864:	fb0a fc0c 	mul.w	ip, sl, ip
 801f868:	fb08 f807 	mul.w	r8, r8, r7
 801f86c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f870:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f874:	f108 0b20 	add.w	fp, r8, #32
 801f878:	44bc      	add	ip, r7
 801f87a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f87e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f882:	0a3f      	lsrs	r7, r7, #8
 801f884:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f888:	ea4c 0707 	orr.w	r7, ip, r7
 801f88c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f890:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f894:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f898:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f89c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f8a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f8a4:	ea4c 0909 	orr.w	r9, ip, r9
 801f8a8:	ea4a 0707 	orr.w	r7, sl, r7
 801f8ac:	2d00      	cmp	r5, #0
 801f8ae:	f000 808b 	beq.w	801f9c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f8b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f8b6:	3901      	subs	r1, #1
 801f8b8:	0049      	lsls	r1, r1, #1
 801f8ba:	3102      	adds	r1, #2
 801f8bc:	eb00 0c01 	add.w	ip, r0, r1
 801f8c0:	5a41      	ldrh	r1, [r0, r1]
 801f8c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f8c4:	28ff      	cmp	r0, #255	; 0xff
 801f8c6:	d019      	beq.n	801f8fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801f8c8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f8cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f8ce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f8d2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f8d6:	fb04 fa01 	mul.w	sl, r4, r1
 801f8da:	fb08 f800 	mul.w	r8, r8, r0
 801f8de:	f10a 0020 	add.w	r0, sl, #32
 801f8e2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f8e6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f8ea:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f8ee:	4441      	add	r1, r8
 801f8f0:	0a00      	lsrs	r0, r0, #8
 801f8f2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f8f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f8fa:	4301      	orrs	r1, r0
 801f8fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f8fe:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f902:	2cff      	cmp	r4, #255	; 0xff
 801f904:	d01a      	beq.n	801f93c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801f906:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801f90a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f90e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f912:	fb04 fa00 	mul.w	sl, r4, r0
 801f916:	fb08 f80c 	mul.w	r8, r8, ip
 801f91a:	f10a 0c20 	add.w	ip, sl, #32
 801f91e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f922:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f926:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f92a:	4440      	add	r0, r8
 801f92c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f930:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f934:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f938:	ea40 000c 	orr.w	r0, r0, ip
 801f93c:	fb15 fc02 	smulbb	ip, r5, r2
 801f940:	f1c5 0810 	rsb	r8, r5, #16
 801f944:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f948:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f94c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f950:	eba8 0802 	sub.w	r8, r8, r2
 801f954:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f958:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f95c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f960:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f964:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f968:	ea4a 0101 	orr.w	r1, sl, r1
 801f96c:	437a      	muls	r2, r7
 801f96e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f972:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f976:	fb09 2208 	mla	r2, r9, r8, r2
 801f97a:	ea4b 0000 	orr.w	r0, fp, r0
 801f97e:	fb05 2201 	mla	r2, r5, r1, r2
 801f982:	fb0c 2200 	mla	r2, ip, r0, r2
 801f986:	0d57      	lsrs	r7, r2, #21
 801f988:	0952      	lsrs	r2, r2, #5
 801f98a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f98e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f992:	433a      	orrs	r2, r7
 801f994:	2bff      	cmp	r3, #255	; 0xff
 801f996:	b292      	uxth	r2, r2
 801f998:	d127      	bne.n	801f9ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 801f99a:	f8ae 2000 	strh.w	r2, [lr]
 801f99e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f9a0:	f10e 0e02 	add.w	lr, lr, #2
 801f9a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f9a6:	4413      	add	r3, r2
 801f9a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f9aa:	9325      	str	r3, [sp, #148]	; 0x94
 801f9ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f9ae:	441a      	add	r2, r3
 801f9b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9b2:	3b01      	subs	r3, #1
 801f9b4:	9226      	str	r2, [sp, #152]	; 0x98
 801f9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 801f9b8:	e627      	b.n	801f60a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801f9ba:	fb08 f000 	mul.w	r0, r8, r0
 801f9be:	fb09 0303 	mla	r3, r9, r3, r0
 801f9c2:	e71b      	b.n	801f7fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801f9c4:	46b9      	mov	r9, r7
 801f9c6:	e743      	b.n	801f850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801f9c8:	f1c2 0110 	rsb	r1, r2, #16
 801f9cc:	437a      	muls	r2, r7
 801f9ce:	fb09 2901 	mla	r9, r9, r1, r2
 801f9d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f9d6:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801f9da:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801f9de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f9e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f9e6:	4302      	orrs	r2, r0
 801f9e8:	e7d4      	b.n	801f994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801f9ea:	f8be 7000 	ldrh.w	r7, [lr]
 801f9ee:	43db      	mvns	r3, r3
 801f9f0:	4c1c      	ldr	r4, [pc, #112]	; (801fa64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 801f9f2:	1238      	asrs	r0, r7, #8
 801f9f4:	fa5f fc83 	uxtb.w	ip, r3
 801f9f8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f9fc:	10fd      	asrs	r5, r7, #3
 801f9fe:	00fb      	lsls	r3, r7, #3
 801fa00:	fb00 f00c 	mul.w	r0, r0, ip
 801fa04:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fa08:	b2db      	uxtb	r3, r3
 801fa0a:	fb05 f10c 	mul.w	r1, r5, ip
 801fa0e:	1c45      	adds	r5, r0, #1
 801fa10:	fb03 f30c 	mul.w	r3, r3, ip
 801fa14:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fa18:	1215      	asrs	r5, r2, #8
 801fa1a:	f025 0507 	bic.w	r5, r5, #7
 801fa1e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fa22:	1c4d      	adds	r5, r1, #1
 801fa24:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801fa28:	10d1      	asrs	r1, r2, #3
 801fa2a:	b2c0      	uxtb	r0, r0
 801fa2c:	f021 0103 	bic.w	r1, r1, #3
 801fa30:	00d2      	lsls	r2, r2, #3
 801fa32:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801fa36:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801fa3a:	00c9      	lsls	r1, r1, #3
 801fa3c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fa40:	4308      	orrs	r0, r1
 801fa42:	1c59      	adds	r1, r3, #1
 801fa44:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801fa48:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa4c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801fa50:	4318      	orrs	r0, r3
 801fa52:	f8ae 0000 	strh.w	r0, [lr]
 801fa56:	e7a2      	b.n	801f99e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801fa58:	b013      	add	sp, #76	; 0x4c
 801fa5a:	ecbd 8b08 	vpop	{d8-d11}
 801fa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa62:	bf00      	nop
 801fa64:	fffff800 	.word	0xfffff800

0801fa68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa6c:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 801fa70:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801fa74:	fb0c 4e03 	mla	lr, ip, r3, r4
 801fa78:	f1bc 0f00 	cmp.w	ip, #0
 801fa7c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801fa80:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 801fa84:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 801fa88:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801fa8c:	8808      	ldrh	r0, [r1, #0]
 801fa8e:	db2f      	blt.n	801faf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801fa90:	45e2      	cmp	sl, ip
 801fa92:	dd2d      	ble.n	801faf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801fa94:	2c00      	cmp	r4, #0
 801fa96:	db29      	blt.n	801faec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801fa98:	42a3      	cmp	r3, r4
 801fa9a:	dd27      	ble.n	801faec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801fa9c:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 801faa0:	1c62      	adds	r2, r4, #1
 801faa2:	d428      	bmi.n	801faf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801faa4:	4293      	cmp	r3, r2
 801faa6:	dd26      	ble.n	801faf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801faa8:	b32f      	cbz	r7, 801faf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801faaa:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 801faae:	f11c 0c01 	adds.w	ip, ip, #1
 801fab2:	d424      	bmi.n	801fafe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801fab4:	45e2      	cmp	sl, ip
 801fab6:	dd22      	ble.n	801fafe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801fab8:	2e00      	cmp	r6, #0
 801faba:	f000 809d 	beq.w	801fbf8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 801fabe:	2c00      	cmp	r4, #0
 801fac0:	db1b      	blt.n	801fafa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801fac2:	42a3      	cmp	r3, r4
 801fac4:	dd19      	ble.n	801fafa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801fac6:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801faca:	3401      	adds	r4, #1
 801facc:	d41a      	bmi.n	801fb04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801face:	42a3      	cmp	r3, r4
 801fad0:	dd18      	ble.n	801fb04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801fad2:	b1cf      	cbz	r7, 801fb08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 801fad4:	3301      	adds	r3, #1
 801fad6:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 801fada:	2f0f      	cmp	r7, #15
 801fadc:	d915      	bls.n	801fb0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 801fade:	4b49      	ldr	r3, [pc, #292]	; (801fc04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 801fae0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801fae4:	4a48      	ldr	r2, [pc, #288]	; (801fc08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 801fae6:	4849      	ldr	r0, [pc, #292]	; (801fc0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 801fae8:	f005 fc5e 	bl	80253a8 <__assert_func>
 801faec:	4681      	mov	r9, r0
 801faee:	e7d7      	b.n	801faa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 801faf0:	4686      	mov	lr, r0
 801faf2:	4681      	mov	r9, r0
 801faf4:	e7db      	b.n	801faae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801faf6:	4686      	mov	lr, r0
 801faf8:	e7d9      	b.n	801faae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801fafa:	4684      	mov	ip, r0
 801fafc:	e7e5      	b.n	801faca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 801fafe:	4603      	mov	r3, r0
 801fb00:	4684      	mov	ip, r0
 801fb02:	e7ea      	b.n	801fada <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801fb04:	4603      	mov	r3, r0
 801fb06:	e7e8      	b.n	801fada <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801fb08:	4603      	mov	r3, r0
 801fb0a:	2e0f      	cmp	r6, #15
 801fb0c:	d8e7      	bhi.n	801fade <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801fb0e:	fb17 f806 	smulbb	r8, r7, r6
 801fb12:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801fb16:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 801fb1a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801fb1e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801fb22:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801fb26:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fb2a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fb2e:	ea44 0909 	orr.w	r9, r4, r9
 801fb32:	f1c6 0410 	rsb	r4, r6, #16
 801fb36:	041a      	lsls	r2, r3, #16
 801fb38:	ea4a 0e0e 	orr.w	lr, sl, lr
 801fb3c:	1be4      	subs	r4, r4, r7
 801fb3e:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 801fb42:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fb46:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fb4a:	fb07 fe0e 	mul.w	lr, r7, lr
 801fb4e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801fb52:	4313      	orrs	r3, r2
 801fb54:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801fb58:	fb04 e409 	mla	r4, r4, r9, lr
 801fb5c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801fb60:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fb64:	b2af      	uxth	r7, r5
 801fb66:	fb08 4303 	mla	r3, r8, r3, r4
 801fb6a:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 801fb6e:	43ed      	mvns	r5, r5
 801fb70:	4322      	orrs	r2, r4
 801fb72:	b2ed      	uxtb	r5, r5
 801fb74:	fb06 3202 	mla	r2, r6, r2, r3
 801fb78:	10c6      	asrs	r6, r0, #3
 801fb7a:	0d53      	lsrs	r3, r2, #21
 801fb7c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fb80:	0952      	lsrs	r2, r2, #5
 801fb82:	fb16 f605 	smulbb	r6, r6, r5
 801fb86:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb8a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fb8e:	431a      	orrs	r2, r3
 801fb90:	b293      	uxth	r3, r2
 801fb92:	1202      	asrs	r2, r0, #8
 801fb94:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801fb98:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801fb9c:	00dc      	lsls	r4, r3, #3
 801fb9e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fba2:	fb12 f205 	smulbb	r2, r2, r5
 801fba6:	b2e4      	uxtb	r4, r4
 801fba8:	fb0c 2c07 	mla	ip, ip, r7, r2
 801fbac:	10da      	asrs	r2, r3, #3
 801fbae:	00c3      	lsls	r3, r0, #3
 801fbb0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fbb4:	fa1f fc8c 	uxth.w	ip, ip
 801fbb8:	b2db      	uxtb	r3, r3
 801fbba:	fb02 6207 	mla	r2, r2, r7, r6
 801fbbe:	fb13 f305 	smulbb	r3, r3, r5
 801fbc2:	b296      	uxth	r6, r2
 801fbc4:	fb04 3307 	mla	r3, r4, r7, r3
 801fbc8:	b29a      	uxth	r2, r3
 801fbca:	f10c 0301 	add.w	r3, ip, #1
 801fbce:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fbd2:	1c53      	adds	r3, r2, #1
 801fbd4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fbd8:	1c72      	adds	r2, r6, #1
 801fbda:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fbde:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801fbe2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fbe6:	0952      	lsrs	r2, r2, #5
 801fbe8:	ea43 030c 	orr.w	r3, r3, ip
 801fbec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fbf0:	4313      	orrs	r3, r2
 801fbf2:	800b      	strh	r3, [r1, #0]
 801fbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbf8:	2f0f      	cmp	r7, #15
 801fbfa:	f63f af70 	bhi.w	801fade <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801fbfe:	4603      	mov	r3, r0
 801fc00:	4684      	mov	ip, r0
 801fc02:	e784      	b.n	801fb0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 801fc04:	0802c056 	.word	0x0802c056
 801fc08:	0802c6cf 	.word	0x0802c6cf
 801fc0c:	0802c0da 	.word	0x0802c0da

0801fc10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc14:	ed2d 8b08 	vpush	{d8-d11}
 801fc18:	b093      	sub	sp, #76	; 0x4c
 801fc1a:	461d      	mov	r5, r3
 801fc1c:	eeb0 aa40 	vmov.f32	s20, s0
 801fc20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fc22:	eef0 9a60 	vmov.f32	s19, s1
 801fc26:	9210      	str	r2, [sp, #64]	; 0x40
 801fc28:	eeb0 9a41 	vmov.f32	s18, s2
 801fc2c:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 801fc30:	eeb0 8a62 	vmov.f32	s16, s5
 801fc34:	910a      	str	r1, [sp, #40]	; 0x28
 801fc36:	eef0 8a43 	vmov.f32	s17, s6
 801fc3a:	920b      	str	r2, [sp, #44]	; 0x2c
 801fc3c:	eef0 ba44 	vmov.f32	s23, s8
 801fc40:	6859      	ldr	r1, [r3, #4]
 801fc42:	eeb0 ba64 	vmov.f32	s22, s9
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	eef0 aa45 	vmov.f32	s21, s10
 801fc4c:	9011      	str	r0, [sp, #68]	; 0x44
 801fc4e:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 801fc52:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801fc56:	fb01 2707 	mla	r7, r1, r7, r2
 801fc5a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801fc5e:	9307      	str	r3, [sp, #28]
 801fc60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fc62:	681b      	ldr	r3, [r3, #0]
 801fc64:	9309      	str	r3, [sp, #36]	; 0x24
 801fc66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc68:	43db      	mvns	r3, r3
 801fc6a:	b2db      	uxtb	r3, r3
 801fc6c:	9308      	str	r3, [sp, #32]
 801fc6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	dc03      	bgt.n	801fc7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fc74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	f340 8205 	ble.w	8020086 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801fc7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fc7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fc82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fc86:	1e48      	subs	r0, r1, #1
 801fc88:	f102 3cff 	add.w	ip, r2, #4294967295
 801fc8c:	2d00      	cmp	r5, #0
 801fc8e:	f340 80da 	ble.w	801fe46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801fc92:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801fc96:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fc9a:	d406      	bmi.n	801fcaa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fc9c:	4586      	cmp	lr, r0
 801fc9e:	da04      	bge.n	801fcaa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	db02      	blt.n	801fcaa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fca4:	4563      	cmp	r3, ip
 801fca6:	f2c0 80cf 	blt.w	801fe48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801fcaa:	f11e 0e01 	adds.w	lr, lr, #1
 801fcae:	f100 80c1 	bmi.w	801fe34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801fcb2:	4571      	cmp	r1, lr
 801fcb4:	f2c0 80be 	blt.w	801fe34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801fcb8:	3301      	adds	r3, #1
 801fcba:	f100 80bb 	bmi.w	801fe34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801fcbe:	429a      	cmp	r2, r3
 801fcc0:	f2c0 80b8 	blt.w	801fe34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801fcc4:	46a9      	mov	r9, r5
 801fcc6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801fcca:	f1b9 0f00 	cmp.w	r9, #0
 801fcce:	f340 80d8 	ble.w	801fe82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fcd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fcd4:	1421      	asrs	r1, r4, #16
 801fcd6:	ea4f 4026 	mov.w	r0, r6, asr #16
 801fcda:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fcde:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fce2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801fce6:	f100 8112 	bmi.w	801ff0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fcea:	f10e 3aff 	add.w	sl, lr, #4294967295
 801fcee:	4551      	cmp	r1, sl
 801fcf0:	f280 810d 	bge.w	801ff0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fcf4:	2800      	cmp	r0, #0
 801fcf6:	f2c0 810a 	blt.w	801ff0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fcfa:	f103 3aff 	add.w	sl, r3, #4294967295
 801fcfe:	4550      	cmp	r0, sl
 801fd00:	f280 8105 	bge.w	801ff0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd04:	fa0f f38e 	sxth.w	r3, lr
 801fd08:	fb00 1103 	mla	r1, r0, r3, r1
 801fd0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd0e:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801fd12:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801fd16:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801fd1a:	f1bc 0f00 	cmp.w	ip, #0
 801fd1e:	d007      	beq.n	801fd30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801fd20:	005b      	lsls	r3, r3, #1
 801fd22:	eb0a 0003 	add.w	r0, sl, r3
 801fd26:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801fd2a:	930c      	str	r3, [sp, #48]	; 0x30
 801fd2c:	8843      	ldrh	r3, [r0, #2]
 801fd2e:	930d      	str	r3, [sp, #52]	; 0x34
 801fd30:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801fd34:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fd38:	fb12 f30c 	smulbb	r3, r2, ip
 801fd3c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801fd40:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fd44:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fd48:	10db      	asrs	r3, r3, #3
 801fd4a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fd4e:	ea40 000e 	orr.w	r0, r0, lr
 801fd52:	f1cc 0e10 	rsb	lr, ip, #16
 801fd56:	ea4a 0101 	orr.w	r1, sl, r1
 801fd5a:	9f08      	ldr	r7, [sp, #32]
 801fd5c:	ebae 0e02 	sub.w	lr, lr, r2
 801fd60:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801fd64:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801fd68:	4351      	muls	r1, r2
 801fd6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fd6c:	fb0e 1e00 	mla	lr, lr, r0, r1
 801fd70:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fd72:	0410      	lsls	r0, r2, #16
 801fd74:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fd78:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fd7c:	4310      	orrs	r0, r2
 801fd7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd80:	0412      	lsls	r2, r2, #16
 801fd82:	fb03 e000 	mla	r0, r3, r0, lr
 801fd86:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801fd8a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801fd8e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fd92:	ea42 020e 	orr.w	r2, r2, lr
 801fd96:	fb03 0302 	mla	r3, r3, r2, r0
 801fd9a:	f8b8 0000 	ldrh.w	r0, [r8]
 801fd9e:	0d5a      	lsrs	r2, r3, #21
 801fda0:	095b      	lsrs	r3, r3, #5
 801fda2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fda6:	1201      	asrs	r1, r0, #8
 801fda8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fdac:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801fdb0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fdb4:	00c0      	lsls	r0, r0, #3
 801fdb6:	4313      	orrs	r3, r2
 801fdb8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801fdbc:	fb11 f107 	smulbb	r1, r1, r7
 801fdc0:	b2c0      	uxtb	r0, r0
 801fdc2:	b29b      	uxth	r3, r3
 801fdc4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fdc8:	fb10 f007 	smulbb	r0, r0, r7
 801fdcc:	fb1e fe07 	smulbb	lr, lr, r7
 801fdd0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801fdd4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fdd8:	fb0c 1c02 	mla	ip, ip, r2, r1
 801fddc:	10d9      	asrs	r1, r3, #3
 801fdde:	00db      	lsls	r3, r3, #3
 801fde0:	fa1f fc8c 	uxth.w	ip, ip
 801fde4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fde8:	b2db      	uxtb	r3, r3
 801fdea:	fb01 e102 	mla	r1, r1, r2, lr
 801fdee:	fb03 0302 	mla	r3, r3, r2, r0
 801fdf2:	b289      	uxth	r1, r1
 801fdf4:	b29a      	uxth	r2, r3
 801fdf6:	f10c 0301 	add.w	r3, ip, #1
 801fdfa:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fdfe:	1c53      	adds	r3, r2, #1
 801fe00:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fe04:	1c4a      	adds	r2, r1, #1
 801fe06:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fe0a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fe0e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fe12:	0949      	lsrs	r1, r1, #5
 801fe14:	ea43 030c 	orr.w	r3, r3, ip
 801fe18:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fe1c:	430b      	orrs	r3, r1
 801fe1e:	f8a8 3000 	strh.w	r3, [r8]
 801fe22:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fe24:	f108 0802 	add.w	r8, r8, #2
 801fe28:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe2c:	441c      	add	r4, r3
 801fe2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe30:	441e      	add	r6, r3
 801fe32:	e74a      	b.n	801fcca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801fe34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fe36:	3d01      	subs	r5, #1
 801fe38:	441c      	add	r4, r3
 801fe3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe3c:	441e      	add	r6, r3
 801fe3e:	9b07      	ldr	r3, [sp, #28]
 801fe40:	3302      	adds	r3, #2
 801fe42:	9307      	str	r3, [sp, #28]
 801fe44:	e722      	b.n	801fc8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fe46:	d022      	beq.n	801fe8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fe48:	1e6b      	subs	r3, r5, #1
 801fe4a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fe4c:	fb00 4003 	mla	r0, r0, r3, r4
 801fe50:	1400      	asrs	r0, r0, #16
 801fe52:	f53f af37 	bmi.w	801fcc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801fe56:	3901      	subs	r1, #1
 801fe58:	4288      	cmp	r0, r1
 801fe5a:	f6bf af33 	bge.w	801fcc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801fe5e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fe60:	fb01 6303 	mla	r3, r1, r3, r6
 801fe64:	141b      	asrs	r3, r3, #16
 801fe66:	f53f af2d 	bmi.w	801fcc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801fe6a:	3a01      	subs	r2, #1
 801fe6c:	4293      	cmp	r3, r2
 801fe6e:	f6bf af29 	bge.w	801fcc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801fe72:	46a8      	mov	r8, r5
 801fe74:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801fe78:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801fe7c:	f1b8 0f00 	cmp.w	r8, #0
 801fe80:	dc60      	bgt.n	801ff44 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801fe82:	9b07      	ldr	r3, [sp, #28]
 801fe84:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801fe88:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801fe8c:	9307      	str	r3, [sp, #28]
 801fe8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	f340 80f8 	ble.w	8020086 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801fe96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fe9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe9c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fea0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fea4:	eef0 6a48 	vmov.f32	s13, s16
 801fea8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801feac:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801feb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801feb4:	ee16 4a90 	vmov	r4, s13
 801feb8:	eef0 6a68 	vmov.f32	s13, s17
 801febc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fec0:	ee16 6a90 	vmov	r6, s13
 801fec4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fec8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fecc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fed0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fed4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fed8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fedc:	ee18 2a10 	vmov	r2, s16
 801fee0:	eeb0 8a47 	vmov.f32	s16, s14
 801fee4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fee8:	ee18 2a90 	vmov	r2, s17
 801feec:	9327      	str	r3, [sp, #156]	; 0x9c
 801feee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fef0:	eef0 8a67 	vmov.f32	s17, s15
 801fef4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fef8:	9328      	str	r3, [sp, #160]	; 0xa0
 801fefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fefc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fefe:	3b01      	subs	r3, #1
 801ff00:	930a      	str	r3, [sp, #40]	; 0x28
 801ff02:	bf08      	it	eq
 801ff04:	4615      	moveq	r5, r2
 801ff06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ff08:	bf18      	it	ne
 801ff0a:	461d      	movne	r5, r3
 801ff0c:	e6af      	b.n	801fc6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ff0e:	f111 0a01 	adds.w	sl, r1, #1
 801ff12:	d486      	bmi.n	801fe22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ff14:	45d6      	cmp	lr, sl
 801ff16:	db84      	blt.n	801fe22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ff18:	f110 0a01 	adds.w	sl, r0, #1
 801ff1c:	d481      	bmi.n	801fe22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ff1e:	4553      	cmp	r3, sl
 801ff20:	f6ff af7f 	blt.w	801fe22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ff24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ff26:	b21b      	sxth	r3, r3
 801ff28:	9101      	str	r1, [sp, #4]
 801ff2a:	4641      	mov	r1, r8
 801ff2c:	9300      	str	r3, [sp, #0]
 801ff2e:	fa0f f38e 	sxth.w	r3, lr
 801ff32:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801ff36:	e9cd c704 	strd	ip, r7, [sp, #16]
 801ff3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ff3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ff3e:	f7ff fd93 	bl	801fa68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801ff42:	e76e      	b.n	801fe22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ff44:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ff46:	1430      	asrs	r0, r6, #16
 801ff48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ff4a:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801ff4e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff52:	1423      	asrs	r3, r4, #16
 801ff54:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ff58:	fb01 3000 	mla	r0, r1, r0, r3
 801ff5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff5e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801ff62:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801ff66:	8858      	ldrh	r0, [r3, #2]
 801ff68:	f1be 0f00 	cmp.w	lr, #0
 801ff6c:	d00b      	beq.n	801ff86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 801ff6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801ff72:	3901      	subs	r1, #1
 801ff74:	0049      	lsls	r1, r1, #1
 801ff76:	3102      	adds	r1, #2
 801ff78:	eb03 0b01 	add.w	fp, r3, r1
 801ff7c:	5a5b      	ldrh	r3, [r3, r1]
 801ff7e:	930e      	str	r3, [sp, #56]	; 0x38
 801ff80:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801ff84:	930f      	str	r3, [sp, #60]	; 0x3c
 801ff86:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801ff8a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ff8e:	fb12 f30e 	smulbb	r3, r2, lr
 801ff92:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801ff96:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801ff9a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ff9e:	10db      	asrs	r3, r3, #3
 801ffa0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ffa4:	ea41 010c 	orr.w	r1, r1, ip
 801ffa8:	f1ce 0c10 	rsb	ip, lr, #16
 801ffac:	ea4b 0000 	orr.w	r0, fp, r0
 801ffb0:	9f08      	ldr	r7, [sp, #32]
 801ffb2:	ebac 0c02 	sub.w	ip, ip, r2
 801ffb6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801ffba:	f108 38ff 	add.w	r8, r8, #4294967295
 801ffbe:	4350      	muls	r0, r2
 801ffc0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801ffc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ffc6:	fb0c 0c01 	mla	ip, ip, r1, r0
 801ffca:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ffcc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801ffd0:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801ffd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ffd6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ffda:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ffde:	0412      	lsls	r2, r2, #16
 801ffe0:	ea4b 0101 	orr.w	r1, fp, r1
 801ffe4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ffe8:	fb03 c101 	mla	r1, r3, r1, ip
 801ffec:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801fff0:	4302      	orrs	r2, r0
 801fff2:	fb03 1202 	mla	r2, r3, r2, r1
 801fff6:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801fffa:	0952      	lsrs	r2, r2, #5
 801fffc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020000:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8020004:	f8b9 2000 	ldrh.w	r2, [r9]
 8020008:	ea4b 0303 	orr.w	r3, fp, r3
 802000c:	1211      	asrs	r1, r2, #8
 802000e:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020012:	b29b      	uxth	r3, r3
 8020014:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020018:	00d2      	lsls	r2, r2, #3
 802001a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802001e:	fb11 f107 	smulbb	r1, r1, r7
 8020022:	1218      	asrs	r0, r3, #8
 8020024:	fb1c fc07 	smulbb	ip, ip, r7
 8020028:	b2d2      	uxtb	r2, r2
 802002a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802002e:	fb12 f207 	smulbb	r2, r2, r7
 8020032:	fb00 100a 	mla	r0, r0, sl, r1
 8020036:	10d9      	asrs	r1, r3, #3
 8020038:	00db      	lsls	r3, r3, #3
 802003a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802003e:	b280      	uxth	r0, r0
 8020040:	b2db      	uxtb	r3, r3
 8020042:	fb01 c10a 	mla	r1, r1, sl, ip
 8020046:	fb03 230a 	mla	r3, r3, sl, r2
 802004a:	1c42      	adds	r2, r0, #1
 802004c:	b289      	uxth	r1, r1
 802004e:	b29b      	uxth	r3, r3
 8020050:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020054:	f101 0c01 	add.w	ip, r1, #1
 8020058:	1c5a      	adds	r2, r3, #1
 802005a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802005e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020062:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020066:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020068:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802006c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020070:	441c      	add	r4, r3
 8020072:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020076:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020078:	4310      	orrs	r0, r2
 802007a:	441e      	add	r6, r3
 802007c:	ea40 000c 	orr.w	r0, r0, ip
 8020080:	f829 0b02 	strh.w	r0, [r9], #2
 8020084:	e6fa      	b.n	801fe7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020086:	b013      	add	sp, #76	; 0x4c
 8020088:	ecbd 8b08 	vpop	{d8-d11}
 802008c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020090 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8020090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020094:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8020098:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 802009c:	fb06 5c03 	mla	ip, r6, r3, r5
 80200a0:	2e00      	cmp	r6, #0
 80200a2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80200a6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80200aa:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80200ae:	8808      	ldrh	r0, [r1, #0]
 80200b0:	db2e      	blt.n	8020110 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80200b2:	45b0      	cmp	r8, r6
 80200b4:	dd2c      	ble.n	8020110 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80200b6:	2d00      	cmp	r5, #0
 80200b8:	db28      	blt.n	802010c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80200ba:	42ab      	cmp	r3, r5
 80200bc:	dd26      	ble.n	802010c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80200be:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 80200c2:	1c6a      	adds	r2, r5, #1
 80200c4:	d427      	bmi.n	8020116 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80200c6:	4293      	cmp	r3, r2
 80200c8:	dd25      	ble.n	8020116 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80200ca:	b324      	cbz	r4, 8020116 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80200cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80200d0:	3601      	adds	r6, #1
 80200d2:	d424      	bmi.n	802011e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80200d4:	45b0      	cmp	r8, r6
 80200d6:	dd22      	ble.n	802011e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80200d8:	b31f      	cbz	r7, 8020122 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 80200da:	2d00      	cmp	r5, #0
 80200dc:	db1d      	blt.n	802011a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80200de:	42ab      	cmp	r3, r5
 80200e0:	dd1b      	ble.n	802011a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80200e2:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 80200e6:	3501      	adds	r5, #1
 80200e8:	d405      	bmi.n	80200f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80200ea:	42ab      	cmp	r3, r5
 80200ec:	dd03      	ble.n	80200f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80200ee:	b124      	cbz	r4, 80200fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80200f0:	3301      	adds	r3, #1
 80200f2:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80200f6:	2c0f      	cmp	r4, #15
 80200f8:	d801      	bhi.n	80200fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80200fa:	2f0f      	cmp	r7, #15
 80200fc:	d914      	bls.n	8020128 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80200fe:	4b27      	ldr	r3, [pc, #156]	; (802019c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8020100:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8020104:	4a26      	ldr	r2, [pc, #152]	; (80201a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8020106:	4827      	ldr	r0, [pc, #156]	; (80201a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8020108:	f005 f94e 	bl	80253a8 <__assert_func>
 802010c:	4684      	mov	ip, r0
 802010e:	e7d8      	b.n	80200c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8020110:	4602      	mov	r2, r0
 8020112:	4684      	mov	ip, r0
 8020114:	e7dc      	b.n	80200d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8020116:	4602      	mov	r2, r0
 8020118:	e7da      	b.n	80200d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802011a:	4606      	mov	r6, r0
 802011c:	e7e3      	b.n	80200e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 802011e:	4606      	mov	r6, r0
 8020120:	e7e9      	b.n	80200f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020122:	2c0f      	cmp	r4, #15
 8020124:	d8eb      	bhi.n	80200fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020126:	4606      	mov	r6, r0
 8020128:	fb14 f307 	smulbb	r3, r4, r7
 802012c:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8020130:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8020134:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020138:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802013c:	10db      	asrs	r3, r3, #3
 802013e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020142:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020146:	ea45 0c0c 	orr.w	ip, r5, ip
 802014a:	f1c7 0510 	rsb	r5, r7, #16
 802014e:	ea4e 0202 	orr.w	r2, lr, r2
 8020152:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8020156:	1b2d      	subs	r5, r5, r4
 8020158:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 802015c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020160:	4354      	muls	r4, r2
 8020162:	fb05 450c 	mla	r5, r5, ip, r4
 8020166:	0404      	lsls	r4, r0, #16
 8020168:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802016c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020170:	4320      	orrs	r0, r4
 8020172:	fb03 5400 	mla	r4, r3, r0, r5
 8020176:	0430      	lsls	r0, r6, #16
 8020178:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 802017c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020180:	4330      	orrs	r0, r6
 8020182:	fb07 4000 	mla	r0, r7, r0, r4
 8020186:	0d43      	lsrs	r3, r0, #21
 8020188:	0940      	lsrs	r0, r0, #5
 802018a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802018e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020192:	4318      	orrs	r0, r3
 8020194:	8008      	strh	r0, [r1, #0]
 8020196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802019a:	bf00      	nop
 802019c:	0802c056 	.word	0x0802c056
 80201a0:	0802c6cf 	.word	0x0802c6cf
 80201a4:	0802c0da 	.word	0x0802c0da

080201a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201ac:	ed2d 8b08 	vpush	{d8-d11}
 80201b0:	b08f      	sub	sp, #60	; 0x3c
 80201b2:	461d      	mov	r5, r3
 80201b4:	eeb0 aa40 	vmov.f32	s20, s0
 80201b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80201ba:	eef0 9a60 	vmov.f32	s19, s1
 80201be:	9107      	str	r1, [sp, #28]
 80201c0:	eeb0 9a41 	vmov.f32	s18, s2
 80201c4:	6859      	ldr	r1, [r3, #4]
 80201c6:	eeb0 8a62 	vmov.f32	s16, s5
 80201ca:	920c      	str	r2, [sp, #48]	; 0x30
 80201cc:	eef0 8a43 	vmov.f32	s17, s6
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	eef0 ba44 	vmov.f32	s23, s8
 80201d6:	eeb0 ba64 	vmov.f32	s22, s9
 80201da:	900d      	str	r0, [sp, #52]	; 0x34
 80201dc:	eef0 aa45 	vmov.f32	s21, s10
 80201e0:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 80201e4:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80201e8:	fb01 2707 	mla	r7, r1, r7, r2
 80201ec:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80201f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201f2:	f8d3 8000 	ldr.w	r8, [r3]
 80201f6:	9b07      	ldr	r3, [sp, #28]
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	dc03      	bgt.n	8020204 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80201fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201fe:	2b00      	cmp	r3, #0
 8020200:	f340 8182 	ble.w	8020508 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020204:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020206:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802020a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802020e:	1e48      	subs	r0, r1, #1
 8020210:	f102 3cff 	add.w	ip, r2, #4294967295
 8020214:	2d00      	cmp	r5, #0
 8020216:	f340 809b 	ble.w	8020350 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 802021a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802021e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020222:	d406      	bmi.n	8020232 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020224:	4586      	cmp	lr, r0
 8020226:	da04      	bge.n	8020232 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020228:	2b00      	cmp	r3, #0
 802022a:	db02      	blt.n	8020232 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802022c:	4563      	cmp	r3, ip
 802022e:	f2c0 8090 	blt.w	8020352 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020232:	f11e 0e01 	adds.w	lr, lr, #1
 8020236:	f100 8084 	bmi.w	8020342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802023a:	4571      	cmp	r1, lr
 802023c:	f2c0 8081 	blt.w	8020342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020240:	3301      	adds	r3, #1
 8020242:	d47e      	bmi.n	8020342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020244:	429a      	cmp	r2, r3
 8020246:	db7c      	blt.n	8020342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020248:	46aa      	mov	sl, r5
 802024a:	46b9      	mov	r9, r7
 802024c:	f1ba 0f00 	cmp.w	sl, #0
 8020250:	f340 8099 	ble.w	8020386 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020254:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020256:	1421      	asrs	r1, r4, #16
 8020258:	ea4f 4026 	mov.w	r0, r6, asr #16
 802025c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020260:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020264:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020268:	f100 80d1 	bmi.w	802040e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802026c:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020270:	4559      	cmp	r1, fp
 8020272:	f280 80cc 	bge.w	802040e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8020276:	2800      	cmp	r0, #0
 8020278:	f2c0 80c9 	blt.w	802040e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802027c:	f103 3bff 	add.w	fp, r3, #4294967295
 8020280:	4558      	cmp	r0, fp
 8020282:	f280 80c4 	bge.w	802040e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8020286:	fa0f fe8e 	sxth.w	lr, lr
 802028a:	fb00 110e 	mla	r1, r0, lr, r1
 802028e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020292:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8020296:	8841      	ldrh	r1, [r0, #2]
 8020298:	f1bc 0f00 	cmp.w	ip, #0
 802029c:	d00b      	beq.n	80202b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802029e:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80202a2:	3b01      	subs	r3, #1
 80202a4:	005b      	lsls	r3, r3, #1
 80202a6:	3302      	adds	r3, #2
 80202a8:	eb00 0e03 	add.w	lr, r0, r3
 80202ac:	5ac3      	ldrh	r3, [r0, r3]
 80202ae:	9308      	str	r3, [sp, #32]
 80202b0:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80202b4:	9309      	str	r3, [sp, #36]	; 0x24
 80202b6:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80202ba:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80202be:	fb12 f30c 	smulbb	r3, r2, ip
 80202c2:	f1cc 0e10 	rsb	lr, ip, #16
 80202c6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80202ca:	10db      	asrs	r3, r3, #3
 80202cc:	ebae 0e02 	sub.w	lr, lr, r2
 80202d0:	ea40 000b 	orr.w	r0, r0, fp
 80202d4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80202d8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80202dc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80202e0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80202e4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80202e8:	ea4b 0101 	orr.w	r1, fp, r1
 80202ec:	4351      	muls	r1, r2
 80202ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80202f0:	fb0e 1e00 	mla	lr, lr, r0, r1
 80202f4:	0410      	lsls	r0, r2, #16
 80202f6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80202fa:	9908      	ldr	r1, [sp, #32]
 80202fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020300:	4310      	orrs	r0, r2
 8020302:	9a08      	ldr	r2, [sp, #32]
 8020304:	0412      	lsls	r2, r2, #16
 8020306:	fb03 e000 	mla	r0, r3, r0, lr
 802030a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802030e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020312:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020316:	ea42 020e 	orr.w	r2, r2, lr
 802031a:	fb03 0302 	mla	r3, r3, r2, r0
 802031e:	0d5a      	lsrs	r2, r3, #21
 8020320:	095b      	lsrs	r3, r3, #5
 8020322:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020326:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802032a:	4313      	orrs	r3, r2
 802032c:	f8a9 3000 	strh.w	r3, [r9]
 8020330:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020332:	f109 0902 	add.w	r9, r9, #2
 8020336:	f10a 3aff 	add.w	sl, sl, #4294967295
 802033a:	441c      	add	r4, r3
 802033c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802033e:	441e      	add	r6, r3
 8020340:	e784      	b.n	802024c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020344:	3d01      	subs	r5, #1
 8020346:	3702      	adds	r7, #2
 8020348:	441c      	add	r4, r3
 802034a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802034c:	441e      	add	r6, r3
 802034e:	e761      	b.n	8020214 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020350:	d01d      	beq.n	802038e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020352:	1e6b      	subs	r3, r5, #1
 8020354:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020356:	fb00 4003 	mla	r0, r0, r3, r4
 802035a:	1400      	asrs	r0, r0, #16
 802035c:	f53f af74 	bmi.w	8020248 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020360:	3901      	subs	r1, #1
 8020362:	4288      	cmp	r0, r1
 8020364:	f6bf af70 	bge.w	8020248 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020368:	9924      	ldr	r1, [sp, #144]	; 0x90
 802036a:	fb01 6303 	mla	r3, r1, r3, r6
 802036e:	141b      	asrs	r3, r3, #16
 8020370:	f53f af6a 	bmi.w	8020248 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020374:	3a01      	subs	r2, #1
 8020376:	4293      	cmp	r3, r2
 8020378:	f6bf af66 	bge.w	8020248 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802037c:	46a9      	mov	r9, r5
 802037e:	46ba      	mov	sl, r7
 8020380:	f1b9 0f00 	cmp.w	r9, #0
 8020384:	dc5b      	bgt.n	802043e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020386:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802038a:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802038e:	9b07      	ldr	r3, [sp, #28]
 8020390:	2b00      	cmp	r3, #0
 8020392:	f340 80b9 	ble.w	8020508 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802039a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802039c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80203a0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80203a4:	eef0 6a48 	vmov.f32	s13, s16
 80203a8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80203ac:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80203b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203b4:	ee16 4a90 	vmov	r4, s13
 80203b8:	eef0 6a68 	vmov.f32	s13, s17
 80203bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203c0:	ee16 6a90 	vmov	r6, s13
 80203c4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80203c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80203cc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80203d0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80203d4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80203d8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80203dc:	ee18 2a10 	vmov	r2, s16
 80203e0:	eeb0 8a47 	vmov.f32	s16, s14
 80203e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80203e8:	ee18 2a90 	vmov	r2, s17
 80203ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80203ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80203f0:	eef0 8a67 	vmov.f32	s17, s15
 80203f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80203f8:	9324      	str	r3, [sp, #144]	; 0x90
 80203fa:	9b07      	ldr	r3, [sp, #28]
 80203fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80203fe:	3b01      	subs	r3, #1
 8020400:	9307      	str	r3, [sp, #28]
 8020402:	bf08      	it	eq
 8020404:	4615      	moveq	r5, r2
 8020406:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020408:	bf18      	it	ne
 802040a:	461d      	movne	r5, r3
 802040c:	e6f3      	b.n	80201f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802040e:	f111 0b01 	adds.w	fp, r1, #1
 8020412:	d48d      	bmi.n	8020330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020414:	45de      	cmp	lr, fp
 8020416:	db8b      	blt.n	8020330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020418:	f110 0b01 	adds.w	fp, r0, #1
 802041c:	d488      	bmi.n	8020330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802041e:	455b      	cmp	r3, fp
 8020420:	db86      	blt.n	8020330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020422:	b21b      	sxth	r3, r3
 8020424:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8020428:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802042c:	9300      	str	r3, [sp, #0]
 802042e:	4642      	mov	r2, r8
 8020430:	fa0f f38e 	sxth.w	r3, lr
 8020434:	4649      	mov	r1, r9
 8020436:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020438:	f7ff fe2a 	bl	8020090 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802043c:	e778      	b.n	8020330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802043e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020440:	1420      	asrs	r0, r4, #16
 8020442:	1431      	asrs	r1, r6, #16
 8020444:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802044c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020450:	fb03 0101 	mla	r1, r3, r1, r0
 8020454:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020458:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802045c:	8841      	ldrh	r1, [r0, #2]
 802045e:	f1be 0f00 	cmp.w	lr, #0
 8020462:	d00b      	beq.n	802047c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8020464:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020468:	3b01      	subs	r3, #1
 802046a:	005b      	lsls	r3, r3, #1
 802046c:	3302      	adds	r3, #2
 802046e:	eb00 0b03 	add.w	fp, r0, r3
 8020472:	5ac3      	ldrh	r3, [r0, r3]
 8020474:	930a      	str	r3, [sp, #40]	; 0x28
 8020476:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802047a:	930b      	str	r3, [sp, #44]	; 0x2c
 802047c:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020480:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020484:	fb12 f30e 	smulbb	r3, r2, lr
 8020488:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802048c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020490:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020494:	10db      	asrs	r3, r3, #3
 8020496:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802049a:	ea40 000c 	orr.w	r0, r0, ip
 802049e:	f1ce 0c10 	rsb	ip, lr, #16
 80204a2:	ea4b 0101 	orr.w	r1, fp, r1
 80204a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80204aa:	ebac 0c02 	sub.w	ip, ip, r2
 80204ae:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80204b2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80204b6:	4351      	muls	r1, r2
 80204b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80204ba:	fb0c 1c00 	mla	ip, ip, r0, r1
 80204be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80204c0:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80204c4:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80204c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80204ca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80204ce:	0412      	lsls	r2, r2, #16
 80204d0:	ea4b 0000 	orr.w	r0, fp, r0
 80204d4:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80204d8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80204dc:	fb03 c000 	mla	r0, r3, r0, ip
 80204e0:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80204e4:	ea42 0b0b 	orr.w	fp, r2, fp
 80204e8:	fb03 000b 	mla	r0, r3, fp, r0
 80204ec:	0d43      	lsrs	r3, r0, #21
 80204ee:	0940      	lsrs	r0, r0, #5
 80204f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80204f4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80204f8:	4318      	orrs	r0, r3
 80204fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80204fc:	441c      	add	r4, r3
 80204fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020500:	f82a 0b02 	strh.w	r0, [sl], #2
 8020504:	441e      	add	r6, r3
 8020506:	e73b      	b.n	8020380 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8020508:	b00f      	add	sp, #60	; 0x3c
 802050a:	ecbd 8b08 	vpop	{d8-d11}
 802050e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020514 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8020514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020518:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 802051c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020520:	fb04 5603 	mla	r6, r4, r3, r5
 8020524:	2c00      	cmp	r4, #0
 8020526:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802052a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802052e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8020532:	db36      	blt.n	80205a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8020534:	45a6      	cmp	lr, r4
 8020536:	dd34      	ble.n	80205a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8020538:	2d00      	cmp	r5, #0
 802053a:	db30      	blt.n	802059e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 802053c:	42ab      	cmp	r3, r5
 802053e:	dd2e      	ble.n	802059e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8020540:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8020544:	1c6e      	adds	r6, r5, #1
 8020546:	d42f      	bmi.n	80205a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8020548:	42b3      	cmp	r3, r6
 802054a:	dd2d      	ble.n	80205a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 802054c:	b370      	cbz	r0, 80205ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802054e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8020552:	3401      	adds	r4, #1
 8020554:	d42e      	bmi.n	80205b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8020556:	45a6      	cmp	lr, r4
 8020558:	dd2c      	ble.n	80205b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 802055a:	b377      	cbz	r7, 80205ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 802055c:	2d00      	cmp	r5, #0
 802055e:	db27      	blt.n	80205b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8020560:	42ab      	cmp	r3, r5
 8020562:	dd25      	ble.n	80205b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8020564:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020568:	3501      	adds	r5, #1
 802056a:	d429      	bmi.n	80205c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 802056c:	42ab      	cmp	r3, r5
 802056e:	dd27      	ble.n	80205c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8020570:	b340      	cbz	r0, 80205c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8020572:	3301      	adds	r3, #1
 8020574:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8020578:	280f      	cmp	r0, #15
 802057a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802057e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020582:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020586:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802058a:	d801      	bhi.n	8020590 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 802058c:	2f0f      	cmp	r7, #15
 802058e:	d91b      	bls.n	80205c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8020590:	4b8d      	ldr	r3, [pc, #564]	; (80207c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8020592:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8020596:	4a8d      	ldr	r2, [pc, #564]	; (80207cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8020598:	488d      	ldr	r0, [pc, #564]	; (80207d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 802059a:	f004 ff05 	bl	80253a8 <__assert_func>
 802059e:	2200      	movs	r2, #0
 80205a0:	e7d0      	b.n	8020544 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 80205a2:	2600      	movs	r6, #0
 80205a4:	4632      	mov	r2, r6
 80205a6:	e7d4      	b.n	8020552 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80205a8:	2600      	movs	r6, #0
 80205aa:	e7d2      	b.n	8020552 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80205ac:	4606      	mov	r6, r0
 80205ae:	e7d0      	b.n	8020552 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80205b0:	2400      	movs	r4, #0
 80205b2:	e7d9      	b.n	8020568 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 80205b4:	2300      	movs	r3, #0
 80205b6:	461c      	mov	r4, r3
 80205b8:	e7de      	b.n	8020578 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80205ba:	463b      	mov	r3, r7
 80205bc:	463c      	mov	r4, r7
 80205be:	e7db      	b.n	8020578 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80205c0:	2300      	movs	r3, #0
 80205c2:	e7d9      	b.n	8020578 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80205c4:	4603      	mov	r3, r0
 80205c6:	e7d7      	b.n	8020578 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80205c8:	b280      	uxth	r0, r0
 80205ca:	b2bf      	uxth	r7, r7
 80205cc:	fb07 fe00 	mul.w	lr, r7, r0
 80205d0:	0100      	lsls	r0, r0, #4
 80205d2:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80205d6:	eba0 0c0e 	sub.w	ip, r0, lr
 80205da:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80205de:	b2bf      	uxth	r7, r7
 80205e0:	fa1f fc8c 	uxth.w	ip, ip
 80205e4:	1bed      	subs	r5, r5, r7
 80205e6:	fb0a f00c 	mul.w	r0, sl, ip
 80205ea:	b2ad      	uxth	r5, r5
 80205ec:	fb0b 0005 	mla	r0, fp, r5, r0
 80205f0:	fb07 0009 	mla	r0, r7, r9, r0
 80205f4:	fb0e 0008 	mla	r0, lr, r8, r0
 80205f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80205fc:	9001      	str	r0, [sp, #4]
 80205fe:	2800      	cmp	r0, #0
 8020600:	f000 80de 	beq.w	80207c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8020604:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020608:	d018      	beq.n	802063c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 802060a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802060e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020612:	fb0b f000 	mul.w	r0, fp, r0
 8020616:	fb0b fb02 	mul.w	fp, fp, r2
 802061a:	0a02      	lsrs	r2, r0, #8
 802061c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020620:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020624:	4402      	add	r2, r0
 8020626:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802062a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802062e:	0a12      	lsrs	r2, r2, #8
 8020630:	0a00      	lsrs	r0, r0, #8
 8020632:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020636:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802063a:	4302      	orrs	r2, r0
 802063c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020640:	d01a      	beq.n	8020678 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8020642:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020646:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802064a:	fb0a f000 	mul.w	r0, sl, r0
 802064e:	fb0a fa06 	mul.w	sl, sl, r6
 8020652:	0a06      	lsrs	r6, r0, #8
 8020654:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020658:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802065c:	4406      	add	r6, r0
 802065e:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020662:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020666:	0a36      	lsrs	r6, r6, #8
 8020668:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802066c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020670:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020674:	ea46 060a 	orr.w	r6, r6, sl
 8020678:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802067c:	d01b      	beq.n	80206b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 802067e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020682:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020686:	fb09 fa0a 	mul.w	sl, r9, sl
 802068a:	fb09 f004 	mul.w	r0, r9, r4
 802068e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020692:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020696:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802069a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802069e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80206a2:	4454      	add	r4, sl
 80206a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80206a8:	0a24      	lsrs	r4, r4, #8
 80206aa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80206ae:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80206b2:	ea44 0409 	orr.w	r4, r4, r9
 80206b6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80206ba:	d01b      	beq.n	80206f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 80206bc:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80206c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206c4:	fb08 f909 	mul.w	r9, r8, r9
 80206c8:	fb08 f003 	mul.w	r0, r8, r3
 80206cc:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80206d0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80206d4:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80206d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206dc:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80206e0:	444b      	add	r3, r9
 80206e2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80206e6:	0a1b      	lsrs	r3, r3, #8
 80206e8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80206ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80206f0:	ea43 0308 	orr.w	r3, r3, r8
 80206f4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80206f8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206fc:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8020700:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020704:	fb0c f808 	mul.w	r8, ip, r8
 8020708:	8808      	ldrh	r0, [r1, #0]
 802070a:	fb0c f606 	mul.w	r6, ip, r6
 802070e:	fb05 8909 	mla	r9, r5, r9, r8
 8020712:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8020716:	fb05 6502 	mla	r5, r5, r2, r6
 802071a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802071e:	fb07 9908 	mla	r9, r7, r8, r9
 8020722:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020726:	fb07 5704 	mla	r7, r7, r4, r5
 802072a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802072e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020732:	b2b6      	uxth	r6, r6
 8020734:	fb0e 9808 	mla	r8, lr, r8, r9
 8020738:	9a01      	ldr	r2, [sp, #4]
 802073a:	fb0e 7e03 	mla	lr, lr, r3, r7
 802073e:	1205      	asrs	r5, r0, #8
 8020740:	4372      	muls	r2, r6
 8020742:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020746:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802074a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802074e:	1c53      	adds	r3, r2, #1
 8020750:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8020754:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020758:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802075c:	ea48 0e0e 	orr.w	lr, r8, lr
 8020760:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020764:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8020768:	f3ce 2407 	ubfx	r4, lr, #8, #8
 802076c:	b2db      	uxtb	r3, r3
 802076e:	fb12 f206 	smulbb	r2, r2, r6
 8020772:	fa5f fe8e 	uxtb.w	lr, lr
 8020776:	fb14 f406 	smulbb	r4, r4, r6
 802077a:	fb05 2503 	mla	r5, r5, r3, r2
 802077e:	10c2      	asrs	r2, r0, #3
 8020780:	fb1e fe06 	smulbb	lr, lr, r6
 8020784:	00c0      	lsls	r0, r0, #3
 8020786:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802078a:	b2ad      	uxth	r5, r5
 802078c:	b2c0      	uxtb	r0, r0
 802078e:	fb02 4203 	mla	r2, r2, r3, r4
 8020792:	fb00 e303 	mla	r3, r0, r3, lr
 8020796:	b294      	uxth	r4, r2
 8020798:	b298      	uxth	r0, r3
 802079a:	1c6b      	adds	r3, r5, #1
 802079c:	1c62      	adds	r2, r4, #1
 802079e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80207a2:	1c43      	adds	r3, r0, #1
 80207a4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80207a8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80207ac:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80207b0:	0952      	lsrs	r2, r2, #5
 80207b2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80207b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80207ba:	432b      	orrs	r3, r5
 80207bc:	4313      	orrs	r3, r2
 80207be:	800b      	strh	r3, [r1, #0]
 80207c0:	b003      	add	sp, #12
 80207c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207c6:	bf00      	nop
 80207c8:	0802c056 	.word	0x0802c056
 80207cc:	0802c626 	.word	0x0802c626
 80207d0:	0802c0da 	.word	0x0802c0da

080207d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207d8:	ed2d 8b08 	vpush	{d8-d11}
 80207dc:	b09d      	sub	sp, #116	; 0x74
 80207de:	eeb0 aa40 	vmov.f32	s20, s0
 80207e2:	eef0 9a60 	vmov.f32	s19, s1
 80207e6:	9219      	str	r2, [sp, #100]	; 0x64
 80207e8:	eeb0 9a41 	vmov.f32	s18, s2
 80207ec:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80207ee:	eeb0 8a62 	vmov.f32	s16, s5
 80207f2:	9307      	str	r3, [sp, #28]
 80207f4:	eef0 8a43 	vmov.f32	s17, s6
 80207f8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80207fc:	eef0 ba44 	vmov.f32	s23, s8
 8020800:	901b      	str	r0, [sp, #108]	; 0x6c
 8020802:	eeb0 ba64 	vmov.f32	s22, s9
 8020806:	931a      	str	r3, [sp, #104]	; 0x68
 8020808:	eef0 aa45 	vmov.f32	s21, s10
 802080c:	6850      	ldr	r0, [r2, #4]
 802080e:	9117      	str	r1, [sp, #92]	; 0x5c
 8020810:	6812      	ldr	r2, [r2, #0]
 8020812:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8020816:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 802081a:	fb00 1303 	mla	r3, r0, r3, r1
 802081e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020822:	930a      	str	r3, [sp, #40]	; 0x28
 8020824:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	9310      	str	r3, [sp, #64]	; 0x40
 802082a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802082e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020832:	2b00      	cmp	r3, #0
 8020834:	dc03      	bgt.n	802083e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020836:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020838:	2b00      	cmp	r3, #0
 802083a:	f340 8375 	ble.w	8020f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802083e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020840:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020844:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020848:	1e48      	subs	r0, r1, #1
 802084a:	1e57      	subs	r7, r2, #1
 802084c:	9b07      	ldr	r3, [sp, #28]
 802084e:	2b00      	cmp	r3, #0
 8020850:	f340 818e 	ble.w	8020b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8020854:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020858:	ea4f 4326 	mov.w	r3, r6, asr #16
 802085c:	d406      	bmi.n	802086c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802085e:	4584      	cmp	ip, r0
 8020860:	da04      	bge.n	802086c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020862:	2b00      	cmp	r3, #0
 8020864:	db02      	blt.n	802086c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020866:	42bb      	cmp	r3, r7
 8020868:	f2c0 8183 	blt.w	8020b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802086c:	f11c 0c01 	adds.w	ip, ip, #1
 8020870:	f100 8173 	bmi.w	8020b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8020874:	4561      	cmp	r1, ip
 8020876:	f2c0 8170 	blt.w	8020b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802087a:	3301      	adds	r3, #1
 802087c:	f100 816d 	bmi.w	8020b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8020880:	429a      	cmp	r2, r3
 8020882:	f2c0 816a 	blt.w	8020b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8020886:	9b07      	ldr	r3, [sp, #28]
 8020888:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802088a:	9318      	str	r3, [sp, #96]	; 0x60
 802088c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802088e:	2b00      	cmp	r3, #0
 8020890:	f340 818c 	ble.w	8020bac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8020894:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020896:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802089a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802089c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80208a0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80208a4:	1422      	asrs	r2, r4, #16
 80208a6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80208aa:	689b      	ldr	r3, [r3, #8]
 80208ac:	f100 81cd 	bmi.w	8020c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80208b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80208b4:	4542      	cmp	r2, r8
 80208b6:	f280 81c8 	bge.w	8020c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80208ba:	f1bc 0f00 	cmp.w	ip, #0
 80208be:	f2c0 81c4 	blt.w	8020c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80208c2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80208c6:	45c4      	cmp	ip, r8
 80208c8:	f280 81bf 	bge.w	8020c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80208cc:	b21b      	sxth	r3, r3
 80208ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80208d0:	fb0c 2203 	mla	r2, ip, r3, r2
 80208d4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80208d8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80208dc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80208e0:	2800      	cmp	r0, #0
 80208e2:	f000 81a9 	beq.w	8020c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 80208e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80208ea:	950c      	str	r5, [sp, #48]	; 0x30
 80208ec:	0e2d      	lsrs	r5, r5, #24
 80208ee:	9513      	str	r5, [sp, #76]	; 0x4c
 80208f0:	b181      	cbz	r1, 8020914 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80208f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80208f6:	3b01      	subs	r3, #1
 80208f8:	009b      	lsls	r3, r3, #2
 80208fa:	3304      	adds	r3, #4
 80208fc:	eb08 0c03 	add.w	ip, r8, r3
 8020900:	f858 3003 	ldr.w	r3, [r8, r3]
 8020904:	9308      	str	r3, [sp, #32]
 8020906:	0e1b      	lsrs	r3, r3, #24
 8020908:	9311      	str	r3, [sp, #68]	; 0x44
 802090a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802090e:	930d      	str	r3, [sp, #52]	; 0x34
 8020910:	0e1b      	lsrs	r3, r3, #24
 8020912:	9314      	str	r3, [sp, #80]	; 0x50
 8020914:	b280      	uxth	r0, r0
 8020916:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020918:	b289      	uxth	r1, r1
 802091a:	fb00 f901 	mul.w	r9, r0, r1
 802091e:	0100      	lsls	r0, r0, #4
 8020920:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020924:	eba0 0809 	sub.w	r8, r0, r9
 8020928:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802092c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802092e:	b289      	uxth	r1, r1
 8020930:	fa1f f888 	uxth.w	r8, r8
 8020934:	1a5b      	subs	r3, r3, r1
 8020936:	fb08 f000 	mul.w	r0, r8, r0
 802093a:	b29b      	uxth	r3, r3
 802093c:	fb03 000e 	mla	r0, r3, lr, r0
 8020940:	fb01 0005 	mla	r0, r1, r5, r0
 8020944:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020946:	fb09 0005 	mla	r0, r9, r5, r0
 802094a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802094e:	2800      	cmp	r0, #0
 8020950:	f000 80fa 	beq.w	8020b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020954:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020958:	d01b      	beq.n	8020992 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802095a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802095e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020962:	fb0e fa0a 	mul.w	sl, lr, sl
 8020966:	fb0e fe02 	mul.w	lr, lr, r2
 802096a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802096e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020972:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020976:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802097a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802097e:	4452      	add	r2, sl
 8020980:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020984:	0a12      	lsrs	r2, r2, #8
 8020986:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802098a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802098e:	ea42 020c 	orr.w	r2, r2, ip
 8020992:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020994:	2dff      	cmp	r5, #255	; 0xff
 8020996:	d021      	beq.n	80209dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020998:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802099a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802099e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80209a0:	fb05 fb0b 	mul.w	fp, r5, fp
 80209a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80209a6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80209aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80209ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80209b4:	fb05 fa0a 	mul.w	sl, r5, sl
 80209b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80209c0:	44de      	add	lr, fp
 80209c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209d6:	ea4e 050a 	orr.w	r5, lr, sl
 80209da:	950c      	str	r5, [sp, #48]	; 0x30
 80209dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80209de:	2dff      	cmp	r5, #255	; 0xff
 80209e0:	d021      	beq.n	8020a26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80209e2:	9d08      	ldr	r5, [sp, #32]
 80209e4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80209e8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80209ea:	fb05 fb0b 	mul.w	fp, r5, fp
 80209ee:	9d08      	ldr	r5, [sp, #32]
 80209f0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80209f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80209f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80209fe:	fb05 fa0a 	mul.w	sl, r5, sl
 8020a02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a06:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a0a:	44de      	add	lr, fp
 8020a0c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a20:	ea4e 050a 	orr.w	r5, lr, sl
 8020a24:	9508      	str	r5, [sp, #32]
 8020a26:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020a28:	2dff      	cmp	r5, #255	; 0xff
 8020a2a:	d021      	beq.n	8020a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8020a2c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020a2e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020a32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020a34:	fb05 fb0b 	mul.w	fp, r5, fp
 8020a38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020a3a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020a3e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020a40:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a44:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020a48:	fb05 fa0a 	mul.w	sl, r5, sl
 8020a4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a50:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a54:	44de      	add	lr, fp
 8020a56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a6a:	ea4e 050a 	orr.w	r5, lr, sl
 8020a6e:	950d      	str	r5, [sp, #52]	; 0x34
 8020a70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020a72:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020a76:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020a7a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020a7e:	9d08      	ldr	r5, [sp, #32]
 8020a80:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a84:	fb03 cc0e 	mla	ip, r3, lr, ip
 8020a88:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8020a8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020a8e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020a92:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8020a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020a98:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020a9c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020aa0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020aa2:	fb08 f80e 	mul.w	r8, r8, lr
 8020aa6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020aaa:	fb03 8202 	mla	r2, r3, r2, r8
 8020aae:	9b08      	ldr	r3, [sp, #32]
 8020ab0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ab4:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8020ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020aba:	fb01 220a 	mla	r2, r1, sl, r2
 8020abe:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8020ac2:	883b      	ldrh	r3, [r7, #0]
 8020ac4:	fb09 2901 	mla	r9, r9, r1, r2
 8020ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020aca:	1219      	asrs	r1, r3, #8
 8020acc:	4342      	muls	r2, r0
 8020ace:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020ad2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020ad6:	1c50      	adds	r0, r2, #1
 8020ad8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020adc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020ae0:	ea4c 0c09 	orr.w	ip, ip, r9
 8020ae4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020ae8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020aec:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8020af0:	fa5f fc8c 	uxtb.w	ip, ip
 8020af4:	fb12 f205 	smulbb	r2, r2, r5
 8020af8:	b2c0      	uxtb	r0, r0
 8020afa:	fb1c fc05 	smulbb	ip, ip, r5
 8020afe:	fb01 2100 	mla	r1, r1, r0, r2
 8020b02:	10da      	asrs	r2, r3, #3
 8020b04:	fb1e fe05 	smulbb	lr, lr, r5
 8020b08:	00db      	lsls	r3, r3, #3
 8020b0a:	b289      	uxth	r1, r1
 8020b0c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020b10:	b2db      	uxtb	r3, r3
 8020b12:	fb02 e200 	mla	r2, r2, r0, lr
 8020b16:	fb03 c300 	mla	r3, r3, r0, ip
 8020b1a:	b292      	uxth	r2, r2
 8020b1c:	fa1f fc83 	uxth.w	ip, r3
 8020b20:	1c4b      	adds	r3, r1, #1
 8020b22:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020b26:	f10c 0301 	add.w	r3, ip, #1
 8020b2a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020b2e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020b32:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020b36:	430b      	orrs	r3, r1
 8020b38:	1c51      	adds	r1, r2, #1
 8020b3a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020b3e:	0952      	lsrs	r2, r2, #5
 8020b40:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020b44:	4313      	orrs	r3, r2
 8020b46:	803b      	strh	r3, [r7, #0]
 8020b48:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020b4a:	3702      	adds	r7, #2
 8020b4c:	441c      	add	r4, r3
 8020b4e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020b50:	441e      	add	r6, r3
 8020b52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020b54:	3b01      	subs	r3, #1
 8020b56:	9318      	str	r3, [sp, #96]	; 0x60
 8020b58:	e698      	b.n	802088c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020b5a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020b5c:	441c      	add	r4, r3
 8020b5e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020b60:	441e      	add	r6, r3
 8020b62:	9b07      	ldr	r3, [sp, #28]
 8020b64:	3b01      	subs	r3, #1
 8020b66:	9307      	str	r3, [sp, #28]
 8020b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b6a:	3302      	adds	r3, #2
 8020b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8020b6e:	e66d      	b.n	802084c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020b70:	d023      	beq.n	8020bba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8020b72:	9b07      	ldr	r3, [sp, #28]
 8020b74:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8020b76:	3b01      	subs	r3, #1
 8020b78:	fb00 4003 	mla	r0, r0, r3, r4
 8020b7c:	1400      	asrs	r0, r0, #16
 8020b7e:	f53f ae82 	bmi.w	8020886 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020b82:	3901      	subs	r1, #1
 8020b84:	4288      	cmp	r0, r1
 8020b86:	f6bf ae7e 	bge.w	8020886 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020b8a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8020b8c:	fb01 6303 	mla	r3, r1, r3, r6
 8020b90:	141b      	asrs	r3, r3, #16
 8020b92:	f53f ae78 	bmi.w	8020886 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020b96:	3a01      	subs	r2, #1
 8020b98:	4293      	cmp	r3, r2
 8020b9a:	f6bf ae74 	bge.w	8020886 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020b9e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020ba2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8020ba6:	f1bb 0f00 	cmp.w	fp, #0
 8020baa:	dc6c      	bgt.n	8020c86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8020bac:	9b07      	ldr	r3, [sp, #28]
 8020bae:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020bb4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8020bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8020bba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	f340 81b3 	ble.w	8020f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8020bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020bc6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020bc8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020bcc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020bd0:	eef0 6a48 	vmov.f32	s13, s16
 8020bd4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020bd8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020bdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020be0:	ee16 4a90 	vmov	r4, s13
 8020be4:	eef0 6a68 	vmov.f32	s13, s17
 8020be8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bec:	ee16 6a90 	vmov	r6, s13
 8020bf0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020bf4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020bf8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020bfc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020c00:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020c04:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020c08:	ee18 2a10 	vmov	r2, s16
 8020c0c:	eeb0 8a47 	vmov.f32	s16, s14
 8020c10:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c14:	ee18 2a90 	vmov	r2, s17
 8020c18:	9331      	str	r3, [sp, #196]	; 0xc4
 8020c1a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020c1c:	eef0 8a67 	vmov.f32	s17, s15
 8020c20:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c24:	9332      	str	r3, [sp, #200]	; 0xc8
 8020c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020c28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020c2a:	3b01      	subs	r3, #1
 8020c2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8020c2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020c30:	bf08      	it	eq
 8020c32:	4613      	moveq	r3, r2
 8020c34:	9307      	str	r3, [sp, #28]
 8020c36:	e5fb      	b.n	8020830 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020c38:	2900      	cmp	r1, #0
 8020c3a:	f43f ae6b 	beq.w	8020914 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8020c3e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8020c42:	9308      	str	r3, [sp, #32]
 8020c44:	0e1b      	lsrs	r3, r3, #24
 8020c46:	9311      	str	r3, [sp, #68]	; 0x44
 8020c48:	e664      	b.n	8020914 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8020c4a:	f112 0801 	adds.w	r8, r2, #1
 8020c4e:	f53f af7b 	bmi.w	8020b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020c52:	4543      	cmp	r3, r8
 8020c54:	f6ff af78 	blt.w	8020b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020c58:	f11c 0801 	adds.w	r8, ip, #1
 8020c5c:	f53f af74 	bmi.w	8020b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020c60:	45c6      	cmp	lr, r8
 8020c62:	f6ff af71 	blt.w	8020b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020c66:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8020c68:	b21b      	sxth	r3, r3
 8020c6a:	9201      	str	r2, [sp, #4]
 8020c6c:	fa0f f28e 	sxth.w	r2, lr
 8020c70:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8020c74:	e9cd c002 	strd	ip, r0, [sp, #8]
 8020c78:	9200      	str	r2, [sp, #0]
 8020c7a:	4639      	mov	r1, r7
 8020c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020c7e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020c80:	f7ff fc48 	bl	8020514 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8020c84:	e760      	b.n	8020b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020c86:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020c88:	1427      	asrs	r7, r4, #16
 8020c8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020c8c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020c90:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c94:	1433      	asrs	r3, r6, #16
 8020c96:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020c9a:	fb01 7303 	mla	r3, r1, r3, r7
 8020c9e:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8020ca2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020ca6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020caa:	2a00      	cmp	r2, #0
 8020cac:	f000 8133 	beq.w	8020f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8020cb0:	687d      	ldr	r5, [r7, #4]
 8020cb2:	950e      	str	r5, [sp, #56]	; 0x38
 8020cb4:	0e2d      	lsrs	r5, r5, #24
 8020cb6:	9515      	str	r5, [sp, #84]	; 0x54
 8020cb8:	b178      	cbz	r0, 8020cda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020cba:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8020cbe:	3901      	subs	r1, #1
 8020cc0:	0089      	lsls	r1, r1, #2
 8020cc2:	3104      	adds	r1, #4
 8020cc4:	eb07 0e01 	add.w	lr, r7, r1
 8020cc8:	5879      	ldr	r1, [r7, r1]
 8020cca:	9109      	str	r1, [sp, #36]	; 0x24
 8020ccc:	0e09      	lsrs	r1, r1, #24
 8020cce:	9112      	str	r1, [sp, #72]	; 0x48
 8020cd0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8020cd4:	910f      	str	r1, [sp, #60]	; 0x3c
 8020cd6:	0e09      	lsrs	r1, r1, #24
 8020cd8:	9116      	str	r1, [sp, #88]	; 0x58
 8020cda:	b292      	uxth	r2, r2
 8020cdc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020cde:	b280      	uxth	r0, r0
 8020ce0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020ce2:	fb02 f800 	mul.w	r8, r2, r0
 8020ce6:	0112      	lsls	r2, r2, #4
 8020ce8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020cec:	eba2 0e08 	sub.w	lr, r2, r8
 8020cf0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020cf4:	b280      	uxth	r0, r0
 8020cf6:	fa1f fe8e 	uxth.w	lr, lr
 8020cfa:	1a12      	subs	r2, r2, r0
 8020cfc:	fb0e f101 	mul.w	r1, lr, r1
 8020d00:	b292      	uxth	r2, r2
 8020d02:	fb02 110c 	mla	r1, r2, ip, r1
 8020d06:	fb00 1105 	mla	r1, r0, r5, r1
 8020d0a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020d0c:	fb08 1105 	mla	r1, r8, r5, r1
 8020d10:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020d14:	2900      	cmp	r1, #0
 8020d16:	f000 80f5 	beq.w	8020f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020d1a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020d1e:	d019      	beq.n	8020d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8020d20:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020d24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d28:	fb0c fa0a 	mul.w	sl, ip, sl
 8020d2c:	fb0c fc03 	mul.w	ip, ip, r3
 8020d30:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020d34:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020d38:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020d3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d40:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020d44:	4453      	add	r3, sl
 8020d46:	0a3f      	lsrs	r7, r7, #8
 8020d48:	0a1b      	lsrs	r3, r3, #8
 8020d4a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020d4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d52:	433b      	orrs	r3, r7
 8020d54:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020d56:	2dff      	cmp	r5, #255	; 0xff
 8020d58:	d020      	beq.n	8020d9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8020d5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020d5c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020d60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020d62:	436f      	muls	r7, r5
 8020d64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020d66:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d6a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020d6e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020d70:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d78:	fb05 fa0a 	mul.w	sl, r5, sl
 8020d7c:	44bc      	add	ip, r7
 8020d7e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020d82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d86:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d96:	ea4c 050a 	orr.w	r5, ip, sl
 8020d9a:	950e      	str	r5, [sp, #56]	; 0x38
 8020d9c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020d9e:	2dff      	cmp	r5, #255	; 0xff
 8020da0:	d020      	beq.n	8020de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8020da2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020da4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020da8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020daa:	436f      	muls	r7, r5
 8020dac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020dae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020db2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020db6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020db8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020dbc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dc0:	fb05 fa0a 	mul.w	sl, r5, sl
 8020dc4:	44bc      	add	ip, r7
 8020dc6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020dca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020dd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020dda:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020dde:	ea4c 050a 	orr.w	r5, ip, sl
 8020de2:	9509      	str	r5, [sp, #36]	; 0x24
 8020de4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020de6:	2dff      	cmp	r5, #255	; 0xff
 8020de8:	d020      	beq.n	8020e2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8020dea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020dec:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020df0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020df2:	436f      	muls	r7, r5
 8020df4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020df6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020dfa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020dfe:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020e00:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020e04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e08:	fb05 fa0a 	mul.w	sl, r5, sl
 8020e0c:	44bc      	add	ip, r7
 8020e0e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020e12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e26:	ea4c 050a 	orr.w	r5, ip, sl
 8020e2a:	950f      	str	r5, [sp, #60]	; 0x3c
 8020e2c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020e2e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020e32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e36:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020e3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020e3c:	fb0e f707 	mul.w	r7, lr, r7
 8020e40:	fb02 770c 	mla	r7, r2, ip, r7
 8020e44:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020e48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020e4a:	fb00 770c 	mla	r7, r0, ip, r7
 8020e4e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020e52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020e54:	fb08 770c 	mla	r7, r8, ip, r7
 8020e58:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8020e5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020e5e:	fb0e fe0c 	mul.w	lr, lr, ip
 8020e62:	0a3f      	lsrs	r7, r7, #8
 8020e64:	fb02 e303 	mla	r3, r2, r3, lr
 8020e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e6a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020e6e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e74:	fb00 330a 	mla	r3, r0, sl, r3
 8020e78:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020e7c:	f8b9 0000 	ldrh.w	r0, [r9]
 8020e80:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e86:	1202      	asrs	r2, r0, #8
 8020e88:	4359      	muls	r1, r3
 8020e8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e8e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020e92:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020e96:	1c4b      	adds	r3, r1, #1
 8020e98:	ea47 070c 	orr.w	r7, r7, ip
 8020e9c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020ea0:	0c3b      	lsrs	r3, r7, #16
 8020ea2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020ea6:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020eaa:	b2ff      	uxtb	r7, r7
 8020eac:	fb13 f305 	smulbb	r3, r3, r5
 8020eb0:	b2c9      	uxtb	r1, r1
 8020eb2:	fb17 f705 	smulbb	r7, r7, r5
 8020eb6:	fb02 3201 	mla	r2, r2, r1, r3
 8020eba:	10c3      	asrs	r3, r0, #3
 8020ebc:	fb1c fc05 	smulbb	ip, ip, r5
 8020ec0:	00c0      	lsls	r0, r0, #3
 8020ec2:	b292      	uxth	r2, r2
 8020ec4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020ec8:	b2c0      	uxtb	r0, r0
 8020eca:	fb03 c301 	mla	r3, r3, r1, ip
 8020ece:	fb00 7001 	mla	r0, r0, r1, r7
 8020ed2:	1c51      	adds	r1, r2, #1
 8020ed4:	b29b      	uxth	r3, r3
 8020ed6:	b280      	uxth	r0, r0
 8020ed8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020edc:	f100 0c01 	add.w	ip, r0, #1
 8020ee0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020ee4:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8020ee8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020eec:	ea4c 0202 	orr.w	r2, ip, r2
 8020ef0:	f103 0c01 	add.w	ip, r3, #1
 8020ef4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020ef8:	095b      	lsrs	r3, r3, #5
 8020efa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020efe:	431a      	orrs	r2, r3
 8020f00:	f8a9 2000 	strh.w	r2, [r9]
 8020f04:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020f06:	f109 0902 	add.w	r9, r9, #2
 8020f0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f0e:	441c      	add	r4, r3
 8020f10:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020f12:	441e      	add	r6, r3
 8020f14:	e647      	b.n	8020ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8020f16:	2800      	cmp	r0, #0
 8020f18:	f43f aedf 	beq.w	8020cda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020f1c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8020f20:	9109      	str	r1, [sp, #36]	; 0x24
 8020f22:	0e09      	lsrs	r1, r1, #24
 8020f24:	9112      	str	r1, [sp, #72]	; 0x48
 8020f26:	e6d8      	b.n	8020cda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020f28:	b01d      	add	sp, #116	; 0x74
 8020f2a:	ecbd 8b08 	vpop	{d8-d11}
 8020f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020f34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8020f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f38:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8020f3c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020f40:	fb04 5603 	mla	r6, r4, r3, r5
 8020f44:	2c00      	cmp	r4, #0
 8020f46:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8020f4a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8020f4e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8020f52:	db37      	blt.n	8020fc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8020f54:	45a6      	cmp	lr, r4
 8020f56:	dd35      	ble.n	8020fc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8020f58:	2d00      	cmp	r5, #0
 8020f5a:	db31      	blt.n	8020fc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020f5c:	42ab      	cmp	r3, r5
 8020f5e:	dd2f      	ble.n	8020fc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020f60:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8020f64:	1c6e      	adds	r6, r5, #1
 8020f66:	d430      	bmi.n	8020fca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8020f68:	42b3      	cmp	r3, r6
 8020f6a:	dd2e      	ble.n	8020fca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8020f6c:	b378      	cbz	r0, 8020fce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8020f6e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8020f72:	3401      	adds	r4, #1
 8020f74:	d42f      	bmi.n	8020fd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8020f76:	45a6      	cmp	lr, r4
 8020f78:	dd2d      	ble.n	8020fd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8020f7a:	b37f      	cbz	r7, 8020fdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8020f7c:	2d00      	cmp	r5, #0
 8020f7e:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 8020f82:	db26      	blt.n	8020fd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8020f84:	42ab      	cmp	r3, r5
 8020f86:	dd24      	ble.n	8020fd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8020f88:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020f8c:	3501      	adds	r5, #1
 8020f8e:	d428      	bmi.n	8020fe2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8020f90:	42ab      	cmp	r3, r5
 8020f92:	dd26      	ble.n	8020fe2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8020f94:	b338      	cbz	r0, 8020fe6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8020f96:	f8de 3004 	ldr.w	r3, [lr, #4]
 8020f9a:	280f      	cmp	r0, #15
 8020f9c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020fa0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020fa4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020fa8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020fac:	d801      	bhi.n	8020fb2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8020fae:	2f0f      	cmp	r7, #15
 8020fb0:	d91b      	bls.n	8020fea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8020fb2:	4b87      	ldr	r3, [pc, #540]	; (80211d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8020fb4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8020fb8:	4a86      	ldr	r2, [pc, #536]	; (80211d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8020fba:	4887      	ldr	r0, [pc, #540]	; (80211d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8020fbc:	f004 f9f4 	bl	80253a8 <__assert_func>
 8020fc0:	2200      	movs	r2, #0
 8020fc2:	e7cf      	b.n	8020f64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8020fc4:	2600      	movs	r6, #0
 8020fc6:	4632      	mov	r2, r6
 8020fc8:	e7d3      	b.n	8020f72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8020fca:	2600      	movs	r6, #0
 8020fcc:	e7d1      	b.n	8020f72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8020fce:	4606      	mov	r6, r0
 8020fd0:	e7cf      	b.n	8020f72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8020fd2:	2400      	movs	r4, #0
 8020fd4:	e7da      	b.n	8020f8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8020fd6:	2300      	movs	r3, #0
 8020fd8:	461c      	mov	r4, r3
 8020fda:	e7de      	b.n	8020f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8020fdc:	463b      	mov	r3, r7
 8020fde:	463c      	mov	r4, r7
 8020fe0:	e7db      	b.n	8020f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	e7d9      	b.n	8020f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8020fe6:	4603      	mov	r3, r0
 8020fe8:	e7d7      	b.n	8020f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8020fea:	b280      	uxth	r0, r0
 8020fec:	b2bf      	uxth	r7, r7
 8020fee:	fb07 fe00 	mul.w	lr, r7, r0
 8020ff2:	0100      	lsls	r0, r0, #4
 8020ff4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020ff8:	eba0 0c0e 	sub.w	ip, r0, lr
 8020ffc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8021000:	b2bf      	uxth	r7, r7
 8021002:	fa1f fc8c 	uxth.w	ip, ip
 8021006:	1bed      	subs	r5, r5, r7
 8021008:	fb0c f00a 	mul.w	r0, ip, sl
 802100c:	b2ad      	uxth	r5, r5
 802100e:	fb0b 0005 	mla	r0, fp, r5, r0
 8021012:	fb07 0009 	mla	r0, r7, r9, r0
 8021016:	fb0e 0008 	mla	r0, lr, r8, r0
 802101a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802101e:	9001      	str	r0, [sp, #4]
 8021020:	2800      	cmp	r0, #0
 8021022:	f000 80d1 	beq.w	80211c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8021026:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802102a:	d018      	beq.n	802105e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 802102c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021030:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021034:	fb0b f000 	mul.w	r0, fp, r0
 8021038:	fb0b fb02 	mul.w	fp, fp, r2
 802103c:	0a02      	lsrs	r2, r0, #8
 802103e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021042:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021046:	4402      	add	r2, r0
 8021048:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802104c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021050:	0a12      	lsrs	r2, r2, #8
 8021052:	0a00      	lsrs	r0, r0, #8
 8021054:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021058:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802105c:	4302      	orrs	r2, r0
 802105e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021062:	d01a      	beq.n	802109a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8021064:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021068:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802106c:	fb0a f000 	mul.w	r0, sl, r0
 8021070:	fb0a fa06 	mul.w	sl, sl, r6
 8021074:	0a06      	lsrs	r6, r0, #8
 8021076:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802107a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802107e:	4406      	add	r6, r0
 8021080:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021084:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021088:	0a36      	lsrs	r6, r6, #8
 802108a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802108e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021092:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021096:	ea46 060a 	orr.w	r6, r6, sl
 802109a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802109e:	d01b      	beq.n	80210d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 80210a0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80210a4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80210a8:	fb09 fa0a 	mul.w	sl, r9, sl
 80210ac:	fb09 f004 	mul.w	r0, r9, r4
 80210b0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80210b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80210b8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80210bc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80210c0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80210c4:	4454      	add	r4, sl
 80210c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80210ca:	0a24      	lsrs	r4, r4, #8
 80210cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80210d0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80210d4:	ea44 0409 	orr.w	r4, r4, r9
 80210d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80210dc:	d01b      	beq.n	8021116 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 80210de:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80210e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210e6:	fb08 f909 	mul.w	r9, r8, r9
 80210ea:	fb08 f003 	mul.w	r0, r8, r3
 80210ee:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80210f2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80210f6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80210fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80210fe:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021102:	444b      	add	r3, r9
 8021104:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021108:	0a1b      	lsrs	r3, r3, #8
 802110a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802110e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021112:	ea43 0308 	orr.w	r3, r3, r8
 8021116:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802111a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802111e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8021122:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021126:	fb0c f808 	mul.w	r8, ip, r8
 802112a:	8808      	ldrh	r0, [r1, #0]
 802112c:	fb0c f606 	mul.w	r6, ip, r6
 8021130:	fb05 8909 	mla	r9, r5, r9, r8
 8021134:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8021138:	fb05 6502 	mla	r5, r5, r2, r6
 802113c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021140:	fb07 9908 	mla	r9, r7, r8, r9
 8021144:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8021148:	fb07 5704 	mla	r7, r7, r4, r5
 802114c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021150:	fb0e 9808 	mla	r8, lr, r8, r9
 8021154:	10c4      	asrs	r4, r0, #3
 8021156:	fb0e 7e03 	mla	lr, lr, r3, r7
 802115a:	9b01      	ldr	r3, [sp, #4]
 802115c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021160:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021164:	43da      	mvns	r2, r3
 8021166:	1203      	asrs	r3, r0, #8
 8021168:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802116c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8021170:	b2d2      	uxtb	r2, r2
 8021172:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021176:	00c0      	lsls	r0, r0, #3
 8021178:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802117c:	4353      	muls	r3, r2
 802117e:	b2c0      	uxtb	r0, r0
 8021180:	ea48 0e0e 	orr.w	lr, r8, lr
 8021184:	4354      	muls	r4, r2
 8021186:	4350      	muls	r0, r2
 8021188:	1c5a      	adds	r2, r3, #1
 802118a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802118e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8021192:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021196:	1c62      	adds	r2, r4, #1
 8021198:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802119c:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80211a0:	021b      	lsls	r3, r3, #8
 80211a2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80211a6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80211aa:	00d2      	lsls	r2, r2, #3
 80211ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80211b0:	4313      	orrs	r3, r2
 80211b2:	1c42      	adds	r2, r0, #1
 80211b4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80211b8:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 80211bc:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 80211c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80211c4:	f8a1 e000 	strh.w	lr, [r1]
 80211c8:	b003      	add	sp, #12
 80211ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211ce:	bf00      	nop
 80211d0:	0802c056 	.word	0x0802c056
 80211d4:	0802c626 	.word	0x0802c626
 80211d8:	0802c0da 	.word	0x0802c0da

080211dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211e0:	ed2d 8b08 	vpush	{d8-d11}
 80211e4:	b09b      	sub	sp, #108	; 0x6c
 80211e6:	eeb0 aa40 	vmov.f32	s20, s0
 80211ea:	eef0 9a60 	vmov.f32	s19, s1
 80211ee:	9218      	str	r2, [sp, #96]	; 0x60
 80211f0:	eeb0 9a41 	vmov.f32	s18, s2
 80211f4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80211f6:	eeb0 8a62 	vmov.f32	s16, s5
 80211fa:	9019      	str	r0, [sp, #100]	; 0x64
 80211fc:	eef0 8a43 	vmov.f32	s17, s6
 8021200:	6850      	ldr	r0, [r2, #4]
 8021202:	eef0 ba44 	vmov.f32	s23, s8
 8021206:	9116      	str	r1, [sp, #88]	; 0x58
 8021208:	eeb0 ba64 	vmov.f32	s22, s9
 802120c:	9307      	str	r3, [sp, #28]
 802120e:	eef0 aa45 	vmov.f32	s21, s10
 8021212:	6812      	ldr	r2, [r2, #0]
 8021214:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021218:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802121c:	fb00 1303 	mla	r3, r0, r3, r1
 8021220:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021224:	930a      	str	r3, [sp, #40]	; 0x28
 8021226:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021228:	681b      	ldr	r3, [r3, #0]
 802122a:	930f      	str	r3, [sp, #60]	; 0x3c
 802122c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802122e:	2b00      	cmp	r3, #0
 8021230:	dc03      	bgt.n	802123a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021232:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021234:	2b00      	cmp	r3, #0
 8021236:	f340 8387 	ble.w	8021948 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 802123a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802123c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021240:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021244:	1e48      	subs	r0, r1, #1
 8021246:	1e57      	subs	r7, r2, #1
 8021248:	9b07      	ldr	r3, [sp, #28]
 802124a:	2b00      	cmp	r3, #0
 802124c:	f340 8166 	ble.w	802151c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8021250:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021254:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021258:	d406      	bmi.n	8021268 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802125a:	4584      	cmp	ip, r0
 802125c:	da04      	bge.n	8021268 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802125e:	2b00      	cmp	r3, #0
 8021260:	db02      	blt.n	8021268 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021262:	42bb      	cmp	r3, r7
 8021264:	f2c0 815b 	blt.w	802151e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021268:	f11c 0c01 	adds.w	ip, ip, #1
 802126c:	f100 814b 	bmi.w	8021506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8021270:	4561      	cmp	r1, ip
 8021272:	f2c0 8148 	blt.w	8021506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8021276:	3301      	adds	r3, #1
 8021278:	f100 8145 	bmi.w	8021506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802127c:	429a      	cmp	r2, r3
 802127e:	f2c0 8142 	blt.w	8021506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8021282:	9b07      	ldr	r3, [sp, #28]
 8021284:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021286:	9317      	str	r3, [sp, #92]	; 0x5c
 8021288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802128a:	2b00      	cmp	r3, #0
 802128c:	f340 8165 	ble.w	802155a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8021290:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021292:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021296:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021298:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802129c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80212a0:	1422      	asrs	r2, r4, #16
 80212a2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80212a6:	689b      	ldr	r3, [r3, #8]
 80212a8:	f100 81d5 	bmi.w	8021656 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80212ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80212b0:	4542      	cmp	r2, r8
 80212b2:	f280 81d0 	bge.w	8021656 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80212b6:	f1bc 0f00 	cmp.w	ip, #0
 80212ba:	f2c0 81cc 	blt.w	8021656 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80212be:	f10e 38ff 	add.w	r8, lr, #4294967295
 80212c2:	45c4      	cmp	ip, r8
 80212c4:	f280 81c7 	bge.w	8021656 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80212c8:	b21b      	sxth	r3, r3
 80212ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80212cc:	fb0c 2203 	mla	r2, ip, r3, r2
 80212d0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80212d4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80212d8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80212dc:	2900      	cmp	r1, #0
 80212de:	f000 8182 	beq.w	80215e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80212e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80212e6:	950b      	str	r5, [sp, #44]	; 0x2c
 80212e8:	0e2d      	lsrs	r5, r5, #24
 80212ea:	9512      	str	r5, [sp, #72]	; 0x48
 80212ec:	b180      	cbz	r0, 8021310 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80212ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80212f2:	3b01      	subs	r3, #1
 80212f4:	009b      	lsls	r3, r3, #2
 80212f6:	3304      	adds	r3, #4
 80212f8:	eb08 0c03 	add.w	ip, r8, r3
 80212fc:	f858 3003 	ldr.w	r3, [r8, r3]
 8021300:	9308      	str	r3, [sp, #32]
 8021302:	0e1b      	lsrs	r3, r3, #24
 8021304:	9310      	str	r3, [sp, #64]	; 0x40
 8021306:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802130a:	930c      	str	r3, [sp, #48]	; 0x30
 802130c:	0e1b      	lsrs	r3, r3, #24
 802130e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021310:	b289      	uxth	r1, r1
 8021312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021314:	b280      	uxth	r0, r0
 8021316:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021318:	fb01 f900 	mul.w	r9, r1, r0
 802131c:	0109      	lsls	r1, r1, #4
 802131e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021322:	eba1 0809 	sub.w	r8, r1, r9
 8021326:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802132a:	b280      	uxth	r0, r0
 802132c:	fa1f f888 	uxth.w	r8, r8
 8021330:	1a09      	subs	r1, r1, r0
 8021332:	fb08 f303 	mul.w	r3, r8, r3
 8021336:	b289      	uxth	r1, r1
 8021338:	fb01 330e 	mla	r3, r1, lr, r3
 802133c:	fb00 3305 	mla	r3, r0, r5, r3
 8021340:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021342:	fb09 3305 	mla	r3, r9, r5, r3
 8021346:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802134a:	2b00      	cmp	r3, #0
 802134c:	f000 80d2 	beq.w	80214f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021350:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021354:	d01b      	beq.n	802138e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8021356:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802135a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802135e:	fb0e fa0a 	mul.w	sl, lr, sl
 8021362:	fb0e fe02 	mul.w	lr, lr, r2
 8021366:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802136a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802136e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021372:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021376:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802137a:	4452      	add	r2, sl
 802137c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021380:	0a12      	lsrs	r2, r2, #8
 8021382:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021386:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802138a:	ea42 020c 	orr.w	r2, r2, ip
 802138e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021390:	2dff      	cmp	r5, #255	; 0xff
 8021392:	d021      	beq.n	80213d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8021394:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021396:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802139a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802139c:	fb05 fb0b 	mul.w	fp, r5, fp
 80213a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80213a2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80213a6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80213a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80213ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80213b0:	fb05 fa0a 	mul.w	sl, r5, sl
 80213b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80213bc:	44de      	add	lr, fp
 80213be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80213c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213d2:	ea4e 050a 	orr.w	r5, lr, sl
 80213d6:	950b      	str	r5, [sp, #44]	; 0x2c
 80213d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80213da:	2dff      	cmp	r5, #255	; 0xff
 80213dc:	d021      	beq.n	8021422 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80213de:	9d08      	ldr	r5, [sp, #32]
 80213e0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80213e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80213e6:	fb05 fb0b 	mul.w	fp, r5, fp
 80213ea:	9d08      	ldr	r5, [sp, #32]
 80213ec:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80213f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80213f2:	fb05 fa0e 	mul.w	sl, r5, lr
 80213f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80213fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80213fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021402:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021406:	44de      	add	lr, fp
 8021408:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802140c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021410:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021414:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021418:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802141c:	ea4e 050a 	orr.w	r5, lr, sl
 8021420:	9508      	str	r5, [sp, #32]
 8021422:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021424:	2dff      	cmp	r5, #255	; 0xff
 8021426:	d021      	beq.n	802146c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8021428:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802142a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802142e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021430:	fb05 fb0b 	mul.w	fp, r5, fp
 8021434:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021436:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802143a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802143c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021440:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021444:	fb05 fa0a 	mul.w	sl, r5, sl
 8021448:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802144c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021450:	44de      	add	lr, fp
 8021452:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021456:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802145a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802145e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021462:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021466:	ea4e 050a 	orr.w	r5, lr, sl
 802146a:	950c      	str	r5, [sp, #48]	; 0x30
 802146c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802146e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021472:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021476:	2bff      	cmp	r3, #255	; 0xff
 8021478:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802147c:	9d08      	ldr	r5, [sp, #32]
 802147e:	fb08 fc0c 	mul.w	ip, r8, ip
 8021482:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021486:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802148a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802148c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021490:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021494:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021496:	fb09 cc0e 	mla	ip, r9, lr, ip
 802149a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802149e:	fb08 f80e 	mul.w	r8, r8, lr
 80214a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214a6:	fb01 8202 	mla	r2, r1, r2, r8
 80214aa:	9908      	ldr	r1, [sp, #32]
 80214ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214b0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80214b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80214b6:	fb00 220a 	mla	r2, r0, sl, r2
 80214ba:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80214be:	fb09 2900 	mla	r9, r9, r0, r2
 80214c2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80214c6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80214ca:	ea4c 0c09 	orr.w	ip, ip, r9
 80214ce:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80214d2:	f040 8091 	bne.w	80215f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80214d6:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80214da:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80214de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214e2:	f022 0207 	bic.w	r2, r2, #7
 80214e6:	431a      	orrs	r2, r3
 80214e8:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80214ec:	ea4c 0c02 	orr.w	ip, ip, r2
 80214f0:	f8a7 c000 	strh.w	ip, [r7]
 80214f4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80214f6:	3702      	adds	r7, #2
 80214f8:	441c      	add	r4, r3
 80214fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80214fc:	441e      	add	r6, r3
 80214fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021500:	3b01      	subs	r3, #1
 8021502:	9317      	str	r3, [sp, #92]	; 0x5c
 8021504:	e6c0      	b.n	8021288 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8021506:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021508:	441c      	add	r4, r3
 802150a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802150c:	441e      	add	r6, r3
 802150e:	9b07      	ldr	r3, [sp, #28]
 8021510:	3b01      	subs	r3, #1
 8021512:	9307      	str	r3, [sp, #28]
 8021514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021516:	3302      	adds	r3, #2
 8021518:	930a      	str	r3, [sp, #40]	; 0x28
 802151a:	e695      	b.n	8021248 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802151c:	d024      	beq.n	8021568 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802151e:	9b07      	ldr	r3, [sp, #28]
 8021520:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8021522:	3b01      	subs	r3, #1
 8021524:	fb00 4003 	mla	r0, r0, r3, r4
 8021528:	1400      	asrs	r0, r0, #16
 802152a:	f53f aeaa 	bmi.w	8021282 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802152e:	3901      	subs	r1, #1
 8021530:	4288      	cmp	r0, r1
 8021532:	f6bf aea6 	bge.w	8021282 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021536:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8021538:	fb01 6303 	mla	r3, r1, r3, r6
 802153c:	141b      	asrs	r3, r3, #16
 802153e:	f53f aea0 	bmi.w	8021282 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021542:	3a01      	subs	r2, #1
 8021544:	4293      	cmp	r3, r2
 8021546:	f6bf ae9c 	bge.w	8021282 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802154a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802154e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8021552:	f1bb 0f00 	cmp.w	fp, #0
 8021556:	f300 809a 	bgt.w	802168e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 802155a:	9b07      	ldr	r3, [sp, #28]
 802155c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021562:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021566:	930a      	str	r3, [sp, #40]	; 0x28
 8021568:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802156a:	2b00      	cmp	r3, #0
 802156c:	f340 81ec 	ble.w	8021948 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8021570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021574:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021576:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802157a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802157e:	eef0 6a48 	vmov.f32	s13, s16
 8021582:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021586:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802158a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802158e:	ee16 4a90 	vmov	r4, s13
 8021592:	eef0 6a68 	vmov.f32	s13, s17
 8021596:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802159a:	ee16 6a90 	vmov	r6, s13
 802159e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80215a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80215a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80215aa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80215ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80215b2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80215b6:	ee18 2a10 	vmov	r2, s16
 80215ba:	eeb0 8a47 	vmov.f32	s16, s14
 80215be:	fb92 f3f3 	sdiv	r3, r2, r3
 80215c2:	ee18 2a90 	vmov	r2, s17
 80215c6:	932f      	str	r3, [sp, #188]	; 0xbc
 80215c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80215ca:	eef0 8a67 	vmov.f32	s17, s15
 80215ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80215d2:	9330      	str	r3, [sp, #192]	; 0xc0
 80215d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80215d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80215d8:	3b01      	subs	r3, #1
 80215da:	9316      	str	r3, [sp, #88]	; 0x58
 80215dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80215de:	bf08      	it	eq
 80215e0:	4613      	moveq	r3, r2
 80215e2:	9307      	str	r3, [sp, #28]
 80215e4:	e622      	b.n	802122c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80215e6:	2800      	cmp	r0, #0
 80215e8:	f43f ae92 	beq.w	8021310 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80215ec:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80215f0:	9308      	str	r3, [sp, #32]
 80215f2:	0e1b      	lsrs	r3, r3, #24
 80215f4:	9310      	str	r3, [sp, #64]	; 0x40
 80215f6:	e68b      	b.n	8021310 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80215f8:	8839      	ldrh	r1, [r7, #0]
 80215fa:	43db      	mvns	r3, r3
 80215fc:	4dd5      	ldr	r5, [pc, #852]	; (8021954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 80215fe:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8021602:	fa5f f883 	uxtb.w	r8, r3
 8021606:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802160a:	10c8      	asrs	r0, r1, #3
 802160c:	00cb      	lsls	r3, r1, #3
 802160e:	fb0e fe08 	mul.w	lr, lr, r8
 8021612:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021616:	b2db      	uxtb	r3, r3
 8021618:	f10e 0101 	add.w	r1, lr, #1
 802161c:	fb00 f008 	mul.w	r0, r0, r8
 8021620:	fb03 f308 	mul.w	r3, r3, r8
 8021624:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8021628:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802162c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8021630:	f100 0e01 	add.w	lr, r0, #1
 8021634:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8021638:	b2c9      	uxtb	r1, r1
 802163a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802163e:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8021642:	00d2      	lsls	r2, r2, #3
 8021644:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021648:	430a      	orrs	r2, r1
 802164a:	1c59      	adds	r1, r3, #1
 802164c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021650:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021654:	e748      	b.n	80214e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021656:	f112 0801 	adds.w	r8, r2, #1
 802165a:	f53f af4b 	bmi.w	80214f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802165e:	4543      	cmp	r3, r8
 8021660:	f6ff af48 	blt.w	80214f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021664:	f11c 0801 	adds.w	r8, ip, #1
 8021668:	f53f af44 	bmi.w	80214f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802166c:	45c6      	cmp	lr, r8
 802166e:	f6ff af41 	blt.w	80214f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021672:	b21b      	sxth	r3, r3
 8021674:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021678:	fa0f f28e 	sxth.w	r2, lr
 802167c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021680:	9200      	str	r2, [sp, #0]
 8021682:	4639      	mov	r1, r7
 8021684:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021686:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021688:	f7ff fc54 	bl	8020f34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802168c:	e732      	b.n	80214f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802168e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021690:	1421      	asrs	r1, r4, #16
 8021692:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021694:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021698:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802169c:	1433      	asrs	r3, r6, #16
 802169e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80216a2:	fb07 1303 	mla	r3, r7, r3, r1
 80216a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80216a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80216ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80216b0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80216b4:	2a00      	cmp	r2, #0
 80216b6:	f000 8108 	beq.w	80218ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80216ba:	684d      	ldr	r5, [r1, #4]
 80216bc:	950d      	str	r5, [sp, #52]	; 0x34
 80216be:	0e2d      	lsrs	r5, r5, #24
 80216c0:	9514      	str	r5, [sp, #80]	; 0x50
 80216c2:	b178      	cbz	r0, 80216e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80216c4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80216c8:	3f01      	subs	r7, #1
 80216ca:	00bf      	lsls	r7, r7, #2
 80216cc:	3704      	adds	r7, #4
 80216ce:	eb01 0e07 	add.w	lr, r1, r7
 80216d2:	59c9      	ldr	r1, [r1, r7]
 80216d4:	9109      	str	r1, [sp, #36]	; 0x24
 80216d6:	0e09      	lsrs	r1, r1, #24
 80216d8:	9111      	str	r1, [sp, #68]	; 0x44
 80216da:	f8de 1004 	ldr.w	r1, [lr, #4]
 80216de:	910e      	str	r1, [sp, #56]	; 0x38
 80216e0:	0e09      	lsrs	r1, r1, #24
 80216e2:	9115      	str	r1, [sp, #84]	; 0x54
 80216e4:	b292      	uxth	r2, r2
 80216e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80216e8:	b280      	uxth	r0, r0
 80216ea:	fb02 f900 	mul.w	r9, r2, r0
 80216ee:	0112      	lsls	r2, r2, #4
 80216f0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80216f4:	eba2 0e09 	sub.w	lr, r2, r9
 80216f8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80216fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80216fe:	b280      	uxth	r0, r0
 8021700:	fa1f fe8e 	uxth.w	lr, lr
 8021704:	1a09      	subs	r1, r1, r0
 8021706:	fb0e f202 	mul.w	r2, lr, r2
 802170a:	b289      	uxth	r1, r1
 802170c:	fb01 220c 	mla	r2, r1, ip, r2
 8021710:	fb00 2205 	mla	r2, r0, r5, r2
 8021714:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021716:	fb09 2205 	mla	r2, r9, r5, r2
 802171a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802171e:	2a00      	cmp	r2, #0
 8021720:	f000 80ca 	beq.w	80218b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021724:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021728:	d019      	beq.n	802175e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802172a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802172e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021732:	fb0c fa0a 	mul.w	sl, ip, sl
 8021736:	fb0c fc03 	mul.w	ip, ip, r3
 802173a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802173e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021742:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021746:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802174a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802174e:	4453      	add	r3, sl
 8021750:	0a3f      	lsrs	r7, r7, #8
 8021752:	0a1b      	lsrs	r3, r3, #8
 8021754:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021758:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802175c:	433b      	orrs	r3, r7
 802175e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021760:	2dff      	cmp	r5, #255	; 0xff
 8021762:	d020      	beq.n	80217a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8021764:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021766:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802176a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802176c:	436f      	muls	r7, r5
 802176e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021770:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021774:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021778:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802177a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802177e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021782:	fb05 fa0a 	mul.w	sl, r5, sl
 8021786:	44bc      	add	ip, r7
 8021788:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802178c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021790:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021794:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021798:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802179c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217a0:	ea4c 050a 	orr.w	r5, ip, sl
 80217a4:	950d      	str	r5, [sp, #52]	; 0x34
 80217a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80217a8:	2dff      	cmp	r5, #255	; 0xff
 80217aa:	d020      	beq.n	80217ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 80217ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80217ae:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80217b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80217b4:	436f      	muls	r7, r5
 80217b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80217b8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80217bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80217be:	fb05 fa0c 	mul.w	sl, r5, ip
 80217c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80217c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80217ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80217ce:	44bc      	add	ip, r7
 80217d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80217d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80217d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80217dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80217e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217e8:	ea4c 050a 	orr.w	r5, ip, sl
 80217ec:	9509      	str	r5, [sp, #36]	; 0x24
 80217ee:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80217f0:	2dff      	cmp	r5, #255	; 0xff
 80217f2:	d020      	beq.n	8021836 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 80217f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80217f6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80217fa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80217fc:	436f      	muls	r7, r5
 80217fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021800:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021804:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021808:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802180a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802180e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021812:	fb05 fa0a 	mul.w	sl, r5, sl
 8021816:	44bc      	add	ip, r7
 8021818:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802181c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021820:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021824:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021828:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802182c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021830:	ea4c 050a 	orr.w	r5, ip, sl
 8021834:	950e      	str	r5, [sp, #56]	; 0x38
 8021836:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021838:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802183c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021840:	2aff      	cmp	r2, #255	; 0xff
 8021842:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021846:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021848:	fb0e f707 	mul.w	r7, lr, r7
 802184c:	fb01 770c 	mla	r7, r1, ip, r7
 8021850:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021854:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021856:	fb00 770c 	mla	r7, r0, ip, r7
 802185a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802185e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021860:	fb09 770c 	mla	r7, r9, ip, r7
 8021864:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021868:	fb0e fe0c 	mul.w	lr, lr, ip
 802186c:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8021870:	fb01 e303 	mla	r3, r1, r3, lr
 8021874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021876:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802187a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802187e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021880:	fb00 330a 	mla	r3, r0, sl, r3
 8021884:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021888:	fb09 3c0c 	mla	ip, r9, ip, r3
 802188c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021890:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021894:	ea47 070c 	orr.w	r7, r7, ip
 8021898:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802189c:	d11e      	bne.n	80218dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 802189e:	097a      	lsrs	r2, r7, #5
 80218a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80218a4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80218a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80218ac:	f023 0307 	bic.w	r3, r3, #7
 80218b0:	4313      	orrs	r3, r2
 80218b2:	431f      	orrs	r7, r3
 80218b4:	f8a8 7000 	strh.w	r7, [r8]
 80218b8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80218ba:	f108 0802 	add.w	r8, r8, #2
 80218be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80218c2:	441c      	add	r4, r3
 80218c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80218c6:	441e      	add	r6, r3
 80218c8:	e643      	b.n	8021552 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80218ca:	2800      	cmp	r0, #0
 80218cc:	f43f af0a 	beq.w	80216e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80218d0:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80218d4:	9109      	str	r1, [sp, #36]	; 0x24
 80218d6:	0e09      	lsrs	r1, r1, #24
 80218d8:	9111      	str	r1, [sp, #68]	; 0x44
 80218da:	e703      	b.n	80216e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80218dc:	f8b8 1000 	ldrh.w	r1, [r8]
 80218e0:	43d2      	mvns	r2, r2
 80218e2:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80218e6:	fa5f fe82 	uxtb.w	lr, r2
 80218ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80218ee:	10c8      	asrs	r0, r1, #3
 80218f0:	00ca      	lsls	r2, r1, #3
 80218f2:	fb0c fc0e 	mul.w	ip, ip, lr
 80218f6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80218fa:	b2d2      	uxtb	r2, r2
 80218fc:	f10c 0101 	add.w	r1, ip, #1
 8021900:	fb00 f00e 	mul.w	r0, r0, lr
 8021904:	fb02 f20e 	mul.w	r2, r2, lr
 8021908:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802190c:	0c39      	lsrs	r1, r7, #16
 802190e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021912:	4910      	ldr	r1, [pc, #64]	; (8021954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8021914:	fa5f fc8c 	uxtb.w	ip, ip
 8021918:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802191c:	1c41      	adds	r1, r0, #1
 802191e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021922:	1c51      	adds	r1, r2, #1
 8021924:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021928:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802192c:	00c0      	lsls	r0, r0, #3
 802192e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021932:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021936:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802193a:	ea4c 0c00 	orr.w	ip, ip, r0
 802193e:	ea47 0c0c 	orr.w	ip, r7, ip
 8021942:	f8a8 c000 	strh.w	ip, [r8]
 8021946:	e7b7      	b.n	80218b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021948:	b01b      	add	sp, #108	; 0x6c
 802194a:	ecbd 8b08 	vpop	{d8-d11}
 802194e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021952:	bf00      	nop
 8021954:	fffff800 	.word	0xfffff800

08021958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8021958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802195c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8021960:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8021964:	2c00      	cmp	r4, #0
 8021966:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802196a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802196e:	fb04 ce03 	mla	lr, r4, r3, ip
 8021972:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8021976:	db60      	blt.n	8021a3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8021978:	45a1      	cmp	r9, r4
 802197a:	dd5e      	ble.n	8021a3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802197c:	f1bc 0f00 	cmp.w	ip, #0
 8021980:	db59      	blt.n	8021a36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8021982:	45e0      	cmp	r8, ip
 8021984:	dd57      	ble.n	8021a36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8021986:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802198a:	f01e 0f01 	tst.w	lr, #1
 802198e:	5c16      	ldrb	r6, [r2, r0]
 8021990:	bf0c      	ite	eq
 8021992:	f006 060f 	andeq.w	r6, r6, #15
 8021996:	1136      	asrne	r6, r6, #4
 8021998:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802199c:	b2f6      	uxtb	r6, r6
 802199e:	f11c 0001 	adds.w	r0, ip, #1
 80219a2:	d44d      	bmi.n	8021a40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80219a4:	4580      	cmp	r8, r0
 80219a6:	dd4b      	ble.n	8021a40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80219a8:	2d00      	cmp	r5, #0
 80219aa:	d04b      	beq.n	8021a44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80219ac:	f10e 0a01 	add.w	sl, lr, #1
 80219b0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80219b4:	f01a 0f01 	tst.w	sl, #1
 80219b8:	5c10      	ldrb	r0, [r2, r0]
 80219ba:	bf0c      	ite	eq
 80219bc:	f000 000f 	andeq.w	r0, r0, #15
 80219c0:	1100      	asrne	r0, r0, #4
 80219c2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80219c6:	b2c0      	uxtb	r0, r0
 80219c8:	3401      	adds	r4, #1
 80219ca:	d43f      	bmi.n	8021a4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80219cc:	45a1      	cmp	r9, r4
 80219ce:	dd3d      	ble.n	8021a4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80219d0:	2f00      	cmp	r7, #0
 80219d2:	f000 80a8 	beq.w	8021b26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 80219d6:	f1bc 0f00 	cmp.w	ip, #0
 80219da:	db35      	blt.n	8021a48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80219dc:	45e0      	cmp	r8, ip
 80219de:	dd33      	ble.n	8021a48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80219e0:	eb03 090e 	add.w	r9, r3, lr
 80219e4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80219e8:	f019 0f01 	tst.w	r9, #1
 80219ec:	5d14      	ldrb	r4, [r2, r4]
 80219ee:	bf0c      	ite	eq
 80219f0:	f004 040f 	andeq.w	r4, r4, #15
 80219f4:	1124      	asrne	r4, r4, #4
 80219f6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80219fa:	b2e4      	uxtb	r4, r4
 80219fc:	f11c 0c01 	adds.w	ip, ip, #1
 8021a00:	d427      	bmi.n	8021a52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8021a02:	45e0      	cmp	r8, ip
 8021a04:	dd25      	ble.n	8021a52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8021a06:	b335      	cbz	r5, 8021a56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8021a08:	3301      	adds	r3, #1
 8021a0a:	449e      	add	lr, r3
 8021a0c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021a10:	f01e 0f01 	tst.w	lr, #1
 8021a14:	5cd2      	ldrb	r2, [r2, r3]
 8021a16:	bf0c      	ite	eq
 8021a18:	f002 020f 	andeq.w	r2, r2, #15
 8021a1c:	1112      	asrne	r2, r2, #4
 8021a1e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021a22:	b2d3      	uxtb	r3, r2
 8021a24:	2d0f      	cmp	r5, #15
 8021a26:	d917      	bls.n	8021a58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8021a28:	4b42      	ldr	r3, [pc, #264]	; (8021b34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8021a2a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8021a2e:	4a42      	ldr	r2, [pc, #264]	; (8021b38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8021a30:	4842      	ldr	r0, [pc, #264]	; (8021b3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8021a32:	f003 fcb9 	bl	80253a8 <__assert_func>
 8021a36:	2600      	movs	r6, #0
 8021a38:	e7b1      	b.n	802199e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8021a3a:	2000      	movs	r0, #0
 8021a3c:	4606      	mov	r6, r0
 8021a3e:	e7c3      	b.n	80219c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8021a40:	2000      	movs	r0, #0
 8021a42:	e7c1      	b.n	80219c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8021a44:	4628      	mov	r0, r5
 8021a46:	e7bf      	b.n	80219c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8021a48:	2400      	movs	r4, #0
 8021a4a:	e7d7      	b.n	80219fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8021a4c:	2300      	movs	r3, #0
 8021a4e:	461c      	mov	r4, r3
 8021a50:	e7e8      	b.n	8021a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8021a52:	2300      	movs	r3, #0
 8021a54:	e7e6      	b.n	8021a24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8021a56:	462b      	mov	r3, r5
 8021a58:	2f0f      	cmp	r7, #15
 8021a5a:	d8e5      	bhi.n	8021a28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8021a5c:	b2ad      	uxth	r5, r5
 8021a5e:	b2bf      	uxth	r7, r7
 8021a60:	fb05 fc07 	mul.w	ip, r5, r7
 8021a64:	012d      	lsls	r5, r5, #4
 8021a66:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8021a6a:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8021a6e:	eba5 050c 	sub.w	r5, r5, ip
 8021a72:	b2bf      	uxth	r7, r7
 8021a74:	b2ad      	uxth	r5, r5
 8021a76:	1bd2      	subs	r2, r2, r7
 8021a78:	4368      	muls	r0, r5
 8021a7a:	b292      	uxth	r2, r2
 8021a7c:	fb06 0002 	mla	r0, r6, r2, r0
 8021a80:	fb07 0404 	mla	r4, r7, r4, r0
 8021a84:	fb0c 4303 	mla	r3, ip, r3, r4
 8021a88:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021a8c:	b1b3      	cbz	r3, 8021abc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8021a8e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8021a92:	435a      	muls	r2, r3
 8021a94:	1c53      	adds	r3, r2, #1
 8021a96:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021a9a:	4a29      	ldr	r2, [pc, #164]	; (8021b40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8021a9c:	121b      	asrs	r3, r3, #8
 8021a9e:	6812      	ldr	r2, [r2, #0]
 8021aa0:	2bff      	cmp	r3, #255	; 0xff
 8021aa2:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8021aa6:	d10b      	bne.n	8021ac0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8021aa8:	0950      	lsrs	r0, r2, #5
 8021aaa:	4b26      	ldr	r3, [pc, #152]	; (8021b44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8021aac:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021ab0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021ab4:	4033      	ands	r3, r6
 8021ab6:	4318      	orrs	r0, r3
 8021ab8:	4302      	orrs	r2, r0
 8021aba:	800a      	strh	r2, [r1, #0]
 8021abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ac0:	880d      	ldrh	r5, [r1, #0]
 8021ac2:	b29f      	uxth	r7, r3
 8021ac4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8021ac8:	43db      	mvns	r3, r3
 8021aca:	122c      	asrs	r4, r5, #8
 8021acc:	fb10 f007 	smulbb	r0, r0, r7
 8021ad0:	b2db      	uxtb	r3, r3
 8021ad2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021ad6:	b2f6      	uxtb	r6, r6
 8021ad8:	b2d2      	uxtb	r2, r2
 8021ada:	fb04 0403 	mla	r4, r4, r3, r0
 8021ade:	10e8      	asrs	r0, r5, #3
 8021ae0:	fb12 f207 	smulbb	r2, r2, r7
 8021ae4:	00ed      	lsls	r5, r5, #3
 8021ae6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021aea:	b2a4      	uxth	r4, r4
 8021aec:	fb16 f607 	smulbb	r6, r6, r7
 8021af0:	b2ed      	uxtb	r5, r5
 8021af2:	fb00 6603 	mla	r6, r0, r3, r6
 8021af6:	fb05 2303 	mla	r3, r5, r3, r2
 8021afa:	b2b0      	uxth	r0, r6
 8021afc:	b29a      	uxth	r2, r3
 8021afe:	1c63      	adds	r3, r4, #1
 8021b00:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021b04:	1c53      	adds	r3, r2, #1
 8021b06:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021b0a:	1c42      	adds	r2, r0, #1
 8021b0c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021b10:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021b14:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021b18:	0940      	lsrs	r0, r0, #5
 8021b1a:	4323      	orrs	r3, r4
 8021b1c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b20:	4303      	orrs	r3, r0
 8021b22:	800b      	strh	r3, [r1, #0]
 8021b24:	e7ca      	b.n	8021abc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8021b26:	2d0f      	cmp	r5, #15
 8021b28:	f63f af7e 	bhi.w	8021a28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8021b2c:	463b      	mov	r3, r7
 8021b2e:	463c      	mov	r4, r7
 8021b30:	e794      	b.n	8021a5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8021b32:	bf00      	nop
 8021b34:	0802c056 	.word	0x0802c056
 8021b38:	0802c626 	.word	0x0802c626
 8021b3c:	0802c0da 	.word	0x0802c0da
 8021b40:	20060c58 	.word	0x20060c58
 8021b44:	00fff800 	.word	0x00fff800

08021b48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b4c:	ed2d 8b08 	vpush	{d8-d11}
 8021b50:	b097      	sub	sp, #92	; 0x5c
 8021b52:	eeb0 aa40 	vmov.f32	s20, s0
 8021b56:	eef0 9a60 	vmov.f32	s19, s1
 8021b5a:	9214      	str	r2, [sp, #80]	; 0x50
 8021b5c:	eeb0 9a41 	vmov.f32	s18, s2
 8021b60:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021b62:	eeb0 8a62 	vmov.f32	s16, s5
 8021b66:	9309      	str	r3, [sp, #36]	; 0x24
 8021b68:	eef0 8a43 	vmov.f32	s17, s6
 8021b6c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8021b70:	eef0 ba44 	vmov.f32	s23, s8
 8021b74:	9015      	str	r0, [sp, #84]	; 0x54
 8021b76:	eeb0 ba64 	vmov.f32	s22, s9
 8021b7a:	6850      	ldr	r0, [r2, #4]
 8021b7c:	eef0 aa45 	vmov.f32	s21, s10
 8021b80:	910d      	str	r1, [sp, #52]	; 0x34
 8021b82:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b84:	6812      	ldr	r2, [r2, #0]
 8021b86:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021b8a:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8021b8e:	fb00 1303 	mla	r3, r0, r3, r1
 8021b92:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021b96:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021b98:	689b      	ldr	r3, [r3, #8]
 8021b9a:	3301      	adds	r3, #1
 8021b9c:	f023 0301 	bic.w	r3, r3, #1
 8021ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8021ba2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021ba4:	681f      	ldr	r7, [r3, #0]
 8021ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	dc03      	bgt.n	8021bb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021bac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	f340 8289 	ble.w	80220c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8021bb4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021bb6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021bba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021bbe:	1e48      	subs	r0, r1, #1
 8021bc0:	f102 3cff 	add.w	ip, r2, #4294967295
 8021bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	f340 80c5 	ble.w	8021d56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8021bcc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021bd0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021bd4:	d406      	bmi.n	8021be4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021bd6:	4586      	cmp	lr, r0
 8021bd8:	da04      	bge.n	8021be4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	db02      	blt.n	8021be4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021bde:	4563      	cmp	r3, ip
 8021be0:	f2c0 80ba 	blt.w	8021d58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8021be4:	f11e 0e01 	adds.w	lr, lr, #1
 8021be8:	f100 80ab 	bmi.w	8021d42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021bec:	4571      	cmp	r1, lr
 8021bee:	f2c0 80a8 	blt.w	8021d42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021bf2:	3301      	adds	r3, #1
 8021bf4:	f100 80a5 	bmi.w	8021d42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021bf8:	429a      	cmp	r2, r3
 8021bfa:	f2c0 80a2 	blt.w	8021d42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c00:	46c8      	mov	r8, r9
 8021c02:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8021c06:	930e      	str	r3, [sp, #56]	; 0x38
 8021c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	f340 80c4 	ble.w	8021d98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021c10:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021c12:	1430      	asrs	r0, r6, #16
 8021c14:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021c18:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021c1c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021c20:	1423      	asrs	r3, r4, #16
 8021c22:	f100 814f 	bmi.w	8021ec4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021c26:	f10c 3bff 	add.w	fp, ip, #4294967295
 8021c2a:	455b      	cmp	r3, fp
 8021c2c:	f280 814a 	bge.w	8021ec4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021c30:	2800      	cmp	r0, #0
 8021c32:	f2c0 8147 	blt.w	8021ec4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021c36:	f10e 3bff 	add.w	fp, lr, #4294967295
 8021c3a:	4558      	cmp	r0, fp
 8021c3c:	f280 8142 	bge.w	8021ec4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021c40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021c42:	fb00 3305 	mla	r3, r0, r5, r3
 8021c46:	0858      	lsrs	r0, r3, #1
 8021c48:	07dd      	lsls	r5, r3, #31
 8021c4a:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021c4e:	bf54      	ite	pl
 8021c50:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021c54:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021c58:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021c5c:	fa5f fc8c 	uxtb.w	ip, ip
 8021c60:	2a00      	cmp	r2, #0
 8021c62:	f000 80dd 	beq.w	8021e20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021c66:	1c58      	adds	r0, r3, #1
 8021c68:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021c6c:	07c0      	lsls	r0, r0, #31
 8021c6e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021c72:	bf54      	ite	pl
 8021c74:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021c78:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021c7c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021c80:	fa5f f08e 	uxtb.w	r0, lr
 8021c84:	9010      	str	r0, [sp, #64]	; 0x40
 8021c86:	b1d9      	cbz	r1, 8021cc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8021c88:	4453      	add	r3, sl
 8021c8a:	0858      	lsrs	r0, r3, #1
 8021c8c:	07dd      	lsls	r5, r3, #31
 8021c8e:	f103 0301 	add.w	r3, r3, #1
 8021c92:	5c38      	ldrb	r0, [r7, r0]
 8021c94:	bf54      	ite	pl
 8021c96:	f000 000f 	andpl.w	r0, r0, #15
 8021c9a:	1100      	asrmi	r0, r0, #4
 8021c9c:	07dd      	lsls	r5, r3, #31
 8021c9e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021ca2:	b2c0      	uxtb	r0, r0
 8021ca4:	900b      	str	r0, [sp, #44]	; 0x2c
 8021ca6:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8021caa:	f817 e000 	ldrb.w	lr, [r7, r0]
 8021cae:	bf54      	ite	pl
 8021cb0:	f00e 030f 	andpl.w	r3, lr, #15
 8021cb4:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8021cb8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021cbc:	b2db      	uxtb	r3, r3
 8021cbe:	9311      	str	r3, [sp, #68]	; 0x44
 8021cc0:	b292      	uxth	r2, r2
 8021cc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021cc4:	b289      	uxth	r1, r1
 8021cc6:	fb02 f301 	mul.w	r3, r2, r1
 8021cca:	0112      	lsls	r2, r2, #4
 8021ccc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021cd0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8021cd4:	1ad2      	subs	r2, r2, r3
 8021cd6:	b289      	uxth	r1, r1
 8021cd8:	b292      	uxth	r2, r2
 8021cda:	1a40      	subs	r0, r0, r1
 8021cdc:	436a      	muls	r2, r5
 8021cde:	b280      	uxth	r0, r0
 8021ce0:	fb0c 2c00 	mla	ip, ip, r0, r2
 8021ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021ce6:	fb01 c102 	mla	r1, r1, r2, ip
 8021cea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021cec:	fb03 1302 	mla	r3, r3, r2, r1
 8021cf0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021cf4:	b1db      	cbz	r3, 8021d2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021cf8:	4353      	muls	r3, r2
 8021cfa:	1c5a      	adds	r2, r3, #1
 8021cfc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021d00:	4ac6      	ldr	r2, [pc, #792]	; (802201c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8021d02:	121b      	asrs	r3, r3, #8
 8021d04:	6812      	ldr	r2, [r2, #0]
 8021d06:	2bff      	cmp	r3, #255	; 0xff
 8021d08:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8021d0c:	f040 8099 	bne.w	8021e42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8021d10:	0953      	lsrs	r3, r2, #5
 8021d12:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8021d16:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021d1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021d1e:	f02c 0c07 	bic.w	ip, ip, #7
 8021d22:	ea43 0c0c 	orr.w	ip, r3, ip
 8021d26:	ea4c 0202 	orr.w	r2, ip, r2
 8021d2a:	f8a8 2000 	strh.w	r2, [r8]
 8021d2e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021d30:	f108 0802 	add.w	r8, r8, #2
 8021d34:	441c      	add	r4, r3
 8021d36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d38:	441e      	add	r6, r3
 8021d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d3c:	3b01      	subs	r3, #1
 8021d3e:	930e      	str	r3, [sp, #56]	; 0x38
 8021d40:	e762      	b.n	8021c08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8021d42:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021d44:	f109 0902 	add.w	r9, r9, #2
 8021d48:	441c      	add	r4, r3
 8021d4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d4c:	441e      	add	r6, r3
 8021d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d50:	3b01      	subs	r3, #1
 8021d52:	9309      	str	r3, [sp, #36]	; 0x24
 8021d54:	e736      	b.n	8021bc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021d56:	d024      	beq.n	8021da2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8021d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d5a:	982b      	ldr	r0, [sp, #172]	; 0xac
 8021d5c:	3b01      	subs	r3, #1
 8021d5e:	fb00 4003 	mla	r0, r0, r3, r4
 8021d62:	1400      	asrs	r0, r0, #16
 8021d64:	f53f af4b 	bmi.w	8021bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d68:	3901      	subs	r1, #1
 8021d6a:	4288      	cmp	r0, r1
 8021d6c:	f6bf af47 	bge.w	8021bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d70:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8021d72:	fb01 6303 	mla	r3, r1, r3, r6
 8021d76:	141b      	asrs	r3, r3, #16
 8021d78:	f53f af41 	bmi.w	8021bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d7c:	3a01      	subs	r2, #1
 8021d7e:	4293      	cmp	r3, r2
 8021d80:	f6bf af3d 	bge.w	8021bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d84:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021d88:	46c8      	mov	r8, r9
 8021d8a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021d8e:	930e      	str	r3, [sp, #56]	; 0x38
 8021d90:	f1bb 0f00 	cmp.w	fp, #0
 8021d94:	f300 80b7 	bgt.w	8021f06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d9a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021d9e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021da4:	2b00      	cmp	r3, #0
 8021da6:	f340 818e 	ble.w	80220c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8021daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021dae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021db0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021db4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021db8:	eef0 6a48 	vmov.f32	s13, s16
 8021dbc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021dc0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021dc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dc8:	ee16 4a90 	vmov	r4, s13
 8021dcc:	eef0 6a68 	vmov.f32	s13, s17
 8021dd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dd4:	ee16 6a90 	vmov	r6, s13
 8021dd8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021ddc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021de0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021de4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021de8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021dec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021df0:	ee18 2a10 	vmov	r2, s16
 8021df4:	eeb0 8a47 	vmov.f32	s16, s14
 8021df8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dfc:	ee18 2a90 	vmov	r2, s17
 8021e00:	932b      	str	r3, [sp, #172]	; 0xac
 8021e02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e04:	eef0 8a67 	vmov.f32	s17, s15
 8021e08:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e0c:	932c      	str	r3, [sp, #176]	; 0xb0
 8021e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021e10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e12:	3b01      	subs	r3, #1
 8021e14:	930d      	str	r3, [sp, #52]	; 0x34
 8021e16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e18:	bf08      	it	eq
 8021e1a:	4613      	moveq	r3, r2
 8021e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8021e1e:	e6c2      	b.n	8021ba6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021e20:	2900      	cmp	r1, #0
 8021e22:	f43f af4d 	beq.w	8021cc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8021e26:	eb0a 0003 	add.w	r0, sl, r3
 8021e2a:	0843      	lsrs	r3, r0, #1
 8021e2c:	07c0      	lsls	r0, r0, #31
 8021e2e:	5cfb      	ldrb	r3, [r7, r3]
 8021e30:	bf54      	ite	pl
 8021e32:	f003 030f 	andpl.w	r3, r3, #15
 8021e36:	111b      	asrmi	r3, r3, #4
 8021e38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021e3c:	b2db      	uxtb	r3, r3
 8021e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021e40:	e73e      	b.n	8021cc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8021e42:	f8b8 e000 	ldrh.w	lr, [r8]
 8021e46:	fa1f fb83 	uxth.w	fp, r3
 8021e4a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021e4e:	43db      	mvns	r3, r3
 8021e50:	ea4f 202e 	mov.w	r0, lr, asr #8
 8021e54:	fb11 f10b 	smulbb	r1, r1, fp
 8021e58:	b2db      	uxtb	r3, r3
 8021e5a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021e5e:	fa5f fc8c 	uxtb.w	ip, ip
 8021e62:	b2d2      	uxtb	r2, r2
 8021e64:	fb00 1003 	mla	r0, r0, r3, r1
 8021e68:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8021e6c:	fb1c fc0b 	smulbb	ip, ip, fp
 8021e70:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021e74:	b280      	uxth	r0, r0
 8021e76:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021e7a:	fb12 fb0b 	smulbb	fp, r2, fp
 8021e7e:	fa5f fe8e 	uxtb.w	lr, lr
 8021e82:	fb01 cc03 	mla	ip, r1, r3, ip
 8021e86:	fb0e bb03 	mla	fp, lr, r3, fp
 8021e8a:	1c43      	adds	r3, r0, #1
 8021e8c:	fa1f fc8c 	uxth.w	ip, ip
 8021e90:	fa1f fb8b 	uxth.w	fp, fp
 8021e94:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021e98:	f10c 0101 	add.w	r1, ip, #1
 8021e9c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8021ea0:	f10b 0001 	add.w	r0, fp, #1
 8021ea4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021ea8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021eac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021eb0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021eb4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021eb8:	4318      	orrs	r0, r3
 8021eba:	ea40 000c 	orr.w	r0, r0, ip
 8021ebe:	f8a8 0000 	strh.w	r0, [r8]
 8021ec2:	e734      	b.n	8021d2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021ec4:	f113 0b01 	adds.w	fp, r3, #1
 8021ec8:	f53f af31 	bmi.w	8021d2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021ecc:	45dc      	cmp	ip, fp
 8021ece:	f6ff af2e 	blt.w	8021d2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021ed2:	f110 0b01 	adds.w	fp, r0, #1
 8021ed6:	f53f af2a 	bmi.w	8021d2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021eda:	45de      	cmp	lr, fp
 8021edc:	f6ff af27 	blt.w	8021d2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021ee0:	9302      	str	r3, [sp, #8]
 8021ee2:	fa0f f38e 	sxth.w	r3, lr
 8021ee6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021ee8:	9301      	str	r3, [sp, #4]
 8021eea:	fa0f f38c 	sxth.w	r3, ip
 8021eee:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021ef2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8021ef6:	9300      	str	r3, [sp, #0]
 8021ef8:	463a      	mov	r2, r7
 8021efa:	4653      	mov	r3, sl
 8021efc:	4641      	mov	r1, r8
 8021efe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021f00:	f7ff fd2a 	bl	8021958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8021f04:	e713      	b.n	8021d2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021f06:	1422      	asrs	r2, r4, #16
 8021f08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021f0a:	1433      	asrs	r3, r6, #16
 8021f0c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021f10:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021f14:	fb05 2303 	mla	r3, r5, r3, r2
 8021f18:	085a      	lsrs	r2, r3, #1
 8021f1a:	07dd      	lsls	r5, r3, #31
 8021f1c:	5cba      	ldrb	r2, [r7, r2]
 8021f1e:	bf54      	ite	pl
 8021f20:	f002 020f 	andpl.w	r2, r2, #15
 8021f24:	1112      	asrmi	r2, r2, #4
 8021f26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021f2a:	b2d2      	uxtb	r2, r2
 8021f2c:	2900      	cmp	r1, #0
 8021f2e:	d077      	beq.n	8022020 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021f30:	f103 0e01 	add.w	lr, r3, #1
 8021f34:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8021f38:	f01e 0f01 	tst.w	lr, #1
 8021f3c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021f40:	bf0c      	ite	eq
 8021f42:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021f46:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021f4a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021f4e:	fa5f f58c 	uxtb.w	r5, ip
 8021f52:	9512      	str	r5, [sp, #72]	; 0x48
 8021f54:	b308      	cbz	r0, 8021f9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021f56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021f58:	442b      	add	r3, r5
 8021f5a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021f5e:	07dd      	lsls	r5, r3, #31
 8021f60:	f103 0301 	add.w	r3, r3, #1
 8021f64:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021f68:	bf54      	ite	pl
 8021f6a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021f6e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021f72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021f76:	fa5f f58c 	uxtb.w	r5, ip
 8021f7a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021f7e:	950c      	str	r5, [sp, #48]	; 0x30
 8021f80:	07dd      	lsls	r5, r3, #31
 8021f82:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021f86:	bf54      	ite	pl
 8021f88:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021f8c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021f90:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021f94:	fa5f f38c 	uxtb.w	r3, ip
 8021f98:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f9a:	b289      	uxth	r1, r1
 8021f9c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021f9e:	b280      	uxth	r0, r0
 8021fa0:	fb01 f300 	mul.w	r3, r1, r0
 8021fa4:	0109      	lsls	r1, r1, #4
 8021fa6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8021faa:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8021fae:	1ac9      	subs	r1, r1, r3
 8021fb0:	b280      	uxth	r0, r0
 8021fb2:	b289      	uxth	r1, r1
 8021fb4:	ebac 0c00 	sub.w	ip, ip, r0
 8021fb8:	4369      	muls	r1, r5
 8021fba:	fa1f fc8c 	uxth.w	ip, ip
 8021fbe:	fb02 120c 	mla	r2, r2, ip, r1
 8021fc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021fc4:	fb00 2001 	mla	r0, r0, r1, r2
 8021fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021fca:	fb03 0302 	mla	r3, r3, r2, r0
 8021fce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021fd2:	b1d3      	cbz	r3, 802200a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021fd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021fd6:	4353      	muls	r3, r2
 8021fd8:	1c5a      	adds	r2, r3, #1
 8021fda:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021fde:	4a0f      	ldr	r2, [pc, #60]	; (802201c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8021fe0:	121b      	asrs	r3, r3, #8
 8021fe2:	6812      	ldr	r2, [r2, #0]
 8021fe4:	2bff      	cmp	r3, #255	; 0xff
 8021fe6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8021fea:	d12d      	bne.n	8022048 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8021fec:	0953      	lsrs	r3, r2, #5
 8021fee:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8021ff2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021ff6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021ffa:	f02c 0c07 	bic.w	ip, ip, #7
 8021ffe:	ea43 0c0c 	orr.w	ip, r3, ip
 8022002:	ea4c 0202 	orr.w	r2, ip, r2
 8022006:	f8a8 2000 	strh.w	r2, [r8]
 802200a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802200c:	f108 0802 	add.w	r8, r8, #2
 8022010:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022014:	441c      	add	r4, r3
 8022016:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022018:	441e      	add	r6, r3
 802201a:	e6b9      	b.n	8021d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802201c:	20060c58 	.word	0x20060c58
 8022020:	2800      	cmp	r0, #0
 8022022:	d0ba      	beq.n	8021f9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022024:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022026:	442b      	add	r3, r5
 8022028:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802202c:	07db      	lsls	r3, r3, #31
 802202e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022032:	bf54      	ite	pl
 8022034:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022038:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802203c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022040:	fa5f f38c 	uxtb.w	r3, ip
 8022044:	930c      	str	r3, [sp, #48]	; 0x30
 8022046:	e7a8      	b.n	8021f9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022048:	f8b8 e000 	ldrh.w	lr, [r8]
 802204c:	fa1f fa83 	uxth.w	sl, r3
 8022050:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8022054:	43db      	mvns	r3, r3
 8022056:	ea4f 202e 	mov.w	r0, lr, asr #8
 802205a:	fb11 f10a 	smulbb	r1, r1, sl
 802205e:	b2db      	uxtb	r3, r3
 8022060:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022064:	b2d2      	uxtb	r2, r2
 8022066:	fa5f fc8c 	uxtb.w	ip, ip
 802206a:	fb00 1003 	mla	r0, r0, r3, r1
 802206e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8022072:	fb12 f20a 	smulbb	r2, r2, sl
 8022076:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802207a:	b280      	uxth	r0, r0
 802207c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022080:	fb1c fc0a 	smulbb	ip, ip, sl
 8022084:	fa5f fe8e 	uxtb.w	lr, lr
 8022088:	fb0e 2203 	mla	r2, lr, r3, r2
 802208c:	fb01 cc03 	mla	ip, r1, r3, ip
 8022090:	1c43      	adds	r3, r0, #1
 8022092:	b292      	uxth	r2, r2
 8022094:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022098:	1c51      	adds	r1, r2, #1
 802209a:	fa1f fc8c 	uxth.w	ip, ip
 802209e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80220a2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80220a6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80220aa:	4308      	orrs	r0, r1
 80220ac:	f10c 0101 	add.w	r1, ip, #1
 80220b0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80220b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80220b8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80220bc:	ea40 000c 	orr.w	r0, r0, ip
 80220c0:	f8a8 0000 	strh.w	r0, [r8]
 80220c4:	e7a1      	b.n	802200a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80220c6:	b017      	add	sp, #92	; 0x5c
 80220c8:	ecbd 8b08 	vpop	{d8-d11}
 80220cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80220d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220d4:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80220d8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80220dc:	2c00      	cmp	r4, #0
 80220de:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80220e2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80220e6:	fb04 ce03 	mla	lr, r4, r3, ip
 80220ea:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80220ee:	db60      	blt.n	80221b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80220f0:	45a1      	cmp	r9, r4
 80220f2:	dd5e      	ble.n	80221b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80220f4:	f1bc 0f00 	cmp.w	ip, #0
 80220f8:	db59      	blt.n	80221ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80220fa:	45e0      	cmp	r8, ip
 80220fc:	dd57      	ble.n	80221ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80220fe:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8022102:	f01e 0f01 	tst.w	lr, #1
 8022106:	5c16      	ldrb	r6, [r2, r0]
 8022108:	bf0c      	ite	eq
 802210a:	f006 060f 	andeq.w	r6, r6, #15
 802210e:	1136      	asrne	r6, r6, #4
 8022110:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022114:	b2f6      	uxtb	r6, r6
 8022116:	f11c 0001 	adds.w	r0, ip, #1
 802211a:	d44d      	bmi.n	80221b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802211c:	4580      	cmp	r8, r0
 802211e:	dd4b      	ble.n	80221b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8022120:	2d00      	cmp	r5, #0
 8022122:	d04b      	beq.n	80221bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8022124:	f10e 0a01 	add.w	sl, lr, #1
 8022128:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802212c:	f01a 0f01 	tst.w	sl, #1
 8022130:	5c10      	ldrb	r0, [r2, r0]
 8022132:	bf0c      	ite	eq
 8022134:	f000 000f 	andeq.w	r0, r0, #15
 8022138:	1100      	asrne	r0, r0, #4
 802213a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802213e:	b2c0      	uxtb	r0, r0
 8022140:	3401      	adds	r4, #1
 8022142:	d43f      	bmi.n	80221c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8022144:	45a1      	cmp	r9, r4
 8022146:	dd3d      	ble.n	80221c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8022148:	2f00      	cmp	r7, #0
 802214a:	f000 8093 	beq.w	8022274 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802214e:	f1bc 0f00 	cmp.w	ip, #0
 8022152:	db35      	blt.n	80221c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8022154:	45e0      	cmp	r8, ip
 8022156:	dd33      	ble.n	80221c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8022158:	eb03 090e 	add.w	r9, r3, lr
 802215c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8022160:	f019 0f01 	tst.w	r9, #1
 8022164:	5d14      	ldrb	r4, [r2, r4]
 8022166:	bf0c      	ite	eq
 8022168:	f004 040f 	andeq.w	r4, r4, #15
 802216c:	1124      	asrne	r4, r4, #4
 802216e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022172:	b2e4      	uxtb	r4, r4
 8022174:	f11c 0c01 	adds.w	ip, ip, #1
 8022178:	d427      	bmi.n	80221ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802217a:	45e0      	cmp	r8, ip
 802217c:	dd25      	ble.n	80221ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802217e:	b335      	cbz	r5, 80221ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8022180:	3301      	adds	r3, #1
 8022182:	449e      	add	lr, r3
 8022184:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022188:	f01e 0f01 	tst.w	lr, #1
 802218c:	5cd2      	ldrb	r2, [r2, r3]
 802218e:	bf0c      	ite	eq
 8022190:	f002 020f 	andeq.w	r2, r2, #15
 8022194:	1112      	asrne	r2, r2, #4
 8022196:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802219a:	b2d3      	uxtb	r3, r2
 802219c:	2d0f      	cmp	r5, #15
 802219e:	d917      	bls.n	80221d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 80221a0:	4b37      	ldr	r3, [pc, #220]	; (8022280 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 80221a2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80221a6:	4a37      	ldr	r2, [pc, #220]	; (8022284 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 80221a8:	4837      	ldr	r0, [pc, #220]	; (8022288 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 80221aa:	f003 f8fd 	bl	80253a8 <__assert_func>
 80221ae:	2600      	movs	r6, #0
 80221b0:	e7b1      	b.n	8022116 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 80221b2:	2000      	movs	r0, #0
 80221b4:	4606      	mov	r6, r0
 80221b6:	e7c3      	b.n	8022140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80221b8:	2000      	movs	r0, #0
 80221ba:	e7c1      	b.n	8022140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80221bc:	4628      	mov	r0, r5
 80221be:	e7bf      	b.n	8022140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80221c0:	2400      	movs	r4, #0
 80221c2:	e7d7      	b.n	8022174 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 80221c4:	2300      	movs	r3, #0
 80221c6:	461c      	mov	r4, r3
 80221c8:	e7e8      	b.n	802219c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80221ca:	2300      	movs	r3, #0
 80221cc:	e7e6      	b.n	802219c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80221ce:	462b      	mov	r3, r5
 80221d0:	2f0f      	cmp	r7, #15
 80221d2:	d8e5      	bhi.n	80221a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80221d4:	b2ad      	uxth	r5, r5
 80221d6:	b2bf      	uxth	r7, r7
 80221d8:	fb05 fc07 	mul.w	ip, r5, r7
 80221dc:	012d      	lsls	r5, r5, #4
 80221de:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80221e2:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80221e6:	eba5 050c 	sub.w	r5, r5, ip
 80221ea:	b2bf      	uxth	r7, r7
 80221ec:	b2ad      	uxth	r5, r5
 80221ee:	1bd2      	subs	r2, r2, r7
 80221f0:	4368      	muls	r0, r5
 80221f2:	b292      	uxth	r2, r2
 80221f4:	fb06 0002 	mla	r0, r6, r2, r0
 80221f8:	fb07 0404 	mla	r4, r7, r4, r0
 80221fc:	fb0c 4303 	mla	r3, ip, r3, r4
 8022200:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022204:	b3a3      	cbz	r3, 8022270 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022206:	4a21      	ldr	r2, [pc, #132]	; (802228c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8022208:	880e      	ldrh	r6, [r1, #0]
 802220a:	6815      	ldr	r5, [r2, #0]
 802220c:	b29a      	uxth	r2, r3
 802220e:	1234      	asrs	r4, r6, #8
 8022210:	43db      	mvns	r3, r3
 8022212:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8022216:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802221a:	b2db      	uxtb	r3, r3
 802221c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022220:	fb10 f002 	smulbb	r0, r0, r2
 8022224:	b2ed      	uxtb	r5, r5
 8022226:	fb17 f702 	smulbb	r7, r7, r2
 802222a:	fb04 0403 	mla	r4, r4, r3, r0
 802222e:	10f0      	asrs	r0, r6, #3
 8022230:	fb15 f202 	smulbb	r2, r5, r2
 8022234:	00f6      	lsls	r6, r6, #3
 8022236:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802223a:	b2a4      	uxth	r4, r4
 802223c:	b2f6      	uxtb	r6, r6
 802223e:	fb00 7003 	mla	r0, r0, r3, r7
 8022242:	fb06 2303 	mla	r3, r6, r3, r2
 8022246:	b280      	uxth	r0, r0
 8022248:	b29a      	uxth	r2, r3
 802224a:	1c63      	adds	r3, r4, #1
 802224c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022250:	1c53      	adds	r3, r2, #1
 8022252:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022256:	1c42      	adds	r2, r0, #1
 8022258:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802225c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022260:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022264:	0940      	lsrs	r0, r0, #5
 8022266:	4323      	orrs	r3, r4
 8022268:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802226c:	4303      	orrs	r3, r0
 802226e:	800b      	strh	r3, [r1, #0]
 8022270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022274:	2d0f      	cmp	r5, #15
 8022276:	d893      	bhi.n	80221a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8022278:	463b      	mov	r3, r7
 802227a:	463c      	mov	r4, r7
 802227c:	e7aa      	b.n	80221d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802227e:	bf00      	nop
 8022280:	0802c056 	.word	0x0802c056
 8022284:	0802c626 	.word	0x0802c626
 8022288:	0802c0da 	.word	0x0802c0da
 802228c:	20060c58 	.word	0x20060c58

08022290 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022294:	ed2d 8b08 	vpush	{d8-d11}
 8022298:	b093      	sub	sp, #76	; 0x4c
 802229a:	461d      	mov	r5, r3
 802229c:	eeb0 aa40 	vmov.f32	s20, s0
 80222a0:	920c      	str	r2, [sp, #48]	; 0x30
 80222a2:	eef0 9a60 	vmov.f32	s19, s1
 80222a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80222a8:	eeb0 9a41 	vmov.f32	s18, s2
 80222ac:	9011      	str	r0, [sp, #68]	; 0x44
 80222ae:	eeb0 8a62 	vmov.f32	s16, s5
 80222b2:	6850      	ldr	r0, [r2, #4]
 80222b4:	eef0 8a43 	vmov.f32	s17, s6
 80222b8:	9107      	str	r1, [sp, #28]
 80222ba:	eef0 ba44 	vmov.f32	s23, s8
 80222be:	6812      	ldr	r2, [r2, #0]
 80222c0:	eeb0 ba64 	vmov.f32	s22, s9
 80222c4:	eef0 aa45 	vmov.f32	s21, s10
 80222c8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80222cc:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80222d0:	fb00 1303 	mla	r3, r0, r3, r1
 80222d4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80222d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222da:	689b      	ldr	r3, [r3, #8]
 80222dc:	3301      	adds	r3, #1
 80222de:	f023 0301 	bic.w	r3, r3, #1
 80222e2:	9306      	str	r3, [sp, #24]
 80222e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222e6:	681f      	ldr	r7, [r3, #0]
 80222e8:	9b07      	ldr	r3, [sp, #28]
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	dc03      	bgt.n	80222f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80222ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	f340 8267 	ble.w	80227c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80222f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022300:	1e48      	subs	r0, r1, #1
 8022302:	f102 3cff 	add.w	ip, r2, #4294967295
 8022306:	2d00      	cmp	r5, #0
 8022308:	f340 80b7 	ble.w	802247a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802230c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022310:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022314:	d406      	bmi.n	8022324 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022316:	4586      	cmp	lr, r0
 8022318:	da04      	bge.n	8022324 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802231a:	2b00      	cmp	r3, #0
 802231c:	db02      	blt.n	8022324 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802231e:	4563      	cmp	r3, ip
 8022320:	f2c0 80ac 	blt.w	802247c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8022324:	f11e 0e01 	adds.w	lr, lr, #1
 8022328:	f100 809f 	bmi.w	802246a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802232c:	4571      	cmp	r1, lr
 802232e:	f2c0 809c 	blt.w	802246a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022332:	3301      	adds	r3, #1
 8022334:	f100 8099 	bmi.w	802246a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022338:	429a      	cmp	r2, r3
 802233a:	f2c0 8096 	blt.w	802246a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802233e:	46c8      	mov	r8, r9
 8022340:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8022344:	9509      	str	r5, [sp, #36]	; 0x24
 8022346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022348:	2b00      	cmp	r3, #0
 802234a:	f340 80b5 	ble.w	80224b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802234e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022352:	1430      	asrs	r0, r6, #16
 8022354:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022358:	9308      	str	r3, [sp, #32]
 802235a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802235c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022360:	1423      	asrs	r3, r4, #16
 8022362:	f100 813f 	bmi.w	80225e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022366:	f10c 3bff 	add.w	fp, ip, #4294967295
 802236a:	455b      	cmp	r3, fp
 802236c:	f280 813a 	bge.w	80225e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022370:	2800      	cmp	r0, #0
 8022372:	f2c0 8137 	blt.w	80225e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022376:	f10e 3bff 	add.w	fp, lr, #4294967295
 802237a:	4558      	cmp	r0, fp
 802237c:	f280 8132 	bge.w	80225e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022380:	9a06      	ldr	r2, [sp, #24]
 8022382:	fb00 3302 	mla	r3, r0, r2, r3
 8022386:	0858      	lsrs	r0, r3, #1
 8022388:	07da      	lsls	r2, r3, #31
 802238a:	9a08      	ldr	r2, [sp, #32]
 802238c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022390:	bf54      	ite	pl
 8022392:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022396:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802239a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802239e:	fa5f fc8c 	uxtb.w	ip, ip
 80223a2:	2a00      	cmp	r2, #0
 80223a4:	f000 80cc 	beq.w	8022540 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80223a8:	1c58      	adds	r0, r3, #1
 80223aa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80223ae:	07c0      	lsls	r0, r0, #31
 80223b0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80223b4:	bf54      	ite	pl
 80223b6:	f00e 0e0f 	andpl.w	lr, lr, #15
 80223ba:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80223be:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80223c2:	fa5f fe8e 	uxtb.w	lr, lr
 80223c6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80223ca:	b1b9      	cbz	r1, 80223fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80223cc:	4453      	add	r3, sl
 80223ce:	0858      	lsrs	r0, r3, #1
 80223d0:	07da      	lsls	r2, r3, #31
 80223d2:	5c38      	ldrb	r0, [r7, r0]
 80223d4:	bf54      	ite	pl
 80223d6:	f000 000f 	andpl.w	r0, r0, #15
 80223da:	1100      	asrmi	r0, r0, #4
 80223dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80223e0:	b2c0      	uxtb	r0, r0
 80223e2:	900a      	str	r0, [sp, #40]	; 0x28
 80223e4:	1c58      	adds	r0, r3, #1
 80223e6:	0843      	lsrs	r3, r0, #1
 80223e8:	07c2      	lsls	r2, r0, #31
 80223ea:	5cfb      	ldrb	r3, [r7, r3]
 80223ec:	bf54      	ite	pl
 80223ee:	f003 030f 	andpl.w	r3, r3, #15
 80223f2:	111b      	asrmi	r3, r3, #4
 80223f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80223f8:	b2db      	uxtb	r3, r3
 80223fa:	930e      	str	r3, [sp, #56]	; 0x38
 80223fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022400:	b289      	uxth	r1, r1
 8022402:	fb02 f301 	mul.w	r3, r2, r1
 8022406:	0112      	lsls	r2, r2, #4
 8022408:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802240c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022410:	1ad2      	subs	r2, r2, r3
 8022412:	b289      	uxth	r1, r1
 8022414:	b292      	uxth	r2, r2
 8022416:	1a40      	subs	r0, r0, r1
 8022418:	fa1f fe80 	uxth.w	lr, r0
 802241c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802241e:	4342      	muls	r2, r0
 8022420:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022426:	fb01 c102 	mla	r1, r1, r2, ip
 802242a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802242c:	fb03 1302 	mla	r3, r3, r2, r1
 8022430:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022434:	2bff      	cmp	r3, #255	; 0xff
 8022436:	f040 8094 	bne.w	8022562 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802243a:	4bbf      	ldr	r3, [pc, #764]	; (8022738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802243c:	681a      	ldr	r2, [r3, #0]
 802243e:	4bbf      	ldr	r3, [pc, #764]	; (802273c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8022440:	0951      	lsrs	r1, r2, #5
 8022442:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022446:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802244a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802244e:	430b      	orrs	r3, r1
 8022450:	4313      	orrs	r3, r2
 8022452:	f8a8 3000 	strh.w	r3, [r8]
 8022456:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022458:	f108 0802 	add.w	r8, r8, #2
 802245c:	441c      	add	r4, r3
 802245e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022460:	441e      	add	r6, r3
 8022462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022464:	3b01      	subs	r3, #1
 8022466:	9309      	str	r3, [sp, #36]	; 0x24
 8022468:	e76d      	b.n	8022346 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802246a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802246c:	3d01      	subs	r5, #1
 802246e:	f109 0902 	add.w	r9, r9, #2
 8022472:	441c      	add	r4, r3
 8022474:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022476:	441e      	add	r6, r3
 8022478:	e745      	b.n	8022306 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802247a:	d021      	beq.n	80224c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802247c:	1e6b      	subs	r3, r5, #1
 802247e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022480:	fb00 4003 	mla	r0, r0, r3, r4
 8022484:	1400      	asrs	r0, r0, #16
 8022486:	f53f af5a 	bmi.w	802233e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802248a:	3901      	subs	r1, #1
 802248c:	4288      	cmp	r0, r1
 802248e:	f6bf af56 	bge.w	802233e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8022492:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022494:	fb01 6303 	mla	r3, r1, r3, r6
 8022498:	141b      	asrs	r3, r3, #16
 802249a:	f53f af50 	bmi.w	802233e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802249e:	3a01      	subs	r2, #1
 80224a0:	4293      	cmp	r3, r2
 80224a2:	f6bf af4c 	bge.w	802233e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80224a6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80224aa:	46a8      	mov	r8, r5
 80224ac:	46ce      	mov	lr, r9
 80224ae:	9308      	str	r3, [sp, #32]
 80224b0:	f1b8 0f00 	cmp.w	r8, #0
 80224b4:	f300 80b6 	bgt.w	8022624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80224b8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80224bc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80224c0:	9b07      	ldr	r3, [sp, #28]
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	f340 817e 	ble.w	80227c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80224c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80224cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80224ce:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80224d2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80224d6:	eef0 6a48 	vmov.f32	s13, s16
 80224da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80224de:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80224e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224e6:	ee16 4a90 	vmov	r4, s13
 80224ea:	eef0 6a68 	vmov.f32	s13, s17
 80224ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224f2:	ee16 6a90 	vmov	r6, s13
 80224f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80224fa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80224fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022502:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022506:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802250a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802250e:	ee18 2a10 	vmov	r2, s16
 8022512:	eeb0 8a47 	vmov.f32	s16, s14
 8022516:	fb92 f3f3 	sdiv	r3, r2, r3
 802251a:	ee18 2a90 	vmov	r2, s17
 802251e:	9327      	str	r3, [sp, #156]	; 0x9c
 8022520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022522:	eef0 8a67 	vmov.f32	s17, s15
 8022526:	fb92 f3f3 	sdiv	r3, r2, r3
 802252a:	9328      	str	r3, [sp, #160]	; 0xa0
 802252c:	9b07      	ldr	r3, [sp, #28]
 802252e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022530:	3b01      	subs	r3, #1
 8022532:	9307      	str	r3, [sp, #28]
 8022534:	bf08      	it	eq
 8022536:	4615      	moveq	r5, r2
 8022538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802253a:	bf18      	it	ne
 802253c:	461d      	movne	r5, r3
 802253e:	e6d3      	b.n	80222e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022540:	2900      	cmp	r1, #0
 8022542:	f43f af5b 	beq.w	80223fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022546:	eb0a 0003 	add.w	r0, sl, r3
 802254a:	0843      	lsrs	r3, r0, #1
 802254c:	07c0      	lsls	r0, r0, #31
 802254e:	5cfb      	ldrb	r3, [r7, r3]
 8022550:	bf54      	ite	pl
 8022552:	f003 030f 	andpl.w	r3, r3, #15
 8022556:	111b      	asrmi	r3, r3, #4
 8022558:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802255c:	b2db      	uxtb	r3, r3
 802255e:	930a      	str	r3, [sp, #40]	; 0x28
 8022560:	e74c      	b.n	80223fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022562:	2b00      	cmp	r3, #0
 8022564:	f43f af77 	beq.w	8022456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022568:	4a73      	ldr	r2, [pc, #460]	; (8022738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802256a:	fa1f fe83 	uxth.w	lr, r3
 802256e:	f8b8 c000 	ldrh.w	ip, [r8]
 8022572:	43db      	mvns	r3, r3
 8022574:	6810      	ldr	r0, [r2, #0]
 8022576:	ea4f 212c 	mov.w	r1, ip, asr #8
 802257a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802257e:	b2db      	uxtb	r3, r3
 8022580:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022584:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022588:	fb12 f20e 	smulbb	r2, r2, lr
 802258c:	b2c0      	uxtb	r0, r0
 802258e:	fb1b fb0e 	smulbb	fp, fp, lr
 8022592:	fb01 2103 	mla	r1, r1, r3, r2
 8022596:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802259a:	fb10 fe0e 	smulbb	lr, r0, lr
 802259e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80225a2:	b289      	uxth	r1, r1
 80225a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80225a8:	fa5f fc8c 	uxtb.w	ip, ip
 80225ac:	fb02 b203 	mla	r2, r2, r3, fp
 80225b0:	1c48      	adds	r0, r1, #1
 80225b2:	fb0c e303 	mla	r3, ip, r3, lr
 80225b6:	b292      	uxth	r2, r2
 80225b8:	b29b      	uxth	r3, r3
 80225ba:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80225be:	f102 0b01 	add.w	fp, r2, #1
 80225c2:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80225c6:	1c59      	adds	r1, r3, #1
 80225c8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80225cc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80225d0:	0952      	lsrs	r2, r2, #5
 80225d2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80225d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80225da:	4301      	orrs	r1, r0
 80225dc:	4311      	orrs	r1, r2
 80225de:	f8a8 1000 	strh.w	r1, [r8]
 80225e2:	e738      	b.n	8022456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80225e4:	f113 0b01 	adds.w	fp, r3, #1
 80225e8:	f53f af35 	bmi.w	8022456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80225ec:	45dc      	cmp	ip, fp
 80225ee:	f6ff af32 	blt.w	8022456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80225f2:	f110 0b01 	adds.w	fp, r0, #1
 80225f6:	f53f af2e 	bmi.w	8022456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80225fa:	45de      	cmp	lr, fp
 80225fc:	f6ff af2b 	blt.w	8022456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022600:	9302      	str	r3, [sp, #8]
 8022602:	fa0f f38e 	sxth.w	r3, lr
 8022606:	9a08      	ldr	r2, [sp, #32]
 8022608:	9301      	str	r3, [sp, #4]
 802260a:	fa0f f38c 	sxth.w	r3, ip
 802260e:	9105      	str	r1, [sp, #20]
 8022610:	4641      	mov	r1, r8
 8022612:	9300      	str	r3, [sp, #0]
 8022614:	4653      	mov	r3, sl
 8022616:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802261a:	463a      	mov	r2, r7
 802261c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802261e:	f7ff fd57 	bl	80220d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8022622:	e718      	b.n	8022456 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022624:	1422      	asrs	r2, r4, #16
 8022626:	9906      	ldr	r1, [sp, #24]
 8022628:	1433      	asrs	r3, r6, #16
 802262a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802262e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022632:	fb01 2303 	mla	r3, r1, r3, r2
 8022636:	085a      	lsrs	r2, r3, #1
 8022638:	07d9      	lsls	r1, r3, #31
 802263a:	5cba      	ldrb	r2, [r7, r2]
 802263c:	bf54      	ite	pl
 802263e:	f002 020f 	andpl.w	r2, r2, #15
 8022642:	1112      	asrmi	r2, r2, #4
 8022644:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022648:	b2d2      	uxtb	r2, r2
 802264a:	2800      	cmp	r0, #0
 802264c:	d063      	beq.n	8022716 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802264e:	f103 0a01 	add.w	sl, r3, #1
 8022652:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022656:	f01a 0f01 	tst.w	sl, #1
 802265a:	5c79      	ldrb	r1, [r7, r1]
 802265c:	bf0c      	ite	eq
 802265e:	f001 010f 	andeq.w	r1, r1, #15
 8022662:	1109      	asrne	r1, r1, #4
 8022664:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022668:	b2c9      	uxtb	r1, r1
 802266a:	910f      	str	r1, [sp, #60]	; 0x3c
 802266c:	f1bc 0f00 	cmp.w	ip, #0
 8022670:	d01a      	beq.n	80226a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8022672:	9908      	ldr	r1, [sp, #32]
 8022674:	440b      	add	r3, r1
 8022676:	0859      	lsrs	r1, r3, #1
 8022678:	f013 0f01 	tst.w	r3, #1
 802267c:	f103 0301 	add.w	r3, r3, #1
 8022680:	5c79      	ldrb	r1, [r7, r1]
 8022682:	bf0c      	ite	eq
 8022684:	f001 010f 	andeq.w	r1, r1, #15
 8022688:	1109      	asrne	r1, r1, #4
 802268a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802268e:	b2c9      	uxtb	r1, r1
 8022690:	910b      	str	r1, [sp, #44]	; 0x2c
 8022692:	0859      	lsrs	r1, r3, #1
 8022694:	07db      	lsls	r3, r3, #31
 8022696:	5c79      	ldrb	r1, [r7, r1]
 8022698:	bf54      	ite	pl
 802269a:	f001 010f 	andpl.w	r1, r1, #15
 802269e:	1109      	asrmi	r1, r1, #4
 80226a0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80226a4:	b2c9      	uxtb	r1, r1
 80226a6:	9110      	str	r1, [sp, #64]	; 0x40
 80226a8:	b280      	uxth	r0, r0
 80226aa:	fa1f fc8c 	uxth.w	ip, ip
 80226ae:	fb00 f30c 	mul.w	r3, r0, ip
 80226b2:	0100      	lsls	r0, r0, #4
 80226b4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80226b8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80226bc:	1ac0      	subs	r0, r0, r3
 80226be:	fa1f fc8c 	uxth.w	ip, ip
 80226c2:	b280      	uxth	r0, r0
 80226c4:	eba1 010c 	sub.w	r1, r1, ip
 80226c8:	fa1f fa81 	uxth.w	sl, r1
 80226cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80226ce:	4348      	muls	r0, r1
 80226d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80226d2:	fb02 020a 	mla	r2, r2, sl, r0
 80226d6:	fb0c 2c01 	mla	ip, ip, r1, r2
 80226da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80226dc:	fb03 c302 	mla	r3, r3, r2, ip
 80226e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80226e4:	2bff      	cmp	r3, #255	; 0xff
 80226e6:	d12b      	bne.n	8022740 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80226e8:	4b13      	ldr	r3, [pc, #76]	; (8022738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 80226ea:	681a      	ldr	r2, [r3, #0]
 80226ec:	4b13      	ldr	r3, [pc, #76]	; (802273c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80226ee:	0951      	lsrs	r1, r2, #5
 80226f0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80226f4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80226f8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80226fc:	430b      	orrs	r3, r1
 80226fe:	4313      	orrs	r3, r2
 8022700:	f8ae 3000 	strh.w	r3, [lr]
 8022704:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022706:	f10e 0e02 	add.w	lr, lr, #2
 802270a:	f108 38ff 	add.w	r8, r8, #4294967295
 802270e:	441c      	add	r4, r3
 8022710:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022712:	441e      	add	r6, r3
 8022714:	e6cc      	b.n	80224b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022716:	f1bc 0f00 	cmp.w	ip, #0
 802271a:	d0c5      	beq.n	80226a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802271c:	9908      	ldr	r1, [sp, #32]
 802271e:	440b      	add	r3, r1
 8022720:	0859      	lsrs	r1, r3, #1
 8022722:	07db      	lsls	r3, r3, #31
 8022724:	5c79      	ldrb	r1, [r7, r1]
 8022726:	bf54      	ite	pl
 8022728:	f001 010f 	andpl.w	r1, r1, #15
 802272c:	1109      	asrmi	r1, r1, #4
 802272e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022732:	b2c9      	uxtb	r1, r1
 8022734:	910b      	str	r1, [sp, #44]	; 0x2c
 8022736:	e7b7      	b.n	80226a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8022738:	20060c58 	.word	0x20060c58
 802273c:	fffff800 	.word	0xfffff800
 8022740:	2b00      	cmp	r3, #0
 8022742:	d0df      	beq.n	8022704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8022744:	4a22      	ldr	r2, [pc, #136]	; (80227d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 8022746:	fa1f fa83 	uxth.w	sl, r3
 802274a:	f8be c000 	ldrh.w	ip, [lr]
 802274e:	43db      	mvns	r3, r3
 8022750:	6810      	ldr	r0, [r2, #0]
 8022752:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022756:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802275a:	b2db      	uxtb	r3, r3
 802275c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022760:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022764:	fb12 f20a 	smulbb	r2, r2, sl
 8022768:	b2c0      	uxtb	r0, r0
 802276a:	fb1b fb0a 	smulbb	fp, fp, sl
 802276e:	fb01 2103 	mla	r1, r1, r3, r2
 8022772:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022776:	fb10 f00a 	smulbb	r0, r0, sl
 802277a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802277e:	b289      	uxth	r1, r1
 8022780:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022784:	fa5f fc8c 	uxtb.w	ip, ip
 8022788:	fb02 b203 	mla	r2, r2, r3, fp
 802278c:	fb0c 0003 	mla	r0, ip, r3, r0
 8022790:	1c4b      	adds	r3, r1, #1
 8022792:	b292      	uxth	r2, r2
 8022794:	b280      	uxth	r0, r0
 8022796:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802279a:	f100 0b01 	add.w	fp, r0, #1
 802279e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80227a2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80227a6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80227aa:	ea4b 0101 	orr.w	r1, fp, r1
 80227ae:	f102 0b01 	add.w	fp, r2, #1
 80227b2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80227b6:	0952      	lsrs	r2, r2, #5
 80227b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80227bc:	4311      	orrs	r1, r2
 80227be:	f8ae 1000 	strh.w	r1, [lr]
 80227c2:	e79f      	b.n	8022704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 80227c4:	b013      	add	sp, #76	; 0x4c
 80227c6:	ecbd 8b08 	vpop	{d8-d11}
 80227ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ce:	bf00      	nop
 80227d0:	20060c58 	.word	0x20060c58

080227d4 <CRC_Lock>:
 80227d4:	4a20      	ldr	r2, [pc, #128]	; (8022858 <CRC_Lock+0x84>)
 80227d6:	b530      	push	{r4, r5, lr}
 80227d8:	6813      	ldr	r3, [r2, #0]
 80227da:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80227de:	f24c 2540 	movw	r5, #49728	; 0xc240
 80227e2:	f023 0301 	bic.w	r3, r3, #1
 80227e6:	6013      	str	r3, [r2, #0]
 80227e8:	4b1c      	ldr	r3, [pc, #112]	; (802285c <CRC_Lock+0x88>)
 80227ea:	681a      	ldr	r2, [r3, #0]
 80227ec:	4022      	ands	r2, r4
 80227ee:	42aa      	cmp	r2, r5
 80227f0:	d005      	beq.n	80227fe <CRC_Lock+0x2a>
 80227f2:	681b      	ldr	r3, [r3, #0]
 80227f4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80227f8:	4023      	ands	r3, r4
 80227fa:	4293      	cmp	r3, r2
 80227fc:	d124      	bne.n	8022848 <CRC_Lock+0x74>
 80227fe:	4b18      	ldr	r3, [pc, #96]	; (8022860 <CRC_Lock+0x8c>)
 8022800:	681b      	ldr	r3, [r3, #0]
 8022802:	bb0b      	cbnz	r3, 8022848 <CRC_Lock+0x74>
 8022804:	4b17      	ldr	r3, [pc, #92]	; (8022864 <CRC_Lock+0x90>)
 8022806:	681a      	ldr	r2, [r3, #0]
 8022808:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802280c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8022810:	d00d      	beq.n	802282e <CRC_Lock+0x5a>
 8022812:	681a      	ldr	r2, [r3, #0]
 8022814:	f240 4483 	movw	r4, #1155	; 0x483
 8022818:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802281c:	42a2      	cmp	r2, r4
 802281e:	d006      	beq.n	802282e <CRC_Lock+0x5a>
 8022820:	681b      	ldr	r3, [r3, #0]
 8022822:	f240 4285 	movw	r2, #1157	; 0x485
 8022826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802282a:	4293      	cmp	r3, r2
 802282c:	d10c      	bne.n	8022848 <CRC_Lock+0x74>
 802282e:	4b0e      	ldr	r3, [pc, #56]	; (8022868 <CRC_Lock+0x94>)
 8022830:	2201      	movs	r2, #1
 8022832:	601a      	str	r2, [r3, #0]
 8022834:	681a      	ldr	r2, [r3, #0]
 8022836:	2a00      	cmp	r2, #0
 8022838:	d1fc      	bne.n	8022834 <CRC_Lock+0x60>
 802283a:	4b0c      	ldr	r3, [pc, #48]	; (802286c <CRC_Lock+0x98>)
 802283c:	6018      	str	r0, [r3, #0]
 802283e:	6818      	ldr	r0, [r3, #0]
 8022840:	1a43      	subs	r3, r0, r1
 8022842:	4258      	negs	r0, r3
 8022844:	4158      	adcs	r0, r3
 8022846:	bd30      	pop	{r4, r5, pc}
 8022848:	4b09      	ldr	r3, [pc, #36]	; (8022870 <CRC_Lock+0x9c>)
 802284a:	2201      	movs	r2, #1
 802284c:	601a      	str	r2, [r3, #0]
 802284e:	681a      	ldr	r2, [r3, #0]
 8022850:	2a00      	cmp	r2, #0
 8022852:	d1fc      	bne.n	802284e <CRC_Lock+0x7a>
 8022854:	4b07      	ldr	r3, [pc, #28]	; (8022874 <CRC_Lock+0xa0>)
 8022856:	e7f1      	b.n	802283c <CRC_Lock+0x68>
 8022858:	e0002000 	.word	0xe0002000
 802285c:	e000ed00 	.word	0xe000ed00
 8022860:	e0042000 	.word	0xe0042000
 8022864:	5c001000 	.word	0x5c001000
 8022868:	58024c08 	.word	0x58024c08
 802286c:	58024c00 	.word	0x58024c00
 8022870:	40023008 	.word	0x40023008
 8022874:	40023000 	.word	0x40023000

08022878 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022878:	6101      	str	r1, [r0, #16]
 802287a:	4770      	bx	lr

0802287c <_ZN8touchgfx8Gestures4tickEv>:
 802287c:	7b83      	ldrb	r3, [r0, #14]
 802287e:	b14b      	cbz	r3, 8022894 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022880:	8903      	ldrh	r3, [r0, #8]
 8022882:	3301      	adds	r3, #1
 8022884:	b29b      	uxth	r3, r3
 8022886:	2b07      	cmp	r3, #7
 8022888:	8103      	strh	r3, [r0, #8]
 802288a:	bf81      	itttt	hi
 802288c:	2300      	movhi	r3, #0
 802288e:	8143      	strhhi	r3, [r0, #10]
 8022890:	8183      	strhhi	r3, [r0, #12]
 8022892:	7383      	strbhi	r3, [r0, #14]
 8022894:	4770      	bx	lr
	...

08022898 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022898:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802289c:	4604      	mov	r4, r0
 802289e:	4698      	mov	r8, r3
 80228a0:	8880      	ldrh	r0, [r0, #4]
 80228a2:	4617      	mov	r7, r2
 80228a4:	4b1d      	ldr	r3, [pc, #116]	; (802291c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80228a6:	460e      	mov	r6, r1
 80228a8:	f8ad 0006 	strh.w	r0, [sp, #6]
 80228ac:	eba8 0000 	sub.w	r0, r8, r0
 80228b0:	9300      	str	r3, [sp, #0]
 80228b2:	2300      	movs	r3, #0
 80228b4:	b280      	uxth	r0, r0
 80228b6:	8aa2      	ldrh	r2, [r4, #20]
 80228b8:	f88d 3004 	strb.w	r3, [sp, #4]
 80228bc:	b203      	sxth	r3, r0
 80228be:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80228c2:	88e1      	ldrh	r1, [r4, #6]
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80228ca:	f8ad 1008 	strh.w	r1, [sp, #8]
 80228ce:	bfb8      	it	lt
 80228d0:	4240      	neglt	r0, r0
 80228d2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80228d6:	bfb8      	it	lt
 80228d8:	b203      	sxthlt	r3, r0
 80228da:	4293      	cmp	r3, r2
 80228dc:	dc08      	bgt.n	80228f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80228de:	1a69      	subs	r1, r5, r1
 80228e0:	b289      	uxth	r1, r1
 80228e2:	b20b      	sxth	r3, r1
 80228e4:	2b00      	cmp	r3, #0
 80228e6:	bfbc      	itt	lt
 80228e8:	4249      	neglt	r1, r1
 80228ea:	b20b      	sxthlt	r3, r1
 80228ec:	429a      	cmp	r2, r3
 80228ee:	da13      	bge.n	8022918 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80228f0:	6920      	ldr	r0, [r4, #16]
 80228f2:	4669      	mov	r1, sp
 80228f4:	eba8 0606 	sub.w	r6, r8, r6
 80228f8:	1bef      	subs	r7, r5, r7
 80228fa:	6803      	ldr	r3, [r0, #0]
 80228fc:	685b      	ldr	r3, [r3, #4]
 80228fe:	4798      	blx	r3
 8022900:	2300      	movs	r3, #0
 8022902:	2001      	movs	r0, #1
 8022904:	8166      	strh	r6, [r4, #10]
 8022906:	8123      	strh	r3, [r4, #8]
 8022908:	81a7      	strh	r7, [r4, #12]
 802290a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802290e:	80e5      	strh	r5, [r4, #6]
 8022910:	73a0      	strb	r0, [r4, #14]
 8022912:	b004      	add	sp, #16
 8022914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022918:	2000      	movs	r0, #0
 802291a:	e7fa      	b.n	8022912 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802291c:	0802b528 	.word	0x0802b528

08022920 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022922:	461e      	mov	r6, r3
 8022924:	1e4b      	subs	r3, r1, #1
 8022926:	b085      	sub	sp, #20
 8022928:	4604      	mov	r4, r0
 802292a:	2b01      	cmp	r3, #1
 802292c:	460d      	mov	r5, r1
 802292e:	4617      	mov	r7, r2
 8022930:	d84b      	bhi.n	80229ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022932:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022936:	1cd3      	adds	r3, r2, #3
 8022938:	b29b      	uxth	r3, r3
 802293a:	2b06      	cmp	r3, #6
 802293c:	d916      	bls.n	802296c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802293e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80229e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022942:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022946:	f8cd c004 	str.w	ip, [sp, #4]
 802294a:	f04f 0c00 	mov.w	ip, #0
 802294e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022952:	6900      	ldr	r0, [r0, #16]
 8022954:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022958:	a901      	add	r1, sp, #4
 802295a:	f88d c008 	strb.w	ip, [sp, #8]
 802295e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022962:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022966:	6803      	ldr	r3, [r0, #0]
 8022968:	689b      	ldr	r3, [r3, #8]
 802296a:	4798      	blx	r3
 802296c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022970:	1cd3      	adds	r3, r2, #3
 8022972:	b29b      	uxth	r3, r3
 8022974:	2b06      	cmp	r3, #6
 8022976:	d916      	bls.n	80229a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022978:	f8df c064 	ldr.w	ip, [pc, #100]	; 80229e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802297c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022980:	f8cd c004 	str.w	ip, [sp, #4]
 8022984:	f04f 0c01 	mov.w	ip, #1
 8022988:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802298c:	6920      	ldr	r0, [r4, #16]
 802298e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022992:	a901      	add	r1, sp, #4
 8022994:	f88d c008 	strb.w	ip, [sp, #8]
 8022998:	f8ad 200a 	strh.w	r2, [sp, #10]
 802299c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80229a0:	6803      	ldr	r3, [r0, #0]
 80229a2:	689b      	ldr	r3, [r3, #8]
 80229a4:	4798      	blx	r3
 80229a6:	4b0d      	ldr	r3, [pc, #52]	; (80229dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80229a8:	a901      	add	r1, sp, #4
 80229aa:	6920      	ldr	r0, [r4, #16]
 80229ac:	9301      	str	r3, [sp, #4]
 80229ae:	2300      	movs	r3, #0
 80229b0:	f88d 5008 	strb.w	r5, [sp, #8]
 80229b4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80229b8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80229bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80229c0:	6803      	ldr	r3, [r0, #0]
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	4798      	blx	r3
 80229c6:	b005      	add	sp, #20
 80229c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80229ca:	2900      	cmp	r1, #0
 80229cc:	d1eb      	bne.n	80229a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80229ce:	80a2      	strh	r2, [r4, #4]
 80229d0:	80c6      	strh	r6, [r0, #6]
 80229d2:	60a1      	str	r1, [r4, #8]
 80229d4:	81a1      	strh	r1, [r4, #12]
 80229d6:	73a1      	strb	r1, [r4, #14]
 80229d8:	e7e5      	b.n	80229a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80229da:	bf00      	nop
 80229dc:	0802b514 	.word	0x0802b514
 80229e0:	0802b53c 	.word	0x0802b53c

080229e4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 80229e4:	10c9      	asrs	r1, r1, #3
 80229e6:	2900      	cmp	r1, #0
 80229e8:	bfb8      	it	lt
 80229ea:	4249      	neglt	r1, r1
 80229ec:	2801      	cmp	r0, #1
 80229ee:	d108      	bne.n	8022a02 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 80229f0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80229f4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80229f8:	4601      	mov	r1, r0
 80229fa:	dd02      	ble.n	8022a02 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 80229fc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8022a00:	4770      	bx	lr
 8022a02:	29ff      	cmp	r1, #255	; 0xff
 8022a04:	bfa8      	it	ge
 8022a06:	21ff      	movge	r1, #255	; 0xff
 8022a08:	4608      	mov	r0, r1
 8022a0a:	4770      	bx	lr

08022a0c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8022a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a10:	688c      	ldr	r4, [r1, #8]
 8022a12:	b087      	sub	sp, #28
 8022a14:	4607      	mov	r7, r0
 8022a16:	2c00      	cmp	r4, #0
 8022a18:	db2b      	blt.n	8022a72 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022a1a:	6803      	ldr	r3, [r0, #0]
 8022a1c:	691a      	ldr	r2, [r3, #16]
 8022a1e:	42a2      	cmp	r2, r4
 8022a20:	dd27      	ble.n	8022a72 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022a22:	685a      	ldr	r2, [r3, #4]
 8022a24:	695e      	ldr	r6, [r3, #20]
 8022a26:	68cd      	ldr	r5, [r1, #12]
 8022a28:	fb06 2604 	mla	r6, r6, r4, r2
 8022a2c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8022a30:	698a      	ldr	r2, [r1, #24]
 8022a32:	f893 a008 	ldrb.w	sl, [r3, #8]
 8022a36:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8022a3a:	9205      	str	r2, [sp, #20]
 8022a3c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8022a40:	9b05      	ldr	r3, [sp, #20]
 8022a42:	6839      	ldr	r1, [r7, #0]
 8022a44:	eb03 0c02 	add.w	ip, r3, r2
 8022a48:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8022a4c:	68c9      	ldr	r1, [r1, #12]
 8022a4e:	1898      	adds	r0, r3, r2
 8022a50:	4288      	cmp	r0, r1
 8022a52:	db02      	blt.n	8022a5a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8022a54:	1a8b      	subs	r3, r1, r2
 8022a56:	2b00      	cmp	r3, #0
 8022a58:	dd09      	ble.n	8022a6e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8022a5a:	6878      	ldr	r0, [r7, #4]
 8022a5c:	6801      	ldr	r1, [r0, #0]
 8022a5e:	9400      	str	r4, [sp, #0]
 8022a60:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8022a64:	4653      	mov	r3, sl
 8022a66:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8022a6a:	4631      	mov	r1, r6
 8022a6c:	47d8      	blx	fp
 8022a6e:	3d01      	subs	r5, #1
 8022a70:	d1e4      	bne.n	8022a3c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8022a72:	b007      	add	sp, #28
 8022a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a78 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8022a78:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8022a7c:	b90b      	cbnz	r3, 8022a82 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8022a7e:	f001 bf31 	b.w	80248e4 <_ZN8touchgfx7Outline6lineToEii>
 8022a82:	4770      	bx	lr

08022a84 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8022a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a88:	4604      	mov	r4, r0
 8022a8a:	2600      	movs	r6, #0
 8022a8c:	4b8f      	ldr	r3, [pc, #572]	; (8022ccc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8022a8e:	f100 0518 	add.w	r5, r0, #24
 8022a92:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8022a96:	b086      	sub	sp, #24
 8022a98:	4690      	mov	r8, r2
 8022a9a:	e9c0 3100 	strd	r3, r1, [r0]
 8022a9e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8022aa2:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8022aa6:	4628      	mov	r0, r5
 8022aa8:	f002 f940 	bl	8024d2c <_ZN8touchgfx15RenderingBufferC1Ev>
 8022aac:	4638      	mov	r0, r7
 8022aae:	f001 f8e5 	bl	8023c7c <_ZN8touchgfx7OutlineC1Ev>
 8022ab2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8022ab6:	f002 f8e1 	bl	8024c7c <_ZN8touchgfx8ScanlineC1Ev>
 8022aba:	2301      	movs	r3, #1
 8022abc:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8022ac0:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8022ac4:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8022ac8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022acc:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8022ad0:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8022ad4:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8022ad8:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8022adc:	f7ef f8f2 	bl	8011cc4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8022ae0:	b928      	cbnz	r0, 8022aee <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 8022ae2:	4b7b      	ldr	r3, [pc, #492]	; (8022cd0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8022ae4:	212d      	movs	r1, #45	; 0x2d
 8022ae6:	4a7b      	ldr	r2, [pc, #492]	; (8022cd4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8022ae8:	487b      	ldr	r0, [pc, #492]	; (8022cd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8022aea:	f002 fc5d 	bl	80253a8 <__assert_func>
 8022aee:	f9b8 2000 	ldrsh.w	r2, [r8]
 8022af2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8022af6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8022afa:	4410      	add	r0, r2
 8022afc:	9602      	str	r6, [sp, #8]
 8022afe:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8022b02:	b280      	uxth	r0, r0
 8022b04:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8022b08:	fa0f fa80 	sxth.w	sl, r0
 8022b0c:	f1ba 0f00 	cmp.w	sl, #0
 8022b10:	dd70      	ble.n	8022bf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8022b12:	4591      	cmp	r9, r2
 8022b14:	dd6e      	ble.n	8022bf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8022b16:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8022b1a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8022b1e:	440b      	add	r3, r1
 8022b20:	b29b      	uxth	r3, r3
 8022b22:	b21e      	sxth	r6, r3
 8022b24:	2e00      	cmp	r6, #0
 8022b26:	dd65      	ble.n	8022bf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8022b28:	458e      	cmp	lr, r1
 8022b2a:	dd63      	ble.n	8022bf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8022b2c:	45d1      	cmp	r9, sl
 8022b2e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8022b32:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8022b36:	bfb8      	it	lt
 8022b38:	fa1f f089 	uxthlt.w	r0, r9
 8022b3c:	45b6      	cmp	lr, r6
 8022b3e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022b42:	bfb8      	it	lt
 8022b44:	fa1f f38e 	uxthlt.w	r3, lr
 8022b48:	1a80      	subs	r0, r0, r2
 8022b4a:	f8ad 100a 	strh.w	r1, [sp, #10]
 8022b4e:	1a5b      	subs	r3, r3, r1
 8022b50:	f8ad 000c 	strh.w	r0, [sp, #12]
 8022b54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022b58:	f10d 0808 	add.w	r8, sp, #8
 8022b5c:	ae04      	add	r6, sp, #16
 8022b5e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022b62:	e886 0003 	stmia.w	r6, {r0, r1}
 8022b66:	f8dc 3000 	ldr.w	r3, [ip]
 8022b6a:	4660      	mov	r0, ip
 8022b6c:	4631      	mov	r1, r6
 8022b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b70:	4798      	blx	r3
 8022b72:	6861      	ldr	r1, [r4, #4]
 8022b74:	4640      	mov	r0, r8
 8022b76:	3104      	adds	r1, #4
 8022b78:	f7f0 fbfa 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022b7c:	4630      	mov	r0, r6
 8022b7e:	f7f0 fbb3 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022b82:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8022b86:	f7ef f82d 	bl	8011be4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8022b8a:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8022b8e:	4638      	mov	r0, r7
 8022b90:	f001 f850 	bl	8023c34 <_ZN8touchgfx7Outline5resetEv>
 8022b94:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022b98:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022b9c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8022ba0:	015b      	lsls	r3, r3, #5
 8022ba2:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8022ba6:	0152      	lsls	r2, r2, #5
 8022ba8:	60e3      	str	r3, [r4, #12]
 8022baa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022bae:	60a2      	str	r2, [r4, #8]
 8022bb0:	015b      	lsls	r3, r3, #5
 8022bb2:	6123      	str	r3, [r4, #16]
 8022bb4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8022bb8:	015b      	lsls	r3, r3, #5
 8022bba:	6163      	str	r3, [r4, #20]
 8022bbc:	4b47      	ldr	r3, [pc, #284]	; (8022cdc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8022bbe:	6818      	ldr	r0, [r3, #0]
 8022bc0:	6803      	ldr	r3, [r0, #0]
 8022bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bc4:	4798      	blx	r3
 8022bc6:	4606      	mov	r6, r0
 8022bc8:	f7e1 fe76 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 8022bcc:	6803      	ldr	r3, [r0, #0]
 8022bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bd0:	4798      	blx	r3
 8022bd2:	4607      	mov	r7, r0
 8022bd4:	f7e1 fe70 	bl	80048b8 <_ZN8touchgfx3HAL3lcdEv>
 8022bd8:	6803      	ldr	r3, [r0, #0]
 8022bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022bdc:	4798      	blx	r3
 8022bde:	280d      	cmp	r0, #13
 8022be0:	d854      	bhi.n	8022c8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 8022be2:	e8df f000 	tbb	[pc, r0]
 8022be6:	554b      	.short	0x554b
 8022be8:	2b6e0a66 	.word	0x2b6e0a66
 8022bec:	5f5f5f3b 	.word	0x5f5f5f3b
 8022bf0:	6e6e5f5f 	.word	0x6e6e5f5f
 8022bf4:	2300      	movs	r3, #0
 8022bf6:	9303      	str	r3, [sp, #12]
 8022bf8:	e7ae      	b.n	8022b58 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8022bfa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022bfe:	2108      	movs	r1, #8
 8022c00:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c04:	fb92 f1f1 	sdiv	r1, r2, r1
 8022c08:	fb07 1303 	mla	r3, r7, r3, r1
 8022c0c:	441e      	add	r6, r3
 8022c0e:	4253      	negs	r3, r2
 8022c10:	f002 0207 	and.w	r2, r2, #7
 8022c14:	f003 0307 	and.w	r3, r3, #7
 8022c18:	bf58      	it	pl
 8022c1a:	425a      	negpl	r2, r3
 8022c1c:	b2d2      	uxtb	r2, r2
 8022c1e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022c22:	4628      	mov	r0, r5
 8022c24:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8022c28:	6721      	str	r1, [r4, #112]	; 0x70
 8022c2a:	e9cd 1700 	strd	r1, r7, [sp]
 8022c2e:	4631      	mov	r1, r6
 8022c30:	f002 f888 	bl	8024d44 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8022c34:	4620      	mov	r0, r4
 8022c36:	b006      	add	sp, #24
 8022c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c3c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022c40:	2104      	movs	r1, #4
 8022c42:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c46:	fb92 f1f1 	sdiv	r1, r2, r1
 8022c4a:	fb07 1303 	mla	r3, r7, r3, r1
 8022c4e:	441e      	add	r6, r3
 8022c50:	4253      	negs	r3, r2
 8022c52:	f002 0203 	and.w	r2, r2, #3
 8022c56:	f003 0303 	and.w	r3, r3, #3
 8022c5a:	e7dd      	b.n	8022c18 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8022c5c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022c60:	2102      	movs	r1, #2
 8022c62:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c66:	2a00      	cmp	r2, #0
 8022c68:	fb92 f1f1 	sdiv	r1, r2, r1
 8022c6c:	f002 0201 	and.w	r2, r2, #1
 8022c70:	fb07 1303 	mla	r3, r7, r3, r1
 8022c74:	bfb8      	it	lt
 8022c76:	4252      	neglt	r2, r2
 8022c78:	441e      	add	r6, r3
 8022c7a:	e7cf      	b.n	8022c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 8022c7c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c80:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022c84:	437b      	muls	r3, r7
 8022c86:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8022c8a:	441e      	add	r6, r3
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	e7c6      	b.n	8022c1e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 8022c90:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c94:	2103      	movs	r1, #3
 8022c96:	fb07 f203 	mul.w	r2, r7, r3
 8022c9a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8022c9e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8022ca2:	e7f2      	b.n	8022c8a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8022ca4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022ca8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022cac:	fb07 2303 	mla	r3, r7, r3, r2
 8022cb0:	e7eb      	b.n	8022c8a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8022cb2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022cb6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022cba:	437b      	muls	r3, r7
 8022cbc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022cc0:	e7e3      	b.n	8022c8a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8022cc2:	4b07      	ldr	r3, [pc, #28]	; (8022ce0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 8022cc4:	216c      	movs	r1, #108	; 0x6c
 8022cc6:	4a03      	ldr	r2, [pc, #12]	; (8022cd4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8022cc8:	e70e      	b.n	8022ae8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8022cca:	bf00      	nop
 8022ccc:	0802c918 	.word	0x0802c918
 8022cd0:	0802c861 	.word	0x0802c861
 8022cd4:	0802c920 	.word	0x0802c920
 8022cd8:	0802c8bd 	.word	0x0802c8bd
 8022cdc:	20060c30 	.word	0x20060c30
 8022ce0:	0802c8f1 	.word	0x0802c8f1

08022ce4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8022ce4:	6812      	ldr	r2, [r2, #0]
 8022ce6:	2a00      	cmp	r2, #0
 8022ce8:	db0b      	blt.n	8022d02 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8022cea:	9800      	ldr	r0, [sp, #0]
 8022cec:	6800      	ldr	r0, [r0, #0]
 8022cee:	4290      	cmp	r0, r2
 8022cf0:	bfd4      	ite	le
 8022cf2:	2002      	movle	r0, #2
 8022cf4:	2000      	movgt	r0, #0
 8022cf6:	680a      	ldr	r2, [r1, #0]
 8022cf8:	2a00      	cmp	r2, #0
 8022cfa:	da04      	bge.n	8022d06 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8022cfc:	f040 0004 	orr.w	r0, r0, #4
 8022d00:	4770      	bx	lr
 8022d02:	2001      	movs	r0, #1
 8022d04:	e7f7      	b.n	8022cf6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8022d06:	681b      	ldr	r3, [r3, #0]
 8022d08:	4293      	cmp	r3, r2
 8022d0a:	bfd8      	it	le
 8022d0c:	f040 0008 	orrle.w	r0, r0, #8
 8022d10:	4770      	bx	lr
	...

08022d14 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8022d14:	4b07      	ldr	r3, [pc, #28]	; (8022d34 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8022d16:	b510      	push	{r4, lr}
 8022d18:	781b      	ldrb	r3, [r3, #0]
 8022d1a:	2b01      	cmp	r3, #1
 8022d1c:	d108      	bne.n	8022d30 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8022d1e:	6843      	ldr	r3, [r0, #4]
 8022d20:	6814      	ldr	r4, [r2, #0]
 8022d22:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8022d26:	680b      	ldr	r3, [r1, #0]
 8022d28:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8022d2c:	6013      	str	r3, [r2, #0]
 8022d2e:	600c      	str	r4, [r1, #0]
 8022d30:	bd10      	pop	{r4, pc}
 8022d32:	bf00      	nop
 8022d34:	20060c28 	.word	0x20060c28

08022d38 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8022d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d3a:	b085      	sub	sp, #20
 8022d3c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8022d40:	4604      	mov	r4, r0
 8022d42:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8022d46:	b33b      	cbz	r3, 8022d98 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8022d48:	aa02      	add	r2, sp, #8
 8022d4a:	a903      	add	r1, sp, #12
 8022d4c:	f7ff ffe2 	bl	8022d14 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022d50:	68a3      	ldr	r3, [r4, #8]
 8022d52:	9e03      	ldr	r6, [sp, #12]
 8022d54:	aa02      	add	r2, sp, #8
 8022d56:	9f02      	ldr	r7, [sp, #8]
 8022d58:	a903      	add	r1, sp, #12
 8022d5a:	1af6      	subs	r6, r6, r3
 8022d5c:	68e3      	ldr	r3, [r4, #12]
 8022d5e:	4620      	mov	r0, r4
 8022d60:	1aff      	subs	r7, r7, r3
 8022d62:	f104 0314 	add.w	r3, r4, #20
 8022d66:	9603      	str	r6, [sp, #12]
 8022d68:	9300      	str	r3, [sp, #0]
 8022d6a:	f104 0310 	add.w	r3, r4, #16
 8022d6e:	9702      	str	r7, [sp, #8]
 8022d70:	f7ff ffb8 	bl	8022ce4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8022d74:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8022d78:	4605      	mov	r5, r0
 8022d7a:	b97b      	cbnz	r3, 8022d9c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8022d7c:	463a      	mov	r2, r7
 8022d7e:	4631      	mov	r1, r6
 8022d80:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8022d84:	f7ff fe78 	bl	8022a78 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022d88:	9b03      	ldr	r3, [sp, #12]
 8022d8a:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8022d8e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8022d92:	9b02      	ldr	r3, [sp, #8]
 8022d94:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8022d98:	b005      	add	sp, #20
 8022d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d9c:	b110      	cbz	r0, 8022da4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8022d9e:	ea13 0200 	ands.w	r2, r3, r0
 8022da2:	d11c      	bne.n	8022dde <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8022da4:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8022da8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8022dac:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8022db0:	b188      	cbz	r0, 8022dd6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8022db2:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8022db6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8022dba:	b913      	cbnz	r3, 8022dc2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8022dbc:	4630      	mov	r0, r6
 8022dbe:	f001 fdc1 	bl	8024944 <_ZN8touchgfx7Outline6moveToEii>
 8022dc2:	2300      	movs	r3, #0
 8022dc4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022dc8:	2301      	movs	r3, #1
 8022dca:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8022dce:	4630      	mov	r0, r6
 8022dd0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8022dd4:	e7d6      	b.n	8022d84 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8022dd6:	4630      	mov	r0, r6
 8022dd8:	f7ff fe4e 	bl	8022a78 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022ddc:	e7f7      	b.n	8022dce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8022dde:	4615      	mov	r5, r2
 8022de0:	e7d2      	b.n	8022d88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08022de2 <_ZN8touchgfx6Canvas5closeEv>:
 8022de2:	b538      	push	{r3, r4, r5, lr}
 8022de4:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8022de8:	4604      	mov	r4, r0
 8022dea:	b993      	cbnz	r3, 8022e12 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022dec:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8022df0:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8022df4:	4213      	tst	r3, r2
 8022df6:	d10c      	bne.n	8022e12 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022df8:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8022dfc:	b123      	cbz	r3, 8022e08 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8022dfe:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 8022e02:	4628      	mov	r0, r5
 8022e04:	f7ff fe38 	bl	8022a78 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022e08:	4628      	mov	r0, r5
 8022e0a:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8022e0e:	f7ff fe33 	bl	8022a78 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022e12:	2300      	movs	r3, #0
 8022e14:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022e18:	bd38      	pop	{r3, r4, r5, pc}

08022e1a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8022e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e1c:	b085      	sub	sp, #20
 8022e1e:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8022e22:	4604      	mov	r4, r0
 8022e24:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8022e28:	b353      	cbz	r3, 8022e80 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8022e2a:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8022e2e:	b90b      	cbnz	r3, 8022e34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8022e30:	f7ff ffd7 	bl	8022de2 <_ZN8touchgfx6Canvas5closeEv>
 8022e34:	aa02      	add	r2, sp, #8
 8022e36:	a903      	add	r1, sp, #12
 8022e38:	4620      	mov	r0, r4
 8022e3a:	f7ff ff6b 	bl	8022d14 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022e3e:	68a3      	ldr	r3, [r4, #8]
 8022e40:	9d03      	ldr	r5, [sp, #12]
 8022e42:	aa02      	add	r2, sp, #8
 8022e44:	9e02      	ldr	r6, [sp, #8]
 8022e46:	a903      	add	r1, sp, #12
 8022e48:	1aed      	subs	r5, r5, r3
 8022e4a:	68e3      	ldr	r3, [r4, #12]
 8022e4c:	4620      	mov	r0, r4
 8022e4e:	1af6      	subs	r6, r6, r3
 8022e50:	f104 0314 	add.w	r3, r4, #20
 8022e54:	9503      	str	r5, [sp, #12]
 8022e56:	9300      	str	r3, [sp, #0]
 8022e58:	f104 0310 	add.w	r3, r4, #16
 8022e5c:	9602      	str	r6, [sp, #8]
 8022e5e:	f7ff ff41 	bl	8022ce4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8022e62:	4607      	mov	r7, r0
 8022e64:	b170      	cbz	r0, 8022e84 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8022e66:	2301      	movs	r3, #1
 8022e68:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022e6c:	9a03      	ldr	r2, [sp, #12]
 8022e6e:	9b02      	ldr	r3, [sp, #8]
 8022e70:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8022e74:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8022e78:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8022e7c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8022e80:	b005      	add	sp, #20
 8022e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e84:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8022e88:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8022e8c:	b92b      	cbnz	r3, 8022e9a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8022e8e:	4632      	mov	r2, r6
 8022e90:	4629      	mov	r1, r5
 8022e92:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8022e96:	f001 fd55 	bl	8024944 <_ZN8touchgfx7Outline6moveToEii>
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022ea0:	2301      	movs	r3, #1
 8022ea2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8022ea6:	e7e1      	b.n	8022e6c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08022ea8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8022ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eac:	4604      	mov	r4, r0
 8022eae:	b087      	sub	sp, #28
 8022eb0:	9105      	str	r1, [sp, #20]
 8022eb2:	f001 fe8c 	bl	8024bce <_ZN8touchgfx7Outline8getCellsEv>
 8022eb6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8022eba:	4605      	mov	r5, r0
 8022ebc:	f1b9 0f00 	cmp.w	r9, #0
 8022ec0:	d103      	bne.n	8022eca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8022ec2:	2001      	movs	r0, #1
 8022ec4:	b007      	add	sp, #28
 8022ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eca:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8022ece:	2e00      	cmp	r6, #0
 8022ed0:	d139      	bne.n	8022f46 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8022ed2:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8022ed6:	f105 0708 	add.w	r7, r5, #8
 8022eda:	4640      	mov	r0, r8
 8022edc:	f001 feb9 	bl	8024c52 <_ZN8touchgfx8Scanline5resetEv>
 8022ee0:	f109 33ff 	add.w	r3, r9, #4294967295
 8022ee4:	9303      	str	r3, [sp, #12]
 8022ee6:	f9b5 b000 	ldrsh.w	fp, [r5]
 8022eea:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8022eee:	46da      	mov	sl, fp
 8022ef0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8022ef4:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8022ef8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8022efc:	9b03      	ldr	r3, [sp, #12]
 8022efe:	4416      	add	r6, r2
 8022f00:	9504      	str	r5, [sp, #16]
 8022f02:	463d      	mov	r5, r7
 8022f04:	3b01      	subs	r3, #1
 8022f06:	9303      	str	r3, [sp, #12]
 8022f08:	3301      	adds	r3, #1
 8022f0a:	d01e      	beq.n	8022f4a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8022f0c:	3708      	adds	r7, #8
 8022f0e:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8022f12:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8022f16:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8022f1a:	4290      	cmp	r0, r2
 8022f1c:	d11e      	bne.n	8022f5c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8022f1e:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8022f22:	4411      	add	r1, r2
 8022f24:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8022f28:	e7e8      	b.n	8022efc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8022f2a:	1c91      	adds	r1, r2, #2
 8022f2c:	f04f 0301 	mov.w	r3, #1
 8022f30:	65e1      	str	r1, [r4, #92]	; 0x5c
 8022f32:	8053      	strh	r3, [r2, #2]
 8022f34:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8022f36:	1c91      	adds	r1, r2, #2
 8022f38:	65a1      	str	r1, [r4, #88]	; 0x58
 8022f3a:	f8a2 b002 	strh.w	fp, [r2, #2]
 8022f3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022f40:	3201      	adds	r2, #1
 8022f42:	6562      	str	r2, [r4, #84]	; 0x54
 8022f44:	e03a      	b.n	8022fbc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8022f46:	2000      	movs	r0, #0
 8022f48:	e7bc      	b.n	8022ec4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8022f4a:	b951      	cbnz	r1, 8022f62 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8022f4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	d0b7      	beq.n	8022ec2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8022f52:	4641      	mov	r1, r8
 8022f54:	9805      	ldr	r0, [sp, #20]
 8022f56:	f7ff fd59 	bl	8022a0c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022f5a:	e7b2      	b.n	8022ec2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8022f5c:	2900      	cmp	r1, #0
 8022f5e:	d035      	beq.n	8022fcc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8022f60:	9504      	str	r5, [sp, #16]
 8022f62:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8022f66:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8022f6a:	f7ff fd3b 	bl	80229e4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8022f6e:	4605      	mov	r5, r0
 8022f70:	b330      	cbz	r0, 8022fc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022f72:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022f74:	b182      	cbz	r2, 8022f98 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8022f76:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8022f78:	4591      	cmp	r9, r2
 8022f7a:	d00d      	beq.n	8022f98 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8022f7c:	4641      	mov	r1, r8
 8022f7e:	9805      	ldr	r0, [sp, #20]
 8022f80:	f7ff fd44 	bl	8022a0c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022f84:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022f88:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8022f8a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8022f8e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8022f90:	2300      	movs	r3, #0
 8022f92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022f94:	6563      	str	r3, [r4, #84]	; 0x54
 8022f96:	65a2      	str	r2, [r4, #88]	; 0x58
 8022f98:	f1bb 0f00 	cmp.w	fp, #0
 8022f9c:	db10      	blt.n	8022fc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022f9e:	f7ee fe9f 	bl	8011ce0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022fa2:	4583      	cmp	fp, r0
 8022fa4:	da0c      	bge.n	8022fc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022fa6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8022fa8:	f802 500b 	strb.w	r5, [r2, fp]
 8022fac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8022fae:	3201      	adds	r2, #1
 8022fb0:	4593      	cmp	fp, r2
 8022fb2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8022fb4:	d1b9      	bne.n	8022f2a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8022fb6:	8811      	ldrh	r1, [r2, #0]
 8022fb8:	3101      	adds	r1, #1
 8022fba:	8011      	strh	r1, [r2, #0]
 8022fbc:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8022fc0:	9b03      	ldr	r3, [sp, #12]
 8022fc2:	3301      	adds	r3, #1
 8022fc4:	d0c2      	beq.n	8022f4c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8022fc6:	f10b 0a01 	add.w	sl, fp, #1
 8022fca:	9d04      	ldr	r5, [sp, #16]
 8022fcc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8022fd0:	4553      	cmp	r3, sl
 8022fd2:	dd88      	ble.n	8022ee6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8022fd4:	01b1      	lsls	r1, r6, #6
 8022fd6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8022fda:	f7ff fd03 	bl	80229e4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8022fde:	4683      	mov	fp, r0
 8022fe0:	2800      	cmp	r0, #0
 8022fe2:	d080      	beq.n	8022ee6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8022fe4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022fe6:	b183      	cbz	r3, 802300a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8022fe8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8022fea:	4599      	cmp	r9, r3
 8022fec:	d00d      	beq.n	802300a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8022fee:	4641      	mov	r1, r8
 8022ff0:	9805      	ldr	r0, [sp, #20]
 8022ff2:	f7ff fd0b 	bl	8022a0c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022ff6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022ffa:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8022ffe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023000:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023004:	65a3      	str	r3, [r4, #88]	; 0x58
 8023006:	2300      	movs	r3, #0
 8023008:	6563      	str	r3, [r4, #84]	; 0x54
 802300a:	f9b5 3000 	ldrsh.w	r3, [r5]
 802300e:	464a      	mov	r2, r9
 8023010:	f8cd b000 	str.w	fp, [sp]
 8023014:	4651      	mov	r1, sl
 8023016:	eba3 030a 	sub.w	r3, r3, sl
 802301a:	4640      	mov	r0, r8
 802301c:	f001 fe44 	bl	8024ca8 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023020:	e761      	b.n	8022ee6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08023022 <_ZN8touchgfx6Canvas6renderEh>:
 8023022:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023024:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8023028:	4604      	mov	r4, r0
 802302a:	460d      	mov	r5, r1
 802302c:	b913      	cbnz	r3, 8023034 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802302e:	2001      	movs	r0, #1
 8023030:	b003      	add	sp, #12
 8023032:	bd30      	pop	{r4, r5, pc}
 8023034:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8023038:	2b00      	cmp	r3, #0
 802303a:	d12f      	bne.n	802309c <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802303c:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8023040:	2b00      	cmp	r3, #0
 8023042:	d0f4      	beq.n	802302e <_ZN8touchgfx6Canvas6renderEh+0xc>
 8023044:	6840      	ldr	r0, [r0, #4]
 8023046:	6803      	ldr	r3, [r0, #0]
 8023048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802304a:	4798      	blx	r3
 802304c:	fb10 f105 	smulbb	r1, r0, r5
 8023050:	b288      	uxth	r0, r1
 8023052:	1c41      	adds	r1, r0, #1
 8023054:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023058:	120d      	asrs	r5, r1, #8
 802305a:	d0e8      	beq.n	802302e <_ZN8touchgfx6Canvas6renderEh+0xc>
 802305c:	4620      	mov	r0, r4
 802305e:	f7ff fec0 	bl	8022de2 <_ZN8touchgfx6Canvas5closeEv>
 8023062:	6860      	ldr	r0, [r4, #4]
 8023064:	6803      	ldr	r3, [r0, #0]
 8023066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023068:	4798      	blx	r3
 802306a:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802306e:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8023072:	8082      	strh	r2, [r0, #4]
 8023074:	80c3      	strh	r3, [r0, #6]
 8023076:	6860      	ldr	r0, [r4, #4]
 8023078:	6803      	ldr	r3, [r0, #0]
 802307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802307c:	4798      	blx	r3
 802307e:	7205      	strb	r5, [r0, #8]
 8023080:	6860      	ldr	r0, [r4, #4]
 8023082:	6803      	ldr	r3, [r0, #0]
 8023084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023086:	4798      	blx	r3
 8023088:	f104 0318 	add.w	r3, r4, #24
 802308c:	4669      	mov	r1, sp
 802308e:	e9cd 3000 	strd	r3, r0, [sp]
 8023092:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8023096:	f7ff ff07 	bl	8022ea8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802309a:	e7c9      	b.n	8023030 <_ZN8touchgfx6Canvas6renderEh+0xe>
 802309c:	2000      	movs	r0, #0
 802309e:	e7c7      	b.n	8023030 <_ZN8touchgfx6Canvas6renderEh+0xe>

080230a0 <_ZN8touchgfx6CanvasD1Ev>:
 80230a0:	b538      	push	{r3, r4, r5, lr}
 80230a2:	4605      	mov	r5, r0
 80230a4:	4b08      	ldr	r3, [pc, #32]	; (80230c8 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80230a6:	4604      	mov	r4, r0
 80230a8:	f845 3b30 	str.w	r3, [r5], #48
 80230ac:	4b07      	ldr	r3, [pc, #28]	; (80230cc <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80230ae:	6818      	ldr	r0, [r3, #0]
 80230b0:	6803      	ldr	r3, [r0, #0]
 80230b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80230b4:	4798      	blx	r3
 80230b6:	4628      	mov	r0, r5
 80230b8:	f000 fdb4 	bl	8023c24 <_ZN8touchgfx7OutlineD1Ev>
 80230bc:	f104 0018 	add.w	r0, r4, #24
 80230c0:	f001 fe2b 	bl	8024d1a <_ZN8touchgfx15RenderingBufferD1Ev>
 80230c4:	4620      	mov	r0, r4
 80230c6:	bd38      	pop	{r3, r4, r5, pc}
 80230c8:	0802c918 	.word	0x0802c918
 80230cc:	20060c30 	.word	0x20060c30

080230d0 <_ZN8touchgfx6CanvasD0Ev>:
 80230d0:	b510      	push	{r4, lr}
 80230d2:	4604      	mov	r4, r0
 80230d4:	f7ff ffe4 	bl	80230a0 <_ZN8touchgfx6CanvasD1Ev>
 80230d8:	21bc      	movs	r1, #188	; 0xbc
 80230da:	4620      	mov	r0, r4
 80230dc:	f001 ff91 	bl	8025002 <_ZdlPvj>
 80230e0:	4620      	mov	r0, r4
 80230e2:	bd10      	pop	{r4, pc}

080230e4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80230e4:	790b      	ldrb	r3, [r1, #4]
 80230e6:	2b00      	cmp	r3, #0
 80230e8:	bf0c      	ite	eq
 80230ea:	2301      	moveq	r3, #1
 80230ec:	2300      	movne	r3, #0
 80230ee:	b570      	push	{r4, r5, r6, lr}
 80230f0:	4604      	mov	r4, r0
 80230f2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80230f6:	460e      	mov	r6, r1
 80230f8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80230fc:	d109      	bne.n	8023112 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80230fe:	b14d      	cbz	r5, 8023114 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8023100:	7933      	ldrb	r3, [r6, #4]
 8023102:	2b01      	cmp	r3, #1
 8023104:	d10c      	bne.n	8023120 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8023106:	6823      	ldr	r3, [r4, #0]
 8023108:	4620      	mov	r0, r4
 802310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802310c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023110:	4718      	bx	r3
 8023112:	b12d      	cbz	r5, 8023120 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8023114:	6823      	ldr	r3, [r4, #0]
 8023116:	4620      	mov	r0, r4
 8023118:	695b      	ldr	r3, [r3, #20]
 802311a:	4798      	blx	r3
 802311c:	2d00      	cmp	r5, #0
 802311e:	d1ef      	bne.n	8023100 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8023120:	bd70      	pop	{r4, r5, r6, pc}

08023122 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8023122:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8023126:	4770      	bx	lr

08023128 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8023128:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 802312c:	4770      	bx	lr

0802312e <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 802312e:	6802      	ldr	r2, [r0, #0]
 8023130:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8023134:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023136:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 802313a:	4710      	bx	r2

0802313c <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 802313c:	6802      	ldr	r2, [r0, #0]
 802313e:	eef0 0a40 	vmov.f32	s1, s0
 8023142:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8023146:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023148:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 802314c:	4710      	bx	r2

0802314e <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 802314e:	6802      	ldr	r2, [r0, #0]
 8023150:	eeb0 1a40 	vmov.f32	s2, s0
 8023154:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8023158:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802315a:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 802315e:	4710      	bx	r2

08023160 <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8023160:	6802      	ldr	r2, [r0, #0]
 8023162:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8023166:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8023168:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 802316c:	4710      	bx	r2

0802316e <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 802316e:	6802      	ldr	r2, [r0, #0]
 8023170:	eef0 0a40 	vmov.f32	s1, s0
 8023174:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8023178:	6f92      	ldr	r2, [r2, #120]	; 0x78
 802317a:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 802317e:	4710      	bx	r2

08023180 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 8023180:	6802      	ldr	r2, [r0, #0]
 8023182:	eeb0 1a40 	vmov.f32	s2, s0
 8023186:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 802318a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 802318c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8023190:	4710      	bx	r2

08023192 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8023192:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8023196:	4770      	bx	lr

08023198 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8023198:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 802319c:	4770      	bx	lr

0802319e <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 802319e:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 80231a2:	4770      	bx	lr

080231a4 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 80231a4:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 80231a8:	4770      	bx	lr

080231aa <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 80231aa:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 80231ae:	4770      	bx	lr

080231b0 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 80231b0:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 80231b4:	4770      	bx	lr

080231b6 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 80231b6:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 80231ba:	4770      	bx	lr

080231bc <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 80231bc:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 80231c0:	4770      	bx	lr

080231c2 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 80231c2:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 80231c6:	4770      	bx	lr

080231c8 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 80231c8:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 80231cc:	4770      	bx	lr

080231ce <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 80231ce:	ee07 2a90 	vmov	s15, r2
 80231d2:	6803      	ldr	r3, [r0, #0]
 80231d4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80231d8:	ee07 1a90 	vmov	s15, r1
 80231dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80231e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80231e4:	4718      	bx	r3

080231e6 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 80231e6:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 80231ea:	4770      	bx	lr

080231ec <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 80231ec:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80231f0:	4770      	bx	lr

080231f2 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 80231f2:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 80231f6:	4770      	bx	lr

080231f8 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 80231f8:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 80231fc:	4770      	bx	lr

080231fe <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 80231fe:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8023202:	4770      	bx	lr

08023204 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8023204:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 8023208:	4770      	bx	lr

0802320a <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 802320a:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 802320e:	4770      	bx	lr

08023210 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8023210:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8023214:	4770      	bx	lr

08023216 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8023216:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 802321a:	4770      	bx	lr

0802321c <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 802321c:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 8023220:	4770      	bx	lr

08023222 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8023222:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 8023226:	4770      	bx	lr

08023228 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8023228:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 802322c:	4770      	bx	lr

0802322e <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 802322e:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8023232:	4770      	bx	lr

08023234 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8023234:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 8023238:	4770      	bx	lr

0802323a <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 802323a:	2200      	movs	r2, #0
 802323c:	8002      	strh	r2, [r0, #0]
 802323e:	8042      	strh	r2, [r0, #2]
 8023240:	8082      	strh	r2, [r0, #4]
 8023242:	80c2      	strh	r2, [r0, #6]
 8023244:	4770      	bx	lr

08023246 <_ZN8touchgfx13TextureMapperD1Ev>:
 8023246:	4770      	bx	lr

08023248 <_ZN8touchgfx13TextureMapperD0Ev>:
 8023248:	b510      	push	{r4, lr}
 802324a:	4604      	mov	r4, r0
 802324c:	2190      	movs	r1, #144	; 0x90
 802324e:	f001 fed8 	bl	8025002 <_ZdlPvj>
 8023252:	4620      	mov	r0, r4
 8023254:	bd10      	pop	{r4, pc}
	...

08023258 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8023258:	b538      	push	{r3, r4, r5, lr}
 802325a:	2301      	movs	r3, #1
 802325c:	2500      	movs	r5, #0
 802325e:	4604      	mov	r4, r0
 8023260:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8023264:	4b1f      	ldr	r3, [pc, #124]	; (80232e4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 8023266:	8085      	strh	r5, [r0, #4]
 8023268:	80c5      	strh	r5, [r0, #6]
 802326a:	8105      	strh	r5, [r0, #8]
 802326c:	8145      	strh	r5, [r0, #10]
 802326e:	8185      	strh	r5, [r0, #12]
 8023270:	81c5      	strh	r5, [r0, #14]
 8023272:	8205      	strh	r5, [r0, #16]
 8023274:	8245      	strh	r5, [r0, #18]
 8023276:	61c5      	str	r5, [r0, #28]
 8023278:	8405      	strh	r5, [r0, #32]
 802327a:	8445      	strh	r5, [r0, #34]	; 0x22
 802327c:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8023280:	6003      	str	r3, [r0, #0]
 8023282:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8023286:	880b      	ldrh	r3, [r1, #0]
 8023288:	84c3      	strh	r3, [r0, #38]	; 0x26
 802328a:	23ff      	movs	r3, #255	; 0xff
 802328c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8023290:	f7ee fc2b 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8023294:	4b14      	ldr	r3, [pc, #80]	; (80232e8 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8023296:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 802329a:	4914      	ldr	r1, [pc, #80]	; (80232ec <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 802329c:	6023      	str	r3, [r4, #0]
 802329e:	2300      	movs	r3, #0
 80232a0:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 80232a4:	4620      	mov	r0, r4
 80232a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80232a8:	6323      	str	r3, [r4, #48]	; 0x30
 80232aa:	6363      	str	r3, [r4, #52]	; 0x34
 80232ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80232ae:	63e3      	str	r3, [r4, #60]	; 0x3c
 80232b0:	6463      	str	r3, [r4, #68]	; 0x44
 80232b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80232b4:	6523      	str	r3, [r4, #80]	; 0x50
 80232b6:	6563      	str	r3, [r4, #84]	; 0x54
 80232b8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80232ba:	6623      	str	r3, [r4, #96]	; 0x60
 80232bc:	66a3      	str	r3, [r4, #104]	; 0x68
 80232be:	66e3      	str	r3, [r4, #108]	; 0x6c
 80232c0:	6763      	str	r3, [r4, #116]	; 0x74
 80232c2:	67a3      	str	r3, [r4, #120]	; 0x78
 80232c4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80232c8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80232cc:	230c      	movs	r3, #12
 80232ce:	6422      	str	r2, [r4, #64]	; 0x40
 80232d0:	64e1      	str	r1, [r4, #76]	; 0x4c
 80232d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80232d4:	6662      	str	r2, [r4, #100]	; 0x64
 80232d6:	6722      	str	r2, [r4, #112]	; 0x70
 80232d8:	67e2      	str	r2, [r4, #124]	; 0x7c
 80232da:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80232de:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 80232e2:	bd38      	pop	{r3, r4, r5, pc}
 80232e4:	0802afb8 	.word	0x0802afb8
 80232e8:	0802c978 	.word	0x0802c978
 80232ec:	447a0000 	.word	0x447a0000

080232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 80232f0:	b570      	push	{r4, r5, r6, lr}
 80232f2:	ed2d 8b04 	vpush	{d8-d9}
 80232f6:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 80232fa:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80232fc:	4604      	mov	r4, r0
 80232fe:	add0      	add	r5, sp, #832	; 0x340
 8023300:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8023304:	4628      	mov	r0, r5
 8023306:	f7f3 fb25 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802330a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 802330c:	4606      	mov	r6, r0
 802330e:	4628      	mov	r0, r5
 8023310:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 8023314:	f7f3 fb58 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802331c:	1c72      	adds	r2, r6, #1
 802331e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8023322:	3001      	adds	r0, #1
 8023324:	ee07 2a90 	vmov	s15, r2
 8023328:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 802332c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8023330:	ee06 0a90 	vmov	s13, r0
 8023334:	ee36 6a47 	vsub.f32	s12, s12, s14
 8023338:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802333a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802333e:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8023342:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8023346:	9312      	str	r3, [sp, #72]	; 0x48
 8023348:	9316      	str	r3, [sp, #88]	; 0x58
 802334a:	a830      	add	r0, sp, #192	; 0xc0
 802334c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8023350:	931a      	str	r3, [sp, #104]	; 0x68
 8023352:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8023356:	931e      	str	r3, [sp, #120]	; 0x78
 8023358:	2300      	movs	r3, #0
 802335a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802335e:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 8023362:	ae70      	add	r6, sp, #448	; 0x1c0
 8023364:	9320      	str	r3, [sp, #128]	; 0x80
 8023366:	9321      	str	r3, [sp, #132]	; 0x84
 8023368:	9322      	str	r3, [sp, #136]	; 0x88
 802336a:	9324      	str	r3, [sp, #144]	; 0x90
 802336c:	9325      	str	r3, [sp, #148]	; 0x94
 802336e:	9326      	str	r3, [sp, #152]	; 0x98
 8023370:	9328      	str	r3, [sp, #160]	; 0xa0
 8023372:	9329      	str	r3, [sp, #164]	; 0xa4
 8023374:	932a      	str	r3, [sp, #168]	; 0xa8
 8023376:	932c      	str	r3, [sp, #176]	; 0xb0
 8023378:	932d      	str	r3, [sp, #180]	; 0xb4
 802337a:	932e      	str	r3, [sp, #184]	; 0xb8
 802337c:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8023380:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8023384:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 8023388:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 802338c:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8023390:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 8023394:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8023398:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 802339c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80233a0:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 80233a4:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 80233a8:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 80233ac:	f001 fd02 	bl	8024db4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80233b0:	eeb1 0a49 	vneg.f32	s0, s18
 80233b4:	a830      	add	r0, sp, #192	; 0xc0
 80233b6:	f001 fdcd 	bl	8024f54 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80233ba:	eeb1 0a68 	vneg.f32	s0, s17
 80233be:	f001 fdd7 	bl	8024f70 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80233c2:	eeb1 0a48 	vneg.f32	s0, s16
 80233c6:	f001 fde2 	bl	8024f8e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 80233ca:	a840      	add	r0, sp, #256	; 0x100
 80233cc:	f001 fcf2 	bl	8024db4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80233d0:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80233d4:	a840      	add	r0, sp, #256	; 0x100
 80233d6:	f001 fd41 	bl	8024e5c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 80233da:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 80233de:	f001 fd67 	bl	8024eb0 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 80233e2:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80233e6:	f001 fd8c 	bl	8024f02 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 80233ea:	a850      	add	r0, sp, #320	; 0x140
 80233ec:	f001 fce2 	bl	8024db4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80233f0:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80233f4:	a850      	add	r0, sp, #320	; 0x140
 80233f6:	f001 fdd9 	bl	8024fac <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 80233fa:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80233fe:	f001 fde1 	bl	8024fc4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8023402:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8023406:	f001 fdea 	bl	8024fde <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 802340a:	a860      	add	r0, sp, #384	; 0x180
 802340c:	f001 fcd2 	bl	8024db4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023410:	eeb0 0a49 	vmov.f32	s0, s18
 8023414:	a860      	add	r0, sp, #384	; 0x180
 8023416:	f001 fd9d 	bl	8024f54 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 802341a:	eeb0 0a68 	vmov.f32	s0, s17
 802341e:	f001 fda7 	bl	8024f70 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8023422:	eeb0 0a48 	vmov.f32	s0, s16
 8023426:	f001 fdb2 	bl	8024f8e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 802342a:	aa50      	add	r2, sp, #320	; 0x140
 802342c:	a960      	add	r1, sp, #384	; 0x180
 802342e:	a8b0      	add	r0, sp, #704	; 0x2c0
 8023430:	f001 fcd8 	bl	8024de4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8023434:	4628      	mov	r0, r5
 8023436:	aa40      	add	r2, sp, #256	; 0x100
 8023438:	a9b0      	add	r1, sp, #704	; 0x2c0
 802343a:	f001 fcd3 	bl	8024de4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802343e:	4629      	mov	r1, r5
 8023440:	aa30      	add	r2, sp, #192	; 0xc0
 8023442:	a870      	add	r0, sp, #448	; 0x1c0
 8023444:	f001 fcce 	bl	8024de4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8023448:	a880      	add	r0, sp, #512	; 0x200
 802344a:	f001 fcb3 	bl	8024db4 <_ZN8touchgfx9Matrix4x4C1Ev>
 802344e:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8023452:	a880      	add	r0, sp, #512	; 0x200
 8023454:	eeb1 0a40 	vneg.f32	s0, s0
 8023458:	f001 fd7c 	bl	8024f54 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 802345c:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8023460:	a880      	add	r0, sp, #512	; 0x200
 8023462:	eeb1 0a40 	vneg.f32	s0, s0
 8023466:	f001 fd83 	bl	8024f70 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 802346a:	a890      	add	r0, sp, #576	; 0x240
 802346c:	f001 fca2 	bl	8024db4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023470:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 8023474:	a890      	add	r0, sp, #576	; 0x240
 8023476:	f001 fce1 	bl	8024e3c <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 802347a:	a8a0      	add	r0, sp, #640	; 0x280
 802347c:	f001 fc9a 	bl	8024db4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8023480:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8023484:	a8a0      	add	r0, sp, #640	; 0x280
 8023486:	f001 fd65 	bl	8024f54 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 802348a:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 802348e:	f001 fd6f 	bl	8024f70 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8023492:	aa90      	add	r2, sp, #576	; 0x240
 8023494:	a9a0      	add	r1, sp, #640	; 0x280
 8023496:	a8b0      	add	r0, sp, #704	; 0x2c0
 8023498:	f001 fca4 	bl	8024de4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802349c:	4628      	mov	r0, r5
 802349e:	aa80      	add	r2, sp, #512	; 0x200
 80234a0:	a9b0      	add	r1, sp, #704	; 0x2c0
 80234a2:	f001 fc9f 	bl	8024de4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80234a6:	4629      	mov	r1, r5
 80234a8:	466d      	mov	r5, sp
 80234aa:	aa70      	add	r2, sp, #448	; 0x1c0
 80234ac:	4668      	mov	r0, sp
 80234ae:	f001 fc99 	bl	8024de4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80234b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80234b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80234b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80234b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80234ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80234bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80234be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80234c2:	2500      	movs	r5, #0
 80234c4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80234c8:	0129      	lsls	r1, r5, #4
 80234ca:	ab20      	add	r3, sp, #128	; 0x80
 80234cc:	3501      	adds	r5, #1
 80234ce:	a870      	add	r0, sp, #448	; 0x1c0
 80234d0:	185e      	adds	r6, r3, r1
 80234d2:	ab10      	add	r3, sp, #64	; 0x40
 80234d4:	4419      	add	r1, r3
 80234d6:	f001 fc3d 	bl	8024d54 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 80234da:	2d04      	cmp	r5, #4
 80234dc:	ed86 0a00 	vstr	s0, [r6]
 80234e0:	edc6 0a01 	vstr	s1, [r6, #4]
 80234e4:	ed86 1a02 	vstr	s2, [r6, #8]
 80234e8:	edc6 1a03 	vstr	s3, [r6, #12]
 80234ec:	d1ec      	bne.n	80234c8 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 80234ee:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80234f2:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80234f6:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 80234fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80234fe:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 8023502:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8023506:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 802350a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802350e:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 8023512:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8023516:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 802351a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 802351e:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8023522:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8023526:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 802352a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802352e:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 8023532:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8023536:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 802353a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802353e:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 8023542:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 8023546:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 802354a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802354e:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 8023552:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8023556:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 802355a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802355e:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 8023562:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8023566:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 802356a:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 802356e:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 8023572:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8023576:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 802357a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802357e:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8023582:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023586:	eec7 6a87 	vdiv.f32	s13, s15, s14
 802358a:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 802358e:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 8023592:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 8023596:	ecbd 8b04 	vpop	{d8-d9}
 802359a:	bd70      	pop	{r4, r5, r6, pc}

0802359c <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 802359c:	b510      	push	{r4, lr}
 802359e:	4604      	mov	r4, r0
 80235a0:	f7ee faa3 	bl	8011aea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80235a4:	4620      	mov	r0, r4
 80235a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235aa:	f7ff bea1 	b.w	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080235ae <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 80235ae:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 80235b2:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 80235b6:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 80235ba:	f7ff be99 	b.w	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080235be <_ZN8touchgfx13TextureMapper8setScaleEf>:
 80235be:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 80235c2:	f7ff be95 	b.w	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080235c6 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 80235c6:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 80235ca:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 80235ce:	f7ff be8f 	b.w	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080235d2 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 80235d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80235d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80235da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235de:	fe30 0a27 	vselgt.f32	s0, s0, s15
 80235e2:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 80235e6:	f7ff be83 	b.w	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080235ea <_ZN8touchgfx13TextureMapper9setCameraEff>:
 80235ea:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 80235ee:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 80235f2:	f7ff be7d 	b.w	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080235f6 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 80235f6:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 80235fa:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 80235fe:	f7ff be77 	b.w	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08023602 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8023602:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8023606:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 802360a:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 802360e:	f7ff be6f 	b.w	80232f0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08023612 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8023612:	b510      	push	{r4, lr}
 8023614:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
 8023618:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
 802361c:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 8023620:	eef4 7ae5 	vcmpe.f32	s15, s11
 8023624:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
 8023628:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 802362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023630:	bf54      	ite	pl
 8023632:	eeb0 7a65 	vmovpl.f32	s14, s11
 8023636:	eeb0 7a67 	vmovmi.f32	s14, s15
 802363a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023642:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8023646:	eef4 6ac7 	vcmpe.f32	s13, s14
 802364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802364e:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8023652:	febb 7a47 	vrintm.f32	s14, s14
 8023656:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802365e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8023662:	bf56      	itet	pl
 8023664:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8023668:	2200      	movmi	r2, #0
 802366a:	ee17 3a10 	vmovpl	r3, s14
 802366e:	ee07 4a10 	vmov	s14, r4
 8023672:	bf58      	it	pl
 8023674:	b21a      	sxthpl	r2, r3
 8023676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802367a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802367e:	8002      	strh	r2, [r0, #0]
 8023680:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8023684:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8023688:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
 802368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023690:	bf58      	it	pl
 8023692:	eef0 7a46 	vmovpl.f32	s15, s12
 8023696:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
 802369a:	eef4 6ae7 	vcmpe.f32	s13, s15
 802369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236a2:	bf58      	it	pl
 80236a4:	eef0 7a66 	vmovpl.f32	s15, s13
 80236a8:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 80236ac:	fefa 7a67 	vrintp.f32	s15, s15
 80236b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80236b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236b8:	bfdc      	itt	le
 80236ba:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80236be:	ee17 3a90 	vmovle	r3, s15
 80236c2:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
 80236c6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80236ca:	eef4 7ae5 	vcmpe.f32	s15, s11
 80236ce:	bfd8      	it	le
 80236d0:	b21c      	sxthle	r4, r3
 80236d2:	1aa2      	subs	r2, r4, r2
 80236d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236d8:	8082      	strh	r2, [r0, #4]
 80236da:	bf54      	ite	pl
 80236dc:	eeb0 7a65 	vmovpl.f32	s14, s11
 80236e0:	eeb0 7a67 	vmovmi.f32	s14, s15
 80236e4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80236e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236ec:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80236f0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80236f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236f8:	fe37 7a26 	vselgt.f32	s14, s14, s13
 80236fc:	febb 7a47 	vrintm.f32	s14, s14
 8023700:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8023704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023708:	eef4 7ae5 	vcmpe.f32	s15, s11
 802370c:	bf56      	itet	pl
 802370e:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8023712:	2300      	movmi	r3, #0
 8023714:	ee17 3a10 	vmovpl	r3, s14
 8023718:	ee07 1a10 	vmov	s14, r1
 802371c:	bf58      	it	pl
 802371e:	b21b      	sxthpl	r3, r3
 8023720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023724:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023728:	8043      	strh	r3, [r0, #2]
 802372a:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 802372e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8023732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023736:	bf58      	it	pl
 8023738:	eef0 7a46 	vmovpl.f32	s15, s12
 802373c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8023740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023744:	bf58      	it	pl
 8023746:	eef0 7a66 	vmovpl.f32	s15, s13
 802374a:	fefa 7a67 	vrintp.f32	s15, s15
 802374e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023756:	bfde      	ittt	le
 8023758:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 802375c:	ee17 1a90 	vmovle	r1, s15
 8023760:	b209      	sxthle	r1, r1
 8023762:	1acb      	subs	r3, r1, r3
 8023764:	80c3      	strh	r3, [r0, #6]
 8023766:	bd10      	pop	{r4, pc}

08023768 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8023768:	b510      	push	{r4, lr}
 802376a:	ed2d 8b04 	vpush	{d8-d9}
 802376e:	b084      	sub	sp, #16
 8023770:	4604      	mov	r4, r0
 8023772:	4601      	mov	r1, r0
 8023774:	eeb0 8a40 	vmov.f32	s16, s0
 8023778:	4668      	mov	r0, sp
 802377a:	eef0 8a60 	vmov.f32	s17, s1
 802377e:	eeb0 9a41 	vmov.f32	s18, s2
 8023782:	f7ff ff46 	bl	8023612 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8023786:	6823      	ldr	r3, [r4, #0]
 8023788:	4669      	mov	r1, sp
 802378a:	4620      	mov	r0, r4
 802378c:	691b      	ldr	r3, [r3, #16]
 802378e:	4798      	blx	r3
 8023790:	6823      	ldr	r3, [r4, #0]
 8023792:	eeb0 1a49 	vmov.f32	s2, s18
 8023796:	4620      	mov	r0, r4
 8023798:	eef0 0a68 	vmov.f32	s1, s17
 802379c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802379e:	eeb0 0a48 	vmov.f32	s0, s16
 80237a2:	4798      	blx	r3
 80237a4:	4621      	mov	r1, r4
 80237a6:	a802      	add	r0, sp, #8
 80237a8:	f7ff ff33 	bl	8023612 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80237ac:	6823      	ldr	r3, [r4, #0]
 80237ae:	a902      	add	r1, sp, #8
 80237b0:	4620      	mov	r0, r4
 80237b2:	691b      	ldr	r3, [r3, #16]
 80237b4:	4798      	blx	r3
 80237b6:	b004      	add	sp, #16
 80237b8:	ecbd 8b04 	vpop	{d8-d9}
 80237bc:	bd10      	pop	{r4, pc}

080237be <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 80237be:	b510      	push	{r4, lr}
 80237c0:	ed2d 8b02 	vpush	{d8}
 80237c4:	b084      	sub	sp, #16
 80237c6:	4604      	mov	r4, r0
 80237c8:	4601      	mov	r1, r0
 80237ca:	eeb0 8a40 	vmov.f32	s16, s0
 80237ce:	4668      	mov	r0, sp
 80237d0:	f7ff ff1f 	bl	8023612 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80237d4:	6823      	ldr	r3, [r4, #0]
 80237d6:	4669      	mov	r1, sp
 80237d8:	4620      	mov	r0, r4
 80237da:	691b      	ldr	r3, [r3, #16]
 80237dc:	4798      	blx	r3
 80237de:	6823      	ldr	r3, [r4, #0]
 80237e0:	eeb0 0a48 	vmov.f32	s0, s16
 80237e4:	4620      	mov	r0, r4
 80237e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80237ea:	4798      	blx	r3
 80237ec:	4621      	mov	r1, r4
 80237ee:	a802      	add	r0, sp, #8
 80237f0:	f7ff ff0f 	bl	8023612 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80237f4:	6823      	ldr	r3, [r4, #0]
 80237f6:	a902      	add	r1, sp, #8
 80237f8:	4620      	mov	r0, r4
 80237fa:	691b      	ldr	r3, [r3, #16]
 80237fc:	4798      	blx	r3
 80237fe:	b004      	add	sp, #16
 8023800:	ecbd 8b02 	vpop	{d8}
 8023804:	bd10      	pop	{r4, pc}

08023806 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8023806:	4603      	mov	r3, r0
 8023808:	3026      	adds	r0, #38	; 0x26
 802380a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 802380e:	b90b      	cbnz	r3, 8023814 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 8023810:	f7f1 b835 	b.w	801487e <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8023814:	f7f1 b843 	b.w	801489e <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

08023818 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8023818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802381c:	4604      	mov	r4, r0
 802381e:	469b      	mov	fp, r3
 8023820:	ed2d 8b04 	vpush	{d8-d9}
 8023824:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8023828:	b0b3      	sub	sp, #204	; 0xcc
 802382a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 802382e:	f9b1 6000 	ldrsh.w	r6, [r1]
 8023832:	8888      	ldrh	r0, [r1, #4]
 8023834:	9206      	str	r2, [sp, #24]
 8023836:	2200      	movs	r2, #0
 8023838:	4430      	add	r0, r6
 802383a:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 802383e:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8023842:	b280      	uxth	r0, r0
 8023844:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 8023848:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 802384a:	fa0f fe80 	sxth.w	lr, r0
 802384e:	9211      	str	r2, [sp, #68]	; 0x44
 8023850:	4596      	cmp	lr, r2
 8023852:	f340 8129 	ble.w	8023aa8 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8023856:	45b4      	cmp	ip, r6
 8023858:	f340 8126 	ble.w	8023aa8 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802385c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8023860:	88ca      	ldrh	r2, [r1, #6]
 8023862:	442a      	add	r2, r5
 8023864:	b292      	uxth	r2, r2
 8023866:	b211      	sxth	r1, r2
 8023868:	2900      	cmp	r1, #0
 802386a:	f340 811d 	ble.w	8023aa8 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802386e:	42ab      	cmp	r3, r5
 8023870:	f340 811a 	ble.w	8023aa8 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8023874:	45f4      	cmp	ip, lr
 8023876:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 802387a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802387e:	bfb8      	it	lt
 8023880:	fa1f f08c 	uxthlt.w	r0, ip
 8023884:	428b      	cmp	r3, r1
 8023886:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 802388a:	bfb8      	it	lt
 802388c:	b29a      	uxthlt	r2, r3
 802388e:	1b80      	subs	r0, r0, r6
 8023890:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8023894:	1b52      	subs	r2, r2, r5
 8023896:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 802389a:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 802389e:	ab11      	add	r3, sp, #68	; 0x44
 80238a0:	ad13      	add	r5, sp, #76	; 0x4c
 80238a2:	6822      	ldr	r2, [r4, #0]
 80238a4:	1d26      	adds	r6, r4, #4
 80238a6:	9307      	str	r3, [sp, #28]
 80238a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80238aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80238ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80238b2:	4629      	mov	r1, r5
 80238b4:	4620      	mov	r0, r4
 80238b6:	4790      	blx	r2
 80238b8:	4621      	mov	r1, r4
 80238ba:	a815      	add	r0, sp, #84	; 0x54
 80238bc:	f7f0 ff3a 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80238c0:	a815      	add	r0, sp, #84	; 0x54
 80238c2:	f7ef fd11 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80238c6:	9b07      	ldr	r3, [sp, #28]
 80238c8:	4631      	mov	r1, r6
 80238ca:	4618      	mov	r0, r3
 80238cc:	f7ef fd50 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80238d0:	4628      	mov	r0, r5
 80238d2:	f104 0526 	add.w	r5, r4, #38	; 0x26
 80238d6:	f7ef fd07 	bl	80132e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80238da:	4628      	mov	r0, r5
 80238dc:	f7f3 f942 	bl	8016b64 <_ZNK8touchgfx6Bitmap7getDataEv>
 80238e0:	9007      	str	r0, [sp, #28]
 80238e2:	2800      	cmp	r0, #0
 80238e4:	f000 80db 	beq.w	8023a9e <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 80238e8:	f8db 2000 	ldr.w	r2, [fp]
 80238ec:	a90d      	add	r1, sp, #52	; 0x34
 80238ee:	a809      	add	r0, sp, #36	; 0x24
 80238f0:	9209      	str	r2, [sp, #36]	; 0x24
 80238f2:	f8db 2004 	ldr.w	r2, [fp, #4]
 80238f6:	920a      	str	r2, [sp, #40]	; 0x28
 80238f8:	f8db 2008 	ldr.w	r2, [fp, #8]
 80238fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80238fe:	f8db 200c 	ldr.w	r2, [fp, #12]
 8023902:	920c      	str	r2, [sp, #48]	; 0x30
 8023904:	f8da 2000 	ldr.w	r2, [sl]
 8023908:	920d      	str	r2, [sp, #52]	; 0x34
 802390a:	f8da 2004 	ldr.w	r2, [sl, #4]
 802390e:	920e      	str	r2, [sp, #56]	; 0x38
 8023910:	f8da 2008 	ldr.w	r2, [sl, #8]
 8023914:	920f      	str	r2, [sp, #60]	; 0x3c
 8023916:	f8da 200c 	ldr.w	r2, [sl, #12]
 802391a:	9210      	str	r2, [sp, #64]	; 0x40
 802391c:	4632      	mov	r2, r6
 802391e:	f7ef fd0b 	bl	8013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8023922:	4632      	mov	r2, r6
 8023924:	a90e      	add	r1, sp, #56	; 0x38
 8023926:	a80a      	add	r0, sp, #40	; 0x28
 8023928:	f7ef fd06 	bl	8013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 802392c:	4632      	mov	r2, r6
 802392e:	a90f      	add	r1, sp, #60	; 0x3c
 8023930:	a80b      	add	r0, sp, #44	; 0x2c
 8023932:	f7ef fd01 	bl	8013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8023936:	4632      	mov	r2, r6
 8023938:	a910      	add	r1, sp, #64	; 0x40
 802393a:	a80c      	add	r0, sp, #48	; 0x30
 802393c:	f7ef fcfc 	bl	8013338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8023940:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8023944:	edd7 4a00 	vldr	s9, [r7]
 8023948:	eef0 6a67 	vmov.f32	s13, s15
 802394c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8023950:	edd7 5a01 	vldr	s11, [r7, #4]
 8023954:	eeb0 7a67 	vmov.f32	s14, s15
 8023958:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 802395c:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8023960:	ed98 4a00 	vldr	s8, [r8]
 8023964:	eeb0 6a67 	vmov.f32	s12, s15
 8023968:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 802396c:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8023970:	ed98 5a01 	vldr	s10, [r8, #4]
 8023974:	ed99 9a00 	vldr	s18, [r9]
 8023978:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 802397c:	ed99 8a01 	vldr	s16, [r9, #4]
 8023980:	edd9 8a02 	vldr	s17, [r9, #8]
 8023984:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8023988:	ee16 6a10 	vmov	r6, s12
 802398c:	eeb0 6a67 	vmov.f32	s12, s15
 8023990:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8023994:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8023998:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 802399c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80239a0:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 80239a4:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 80239a8:	ee16 0a10 	vmov	r0, s12
 80239ac:	eeb0 6a67 	vmov.f32	s12, s15
 80239b0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80239b4:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80239b8:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80239bc:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 80239c0:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 80239c4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80239c8:	ee16 1a10 	vmov	r1, s12
 80239cc:	eeb0 6a67 	vmov.f32	s12, s15
 80239d0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80239d4:	f8d8 b008 	ldr.w	fp, [r8, #8]
 80239d8:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80239dc:	68ff      	ldr	r7, [r7, #12]
 80239de:	9624      	str	r6, [sp, #144]	; 0x90
 80239e0:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80239e4:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 80239e8:	ee16 2a10 	vmov	r2, s12
 80239ec:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 80239f0:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 80239f4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80239f8:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 80239fc:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8023a00:	4628      	mov	r0, r5
 8023a02:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 8023a06:	9b06      	ldr	r3, [sp, #24]
 8023a08:	922d      	str	r2, [sp, #180]	; 0xb4
 8023a0a:	4a29      	ldr	r2, [pc, #164]	; (8023ab0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8023a0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8023a0e:	8812      	ldrh	r2, [r2, #0]
 8023a10:	9b07      	ldr	r3, [sp, #28]
 8023a12:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8023a16:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8023a1a:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8023a1e:	9218      	str	r2, [sp, #96]	; 0x60
 8023a20:	9319      	str	r3, [sp, #100]	; 0x64
 8023a22:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8023a26:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8023a2a:	9731      	str	r7, [sp, #196]	; 0xc4
 8023a2c:	f7f3 f8cc 	bl	8016bc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023a30:	901a      	str	r0, [sp, #104]	; 0x68
 8023a32:	4628      	mov	r0, r5
 8023a34:	f7f2 ff8e 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023a38:	901b      	str	r0, [sp, #108]	; 0x6c
 8023a3a:	4628      	mov	r0, r5
 8023a3c:	f7f2 ffc4 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023a40:	901c      	str	r0, [sp, #112]	; 0x70
 8023a42:	4628      	mov	r0, r5
 8023a44:	f7f2 ff86 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023a48:	eeb4 9a48 	vcmp.f32	s18, s16
 8023a4c:	901d      	str	r0, [sp, #116]	; 0x74
 8023a4e:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 8023a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a56:	d107      	bne.n	8023a68 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8023a58:	eeb4 8a68 	vcmp.f32	s16, s17
 8023a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a64:	bf08      	it	eq
 8023a66:	461e      	moveq	r6, r3
 8023a68:	4b12      	ldr	r3, [pc, #72]	; (8023ab4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8023a70:	b10a      	cbz	r2, 8023a76 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 8023a72:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8023a74:	b905      	cbnz	r5, 8023a78 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8023a76:	689d      	ldr	r5, [r3, #8]
 8023a78:	682b      	ldr	r3, [r5, #0]
 8023a7a:	4620      	mov	r0, r4
 8023a7c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8023a7e:	f7ff fec2 	bl	8023806 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8023a82:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8023a86:	aa1e      	add	r2, sp, #120	; 0x78
 8023a88:	9604      	str	r6, [sp, #16]
 8023a8a:	a917      	add	r1, sp, #92	; 0x5c
 8023a8c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8023a90:	ab13      	add	r3, sp, #76	; 0x4c
 8023a92:	4628      	mov	r0, r5
 8023a94:	9301      	str	r3, [sp, #4]
 8023a96:	ab15      	add	r3, sp, #84	; 0x54
 8023a98:	9300      	str	r3, [sp, #0]
 8023a9a:	ab19      	add	r3, sp, #100	; 0x64
 8023a9c:	47b8      	blx	r7
 8023a9e:	b033      	add	sp, #204	; 0xcc
 8023aa0:	ecbd 8b04 	vpop	{d8-d9}
 8023aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	9312      	str	r3, [sp, #72]	; 0x48
 8023aac:	e6f7      	b.n	802389e <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8023aae:	bf00      	nop
 8023ab0:	20060c2a 	.word	0x20060c2a
 8023ab4:	20060c30 	.word	0x20060c30

08023ab8 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8023ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023abc:	ed2d 8b02 	vpush	{d8}
 8023ac0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8023ac4:	b098      	sub	sp, #96	; 0x60
 8023ac6:	4604      	mov	r4, r0
 8023ac8:	4688      	mov	r8, r1
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	d077      	beq.n	8023bbe <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8023ace:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8023ad2:	4628      	mov	r0, r5
 8023ad4:	f7f2 ff3e 	bl	8016954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023ad8:	ee07 0a90 	vmov	s15, r0
 8023adc:	4628      	mov	r0, r5
 8023ade:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8023ae2:	f7f2 ff71 	bl	80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023ae6:	4b4e      	ldr	r3, [pc, #312]	; (8023c20 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8023ae8:	ee07 0a90 	vmov	s15, r0
 8023aec:	781b      	ldrb	r3, [r3, #0]
 8023aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8023af2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8023af6:	2b01      	cmp	r3, #1
 8023af8:	d066      	beq.n	8023bc8 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8023afa:	eeb0 6a47 	vmov.f32	s12, s14
 8023afe:	ee17 3a10 	vmov	r3, s14
 8023b02:	eeb0 4a48 	vmov.f32	s8, s16
 8023b06:	eeb0 7a48 	vmov.f32	s14, s16
 8023b0a:	eef0 4a67 	vmov.f32	s9, s15
 8023b0e:	eeb0 8a67 	vmov.f32	s16, s15
 8023b12:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 8023b16:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8023b1a:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 8023b1e:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 8023b22:	ee73 1a65 	vsub.f32	s3, s6, s11
 8023b26:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 8023b2a:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8023b2e:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 8023b32:	ee32 1a45 	vsub.f32	s2, s4, s10
 8023b36:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8023b38:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8023b3a:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8023b3e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8023b40:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8023b44:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 8023b48:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8023b4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023b50:	eee1 6a21 	vfma.f32	s13, s2, s3
 8023b54:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8023b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b5c:	dd3d      	ble.n	8023bda <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8023b5e:	ed8d 5a04 	vstr	s10, [sp, #16]
 8023b62:	ed8d 2a05 	vstr	s4, [sp, #20]
 8023b66:	edcd 2a06 	vstr	s5, [sp, #24]
 8023b6a:	f8cd c01c 	str.w	ip, [sp, #28]
 8023b6e:	edcd 5a08 	vstr	s11, [sp, #32]
 8023b72:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 8023b76:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8023b7a:	970b      	str	r7, [sp, #44]	; 0x2c
 8023b7c:	960c      	str	r6, [sp, #48]	; 0x30
 8023b7e:	950d      	str	r5, [sp, #52]	; 0x34
 8023b80:	920e      	str	r2, [sp, #56]	; 0x38
 8023b82:	900f      	str	r0, [sp, #60]	; 0x3c
 8023b84:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8023b88:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8023b8c:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8023b90:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 8023b94:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8023b98:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8023b9c:	9316      	str	r3, [sp, #88]	; 0x58
 8023b9e:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8023ba2:	ab14      	add	r3, sp, #80	; 0x50
 8023ba4:	2200      	movs	r2, #0
 8023ba6:	4641      	mov	r1, r8
 8023ba8:	4620      	mov	r0, r4
 8023baa:	9303      	str	r3, [sp, #12]
 8023bac:	ab10      	add	r3, sp, #64	; 0x40
 8023bae:	9302      	str	r3, [sp, #8]
 8023bb0:	ab0c      	add	r3, sp, #48	; 0x30
 8023bb2:	9301      	str	r3, [sp, #4]
 8023bb4:	ab08      	add	r3, sp, #32
 8023bb6:	9300      	str	r3, [sp, #0]
 8023bb8:	ab04      	add	r3, sp, #16
 8023bba:	f7ff fe2d 	bl	8023818 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8023bbe:	b018      	add	sp, #96	; 0x60
 8023bc0:	ecbd 8b02 	vpop	{d8}
 8023bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023bc8:	eeb0 6a48 	vmov.f32	s12, s16
 8023bcc:	ee17 3a90 	vmov	r3, s15
 8023bd0:	eef0 4a47 	vmov.f32	s9, s14
 8023bd4:	eeb0 4a67 	vmov.f32	s8, s15
 8023bd8:	e79b      	b.n	8023b12 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8023bda:	ed8d 5a05 	vstr	s10, [sp, #20]
 8023bde:	ed8d 2a04 	vstr	s4, [sp, #16]
 8023be2:	f8cd c018 	str.w	ip, [sp, #24]
 8023be6:	edcd 2a07 	vstr	s5, [sp, #28]
 8023bea:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8023bee:	ed8d 3a08 	vstr	s6, [sp, #32]
 8023bf2:	970a      	str	r7, [sp, #40]	; 0x28
 8023bf4:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8023bf8:	960d      	str	r6, [sp, #52]	; 0x34
 8023bfa:	950c      	str	r5, [sp, #48]	; 0x30
 8023bfc:	900e      	str	r0, [sp, #56]	; 0x38
 8023bfe:	920f      	str	r2, [sp, #60]	; 0x3c
 8023c00:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8023c04:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8023c08:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8023c0c:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8023c10:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8023c14:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8023c18:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8023c1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8023c1e:	e7c0      	b.n	8023ba2 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8023c20:	20060c28 	.word	0x20060c28

08023c24 <_ZN8touchgfx7OutlineD1Ev>:
 8023c24:	4770      	bx	lr

08023c26 <_ZN8touchgfx7OutlineD0Ev>:
 8023c26:	b510      	push	{r4, lr}
 8023c28:	4604      	mov	r4, r0
 8023c2a:	2148      	movs	r1, #72	; 0x48
 8023c2c:	f001 f9e9 	bl	8025002 <_ZdlPvj>
 8023c30:	4620      	mov	r0, r4
 8023c32:	bd10      	pop	{r4, pc}

08023c34 <_ZN8touchgfx7Outline5resetEv>:
 8023c34:	b510      	push	{r4, lr}
 8023c36:	4604      	mov	r4, r0
 8023c38:	f7ee f86a 	bl	8011d10 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023c3c:	60e0      	str	r0, [r4, #12]
 8023c3e:	f7ee f86d 	bl	8011d1c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8023c42:	68e3      	ldr	r3, [r4, #12]
 8023c44:	2200      	movs	r2, #0
 8023c46:	08c0      	lsrs	r0, r0, #3
 8023c48:	6123      	str	r3, [r4, #16]
 8023c4a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023c4e:	6060      	str	r0, [r4, #4]
 8023c50:	82a3      	strh	r3, [r4, #20]
 8023c52:	82e3      	strh	r3, [r4, #22]
 8023c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023c56:	60a2      	str	r2, [r4, #8]
 8023c58:	f023 0301 	bic.w	r3, r3, #1
 8023c5c:	8322      	strh	r2, [r4, #24]
 8023c5e:	8362      	strh	r2, [r4, #26]
 8023c60:	f043 0302 	orr.w	r3, r3, #2
 8023c64:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023c68:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023c6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023c6e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023c72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023c76:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8023c7a:	bd10      	pop	{r4, pc}

08023c7c <_ZN8touchgfx7OutlineC1Ev>:
 8023c7c:	4b0f      	ldr	r3, [pc, #60]	; (8023cbc <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8023c7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023c82:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023c86:	b510      	push	{r4, lr}
 8023c88:	6003      	str	r3, [r0, #0]
 8023c8a:	2300      	movs	r3, #0
 8023c8c:	4604      	mov	r4, r0
 8023c8e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023c92:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023c96:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023c9a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8023c9e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023ca2:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023ca6:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023caa:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023cae:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023cb2:	f7ff ffbf 	bl	8023c34 <_ZN8touchgfx7Outline5resetEv>
 8023cb6:	4620      	mov	r0, r4
 8023cb8:	bd10      	pop	{r4, pc}
 8023cba:	bf00      	nop
 8023cbc:	0802caf8 	.word	0x0802caf8

08023cc0 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cc4:	b095      	sub	sp, #84	; 0x54
 8023cc6:	4604      	mov	r4, r0
 8023cc8:	1155      	asrs	r5, r2, #5
 8023cca:	f002 061f 	and.w	r6, r2, #31
 8023cce:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023cd0:	1157      	asrs	r7, r2, #5
 8023cd2:	9304      	str	r3, [sp, #16]
 8023cd4:	1153      	asrs	r3, r2, #5
 8023cd6:	9300      	str	r3, [sp, #0]
 8023cd8:	1143      	asrs	r3, r0, #5
 8023cda:	930c      	str	r3, [sp, #48]	; 0x30
 8023cdc:	f000 031f 	and.w	r3, r0, #31
 8023ce0:	9303      	str	r3, [sp, #12]
 8023ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023ce4:	42ab      	cmp	r3, r5
 8023ce6:	bfc8      	it	gt
 8023ce8:	462b      	movgt	r3, r5
 8023cea:	ea4f 1562 	mov.w	r5, r2, asr #5
 8023cee:	bfc8      	it	gt
 8023cf0:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023cf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023cf4:	42ab      	cmp	r3, r5
 8023cf6:	bfd8      	it	le
 8023cf8:	462b      	movle	r3, r5
 8023cfa:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023cfe:	bfdc      	itt	le
 8023d00:	3301      	addle	r3, #1
 8023d02:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023d04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023d06:	42ab      	cmp	r3, r5
 8023d08:	bfc8      	it	gt
 8023d0a:	462b      	movgt	r3, r5
 8023d0c:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023d10:	bfc8      	it	gt
 8023d12:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023d16:	42ab      	cmp	r3, r5
 8023d18:	bfd8      	it	le
 8023d1a:	462b      	movle	r3, r5
 8023d1c:	ea4f 1561 	mov.w	r5, r1, asr #5
 8023d20:	bfdc      	itt	le
 8023d22:	3301      	addle	r3, #1
 8023d24:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023d26:	9b04      	ldr	r3, [sp, #16]
 8023d28:	eba3 0a01 	sub.w	sl, r3, r1
 8023d2c:	1143      	asrs	r3, r0, #5
 8023d2e:	429f      	cmp	r7, r3
 8023d30:	f040 811d 	bne.w	8023f6e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 8023d34:	9b04      	ldr	r3, [sp, #16]
 8023d36:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8023d3a:	9b03      	ldr	r3, [sp, #12]
 8023d3c:	429e      	cmp	r6, r3
 8023d3e:	d131      	bne.n	8023da4 <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8023d40:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023d44:	fa0f fb8b 	sxth.w	fp, fp
 8023d48:	f9bd 2000 	ldrsh.w	r2, [sp]
 8023d4c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023d50:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 8023d54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023d58:	4281      	cmp	r1, r0
 8023d5a:	f000 80e6 	beq.w	8023f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8023d5e:	8b60      	ldrh	r0, [r4, #26]
 8023d60:	8b21      	ldrh	r1, [r4, #24]
 8023d62:	4301      	orrs	r1, r0
 8023d64:	d00b      	beq.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8023d66:	2b00      	cmp	r3, #0
 8023d68:	db09      	blt.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8023d6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023d6c:	428b      	cmp	r3, r1
 8023d6e:	da06      	bge.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8023d70:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023d74:	4299      	cmp	r1, r3
 8023d76:	d308      	bcc.n	8023d8a <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8023d78:	2301      	movs	r3, #1
 8023d7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023d7e:	f8a4 b014 	strh.w	fp, [r4, #20]
 8023d82:	2300      	movs	r3, #0
 8023d84:	82e2      	strh	r2, [r4, #22]
 8023d86:	8323      	strh	r3, [r4, #24]
 8023d88:	e01f      	b.n	8023dca <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8023d8a:	f104 0314 	add.w	r3, r4, #20
 8023d8e:	6925      	ldr	r5, [r4, #16]
 8023d90:	cb03      	ldmia	r3!, {r0, r1}
 8023d92:	6028      	str	r0, [r5, #0]
 8023d94:	6069      	str	r1, [r5, #4]
 8023d96:	6923      	ldr	r3, [r4, #16]
 8023d98:	3308      	adds	r3, #8
 8023d9a:	6123      	str	r3, [r4, #16]
 8023d9c:	68a3      	ldr	r3, [r4, #8]
 8023d9e:	3301      	adds	r3, #1
 8023da0:	60a3      	str	r3, [r4, #8]
 8023da2:	e7ec      	b.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8023da4:	9b04      	ldr	r3, [sp, #16]
 8023da6:	45ab      	cmp	fp, r5
 8023da8:	f001 011f 	and.w	r1, r1, #31
 8023dac:	8b20      	ldrh	r0, [r4, #24]
 8023dae:	f003 031f 	and.w	r3, r3, #31
 8023db2:	8b62      	ldrh	r2, [r4, #26]
 8023db4:	9305      	str	r3, [sp, #20]
 8023db6:	9b03      	ldr	r3, [sp, #12]
 8023db8:	eba3 0306 	sub.w	r3, r3, r6
 8023dbc:	d107      	bne.n	8023dce <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 8023dbe:	4418      	add	r0, r3
 8023dc0:	8320      	strh	r0, [r4, #24]
 8023dc2:	9805      	ldr	r0, [sp, #20]
 8023dc4:	4401      	add	r1, r0
 8023dc6:	fb03 2301 	mla	r3, r3, r1, r2
 8023dca:	8363      	strh	r3, [r4, #26]
 8023dcc:	e0ad      	b.n	8023f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8023dce:	f1ba 0f00 	cmp.w	sl, #0
 8023dd2:	db33      	blt.n	8023e3c <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 8023dd4:	2701      	movs	r7, #1
 8023dd6:	f1c1 0c20 	rsb	ip, r1, #32
 8023dda:	9702      	str	r7, [sp, #8]
 8023ddc:	2720      	movs	r7, #32
 8023dde:	fb03 f30c 	mul.w	r3, r3, ip
 8023de2:	9701      	str	r7, [sp, #4]
 8023de4:	9f01      	ldr	r7, [sp, #4]
 8023de6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023dea:	4439      	add	r1, r7
 8023dec:	fb93 fcfa 	sdiv	ip, r3, sl
 8023df0:	fb0a 331c 	mls	r3, sl, ip, r3
 8023df4:	2b00      	cmp	r3, #0
 8023df6:	bfbc      	itt	lt
 8023df8:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8023dfc:	4453      	addlt	r3, sl
 8023dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8023e02:	9a02      	ldr	r2, [sp, #8]
 8023e04:	4460      	add	r0, ip
 8023e06:	4415      	add	r5, r2
 8023e08:	f9bd 2000 	ldrsh.w	r2, [sp]
 8023e0c:	b200      	sxth	r0, r0
 8023e0e:	0417      	lsls	r7, r2, #16
 8023e10:	9200      	str	r2, [sp, #0]
 8023e12:	fa0f fe85 	sxth.w	lr, r5
 8023e16:	8320      	strh	r0, [r4, #24]
 8023e18:	9704      	str	r7, [sp, #16]
 8023e1a:	b209      	sxth	r1, r1
 8023e1c:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8023e20:	9a04      	ldr	r2, [sp, #16]
 8023e22:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 8023e26:	8361      	strh	r1, [r4, #26]
 8023e28:	eb0e 0902 	add.w	r9, lr, r2
 8023e2c:	454f      	cmp	r7, r9
 8023e2e:	d10d      	bne.n	8023e4c <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8023e30:	4ba0      	ldr	r3, [pc, #640]	; (80240b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 8023e32:	2177      	movs	r1, #119	; 0x77
 8023e34:	4aa0      	ldr	r2, [pc, #640]	; (80240b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 8023e36:	48a1      	ldr	r0, [pc, #644]	; (80240bc <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8023e38:	f001 fab6 	bl	80253a8 <__assert_func>
 8023e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8023e40:	434b      	muls	r3, r1
 8023e42:	f1ca 0a00 	rsb	sl, sl, #0
 8023e46:	9702      	str	r7, [sp, #8]
 8023e48:	2700      	movs	r7, #0
 8023e4a:	e7ca      	b.n	8023de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8023e4c:	ea50 0201 	orrs.w	r2, r0, r1
 8023e50:	d00c      	beq.n	8023e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023e52:	f1b8 0f00 	cmp.w	r8, #0
 8023e56:	db09      	blt.n	8023e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023e58:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e5a:	4588      	cmp	r8, r1
 8023e5c:	da06      	bge.n	8023e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023e5e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023e62:	4288      	cmp	r0, r1
 8023e64:	d364      	bcc.n	8023f30 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023e66:	2101      	movs	r1, #1
 8023e68:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023e6c:	2100      	movs	r1, #0
 8023e6e:	9a00      	ldr	r2, [sp, #0]
 8023e70:	45ab      	cmp	fp, r5
 8023e72:	f8a4 e014 	strh.w	lr, [r4, #20]
 8023e76:	82e2      	strh	r2, [r4, #22]
 8023e78:	4466      	add	r6, ip
 8023e7a:	8321      	strh	r1, [r4, #24]
 8023e7c:	8361      	strh	r1, [r4, #26]
 8023e7e:	d04b      	beq.n	8023f18 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8023e80:	9a03      	ldr	r2, [sp, #12]
 8023e82:	eba3 030a 	sub.w	r3, r3, sl
 8023e86:	f04f 0800 	mov.w	r8, #0
 8023e8a:	1b91      	subs	r1, r2, r6
 8023e8c:	448c      	add	ip, r1
 8023e8e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8023e92:	fb9c f7fa 	sdiv	r7, ip, sl
 8023e96:	fb0a cc17 	mls	ip, sl, r7, ip
 8023e9a:	f1bc 0f00 	cmp.w	ip, #0
 8023e9e:	bfbc      	itt	lt
 8023ea0:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023ea4:	44d4      	addlt	ip, sl
 8023ea6:	1c7a      	adds	r2, r7, #1
 8023ea8:	9207      	str	r2, [sp, #28]
 8023eaa:	eb13 030c 	adds.w	r3, r3, ip
 8023eae:	9a02      	ldr	r2, [sp, #8]
 8023eb0:	bf54      	ite	pl
 8023eb2:	9807      	ldrpl	r0, [sp, #28]
 8023eb4:	4638      	movmi	r0, r7
 8023eb6:	4415      	add	r5, r2
 8023eb8:	9a04      	ldr	r2, [sp, #16]
 8023eba:	fa0f fe80 	sxth.w	lr, r0
 8023ebe:	4406      	add	r6, r0
 8023ec0:	ea4f 1140 	mov.w	r1, r0, lsl #5
 8023ec4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023ec8:	fa0f f985 	sxth.w	r9, r5
 8023ecc:	bf58      	it	pl
 8023ece:	eba3 030a 	subpl.w	r3, r3, sl
 8023ed2:	4410      	add	r0, r2
 8023ed4:	b209      	sxth	r1, r1
 8023ed6:	444a      	add	r2, r9
 8023ed8:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023edc:	8361      	strh	r1, [r4, #26]
 8023ede:	4290      	cmp	r0, r2
 8023ee0:	d0a6      	beq.n	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023ee2:	ea5e 0201 	orrs.w	r2, lr, r1
 8023ee6:	d00d      	beq.n	8023f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023ee8:	9a00      	ldr	r2, [sp, #0]
 8023eea:	2a00      	cmp	r2, #0
 8023eec:	db0a      	blt.n	8023f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023eee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023ef0:	428a      	cmp	r2, r1
 8023ef2:	da07      	bge.n	8023f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023ef4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023ef8:	4288      	cmp	r0, r1
 8023efa:	d329      	bcc.n	8023f50 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 8023efc:	f04f 0201 	mov.w	r2, #1
 8023f00:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023f04:	9a00      	ldr	r2, [sp, #0]
 8023f06:	45ab      	cmp	fp, r5
 8023f08:	f8a4 9014 	strh.w	r9, [r4, #20]
 8023f0c:	82e2      	strh	r2, [r4, #22]
 8023f0e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8023f12:	f8a4 801a 	strh.w	r8, [r4, #26]
 8023f16:	d1c8      	bne.n	8023eaa <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8023f18:	9b03      	ldr	r3, [sp, #12]
 8023f1a:	9a01      	ldr	r2, [sp, #4]
 8023f1c:	1b9e      	subs	r6, r3, r6
 8023f1e:	9b05      	ldr	r3, [sp, #20]
 8023f20:	3320      	adds	r3, #32
 8023f22:	8326      	strh	r6, [r4, #24]
 8023f24:	1a9b      	subs	r3, r3, r2
 8023f26:	435e      	muls	r6, r3
 8023f28:	8366      	strh	r6, [r4, #26]
 8023f2a:	b015      	add	sp, #84	; 0x54
 8023f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f30:	f104 0714 	add.w	r7, r4, #20
 8023f34:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023f38:	cf03      	ldmia	r7!, {r0, r1}
 8023f3a:	f8c8 0000 	str.w	r0, [r8]
 8023f3e:	f8c8 1004 	str.w	r1, [r8, #4]
 8023f42:	6921      	ldr	r1, [r4, #16]
 8023f44:	3108      	adds	r1, #8
 8023f46:	6121      	str	r1, [r4, #16]
 8023f48:	68a1      	ldr	r1, [r4, #8]
 8023f4a:	3101      	adds	r1, #1
 8023f4c:	60a1      	str	r1, [r4, #8]
 8023f4e:	e78d      	b.n	8023e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023f50:	f104 0e14 	add.w	lr, r4, #20
 8023f54:	6922      	ldr	r2, [r4, #16]
 8023f56:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8023f5a:	9206      	str	r2, [sp, #24]
 8023f5c:	6010      	str	r0, [r2, #0]
 8023f5e:	6051      	str	r1, [r2, #4]
 8023f60:	6921      	ldr	r1, [r4, #16]
 8023f62:	3108      	adds	r1, #8
 8023f64:	6121      	str	r1, [r4, #16]
 8023f66:	68a1      	ldr	r1, [r4, #8]
 8023f68:	3101      	adds	r1, #1
 8023f6a:	60a1      	str	r1, [r4, #8]
 8023f6c:	e7ca      	b.n	8023f04 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023f6e:	eba0 0b02 	sub.w	fp, r0, r2
 8023f72:	f1ba 0f00 	cmp.w	sl, #0
 8023f76:	f040 80a3 	bne.w	80240c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8023f7a:	f1bb 0f00 	cmp.w	fp, #0
 8023f7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023f82:	8b62      	ldrh	r2, [r4, #26]
 8023f84:	b22d      	sxth	r5, r5
 8023f86:	bfa8      	it	ge
 8023f88:	f04f 0a20 	movge.w	sl, #32
 8023f8c:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023f90:	8b21      	ldrh	r1, [r4, #24]
 8023f92:	bfb8      	it	lt
 8023f94:	f04f 39ff 	movlt.w	r9, #4294967295
 8023f98:	ebaa 0606 	sub.w	r6, sl, r6
 8023f9c:	bfa8      	it	ge
 8023f9e:	f04f 0901 	movge.w	r9, #1
 8023fa2:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023fa6:	4431      	add	r1, r6
 8023fa8:	fb06 2603 	mla	r6, r6, r3, r2
 8023fac:	9a00      	ldr	r2, [sp, #0]
 8023fae:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8023fb2:	b209      	sxth	r1, r1
 8023fb4:	444a      	add	r2, r9
 8023fb6:	b236      	sxth	r6, r6
 8023fb8:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 8023fbc:	8321      	strh	r1, [r4, #24]
 8023fbe:	b217      	sxth	r7, r2
 8023fc0:	8366      	strh	r6, [r4, #26]
 8023fc2:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 8023fc6:	45f4      	cmp	ip, lr
 8023fc8:	f43f af32 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023fcc:	4331      	orrs	r1, r6
 8023fce:	d00b      	beq.n	8023fe8 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023fd0:	2800      	cmp	r0, #0
 8023fd2:	db09      	blt.n	8023fe8 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023fd4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023fd6:	4288      	cmp	r0, r1
 8023fd8:	da06      	bge.n	8023fe8 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023fda:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023fde:	4288      	cmp	r0, r1
 8023fe0:	d33b      	bcc.n	802405a <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 8023fe2:	2101      	movs	r1, #1
 8023fe4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023fe8:	f1aa 0610 	sub.w	r6, sl, #16
 8023fec:	82e7      	strh	r7, [r4, #22]
 8023fee:	2700      	movs	r7, #0
 8023ff0:	82a5      	strh	r5, [r4, #20]
 8023ff2:	0076      	lsls	r6, r6, #1
 8023ff4:	8327      	strh	r7, [r4, #24]
 8023ff6:	fb06 fc03 	mul.w	ip, r6, r3
 8023ffa:	b236      	sxth	r6, r6
 8023ffc:	8367      	strh	r7, [r4, #26]
 8023ffe:	fa0f fc8c 	sxth.w	ip, ip
 8024002:	ea46 010c 	orr.w	r1, r6, ip
 8024006:	9100      	str	r1, [sp, #0]
 8024008:	990c      	ldr	r1, [sp, #48]	; 0x30
 802400a:	428a      	cmp	r2, r1
 802400c:	d046      	beq.n	802409c <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 802400e:	444a      	add	r2, r9
 8024010:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024014:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024018:	fa0f f882 	sxth.w	r8, r2
 802401c:	8326      	strh	r6, [r4, #24]
 802401e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024022:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024026:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802402a:	4570      	cmp	r0, lr
 802402c:	f43f af00 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024030:	9800      	ldr	r0, [sp, #0]
 8024032:	b160      	cbz	r0, 802404e <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024034:	2900      	cmp	r1, #0
 8024036:	db0a      	blt.n	802404e <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024038:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802403a:	4281      	cmp	r1, r0
 802403c:	da07      	bge.n	802404e <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802403e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024042:	4288      	cmp	r0, r1
 8024044:	d319      	bcc.n	802407a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 8024046:	f04f 0101 	mov.w	r1, #1
 802404a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802404e:	82a5      	strh	r5, [r4, #20]
 8024050:	f8a4 8016 	strh.w	r8, [r4, #22]
 8024054:	8327      	strh	r7, [r4, #24]
 8024056:	8367      	strh	r7, [r4, #26]
 8024058:	e7d6      	b.n	8024008 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 802405a:	f104 0614 	add.w	r6, r4, #20
 802405e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8024062:	ce03      	ldmia	r6!, {r0, r1}
 8024064:	f8cc 0000 	str.w	r0, [ip]
 8024068:	f8cc 1004 	str.w	r1, [ip, #4]
 802406c:	6921      	ldr	r1, [r4, #16]
 802406e:	3108      	adds	r1, #8
 8024070:	6121      	str	r1, [r4, #16]
 8024072:	68a1      	ldr	r1, [r4, #8]
 8024074:	3101      	adds	r1, #1
 8024076:	60a1      	str	r1, [r4, #8]
 8024078:	e7b6      	b.n	8023fe8 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802407a:	f104 0e14 	add.w	lr, r4, #20
 802407e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8024082:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024086:	f8cb 0000 	str.w	r0, [fp]
 802408a:	f8cb 1004 	str.w	r1, [fp, #4]
 802408e:	6921      	ldr	r1, [r4, #16]
 8024090:	3108      	adds	r1, #8
 8024092:	6121      	str	r1, [r4, #16]
 8024094:	68a1      	ldr	r1, [r4, #8]
 8024096:	3101      	adds	r1, #1
 8024098:	60a1      	str	r1, [r4, #8]
 802409a:	e7d8      	b.n	802404e <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802409c:	9a03      	ldr	r2, [sp, #12]
 802409e:	8b61      	ldrh	r1, [r4, #26]
 80240a0:	f1a2 0e20 	sub.w	lr, r2, #32
 80240a4:	8b22      	ldrh	r2, [r4, #24]
 80240a6:	44d6      	add	lr, sl
 80240a8:	4472      	add	r2, lr
 80240aa:	fb0e 1303 	mla	r3, lr, r3, r1
 80240ae:	8322      	strh	r2, [r4, #24]
 80240b0:	e68b      	b.n	8023dca <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 80240b2:	bf00      	nop
 80240b4:	0802ca80 	.word	0x0802ca80
 80240b8:	0802cb00 	.word	0x0802cb00
 80240bc:	0802cab1 	.word	0x0802cab1
 80240c0:	f1bb 0f00 	cmp.w	fp, #0
 80240c4:	f2c0 8124 	blt.w	8024310 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 80240c8:	2201      	movs	r2, #1
 80240ca:	f1c6 0320 	rsb	r3, r6, #32
 80240ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80240d0:	2220      	movs	r2, #32
 80240d2:	fb0a f303 	mul.w	r3, sl, r3
 80240d6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80240da:	9202      	str	r2, [sp, #8]
 80240dc:	fb93 fcfb 	sdiv	ip, r3, fp
 80240e0:	fb0b 331c 	mls	r3, fp, ip, r3
 80240e4:	2b00      	cmp	r3, #0
 80240e6:	9308      	str	r3, [sp, #32]
 80240e8:	bfbe      	ittt	lt
 80240ea:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80240ee:	445b      	addlt	r3, fp
 80240f0:	9308      	strlt	r3, [sp, #32]
 80240f2:	eb0c 0301 	add.w	r3, ip, r1
 80240f6:	9301      	str	r3, [sp, #4]
 80240f8:	115b      	asrs	r3, r3, #5
 80240fa:	9305      	str	r3, [sp, #20]
 80240fc:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8024100:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 8024104:	461f      	mov	r7, r3
 8024106:	9b02      	ldr	r3, [sp, #8]
 8024108:	42b3      	cmp	r3, r6
 802410a:	f040 8117 	bne.w	802433c <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 802410e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8024112:	f9bd 3000 	ldrsh.w	r3, [sp]
 8024116:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802411a:	42b9      	cmp	r1, r7
 802411c:	d016      	beq.n	802414c <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802411e:	8b60      	ldrh	r0, [r4, #26]
 8024120:	8b21      	ldrh	r1, [r4, #24]
 8024122:	4301      	orrs	r1, r0
 8024124:	d00d      	beq.n	8024142 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8024126:	f1b8 0f00 	cmp.w	r8, #0
 802412a:	db0a      	blt.n	8024142 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802412c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802412e:	4541      	cmp	r1, r8
 8024130:	dd07      	ble.n	8024142 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8024132:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024136:	4288      	cmp	r0, r1
 8024138:	f0c0 80f3 	bcc.w	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 802413c:	2101      	movs	r1, #1
 802413e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024142:	82e3      	strh	r3, [r4, #22]
 8024144:	2300      	movs	r3, #0
 8024146:	82a2      	strh	r2, [r4, #20]
 8024148:	8323      	strh	r3, [r4, #24]
 802414a:	8363      	strh	r3, [r4, #26]
 802414c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802414e:	9a00      	ldr	r2, [sp, #0]
 8024150:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024154:	441a      	add	r2, r3
 8024156:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802415a:	4691      	mov	r9, r2
 802415c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8024160:	fa0f f589 	sxth.w	r5, r9
 8024164:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8024168:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802416c:	4281      	cmp	r1, r0
 802416e:	d015      	beq.n	802419c <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8024170:	8b60      	ldrh	r0, [r4, #26]
 8024172:	8b21      	ldrh	r1, [r4, #24]
 8024174:	4301      	orrs	r1, r0
 8024176:	d00c      	beq.n	8024192 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024178:	2a00      	cmp	r2, #0
 802417a:	db0a      	blt.n	8024192 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802417c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802417e:	428a      	cmp	r2, r1
 8024180:	da07      	bge.n	8024192 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024182:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8024186:	4291      	cmp	r1, r2
 8024188:	f0c0 81ae 	bcc.w	80244e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 802418c:	2201      	movs	r2, #1
 802418e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024192:	82a3      	strh	r3, [r4, #20]
 8024194:	2300      	movs	r3, #0
 8024196:	82e5      	strh	r5, [r4, #22]
 8024198:	8323      	strh	r3, [r4, #24]
 802419a:	8363      	strh	r3, [r4, #26]
 802419c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802419e:	454b      	cmp	r3, r9
 80241a0:	f000 808a 	beq.w	80242b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 80241a4:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80241a8:	fb93 f2fb 	sdiv	r2, r3, fp
 80241ac:	fb0b 3312 	mls	r3, fp, r2, r3
 80241b0:	9205      	str	r2, [sp, #20]
 80241b2:	2b00      	cmp	r3, #0
 80241b4:	9307      	str	r3, [sp, #28]
 80241b6:	da04      	bge.n	80241c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 80241b8:	1e53      	subs	r3, r2, #1
 80241ba:	9305      	str	r3, [sp, #20]
 80241bc:	9b07      	ldr	r3, [sp, #28]
 80241be:	445b      	add	r3, fp
 80241c0:	9307      	str	r3, [sp, #28]
 80241c2:	9b08      	ldr	r3, [sp, #32]
 80241c4:	f04f 0a00 	mov.w	sl, #0
 80241c8:	eba3 030b 	sub.w	r3, r3, fp
 80241cc:	9308      	str	r3, [sp, #32]
 80241ce:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 80241d2:	f1c3 0320 	rsb	r3, r3, #32
 80241d6:	930a      	str	r3, [sp, #40]	; 0x28
 80241d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80241da:	9b02      	ldr	r3, [sp, #8]
 80241dc:	1a9b      	subs	r3, r3, r2
 80241de:	9309      	str	r3, [sp, #36]	; 0x24
 80241e0:	9902      	ldr	r1, [sp, #8]
 80241e2:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80241e6:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80241ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80241ee:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 80241f2:	189b      	adds	r3, r3, r2
 80241f4:	9308      	str	r3, [sp, #32]
 80241f6:	bf57      	itett	pl
 80241f8:	eba3 030b 	subpl.w	r3, r3, fp
 80241fc:	9b05      	ldrmi	r3, [sp, #20]
 80241fe:	9308      	strpl	r3, [sp, #32]
 8024200:	9b05      	ldrpl	r3, [sp, #20]
 8024202:	bf58      	it	pl
 8024204:	3301      	addpl	r3, #1
 8024206:	9300      	str	r3, [sp, #0]
 8024208:	e9dd 2300 	ldrd	r2, r3, [sp]
 802420c:	4413      	add	r3, r2
 802420e:	9301      	str	r3, [sp, #4]
 8024210:	115b      	asrs	r3, r3, #5
 8024212:	9306      	str	r3, [sp, #24]
 8024214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024216:	428b      	cmp	r3, r1
 8024218:	f040 8180 	bne.w	802451c <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802421c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8024220:	fa0f f389 	sxth.w	r3, r9
 8024224:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8024228:	4541      	cmp	r1, r8
 802422a:	d017      	beq.n	802425c <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802422c:	8b60      	ldrh	r0, [r4, #26]
 802422e:	8b21      	ldrh	r1, [r4, #24]
 8024230:	4301      	orrs	r1, r0
 8024232:	d00d      	beq.n	8024250 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024234:	2e00      	cmp	r6, #0
 8024236:	db0b      	blt.n	8024250 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024238:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802423a:	42b1      	cmp	r1, r6
 802423c:	dd08      	ble.n	8024250 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802423e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024242:	4288      	cmp	r0, r1
 8024244:	f0c0 815d 	bcc.w	8024502 <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8024248:	f04f 0101 	mov.w	r1, #1
 802424c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024250:	82a2      	strh	r2, [r4, #20]
 8024252:	82e3      	strh	r3, [r4, #22]
 8024254:	f8a4 a018 	strh.w	sl, [r4, #24]
 8024258:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802425c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802425e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8024262:	4499      	add	r9, r3
 8024264:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024268:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802426c:	fa0f f589 	sxth.w	r5, r9
 8024270:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8024274:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8024278:	4281      	cmp	r1, r0
 802427a:	f43f add9 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802427e:	8b60      	ldrh	r0, [r4, #26]
 8024280:	8b21      	ldrh	r1, [r4, #24]
 8024282:	4301      	orrs	r1, r0
 8024284:	d00d      	beq.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024286:	2a00      	cmp	r2, #0
 8024288:	db0b      	blt.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802428a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802428c:	428a      	cmp	r2, r1
 802428e:	da08      	bge.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024290:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8024294:	4291      	cmp	r1, r2
 8024296:	f0c0 8228 	bcc.w	80246ea <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 802429a:	f04f 0201 	mov.w	r2, #1
 802429e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80242a2:	82a3      	strh	r3, [r4, #20]
 80242a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80242a6:	82e5      	strh	r5, [r4, #22]
 80242a8:	454b      	cmp	r3, r9
 80242aa:	f8a4 a018 	strh.w	sl, [r4, #24]
 80242ae:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80242b2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80242b6:	d193      	bne.n	80241e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 80242b8:	9b02      	ldr	r3, [sp, #8]
 80242ba:	f1c3 0e20 	rsb	lr, r3, #32
 80242be:	9b04      	ldr	r3, [sp, #16]
 80242c0:	ea4f 1b63 	mov.w	fp, r3, asr #5
 80242c4:	9b03      	ldr	r3, [sp, #12]
 80242c6:	459e      	cmp	lr, r3
 80242c8:	f040 8229 	bne.w	802471e <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 80242cc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80242d0:	fa0f f58b 	sxth.w	r5, fp
 80242d4:	fa0f f289 	sxth.w	r2, r9
 80242d8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80242dc:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 80242e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80242e4:	4281      	cmp	r1, r0
 80242e6:	f43f ae20 	beq.w	8023f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80242ea:	8b60      	ldrh	r0, [r4, #26]
 80242ec:	8b21      	ldrh	r1, [r4, #24]
 80242ee:	4301      	orrs	r1, r0
 80242f0:	d00c      	beq.n	802430c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	db0a      	blt.n	802430c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80242f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80242f8:	428b      	cmp	r3, r1
 80242fa:	da07      	bge.n	802430c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80242fc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024300:	4299      	cmp	r1, r3
 8024302:	f0c0 81ff 	bcc.w	8024704 <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 8024306:	2301      	movs	r3, #1
 8024308:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802430c:	82a5      	strh	r5, [r4, #20]
 802430e:	e538      	b.n	8023d82 <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 8024310:	f04f 32ff 	mov.w	r2, #4294967295
 8024314:	fb0a f306 	mul.w	r3, sl, r6
 8024318:	f1cb 0b00 	rsb	fp, fp, #0
 802431c:	920b      	str	r2, [sp, #44]	; 0x2c
 802431e:	2200      	movs	r2, #0
 8024320:	e6d9      	b.n	80240d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 8024322:	f104 0514 	add.w	r5, r4, #20
 8024326:	6926      	ldr	r6, [r4, #16]
 8024328:	cd03      	ldmia	r5!, {r0, r1}
 802432a:	6030      	str	r0, [r6, #0]
 802432c:	6071      	str	r1, [r6, #4]
 802432e:	6921      	ldr	r1, [r4, #16]
 8024330:	3108      	adds	r1, #8
 8024332:	6121      	str	r1, [r4, #16]
 8024334:	68a1      	ldr	r1, [r4, #8]
 8024336:	3101      	adds	r1, #1
 8024338:	60a1      	str	r1, [r4, #8]
 802433a:	e702      	b.n	8024142 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802433c:	9b01      	ldr	r3, [sp, #4]
 802433e:	f001 011f 	and.w	r1, r1, #31
 8024342:	8b20      	ldrh	r0, [r4, #24]
 8024344:	f003 031f 	and.w	r3, r3, #31
 8024348:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802434c:	930d      	str	r3, [sp, #52]	; 0x34
 802434e:	9b02      	ldr	r3, [sp, #8]
 8024350:	1b9a      	subs	r2, r3, r6
 8024352:	9b05      	ldr	r3, [sp, #20]
 8024354:	42ab      	cmp	r3, r5
 8024356:	d107      	bne.n	8024368 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8024358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802435a:	4410      	add	r0, r2
 802435c:	4419      	add	r1, r3
 802435e:	8320      	strh	r0, [r4, #24]
 8024360:	fb02 9201 	mla	r2, r2, r1, r9
 8024364:	8362      	strh	r2, [r4, #26]
 8024366:	e6f1      	b.n	802414c <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8024368:	f1bc 0f00 	cmp.w	ip, #0
 802436c:	f2c0 8093 	blt.w	8024496 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8024370:	f1c1 0320 	rsb	r3, r1, #32
 8024374:	435a      	muls	r2, r3
 8024376:	2301      	movs	r3, #1
 8024378:	9309      	str	r3, [sp, #36]	; 0x24
 802437a:	2320      	movs	r3, #32
 802437c:	9307      	str	r3, [sp, #28]
 802437e:	9b07      	ldr	r3, [sp, #28]
 8024380:	fb92 fefc 	sdiv	lr, r2, ip
 8024384:	fb0c 221e 	mls	r2, ip, lr, r2
 8024388:	4419      	add	r1, r3
 802438a:	2a00      	cmp	r2, #0
 802438c:	bfbc      	itt	lt
 802438e:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024392:	4462      	addlt	r2, ip
 8024394:	fb0e 9101 	mla	r1, lr, r1, r9
 8024398:	4470      	add	r0, lr
 802439a:	b20b      	sxth	r3, r1
 802439c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802439e:	b200      	sxth	r0, r0
 80243a0:	440d      	add	r5, r1
 80243a2:	f9bd 1000 	ldrsh.w	r1, [sp]
 80243a6:	8320      	strh	r0, [r4, #24]
 80243a8:	fa0f f985 	sxth.w	r9, r5
 80243ac:	9106      	str	r1, [sp, #24]
 80243ae:	0409      	lsls	r1, r1, #16
 80243b0:	8363      	strh	r3, [r4, #26]
 80243b2:	910a      	str	r1, [sp, #40]	; 0x28
 80243b4:	4449      	add	r1, r9
 80243b6:	42b9      	cmp	r1, r7
 80243b8:	f43f ad3a 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80243bc:	4303      	orrs	r3, r0
 80243be:	d00c      	beq.n	80243da <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80243c0:	f1b8 0f00 	cmp.w	r8, #0
 80243c4:	db09      	blt.n	80243da <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80243c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80243c8:	4543      	cmp	r3, r8
 80243ca:	dd06      	ble.n	80243da <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80243cc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80243d0:	4299      	cmp	r1, r3
 80243d2:	d368      	bcc.n	80244a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 80243d4:	2301      	movs	r3, #1
 80243d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80243da:	9b06      	ldr	r3, [sp, #24]
 80243dc:	4476      	add	r6, lr
 80243de:	f8a4 9014 	strh.w	r9, [r4, #20]
 80243e2:	82e3      	strh	r3, [r4, #22]
 80243e4:	2300      	movs	r3, #0
 80243e6:	8323      	strh	r3, [r4, #24]
 80243e8:	8363      	strh	r3, [r4, #26]
 80243ea:	9b05      	ldr	r3, [sp, #20]
 80243ec:	42ab      	cmp	r3, r5
 80243ee:	d048      	beq.n	8024482 <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 80243f0:	9b02      	ldr	r3, [sp, #8]
 80243f2:	eba2 020c 	sub.w	r2, r2, ip
 80243f6:	1b9b      	subs	r3, r3, r6
 80243f8:	4473      	add	r3, lr
 80243fa:	015b      	lsls	r3, r3, #5
 80243fc:	fb93 f8fc 	sdiv	r8, r3, ip
 8024400:	fb0c 3318 	mls	r3, ip, r8, r3
 8024404:	2b00      	cmp	r3, #0
 8024406:	bfbc      	itt	lt
 8024408:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802440c:	4463      	addlt	r3, ip
 802440e:	f108 0101 	add.w	r1, r8, #1
 8024412:	910f      	str	r1, [sp, #60]	; 0x3c
 8024414:	18d2      	adds	r2, r2, r3
 8024416:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024418:	bf56      	itet	pl
 802441a:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802441c:	4640      	movmi	r0, r8
 802441e:	eba2 020c 	subpl.w	r2, r2, ip
 8024422:	fa0f fe80 	sxth.w	lr, r0
 8024426:	4406      	add	r6, r0
 8024428:	0141      	lsls	r1, r0, #5
 802442a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802442c:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024430:	4405      	add	r5, r0
 8024432:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024436:	b209      	sxth	r1, r1
 8024438:	fa0f f985 	sxth.w	r9, r5
 802443c:	4438      	add	r0, r7
 802443e:	8361      	strh	r1, [r4, #26]
 8024440:	444f      	add	r7, r9
 8024442:	42b8      	cmp	r0, r7
 8024444:	f43f acf4 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024448:	ea5e 0101 	orrs.w	r1, lr, r1
 802444c:	d00e      	beq.n	802446c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802444e:	9906      	ldr	r1, [sp, #24]
 8024450:	2900      	cmp	r1, #0
 8024452:	db0b      	blt.n	802446c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8024454:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024456:	9806      	ldr	r0, [sp, #24]
 8024458:	4288      	cmp	r0, r1
 802445a:	da07      	bge.n	802446c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802445c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024460:	4288      	cmp	r0, r1
 8024462:	d330      	bcc.n	80244c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 8024464:	f04f 0101 	mov.w	r1, #1
 8024468:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802446c:	9906      	ldr	r1, [sp, #24]
 802446e:	f8a4 9014 	strh.w	r9, [r4, #20]
 8024472:	82e1      	strh	r1, [r4, #22]
 8024474:	f04f 0100 	mov.w	r1, #0
 8024478:	8321      	strh	r1, [r4, #24]
 802447a:	8361      	strh	r1, [r4, #26]
 802447c:	9905      	ldr	r1, [sp, #20]
 802447e:	42a9      	cmp	r1, r5
 8024480:	d1c8      	bne.n	8024414 <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 8024482:	9b02      	ldr	r3, [sp, #8]
 8024484:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024486:	1b9e      	subs	r6, r3, r6
 8024488:	9b07      	ldr	r3, [sp, #28]
 802448a:	3120      	adds	r1, #32
 802448c:	8326      	strh	r6, [r4, #24]
 802448e:	1ac9      	subs	r1, r1, r3
 8024490:	434e      	muls	r6, r1
 8024492:	8366      	strh	r6, [r4, #26]
 8024494:	e65a      	b.n	802414c <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8024496:	f04f 33ff 	mov.w	r3, #4294967295
 802449a:	434a      	muls	r2, r1
 802449c:	f1cc 0c00 	rsb	ip, ip, #0
 80244a0:	9309      	str	r3, [sp, #36]	; 0x24
 80244a2:	2300      	movs	r3, #0
 80244a4:	e76a      	b.n	802437c <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 80244a6:	f104 0314 	add.w	r3, r4, #20
 80244aa:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80244ae:	cb03      	ldmia	r3!, {r0, r1}
 80244b0:	f8c8 0000 	str.w	r0, [r8]
 80244b4:	f8c8 1004 	str.w	r1, [r8, #4]
 80244b8:	6923      	ldr	r3, [r4, #16]
 80244ba:	3308      	adds	r3, #8
 80244bc:	6123      	str	r3, [r4, #16]
 80244be:	68a3      	ldr	r3, [r4, #8]
 80244c0:	3301      	adds	r3, #1
 80244c2:	60a3      	str	r3, [r4, #8]
 80244c4:	e789      	b.n	80243da <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80244c6:	6921      	ldr	r1, [r4, #16]
 80244c8:	f104 0e14 	add.w	lr, r4, #20
 80244cc:	910e      	str	r1, [sp, #56]	; 0x38
 80244ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80244d0:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80244d4:	6038      	str	r0, [r7, #0]
 80244d6:	4638      	mov	r0, r7
 80244d8:	6079      	str	r1, [r7, #4]
 80244da:	6921      	ldr	r1, [r4, #16]
 80244dc:	3108      	adds	r1, #8
 80244de:	6121      	str	r1, [r4, #16]
 80244e0:	68a1      	ldr	r1, [r4, #8]
 80244e2:	3101      	adds	r1, #1
 80244e4:	60a1      	str	r1, [r4, #8]
 80244e6:	e7c1      	b.n	802446c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80244e8:	f104 0214 	add.w	r2, r4, #20
 80244ec:	6926      	ldr	r6, [r4, #16]
 80244ee:	ca03      	ldmia	r2!, {r0, r1}
 80244f0:	6030      	str	r0, [r6, #0]
 80244f2:	6071      	str	r1, [r6, #4]
 80244f4:	6922      	ldr	r2, [r4, #16]
 80244f6:	3208      	adds	r2, #8
 80244f8:	6122      	str	r2, [r4, #16]
 80244fa:	68a2      	ldr	r2, [r4, #8]
 80244fc:	3201      	adds	r2, #1
 80244fe:	60a2      	str	r2, [r4, #8]
 8024500:	e647      	b.n	8024192 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024502:	f104 0514 	add.w	r5, r4, #20
 8024506:	6926      	ldr	r6, [r4, #16]
 8024508:	cd03      	ldmia	r5!, {r0, r1}
 802450a:	6030      	str	r0, [r6, #0]
 802450c:	6071      	str	r1, [r6, #4]
 802450e:	6921      	ldr	r1, [r4, #16]
 8024510:	3108      	adds	r1, #8
 8024512:	6121      	str	r1, [r4, #16]
 8024514:	68a1      	ldr	r1, [r4, #8]
 8024516:	3101      	adds	r1, #1
 8024518:	60a1      	str	r1, [r4, #8]
 802451a:	e699      	b.n	8024250 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802451c:	9b01      	ldr	r3, [sp, #4]
 802451e:	ea4f 176c 	mov.w	r7, ip, asr #5
 8024522:	8b20      	ldrh	r0, [r4, #24]
 8024524:	f00c 0c1f 	and.w	ip, ip, #31
 8024528:	f003 031f 	and.w	r3, r3, #31
 802452c:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8024530:	9310      	str	r3, [sp, #64]	; 0x40
 8024532:	9b06      	ldr	r3, [sp, #24]
 8024534:	429f      	cmp	r7, r3
 8024536:	d10a      	bne.n	802454e <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 8024538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802453a:	4418      	add	r0, r3
 802453c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802453e:	449c      	add	ip, r3
 8024540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024542:	8320      	strh	r0, [r4, #24]
 8024544:	fb03 ee0c 	mla	lr, r3, ip, lr
 8024548:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802454c:	e686      	b.n	802425c <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802454e:	9b00      	ldr	r3, [sp, #0]
 8024550:	2b00      	cmp	r3, #0
 8024552:	f2c0 80a0 	blt.w	8024696 <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 8024556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024558:	f1cc 0320 	rsb	r3, ip, #32
 802455c:	434b      	muls	r3, r1
 802455e:	2101      	movs	r1, #1
 8024560:	910e      	str	r1, [sp, #56]	; 0x38
 8024562:	2120      	movs	r1, #32
 8024564:	9a00      	ldr	r2, [sp, #0]
 8024566:	910d      	str	r1, [sp, #52]	; 0x34
 8024568:	990d      	ldr	r1, [sp, #52]	; 0x34
 802456a:	fb93 f5f2 	sdiv	r5, r3, r2
 802456e:	fb02 3315 	mls	r3, r2, r5, r3
 8024572:	448c      	add	ip, r1
 8024574:	2b00      	cmp	r3, #0
 8024576:	bfbc      	itt	lt
 8024578:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802457c:	189b      	addlt	r3, r3, r2
 802457e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024580:	fb05 ec0c 	mla	ip, r5, ip, lr
 8024584:	4428      	add	r0, r5
 8024586:	4417      	add	r7, r2
 8024588:	fa0f f18c 	sxth.w	r1, ip
 802458c:	fa0f fc89 	sxth.w	ip, r9
 8024590:	fa0f fe87 	sxth.w	lr, r7
 8024594:	8361      	strh	r1, [r4, #26]
 8024596:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802459a:	b200      	sxth	r0, r0
 802459c:	920f      	str	r2, [sp, #60]	; 0x3c
 802459e:	4472      	add	r2, lr
 80245a0:	8320      	strh	r0, [r4, #24]
 80245a2:	4542      	cmp	r2, r8
 80245a4:	f43f ac44 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80245a8:	ea50 0201 	orrs.w	r2, r0, r1
 80245ac:	d00c      	beq.n	80245c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80245ae:	2e00      	cmp	r6, #0
 80245b0:	db0a      	blt.n	80245c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80245b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80245b4:	42b1      	cmp	r1, r6
 80245b6:	dd07      	ble.n	80245c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80245b8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80245bc:	4288      	cmp	r0, r1
 80245be:	d375      	bcc.n	80246ac <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80245c0:	f04f 0201 	mov.w	r2, #1
 80245c4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80245c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80245ca:	f8a4 e014 	strh.w	lr, [r4, #20]
 80245ce:	1956      	adds	r6, r2, r5
 80245d0:	9a06      	ldr	r2, [sp, #24]
 80245d2:	f8a4 c016 	strh.w	ip, [r4, #22]
 80245d6:	42ba      	cmp	r2, r7
 80245d8:	f8a4 a018 	strh.w	sl, [r4, #24]
 80245dc:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80245e0:	d04c      	beq.n	802467c <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 80245e2:	9a02      	ldr	r2, [sp, #8]
 80245e4:	1b91      	subs	r1, r2, r6
 80245e6:	9a00      	ldr	r2, [sp, #0]
 80245e8:	440d      	add	r5, r1
 80245ea:	016d      	lsls	r5, r5, #5
 80245ec:	fb95 fef2 	sdiv	lr, r5, r2
 80245f0:	fb02 551e 	mls	r5, r2, lr, r5
 80245f4:	2d00      	cmp	r5, #0
 80245f6:	bfbc      	itt	lt
 80245f8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80245fc:	18ad      	addlt	r5, r5, r2
 80245fe:	9a00      	ldr	r2, [sp, #0]
 8024600:	1a9b      	subs	r3, r3, r2
 8024602:	f10e 0201 	add.w	r2, lr, #1
 8024606:	9213      	str	r2, [sp, #76]	; 0x4c
 8024608:	195b      	adds	r3, r3, r5
 802460a:	bf57      	itett	pl
 802460c:	9a00      	ldrpl	r2, [sp, #0]
 802460e:	4670      	movmi	r0, lr
 8024610:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 8024612:	1a9b      	subpl	r3, r3, r2
 8024614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024616:	fa0f f880 	sxth.w	r8, r0
 802461a:	4406      	add	r6, r0
 802461c:	4417      	add	r7, r2
 802461e:	0141      	lsls	r1, r0, #5
 8024620:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024624:	b23a      	sxth	r2, r7
 8024626:	f8a4 8018 	strh.w	r8, [r4, #24]
 802462a:	b209      	sxth	r1, r1
 802462c:	9211      	str	r2, [sp, #68]	; 0x44
 802462e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024630:	8361      	strh	r1, [r4, #26]
 8024632:	1882      	adds	r2, r0, r2
 8024634:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024636:	9212      	str	r2, [sp, #72]	; 0x48
 8024638:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802463a:	4402      	add	r2, r0
 802463c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802463e:	4290      	cmp	r0, r2
 8024640:	f43f abf6 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024644:	ea58 0201 	orrs.w	r2, r8, r1
 8024648:	d00d      	beq.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802464a:	f1bc 0f00 	cmp.w	ip, #0
 802464e:	db0a      	blt.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024650:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024652:	458c      	cmp	ip, r1
 8024654:	da07      	bge.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024656:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802465a:	4288      	cmp	r0, r1
 802465c:	d336      	bcc.n	80246cc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 802465e:	f04f 0201 	mov.w	r2, #1
 8024662:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024666:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024668:	f8a4 c016 	strh.w	ip, [r4, #22]
 802466c:	82a2      	strh	r2, [r4, #20]
 802466e:	9a06      	ldr	r2, [sp, #24]
 8024670:	f8a4 a018 	strh.w	sl, [r4, #24]
 8024674:	42ba      	cmp	r2, r7
 8024676:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802467a:	d1c5      	bne.n	8024608 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 802467c:	9b02      	ldr	r3, [sp, #8]
 802467e:	1b9e      	subs	r6, r3, r6
 8024680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024682:	f103 0c20 	add.w	ip, r3, #32
 8024686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024688:	8326      	strh	r6, [r4, #24]
 802468a:	ebac 0c03 	sub.w	ip, ip, r3
 802468e:	fb06 f60c 	mul.w	r6, r6, ip
 8024692:	8366      	strh	r6, [r4, #26]
 8024694:	e5e2      	b.n	802425c <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8024696:	9a00      	ldr	r2, [sp, #0]
 8024698:	f04f 31ff 	mov.w	r1, #4294967295
 802469c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802469e:	4252      	negs	r2, r2
 80246a0:	910e      	str	r1, [sp, #56]	; 0x38
 80246a2:	fb03 f30c 	mul.w	r3, r3, ip
 80246a6:	2100      	movs	r1, #0
 80246a8:	9200      	str	r2, [sp, #0]
 80246aa:	e75b      	b.n	8024564 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 80246ac:	f104 0614 	add.w	r6, r4, #20
 80246b0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80246b4:	ce03      	ldmia	r6!, {r0, r1}
 80246b6:	f8c8 0000 	str.w	r0, [r8]
 80246ba:	f8c8 1004 	str.w	r1, [r8, #4]
 80246be:	6921      	ldr	r1, [r4, #16]
 80246c0:	3108      	adds	r1, #8
 80246c2:	6121      	str	r1, [r4, #16]
 80246c4:	68a1      	ldr	r1, [r4, #8]
 80246c6:	3101      	adds	r1, #1
 80246c8:	60a1      	str	r1, [r4, #8]
 80246ca:	e77d      	b.n	80245c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80246cc:	f104 0814 	add.w	r8, r4, #20
 80246d0:	6922      	ldr	r2, [r4, #16]
 80246d2:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80246d6:	9212      	str	r2, [sp, #72]	; 0x48
 80246d8:	6010      	str	r0, [r2, #0]
 80246da:	6051      	str	r1, [r2, #4]
 80246dc:	6921      	ldr	r1, [r4, #16]
 80246de:	3108      	adds	r1, #8
 80246e0:	6121      	str	r1, [r4, #16]
 80246e2:	68a1      	ldr	r1, [r4, #8]
 80246e4:	3101      	adds	r1, #1
 80246e6:	60a1      	str	r1, [r4, #8]
 80246e8:	e7bd      	b.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 80246ea:	f104 0214 	add.w	r2, r4, #20
 80246ee:	6926      	ldr	r6, [r4, #16]
 80246f0:	ca03      	ldmia	r2!, {r0, r1}
 80246f2:	6030      	str	r0, [r6, #0]
 80246f4:	6071      	str	r1, [r6, #4]
 80246f6:	6922      	ldr	r2, [r4, #16]
 80246f8:	3208      	adds	r2, #8
 80246fa:	6122      	str	r2, [r4, #16]
 80246fc:	68a2      	ldr	r2, [r4, #8]
 80246fe:	3201      	adds	r2, #1
 8024700:	60a2      	str	r2, [r4, #8]
 8024702:	e5ce      	b.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024704:	f104 0314 	add.w	r3, r4, #20
 8024708:	6926      	ldr	r6, [r4, #16]
 802470a:	cb03      	ldmia	r3!, {r0, r1}
 802470c:	6030      	str	r0, [r6, #0]
 802470e:	6071      	str	r1, [r6, #4]
 8024710:	6923      	ldr	r3, [r4, #16]
 8024712:	3308      	adds	r3, #8
 8024714:	6123      	str	r3, [r4, #16]
 8024716:	68a3      	ldr	r3, [r4, #8]
 8024718:	3301      	adds	r3, #1
 802471a:	60a3      	str	r3, [r4, #8]
 802471c:	e5f6      	b.n	802430c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802471e:	9b01      	ldr	r3, [sp, #4]
 8024720:	8b20      	ldrh	r0, [r4, #24]
 8024722:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8024726:	f003 021f 	and.w	r2, r3, #31
 802472a:	9b04      	ldr	r3, [sp, #16]
 802472c:	45dc      	cmp	ip, fp
 802472e:	8b66      	ldrh	r6, [r4, #26]
 8024730:	f003 031f 	and.w	r3, r3, #31
 8024734:	9305      	str	r3, [sp, #20]
 8024736:	9b03      	ldr	r3, [sp, #12]
 8024738:	eba3 050e 	sub.w	r5, r3, lr
 802473c:	d108      	bne.n	8024750 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 802473e:	9b05      	ldr	r3, [sp, #20]
 8024740:	4428      	add	r0, r5
 8024742:	441a      	add	r2, r3
 8024744:	8320      	strh	r0, [r4, #24]
 8024746:	fb05 6502 	mla	r5, r5, r2, r6
 802474a:	8365      	strh	r5, [r4, #26]
 802474c:	f7ff bbed 	b.w	8023f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024750:	9b04      	ldr	r3, [sp, #16]
 8024752:	9901      	ldr	r1, [sp, #4]
 8024754:	1a5b      	subs	r3, r3, r1
 8024756:	9300      	str	r3, [sp, #0]
 8024758:	f100 809c 	bmi.w	8024894 <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 802475c:	f1c2 0120 	rsb	r1, r2, #32
 8024760:	434d      	muls	r5, r1
 8024762:	2101      	movs	r1, #1
 8024764:	9102      	str	r1, [sp, #8]
 8024766:	2120      	movs	r1, #32
 8024768:	9b00      	ldr	r3, [sp, #0]
 802476a:	9101      	str	r1, [sp, #4]
 802476c:	9901      	ldr	r1, [sp, #4]
 802476e:	fb95 f7f3 	sdiv	r7, r5, r3
 8024772:	fb03 5517 	mls	r5, r3, r7, r5
 8024776:	440a      	add	r2, r1
 8024778:	2d00      	cmp	r5, #0
 802477a:	bfbc      	itt	lt
 802477c:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024780:	18ed      	addlt	r5, r5, r3
 8024782:	fb07 6202 	mla	r2, r7, r2, r6
 8024786:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802478a:	4438      	add	r0, r7
 802478c:	b211      	sxth	r1, r2
 802478e:	9a02      	ldr	r2, [sp, #8]
 8024790:	b200      	sxth	r0, r0
 8024792:	4494      	add	ip, r2
 8024794:	fa0f f289 	sxth.w	r2, r9
 8024798:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802479c:	0413      	lsls	r3, r2, #16
 802479e:	8320      	strh	r0, [r4, #24]
 80247a0:	fa0f f88c 	sxth.w	r8, ip
 80247a4:	8361      	strh	r1, [r4, #26]
 80247a6:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 80247aa:	9304      	str	r3, [sp, #16]
 80247ac:	eb08 0a03 	add.w	sl, r8, r3
 80247b0:	45d1      	cmp	r9, sl
 80247b2:	f43f ab3d 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80247b6:	ea50 0301 	orrs.w	r3, r0, r1
 80247ba:	d00b      	beq.n	80247d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80247bc:	2e00      	cmp	r6, #0
 80247be:	db09      	blt.n	80247d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80247c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80247c2:	428e      	cmp	r6, r1
 80247c4:	da06      	bge.n	80247d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80247c6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80247ca:	4288      	cmp	r0, r1
 80247cc:	d36b      	bcc.n	80248a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 80247ce:	2101      	movs	r1, #1
 80247d0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80247d4:	2100      	movs	r1, #0
 80247d6:	45e3      	cmp	fp, ip
 80247d8:	f8a4 8014 	strh.w	r8, [r4, #20]
 80247dc:	44be      	add	lr, r7
 80247de:	82e2      	strh	r2, [r4, #22]
 80247e0:	8321      	strh	r1, [r4, #24]
 80247e2:	8361      	strh	r1, [r4, #26]
 80247e4:	d047      	beq.n	8024876 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 80247e6:	9b03      	ldr	r3, [sp, #12]
 80247e8:	f04f 0900 	mov.w	r9, #0
 80247ec:	eba3 060e 	sub.w	r6, r3, lr
 80247f0:	9b00      	ldr	r3, [sp, #0]
 80247f2:	443e      	add	r6, r7
 80247f4:	0176      	lsls	r6, r6, #5
 80247f6:	fb96 f7f3 	sdiv	r7, r6, r3
 80247fa:	fb03 6617 	mls	r6, r3, r7, r6
 80247fe:	428e      	cmp	r6, r1
 8024800:	bfbc      	itt	lt
 8024802:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024806:	18f6      	addlt	r6, r6, r3
 8024808:	9b00      	ldr	r3, [sp, #0]
 802480a:	1aed      	subs	r5, r5, r3
 802480c:	1c7b      	adds	r3, r7, #1
 802480e:	9307      	str	r3, [sp, #28]
 8024810:	19ad      	adds	r5, r5, r6
 8024812:	bf57      	itett	pl
 8024814:	9b00      	ldrpl	r3, [sp, #0]
 8024816:	4638      	movmi	r0, r7
 8024818:	9807      	ldrpl	r0, [sp, #28]
 802481a:	1aed      	subpl	r5, r5, r3
 802481c:	9b02      	ldr	r3, [sp, #8]
 802481e:	fa0f f880 	sxth.w	r8, r0
 8024822:	4486      	add	lr, r0
 8024824:	449c      	add	ip, r3
 8024826:	0141      	lsls	r1, r0, #5
 8024828:	9b04      	ldr	r3, [sp, #16]
 802482a:	fa0f fa8c 	sxth.w	sl, ip
 802482e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024832:	b209      	sxth	r1, r1
 8024834:	f8a4 8018 	strh.w	r8, [r4, #24]
 8024838:	4418      	add	r0, r3
 802483a:	4453      	add	r3, sl
 802483c:	8361      	strh	r1, [r4, #26]
 802483e:	4298      	cmp	r0, r3
 8024840:	f43f aaf6 	beq.w	8023e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024844:	ea58 0301 	orrs.w	r3, r8, r1
 8024848:	d00c      	beq.n	8024864 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802484a:	2a00      	cmp	r2, #0
 802484c:	db0a      	blt.n	8024864 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802484e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024850:	428a      	cmp	r2, r1
 8024852:	da07      	bge.n	8024864 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8024854:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024858:	4288      	cmp	r0, r1
 802485a:	d334      	bcc.n	80248c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 802485c:	f04f 0301 	mov.w	r3, #1
 8024860:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024864:	45e3      	cmp	fp, ip
 8024866:	f8a4 a014 	strh.w	sl, [r4, #20]
 802486a:	82e2      	strh	r2, [r4, #22]
 802486c:	f8a4 9018 	strh.w	r9, [r4, #24]
 8024870:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024874:	d1cc      	bne.n	8024810 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 8024876:	9b03      	ldr	r3, [sp, #12]
 8024878:	9e05      	ldr	r6, [sp, #20]
 802487a:	eba3 0e0e 	sub.w	lr, r3, lr
 802487e:	9b01      	ldr	r3, [sp, #4]
 8024880:	3620      	adds	r6, #32
 8024882:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024886:	1af6      	subs	r6, r6, r3
 8024888:	fb0e fe06 	mul.w	lr, lr, r6
 802488c:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024890:	f7ff bb4b 	b.w	8023f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024894:	9b00      	ldr	r3, [sp, #0]
 8024896:	f04f 31ff 	mov.w	r1, #4294967295
 802489a:	4355      	muls	r5, r2
 802489c:	425b      	negs	r3, r3
 802489e:	9102      	str	r1, [sp, #8]
 80248a0:	2100      	movs	r1, #0
 80248a2:	9300      	str	r3, [sp, #0]
 80248a4:	e760      	b.n	8024768 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 80248a6:	f104 0614 	add.w	r6, r4, #20
 80248aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80248ae:	ce03      	ldmia	r6!, {r0, r1}
 80248b0:	f8c9 0000 	str.w	r0, [r9]
 80248b4:	f8c9 1004 	str.w	r1, [r9, #4]
 80248b8:	6921      	ldr	r1, [r4, #16]
 80248ba:	3108      	adds	r1, #8
 80248bc:	6121      	str	r1, [r4, #16]
 80248be:	68a1      	ldr	r1, [r4, #8]
 80248c0:	3101      	adds	r1, #1
 80248c2:	60a1      	str	r1, [r4, #8]
 80248c4:	e786      	b.n	80247d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80248c6:	f104 0814 	add.w	r8, r4, #20
 80248ca:	6923      	ldr	r3, [r4, #16]
 80248cc:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80248d0:	9306      	str	r3, [sp, #24]
 80248d2:	6018      	str	r0, [r3, #0]
 80248d4:	6059      	str	r1, [r3, #4]
 80248d6:	6921      	ldr	r1, [r4, #16]
 80248d8:	3108      	adds	r1, #8
 80248da:	6121      	str	r1, [r4, #16]
 80248dc:	68a1      	ldr	r1, [r4, #8]
 80248de:	3101      	adds	r1, #1
 80248e0:	60a1      	str	r1, [r4, #8]
 80248e2:	e7bf      	b.n	8024864 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

080248e4 <_ZN8touchgfx7Outline6lineToEii>:
 80248e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80248e6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80248e8:	4604      	mov	r4, r0
 80248ea:	460d      	mov	r5, r1
 80248ec:	4616      	mov	r6, r2
 80248ee:	079b      	lsls	r3, r3, #30
 80248f0:	d526      	bpl.n	8024940 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80248f2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80248f6:	ea85 0001 	eor.w	r0, r5, r1
 80248fa:	ea86 0302 	eor.w	r3, r6, r2
 80248fe:	4303      	orrs	r3, r0
 8024900:	d01e      	beq.n	8024940 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024902:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024904:	114b      	asrs	r3, r1, #5
 8024906:	9600      	str	r6, [sp, #0]
 8024908:	4283      	cmp	r3, r0
 802490a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802490c:	bfb8      	it	lt
 802490e:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024910:	3301      	adds	r3, #1
 8024912:	4283      	cmp	r3, r0
 8024914:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024916:	bfc8      	it	gt
 8024918:	6363      	strgt	r3, [r4, #52]	; 0x34
 802491a:	116b      	asrs	r3, r5, #5
 802491c:	4283      	cmp	r3, r0
 802491e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024920:	bfb8      	it	lt
 8024922:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024924:	3301      	adds	r3, #1
 8024926:	4283      	cmp	r3, r0
 8024928:	4620      	mov	r0, r4
 802492a:	bfc8      	it	gt
 802492c:	6363      	strgt	r3, [r4, #52]	; 0x34
 802492e:	462b      	mov	r3, r5
 8024930:	f7ff f9c6 	bl	8023cc0 <_ZN8touchgfx7Outline10renderLineEiiii>
 8024934:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024936:	f043 0301 	orr.w	r3, r3, #1
 802493a:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802493e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024940:	b002      	add	sp, #8
 8024942:	bd70      	pop	{r4, r5, r6, pc}

08024944 <_ZN8touchgfx7Outline6moveToEii>:
 8024944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024946:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024948:	4615      	mov	r5, r2
 802494a:	4604      	mov	r4, r0
 802494c:	460e      	mov	r6, r1
 802494e:	079a      	lsls	r2, r3, #30
 8024950:	d401      	bmi.n	8024956 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8024952:	f7ff f96f 	bl	8023c34 <_ZN8touchgfx7Outline5resetEv>
 8024956:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024958:	07db      	lsls	r3, r3, #31
 802495a:	d504      	bpl.n	8024966 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802495c:	4620      	mov	r0, r4
 802495e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8024962:	f7ff ffbf 	bl	80248e4 <_ZN8touchgfx7Outline6lineToEii>
 8024966:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802496a:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802496e:	f345 174f 	sbfx	r7, r5, #5, #16
 8024972:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024976:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802497a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802497e:	428a      	cmp	r2, r1
 8024980:	d015      	beq.n	80249ae <_ZN8touchgfx7Outline6moveToEii+0x6a>
 8024982:	8b61      	ldrh	r1, [r4, #26]
 8024984:	8b22      	ldrh	r2, [r4, #24]
 8024986:	430a      	orrs	r2, r1
 8024988:	d00b      	beq.n	80249a2 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802498a:	2b00      	cmp	r3, #0
 802498c:	db09      	blt.n	80249a2 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802498e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024990:	4293      	cmp	r3, r2
 8024992:	da06      	bge.n	80249a2 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8024994:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024998:	429a      	cmp	r2, r3
 802499a:	d30d      	bcc.n	80249b8 <_ZN8touchgfx7Outline6moveToEii+0x74>
 802499c:	2301      	movs	r3, #1
 802499e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80249a2:	2300      	movs	r3, #0
 80249a4:	f8a4 c014 	strh.w	ip, [r4, #20]
 80249a8:	82e7      	strh	r7, [r4, #22]
 80249aa:	8323      	strh	r3, [r4, #24]
 80249ac:	8363      	strh	r3, [r4, #26]
 80249ae:	61e6      	str	r6, [r4, #28]
 80249b0:	62a5      	str	r5, [r4, #40]	; 0x28
 80249b2:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80249b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80249b8:	f104 0314 	add.w	r3, r4, #20
 80249bc:	6922      	ldr	r2, [r4, #16]
 80249be:	cb03      	ldmia	r3!, {r0, r1}
 80249c0:	6010      	str	r0, [r2, #0]
 80249c2:	6051      	str	r1, [r2, #4]
 80249c4:	6923      	ldr	r3, [r4, #16]
 80249c6:	3308      	adds	r3, #8
 80249c8:	6123      	str	r3, [r4, #16]
 80249ca:	68a3      	ldr	r3, [r4, #8]
 80249cc:	3301      	adds	r3, #1
 80249ce:	60a3      	str	r3, [r4, #8]
 80249d0:	e7e7      	b.n	80249a2 <_ZN8touchgfx7Outline6moveToEii+0x5e>

080249d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80249d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249d6:	b0d1      	sub	sp, #324	; 0x144
 80249d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80249dc:	466c      	mov	r4, sp
 80249de:	1a0d      	subs	r5, r1, r0
 80249e0:	f100 0208 	add.w	r2, r0, #8
 80249e4:	2d48      	cmp	r5, #72	; 0x48
 80249e6:	f340 80ba 	ble.w	8024b5e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80249ea:	112d      	asrs	r5, r5, #4
 80249ec:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80249f0:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80249f4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80249f8:	f9b0 8000 	ldrsh.w	r8, [r0]
 80249fc:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8024a00:	681e      	ldr	r6, [r3, #0]
 8024a02:	6006      	str	r6, [r0, #0]
 8024a04:	685e      	ldr	r6, [r3, #4]
 8024a06:	6046      	str	r6, [r0, #4]
 8024a08:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024a0c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8024a10:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024a14:	80df      	strh	r7, [r3, #6]
 8024a16:	f1a1 0308 	sub.w	r3, r1, #8
 8024a1a:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8024a1e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8024a22:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8024a26:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024a2a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8024a2e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024a32:	4565      	cmp	r5, ip
 8024a34:	da0f      	bge.n	8024a56 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8024a36:	681d      	ldr	r5, [r3, #0]
 8024a38:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8024a3c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8024a40:	6015      	str	r5, [r2, #0]
 8024a42:	685d      	ldr	r5, [r3, #4]
 8024a44:	6055      	str	r5, [r2, #4]
 8024a46:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024a4a:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024a4e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024a52:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024a56:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024a5a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024a5e:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8024a62:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8024a66:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024a6a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024a6e:	45ac      	cmp	ip, r5
 8024a70:	da0d      	bge.n	8024a8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8024a72:	6815      	ldr	r5, [r2, #0]
 8024a74:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024a78:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024a7c:	6005      	str	r5, [r0, #0]
 8024a7e:	6855      	ldr	r5, [r2, #4]
 8024a80:	8107      	strh	r7, [r0, #8]
 8024a82:	6045      	str	r5, [r0, #4]
 8024a84:	8146      	strh	r6, [r0, #10]
 8024a86:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8024a8a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8024a8e:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8024a92:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024a96:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024a9a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024a9e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8024aa2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024aa6:	4565      	cmp	r5, ip
 8024aa8:	da0f      	bge.n	8024aca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024aaa:	681d      	ldr	r5, [r3, #0]
 8024aac:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024ab0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024ab4:	6005      	str	r5, [r0, #0]
 8024ab6:	685d      	ldr	r5, [r3, #4]
 8024ab8:	6045      	str	r5, [r0, #4]
 8024aba:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024abe:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024ac2:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024ac6:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024aca:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8024ace:	f102 0508 	add.w	r5, r2, #8
 8024ad2:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024ad6:	f9b0 e000 	ldrsh.w	lr, [r0]
 8024ada:	462f      	mov	r7, r5
 8024adc:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024ae0:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024ae4:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024ae8:	4556      	cmp	r6, sl
 8024aea:	db18      	blt.n	8024b1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024aec:	3b08      	subs	r3, #8
 8024aee:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024af2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024af6:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024afa:	45b2      	cmp	sl, r6
 8024afc:	dbf6      	blt.n	8024aec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8024afe:	42ab      	cmp	r3, r5
 8024b00:	681e      	ldr	r6, [r3, #0]
 8024b02:	d30e      	bcc.n	8024b22 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024b04:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024b08:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024b0c:	602e      	str	r6, [r5, #0]
 8024b0e:	685e      	ldr	r6, [r3, #4]
 8024b10:	606e      	str	r6, [r5, #4]
 8024b12:	f8a3 9000 	strh.w	r9, [r3]
 8024b16:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024b1a:	809f      	strh	r7, [r3, #4]
 8024b1c:	80da      	strh	r2, [r3, #6]
 8024b1e:	462a      	mov	r2, r5
 8024b20:	e7d3      	b.n	8024aca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024b22:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024b26:	6006      	str	r6, [r0, #0]
 8024b28:	685e      	ldr	r6, [r3, #4]
 8024b2a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8024b2e:	6046      	str	r6, [r0, #4]
 8024b30:	1a1e      	subs	r6, r3, r0
 8024b32:	80da      	strh	r2, [r3, #6]
 8024b34:	1b4a      	subs	r2, r1, r5
 8024b36:	f8a3 e000 	strh.w	lr, [r3]
 8024b3a:	10d2      	asrs	r2, r2, #3
 8024b3c:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024b40:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024b44:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024b48:	bfb5      	itete	lt
 8024b4a:	e9c4 0300 	strdlt	r0, r3, [r4]
 8024b4e:	4607      	movge	r7, r0
 8024b50:	460b      	movlt	r3, r1
 8024b52:	e9c4 5100 	strdge	r5, r1, [r4]
 8024b56:	4638      	mov	r0, r7
 8024b58:	3408      	adds	r4, #8
 8024b5a:	4619      	mov	r1, r3
 8024b5c:	e73f      	b.n	80249de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024b5e:	4291      	cmp	r1, r2
 8024b60:	d925      	bls.n	8024bae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8024b62:	f1a2 0310 	sub.w	r3, r2, #16
 8024b66:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8024b6a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024b6e:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 8024b72:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024b76:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8024b7a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024b7e:	42ae      	cmp	r6, r5
 8024b80:	da13      	bge.n	8024baa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024b82:	461d      	mov	r5, r3
 8024b84:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024b88:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024b8c:	3b08      	subs	r3, #8
 8024b8e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024b92:	619e      	str	r6, [r3, #24]
 8024b94:	42a8      	cmp	r0, r5
 8024b96:	686e      	ldr	r6, [r5, #4]
 8024b98:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024b9c:	61de      	str	r6, [r3, #28]
 8024b9e:	825f      	strh	r7, [r3, #18]
 8024ba0:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024ba4:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024ba8:	d1dd      	bne.n	8024b66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024baa:	3208      	adds	r2, #8
 8024bac:	e7d7      	b.n	8024b5e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024bae:	466b      	mov	r3, sp
 8024bb0:	429c      	cmp	r4, r3
 8024bb2:	d903      	bls.n	8024bbc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024bb4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024bb8:	3c08      	subs	r4, #8
 8024bba:	e710      	b.n	80249de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024bbc:	b051      	add	sp, #324	; 0x144
 8024bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024bc2 <_ZN8touchgfx7Outline9sortCellsEv>:
 8024bc2:	6881      	ldr	r1, [r0, #8]
 8024bc4:	b111      	cbz	r1, 8024bcc <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024bc6:	68c0      	ldr	r0, [r0, #12]
 8024bc8:	f7ff bf03 	b.w	80249d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024bcc:	4770      	bx	lr

08024bce <_ZN8touchgfx7Outline8getCellsEv>:
 8024bce:	b510      	push	{r4, lr}
 8024bd0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024bd2:	4604      	mov	r4, r0
 8024bd4:	07da      	lsls	r2, r3, #31
 8024bd6:	d507      	bpl.n	8024be8 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024bd8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024bdc:	f7ff fe82 	bl	80248e4 <_ZN8touchgfx7Outline6lineToEii>
 8024be0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024be2:	f023 0301 	bic.w	r3, r3, #1
 8024be6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024be8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024bea:	079b      	lsls	r3, r3, #30
 8024bec:	d51a      	bpl.n	8024c24 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024bee:	8b62      	ldrh	r2, [r4, #26]
 8024bf0:	8b23      	ldrh	r3, [r4, #24]
 8024bf2:	4313      	orrs	r3, r2
 8024bf4:	d00d      	beq.n	8024c12 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024bf6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024bfa:	2b00      	cmp	r3, #0
 8024bfc:	db09      	blt.n	8024c12 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024bfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024c00:	4293      	cmp	r3, r2
 8024c02:	da06      	bge.n	8024c12 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024c04:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024c08:	429a      	cmp	r2, r3
 8024c0a:	d80d      	bhi.n	8024c28 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024c0c:	2301      	movs	r3, #1
 8024c0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c12:	68a0      	ldr	r0, [r4, #8]
 8024c14:	b138      	cbz	r0, 8024c26 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024c16:	4620      	mov	r0, r4
 8024c18:	f7ff ffd3 	bl	8024bc2 <_ZN8touchgfx7Outline9sortCellsEv>
 8024c1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024c1e:	f023 0302 	bic.w	r3, r3, #2
 8024c22:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024c24:	68e0      	ldr	r0, [r4, #12]
 8024c26:	bd10      	pop	{r4, pc}
 8024c28:	f104 0314 	add.w	r3, r4, #20
 8024c2c:	6922      	ldr	r2, [r4, #16]
 8024c2e:	cb03      	ldmia	r3!, {r0, r1}
 8024c30:	6010      	str	r0, [r2, #0]
 8024c32:	6051      	str	r1, [r2, #4]
 8024c34:	6923      	ldr	r3, [r4, #16]
 8024c36:	3308      	adds	r3, #8
 8024c38:	6123      	str	r3, [r4, #16]
 8024c3a:	68a3      	ldr	r3, [r4, #8]
 8024c3c:	3301      	adds	r3, #1
 8024c3e:	60a3      	str	r3, [r4, #8]
 8024c40:	e7e7      	b.n	8024c12 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08024c42 <_ZN8touchgfx8ScanlineD1Ev>:
 8024c42:	4770      	bx	lr

08024c44 <_ZN8touchgfx8ScanlineD0Ev>:
 8024c44:	b510      	push	{r4, lr}
 8024c46:	4604      	mov	r4, r0
 8024c48:	2124      	movs	r1, #36	; 0x24
 8024c4a:	f000 f9da 	bl	8025002 <_ZdlPvj>
 8024c4e:	4620      	mov	r0, r4
 8024c50:	bd10      	pop	{r4, pc}

08024c52 <_ZN8touchgfx8Scanline5resetEv>:
 8024c52:	b510      	push	{r4, lr}
 8024c54:	4604      	mov	r4, r0
 8024c56:	f7ed f849 	bl	8011cec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024c5a:	61a0      	str	r0, [r4, #24]
 8024c5c:	f7ed f84c 	bl	8011cf8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8024c60:	61e0      	str	r0, [r4, #28]
 8024c62:	f7ed f84f 	bl	8011d04 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024c66:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024c6a:	6220      	str	r0, [r4, #32]
 8024c6c:	6160      	str	r0, [r4, #20]
 8024c6e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8024c72:	69e3      	ldr	r3, [r4, #28]
 8024c74:	6123      	str	r3, [r4, #16]
 8024c76:	2300      	movs	r3, #0
 8024c78:	60e3      	str	r3, [r4, #12]
 8024c7a:	bd10      	pop	{r4, pc}

08024c7c <_ZN8touchgfx8ScanlineC1Ev>:
 8024c7c:	4b09      	ldr	r3, [pc, #36]	; (8024ca4 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8024c7e:	b510      	push	{r4, lr}
 8024c80:	6003      	str	r3, [r0, #0]
 8024c82:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024c86:	4604      	mov	r4, r0
 8024c88:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024c8c:	2300      	movs	r3, #0
 8024c8e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024c92:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024c96:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024c9a:	f7ff ffda 	bl	8024c52 <_ZN8touchgfx8Scanline5resetEv>
 8024c9e:	4620      	mov	r0, r4
 8024ca0:	bd10      	pop	{r4, pc}
 8024ca2:	bf00      	nop
 8024ca4:	0802cb38 	.word	0x0802cb38

08024ca8 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024cac:	1e0c      	subs	r4, r1, #0
 8024cae:	4605      	mov	r5, r0
 8024cb0:	4617      	mov	r7, r2
 8024cb2:	461e      	mov	r6, r3
 8024cb4:	da03      	bge.n	8024cbe <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024cb6:	4426      	add	r6, r4
 8024cb8:	2e01      	cmp	r6, #1
 8024cba:	d421      	bmi.n	8024d00 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024cbc:	2400      	movs	r4, #0
 8024cbe:	f7ed f80f 	bl	8011ce0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024cc2:	42a0      	cmp	r0, r4
 8024cc4:	dd1c      	ble.n	8024d00 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024cc6:	eb04 0806 	add.w	r8, r4, r6
 8024cca:	f7ed f809 	bl	8011ce0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024cce:	4580      	cmp	r8, r0
 8024cd0:	d902      	bls.n	8024cd8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8024cd2:	f7ed f805 	bl	8011ce0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024cd6:	1b06      	subs	r6, r0, r4
 8024cd8:	69a8      	ldr	r0, [r5, #24]
 8024cda:	4632      	mov	r2, r6
 8024cdc:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024ce0:	4420      	add	r0, r4
 8024ce2:	f7ef fdc5 	bl	8014870 <_ZN8touchgfx6memsetEPvhm>
 8024ce6:	686b      	ldr	r3, [r5, #4]
 8024ce8:	b2b2      	uxth	r2, r6
 8024cea:	3301      	adds	r3, #1
 8024cec:	42a3      	cmp	r3, r4
 8024cee:	696b      	ldr	r3, [r5, #20]
 8024cf0:	d108      	bne.n	8024d04 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024cf2:	8819      	ldrh	r1, [r3, #0]
 8024cf4:	440a      	add	r2, r1
 8024cf6:	801a      	strh	r2, [r3, #0]
 8024cf8:	3c01      	subs	r4, #1
 8024cfa:	4434      	add	r4, r6
 8024cfc:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d04:	1c99      	adds	r1, r3, #2
 8024d06:	6169      	str	r1, [r5, #20]
 8024d08:	805a      	strh	r2, [r3, #2]
 8024d0a:	692b      	ldr	r3, [r5, #16]
 8024d0c:	1c9a      	adds	r2, r3, #2
 8024d0e:	612a      	str	r2, [r5, #16]
 8024d10:	805c      	strh	r4, [r3, #2]
 8024d12:	68eb      	ldr	r3, [r5, #12]
 8024d14:	3301      	adds	r3, #1
 8024d16:	60eb      	str	r3, [r5, #12]
 8024d18:	e7ee      	b.n	8024cf8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024d1a <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024d1a:	4770      	bx	lr

08024d1c <_ZN8touchgfx15RenderingBufferD0Ev>:
 8024d1c:	b510      	push	{r4, lr}
 8024d1e:	4604      	mov	r4, r0
 8024d20:	2118      	movs	r1, #24
 8024d22:	f000 f96e 	bl	8025002 <_ZdlPvj>
 8024d26:	4620      	mov	r0, r4
 8024d28:	bd10      	pop	{r4, pc}
	...

08024d2c <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024d2c:	4a04      	ldr	r2, [pc, #16]	; (8024d40 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8024d2e:	6002      	str	r2, [r0, #0]
 8024d30:	2200      	movs	r2, #0
 8024d32:	6042      	str	r2, [r0, #4]
 8024d34:	7202      	strb	r2, [r0, #8]
 8024d36:	6142      	str	r2, [r0, #20]
 8024d38:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8024d3c:	4770      	bx	lr
 8024d3e:	bf00      	nop
 8024d40:	0802cb48 	.word	0x0802cb48

08024d44 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024d44:	60c3      	str	r3, [r0, #12]
 8024d46:	9b00      	ldr	r3, [sp, #0]
 8024d48:	6041      	str	r1, [r0, #4]
 8024d4a:	6103      	str	r3, [r0, #16]
 8024d4c:	9b01      	ldr	r3, [sp, #4]
 8024d4e:	7202      	strb	r2, [r0, #8]
 8024d50:	6143      	str	r3, [r0, #20]
 8024d52:	4770      	bx	lr

08024d54 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8024d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d56:	2300      	movs	r3, #0
 8024d58:	b08d      	sub	sp, #52	; 0x34
 8024d5a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8024d5e:	f101 0710 	add.w	r7, r1, #16
 8024d62:	9304      	str	r3, [sp, #16]
 8024d64:	aa04      	add	r2, sp, #16
 8024d66:	9305      	str	r3, [sp, #20]
 8024d68:	9306      	str	r3, [sp, #24]
 8024d6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024d6e:	9307      	str	r3, [sp, #28]
 8024d70:	4613      	mov	r3, r2
 8024d72:	460c      	mov	r4, r1
 8024d74:	4605      	mov	r5, r0
 8024d76:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8024db0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8024d7a:	ecb4 7a01 	vldmia	r4!, {s14}
 8024d7e:	ecf5 6a01 	vldmia	r5!, {s13}
 8024d82:	42bc      	cmp	r4, r7
 8024d84:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024d88:	d1f7      	bne.n	8024d7a <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8024d8a:	3010      	adds	r0, #16
 8024d8c:	ece2 7a01 	vstmia	r2!, {s15}
 8024d90:	42b0      	cmp	r0, r6
 8024d92:	d1ee      	bne.n	8024d72 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8024d94:	ac0c      	add	r4, sp, #48	; 0x30
 8024d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024d98:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8024d9c:	ed9d 0a08 	vldr	s0, [sp, #32]
 8024da0:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8024da4:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8024da8:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8024dac:	b00d      	add	sp, #52	; 0x34
 8024dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024db0:	00000000 	.word	0x00000000

08024db4 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8024db4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024db8:	2300      	movs	r3, #0
 8024dba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8024de0 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 8024dbe:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8024dc2:	2200      	movs	r2, #0
 8024dc4:	4293      	cmp	r3, r2
 8024dc6:	f102 0201 	add.w	r2, r2, #1
 8024dca:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8024dce:	2a04      	cmp	r2, #4
 8024dd0:	ece1 6a01 	vstmia	r1!, {s13}
 8024dd4:	d1f6      	bne.n	8024dc4 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8024dd6:	3301      	adds	r3, #1
 8024dd8:	2b04      	cmp	r3, #4
 8024dda:	d1f0      	bne.n	8024dbe <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8024ddc:	4770      	bx	lr
 8024dde:	bf00      	nop
 8024de0:	00000000 	.word	0x00000000

08024de4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8024de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024de8:	460c      	mov	r4, r1
 8024dea:	4605      	mov	r5, r0
 8024dec:	4690      	mov	r8, r2
 8024dee:	f7ff ffe1 	bl	8024db4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8024df2:	4628      	mov	r0, r5
 8024df4:	4621      	mov	r1, r4
 8024df6:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8024dfa:	2300      	movs	r3, #0
 8024dfc:	eb08 0603 	add.w	r6, r8, r3
 8024e00:	460f      	mov	r7, r1
 8024e02:	2400      	movs	r4, #0
 8024e04:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8024e38 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8024e08:	4632      	mov	r2, r6
 8024e0a:	3401      	adds	r4, #1
 8024e0c:	ecf7 6a01 	vldmia	r7!, {s13}
 8024e10:	3610      	adds	r6, #16
 8024e12:	ed92 7a00 	vldr	s14, [r2]
 8024e16:	2c04      	cmp	r4, #4
 8024e18:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024e1c:	d1f4      	bne.n	8024e08 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8024e1e:	18c2      	adds	r2, r0, r3
 8024e20:	3304      	adds	r3, #4
 8024e22:	2b10      	cmp	r3, #16
 8024e24:	edc2 7a00 	vstr	s15, [r2]
 8024e28:	d1e8      	bne.n	8024dfc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8024e2a:	3110      	adds	r1, #16
 8024e2c:	3010      	adds	r0, #16
 8024e2e:	4561      	cmp	r1, ip
 8024e30:	d1e3      	bne.n	8024dfa <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8024e32:	4628      	mov	r0, r5
 8024e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e38:	00000000 	.word	0x00000000

08024e3c <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8024e3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024e40:	f100 0320 	add.w	r3, r0, #32
 8024e44:	3030      	adds	r0, #48	; 0x30
 8024e46:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8024e4a:	ecf3 7a01 	vldmia	r3!, {s15}
 8024e4e:	4283      	cmp	r3, r0
 8024e50:	ee60 7a27 	vmul.f32	s15, s0, s15
 8024e54:	edc3 7a03 	vstr	s15, [r3, #12]
 8024e58:	d1f7      	bne.n	8024e4a <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8024e5a:	4770      	bx	lr

08024e5c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8024e5c:	b510      	push	{r4, lr}
 8024e5e:	ed2d 8b02 	vpush	{d8}
 8024e62:	eef0 8a40 	vmov.f32	s17, s0
 8024e66:	4604      	mov	r4, r0
 8024e68:	f000 f9f6 	bl	8025258 <sinf>
 8024e6c:	eeb0 8a40 	vmov.f32	s16, s0
 8024e70:	eeb0 0a68 	vmov.f32	s0, s17
 8024e74:	f000 f918 	bl	80250a8 <cosf>
 8024e78:	eeb1 6a48 	vneg.f32	s12, s16
 8024e7c:	f104 0310 	add.w	r3, r4, #16
 8024e80:	f104 0220 	add.w	r2, r4, #32
 8024e84:	edd3 7a04 	vldr	s15, [r3, #16]
 8024e88:	edd3 6a00 	vldr	s13, [r3]
 8024e8c:	ee26 7a27 	vmul.f32	s14, s12, s15
 8024e90:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024e94:	eea6 7a80 	vfma.f32	s14, s13, s0
 8024e98:	eee6 7a88 	vfma.f32	s15, s13, s16
 8024e9c:	eca3 7a01 	vstmia	r3!, {s14}
 8024ea0:	429a      	cmp	r2, r3
 8024ea2:	edc3 7a03 	vstr	s15, [r3, #12]
 8024ea6:	d1ed      	bne.n	8024e84 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8024ea8:	4620      	mov	r0, r4
 8024eaa:	ecbd 8b02 	vpop	{d8}
 8024eae:	bd10      	pop	{r4, pc}

08024eb0 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8024eb0:	b510      	push	{r4, lr}
 8024eb2:	ed2d 8b02 	vpush	{d8}
 8024eb6:	eef0 8a40 	vmov.f32	s17, s0
 8024eba:	4604      	mov	r4, r0
 8024ebc:	f000 f9cc 	bl	8025258 <sinf>
 8024ec0:	eeb0 8a40 	vmov.f32	s16, s0
 8024ec4:	eeb0 0a68 	vmov.f32	s0, s17
 8024ec8:	f000 f8ee 	bl	80250a8 <cosf>
 8024ecc:	eeb1 6a48 	vneg.f32	s12, s16
 8024ed0:	4623      	mov	r3, r4
 8024ed2:	f104 0210 	add.w	r2, r4, #16
 8024ed6:	edd3 7a08 	vldr	s15, [r3, #32]
 8024eda:	edd3 6a00 	vldr	s13, [r3]
 8024ede:	ee27 7a88 	vmul.f32	s14, s15, s16
 8024ee2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024ee6:	eea6 7a80 	vfma.f32	s14, s13, s0
 8024eea:	eee6 7a26 	vfma.f32	s15, s12, s13
 8024eee:	eca3 7a01 	vstmia	r3!, {s14}
 8024ef2:	429a      	cmp	r2, r3
 8024ef4:	edc3 7a07 	vstr	s15, [r3, #28]
 8024ef8:	d1ed      	bne.n	8024ed6 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8024efa:	4620      	mov	r0, r4
 8024efc:	ecbd 8b02 	vpop	{d8}
 8024f00:	bd10      	pop	{r4, pc}

08024f02 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8024f02:	b510      	push	{r4, lr}
 8024f04:	ed2d 8b02 	vpush	{d8}
 8024f08:	eef0 8a40 	vmov.f32	s17, s0
 8024f0c:	4604      	mov	r4, r0
 8024f0e:	f000 f9a3 	bl	8025258 <sinf>
 8024f12:	eeb0 8a40 	vmov.f32	s16, s0
 8024f16:	eeb0 0a68 	vmov.f32	s0, s17
 8024f1a:	f000 f8c5 	bl	80250a8 <cosf>
 8024f1e:	eeb1 6a48 	vneg.f32	s12, s16
 8024f22:	4623      	mov	r3, r4
 8024f24:	f104 0210 	add.w	r2, r4, #16
 8024f28:	edd3 7a04 	vldr	s15, [r3, #16]
 8024f2c:	edd3 6a00 	vldr	s13, [r3]
 8024f30:	ee26 7a27 	vmul.f32	s14, s12, s15
 8024f34:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024f38:	eea6 7a80 	vfma.f32	s14, s13, s0
 8024f3c:	eee6 7a88 	vfma.f32	s15, s13, s16
 8024f40:	eca3 7a01 	vstmia	r3!, {s14}
 8024f44:	429a      	cmp	r2, r3
 8024f46:	edc3 7a03 	vstr	s15, [r3, #12]
 8024f4a:	d1ed      	bne.n	8024f28 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8024f4c:	4620      	mov	r0, r4
 8024f4e:	ecbd 8b02 	vpop	{d8}
 8024f52:	bd10      	pop	{r4, pc}

08024f54 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8024f54:	4603      	mov	r3, r0
 8024f56:	f100 0210 	add.w	r2, r0, #16
 8024f5a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8024f5e:	edd3 7a00 	vldr	s15, [r3]
 8024f62:	eee7 7a00 	vfma.f32	s15, s14, s0
 8024f66:	ece3 7a01 	vstmia	r3!, {s15}
 8024f6a:	4293      	cmp	r3, r2
 8024f6c:	d1f5      	bne.n	8024f5a <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 8024f6e:	4770      	bx	lr

08024f70 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 8024f70:	f100 0310 	add.w	r3, r0, #16
 8024f74:	f100 0220 	add.w	r2, r0, #32
 8024f78:	ed93 7a08 	vldr	s14, [r3, #32]
 8024f7c:	edd3 7a00 	vldr	s15, [r3]
 8024f80:	eee7 7a00 	vfma.f32	s15, s14, s0
 8024f84:	ece3 7a01 	vstmia	r3!, {s15}
 8024f88:	4293      	cmp	r3, r2
 8024f8a:	d1f5      	bne.n	8024f78 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8024f8c:	4770      	bx	lr

08024f8e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 8024f8e:	f100 0320 	add.w	r3, r0, #32
 8024f92:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8024f96:	ed93 7a04 	vldr	s14, [r3, #16]
 8024f9a:	edd3 7a00 	vldr	s15, [r3]
 8024f9e:	eee7 7a00 	vfma.f32	s15, s14, s0
 8024fa2:	ece3 7a01 	vstmia	r3!, {s15}
 8024fa6:	4293      	cmp	r3, r2
 8024fa8:	d1f5      	bne.n	8024f96 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8024faa:	4770      	bx	lr

08024fac <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8024fac:	4603      	mov	r3, r0
 8024fae:	f100 0210 	add.w	r2, r0, #16
 8024fb2:	edd3 7a00 	vldr	s15, [r3]
 8024fb6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024fba:	ece3 7a01 	vstmia	r3!, {s15}
 8024fbe:	4293      	cmp	r3, r2
 8024fc0:	d1f7      	bne.n	8024fb2 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8024fc2:	4770      	bx	lr

08024fc4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8024fc4:	f100 0310 	add.w	r3, r0, #16
 8024fc8:	f100 0220 	add.w	r2, r0, #32
 8024fcc:	edd3 7a00 	vldr	s15, [r3]
 8024fd0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024fd4:	ece3 7a01 	vstmia	r3!, {s15}
 8024fd8:	4293      	cmp	r3, r2
 8024fda:	d1f7      	bne.n	8024fcc <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8024fdc:	4770      	bx	lr

08024fde <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 8024fde:	f100 0320 	add.w	r3, r0, #32
 8024fe2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8024fe6:	edd3 7a00 	vldr	s15, [r3]
 8024fea:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024fee:	ece3 7a01 	vstmia	r3!, {s15}
 8024ff2:	4293      	cmp	r3, r2
 8024ff4:	d1f7      	bne.n	8024fe6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8024ff6:	4770      	bx	lr

08024ff8 <__aeabi_atexit>:
 8024ff8:	460b      	mov	r3, r1
 8024ffa:	4601      	mov	r1, r0
 8024ffc:	4618      	mov	r0, r3
 8024ffe:	f000 b9f7 	b.w	80253f0 <__cxa_atexit>

08025002 <_ZdlPvj>:
 8025002:	f000 b812 	b.w	802502a <_ZdlPv>

08025006 <__cxa_guard_acquire>:
 8025006:	6803      	ldr	r3, [r0, #0]
 8025008:	07db      	lsls	r3, r3, #31
 802500a:	d406      	bmi.n	802501a <__cxa_guard_acquire+0x14>
 802500c:	7843      	ldrb	r3, [r0, #1]
 802500e:	b103      	cbz	r3, 8025012 <__cxa_guard_acquire+0xc>
 8025010:	deff      	udf	#255	; 0xff
 8025012:	2301      	movs	r3, #1
 8025014:	7043      	strb	r3, [r0, #1]
 8025016:	4618      	mov	r0, r3
 8025018:	4770      	bx	lr
 802501a:	2000      	movs	r0, #0
 802501c:	4770      	bx	lr

0802501e <__cxa_guard_release>:
 802501e:	2301      	movs	r3, #1
 8025020:	6003      	str	r3, [r0, #0]
 8025022:	4770      	bx	lr

08025024 <__cxa_pure_virtual>:
 8025024:	b508      	push	{r3, lr}
 8025026:	f000 f80f 	bl	8025048 <_ZSt9terminatev>

0802502a <_ZdlPv>:
 802502a:	f000 ba37 	b.w	802549c <free>

0802502e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802502e:	b508      	push	{r3, lr}
 8025030:	4780      	blx	r0
 8025032:	f000 f9b1 	bl	8025398 <abort>
	...

08025038 <_ZSt13get_terminatev>:
 8025038:	4b02      	ldr	r3, [pc, #8]	; (8025044 <_ZSt13get_terminatev+0xc>)
 802503a:	6818      	ldr	r0, [r3, #0]
 802503c:	f3bf 8f5b 	dmb	ish
 8025040:	4770      	bx	lr
 8025042:	bf00      	nop
 8025044:	200000e4 	.word	0x200000e4

08025048 <_ZSt9terminatev>:
 8025048:	b508      	push	{r3, lr}
 802504a:	f7ff fff5 	bl	8025038 <_ZSt13get_terminatev>
 802504e:	f7ff ffee 	bl	802502e <_ZN10__cxxabiv111__terminateEPFvvE>

08025052 <sinf_poly>:
 8025052:	07cb      	lsls	r3, r1, #31
 8025054:	d412      	bmi.n	802507c <sinf_poly+0x2a>
 8025056:	ee21 6b00 	vmul.f64	d6, d1, d0
 802505a:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 802505e:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8025062:	eea5 7b01 	vfma.f64	d7, d5, d1
 8025066:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 802506a:	ee21 1b06 	vmul.f64	d1, d1, d6
 802506e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8025072:	eea7 0b01 	vfma.f64	d0, d7, d1
 8025076:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802507a:	4770      	bx	lr
 802507c:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8025080:	ee21 6b01 	vmul.f64	d6, d1, d1
 8025084:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8025088:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802508c:	eea1 7b05 	vfma.f64	d7, d1, d5
 8025090:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8025094:	eea1 0b05 	vfma.f64	d0, d1, d5
 8025098:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 802509c:	ee21 1b06 	vmul.f64	d1, d1, d6
 80250a0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80250a4:	e7e5      	b.n	8025072 <sinf_poly+0x20>
	...

080250a8 <cosf>:
 80250a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250aa:	ee10 4a10 	vmov	r4, s0
 80250ae:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80250b2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80250b6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80250ba:	d20c      	bcs.n	80250d6 <cosf+0x2e>
 80250bc:	ee26 1b06 	vmul.f64	d1, d6, d6
 80250c0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80250c4:	d378      	bcc.n	80251b8 <cosf+0x110>
 80250c6:	eeb0 0b46 	vmov.f64	d0, d6
 80250ca:	483f      	ldr	r0, [pc, #252]	; (80251c8 <cosf+0x120>)
 80250cc:	2101      	movs	r1, #1
 80250ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80250d2:	f7ff bfbe 	b.w	8025052 <sinf_poly>
 80250d6:	f240 422e 	movw	r2, #1070	; 0x42e
 80250da:	4293      	cmp	r3, r2
 80250dc:	d826      	bhi.n	802512c <cosf+0x84>
 80250de:	4b3a      	ldr	r3, [pc, #232]	; (80251c8 <cosf+0x120>)
 80250e0:	ed93 7b08 	vldr	d7, [r3, #32]
 80250e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80250e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80250ec:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80250f0:	ee17 1a90 	vmov	r1, s15
 80250f4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80250f8:	1609      	asrs	r1, r1, #24
 80250fa:	ee07 1a90 	vmov	s15, r1
 80250fe:	f001 0203 	and.w	r2, r1, #3
 8025102:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8025106:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802510a:	ed92 0b00 	vldr	d0, [r2]
 802510e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8025112:	f011 0f02 	tst.w	r1, #2
 8025116:	eea5 6b47 	vfms.f64	d6, d5, d7
 802511a:	f081 0101 	eor.w	r1, r1, #1
 802511e:	bf08      	it	eq
 8025120:	4618      	moveq	r0, r3
 8025122:	ee26 1b06 	vmul.f64	d1, d6, d6
 8025126:	ee20 0b06 	vmul.f64	d0, d0, d6
 802512a:	e7d0      	b.n	80250ce <cosf+0x26>
 802512c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8025130:	d23e      	bcs.n	80251b0 <cosf+0x108>
 8025132:	4b26      	ldr	r3, [pc, #152]	; (80251cc <cosf+0x124>)
 8025134:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8025138:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 802513c:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8025140:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8025144:	6a06      	ldr	r6, [r0, #32]
 8025146:	6900      	ldr	r0, [r0, #16]
 8025148:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 802514c:	40a9      	lsls	r1, r5
 802514e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025152:	fba1 6706 	umull	r6, r7, r1, r6
 8025156:	fb05 f301 	mul.w	r3, r5, r1
 802515a:	463a      	mov	r2, r7
 802515c:	fbe0 2301 	umlal	r2, r3, r0, r1
 8025160:	1c11      	adds	r1, r2, #0
 8025162:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8025166:	2000      	movs	r0, #0
 8025168:	1a10      	subs	r0, r2, r0
 802516a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 802516e:	eb63 0101 	sbc.w	r1, r3, r1
 8025172:	f7db fa43 	bl	80005fc <__aeabi_l2d>
 8025176:	0fb5      	lsrs	r5, r6, #30
 8025178:	4b13      	ldr	r3, [pc, #76]	; (80251c8 <cosf+0x120>)
 802517a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802517e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80251c0 <cosf+0x118>
 8025182:	ec41 0b17 	vmov	d7, r0, r1
 8025186:	f004 0203 	and.w	r2, r4, #3
 802518a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802518e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8025192:	ed92 7b00 	vldr	d7, [r2]
 8025196:	ee20 1b00 	vmul.f64	d1, d0, d0
 802519a:	f014 0f02 	tst.w	r4, #2
 802519e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80251a2:	f085 0101 	eor.w	r1, r5, #1
 80251a6:	bf08      	it	eq
 80251a8:	4618      	moveq	r0, r3
 80251aa:	ee27 0b00 	vmul.f64	d0, d7, d0
 80251ae:	e78e      	b.n	80250ce <cosf+0x26>
 80251b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80251b4:	f000 b817 	b.w	80251e6 <__math_invalidf>
 80251b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80251bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80251be:	bf00      	nop
 80251c0:	54442d18 	.word	0x54442d18
 80251c4:	3c1921fb 	.word	0x3c1921fb
 80251c8:	0802cbb0 	.word	0x0802cbb0
 80251cc:	0802cb50 	.word	0x0802cb50

080251d0 <with_errnof>:
 80251d0:	b513      	push	{r0, r1, r4, lr}
 80251d2:	4604      	mov	r4, r0
 80251d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80251d8:	f000 f918 	bl	802540c <__errno>
 80251dc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80251e0:	6004      	str	r4, [r0, #0]
 80251e2:	b002      	add	sp, #8
 80251e4:	bd10      	pop	{r4, pc}

080251e6 <__math_invalidf>:
 80251e6:	eef0 7a40 	vmov.f32	s15, s0
 80251ea:	ee30 7a40 	vsub.f32	s14, s0, s0
 80251ee:	eef4 7a67 	vcmp.f32	s15, s15
 80251f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80251f6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80251fa:	d602      	bvs.n	8025202 <__math_invalidf+0x1c>
 80251fc:	2021      	movs	r0, #33	; 0x21
 80251fe:	f7ff bfe7 	b.w	80251d0 <with_errnof>
 8025202:	4770      	bx	lr

08025204 <sinf_poly>:
 8025204:	07cb      	lsls	r3, r1, #31
 8025206:	d412      	bmi.n	802522e <sinf_poly+0x2a>
 8025208:	ee21 6b00 	vmul.f64	d6, d1, d0
 802520c:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8025210:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8025214:	eea5 7b01 	vfma.f64	d7, d5, d1
 8025218:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 802521c:	ee21 1b06 	vmul.f64	d1, d1, d6
 8025220:	eea5 0b06 	vfma.f64	d0, d5, d6
 8025224:	eea7 0b01 	vfma.f64	d0, d7, d1
 8025228:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802522c:	4770      	bx	lr
 802522e:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8025232:	ee21 6b01 	vmul.f64	d6, d1, d1
 8025236:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802523a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802523e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8025242:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8025246:	eea1 0b05 	vfma.f64	d0, d1, d5
 802524a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 802524e:	ee21 1b06 	vmul.f64	d1, d1, d6
 8025252:	eea6 0b05 	vfma.f64	d0, d6, d5
 8025256:	e7e5      	b.n	8025224 <sinf_poly+0x20>

08025258 <sinf>:
 8025258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802525a:	ee10 4a10 	vmov	r4, s0
 802525e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8025262:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8025266:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802526a:	eef0 7a40 	vmov.f32	s15, s0
 802526e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8025272:	d218      	bcs.n	80252a6 <sinf+0x4e>
 8025274:	ee26 1b06 	vmul.f64	d1, d6, d6
 8025278:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802527c:	d20a      	bcs.n	8025294 <sinf+0x3c>
 802527e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8025282:	d103      	bne.n	802528c <sinf+0x34>
 8025284:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8025288:	ed8d 1a01 	vstr	s2, [sp, #4]
 802528c:	eeb0 0a67 	vmov.f32	s0, s15
 8025290:	b003      	add	sp, #12
 8025292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025294:	483e      	ldr	r0, [pc, #248]	; (8025390 <sinf+0x138>)
 8025296:	eeb0 0b46 	vmov.f64	d0, d6
 802529a:	2100      	movs	r1, #0
 802529c:	b003      	add	sp, #12
 802529e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80252a2:	f7ff bfaf 	b.w	8025204 <sinf_poly>
 80252a6:	f240 422e 	movw	r2, #1070	; 0x42e
 80252aa:	4293      	cmp	r3, r2
 80252ac:	d824      	bhi.n	80252f8 <sinf+0xa0>
 80252ae:	4b38      	ldr	r3, [pc, #224]	; (8025390 <sinf+0x138>)
 80252b0:	ed93 7b08 	vldr	d7, [r3, #32]
 80252b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80252b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80252bc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80252c0:	ee17 1a90 	vmov	r1, s15
 80252c4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80252c8:	1609      	asrs	r1, r1, #24
 80252ca:	ee07 1a90 	vmov	s15, r1
 80252ce:	f001 0203 	and.w	r2, r1, #3
 80252d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80252d6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80252da:	ed92 0b00 	vldr	d0, [r2]
 80252de:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80252e2:	f011 0f02 	tst.w	r1, #2
 80252e6:	eea5 6b47 	vfms.f64	d6, d5, d7
 80252ea:	bf08      	it	eq
 80252ec:	4618      	moveq	r0, r3
 80252ee:	ee26 1b06 	vmul.f64	d1, d6, d6
 80252f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80252f6:	e7d1      	b.n	802529c <sinf+0x44>
 80252f8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80252fc:	d23d      	bcs.n	802537a <sinf+0x122>
 80252fe:	4b25      	ldr	r3, [pc, #148]	; (8025394 <sinf+0x13c>)
 8025300:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8025304:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8025308:	f3c4 0116 	ubfx	r1, r4, #0, #23
 802530c:	6a06      	ldr	r6, [r0, #32]
 802530e:	6900      	ldr	r0, [r0, #16]
 8025310:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8025314:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8025318:	40a9      	lsls	r1, r5
 802531a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802531e:	fba1 6706 	umull	r6, r7, r1, r6
 8025322:	fb05 f301 	mul.w	r3, r5, r1
 8025326:	463a      	mov	r2, r7
 8025328:	fbe0 2301 	umlal	r2, r3, r0, r1
 802532c:	1c11      	adds	r1, r2, #0
 802532e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8025332:	2000      	movs	r0, #0
 8025334:	1a10      	subs	r0, r2, r0
 8025336:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 802533a:	eb63 0101 	sbc.w	r1, r3, r1
 802533e:	f7db f95d 	bl	80005fc <__aeabi_l2d>
 8025342:	0fb5      	lsrs	r5, r6, #30
 8025344:	4a12      	ldr	r2, [pc, #72]	; (8025390 <sinf+0x138>)
 8025346:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 802534a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8025388 <sinf+0x130>
 802534e:	ec41 0b17 	vmov	d7, r0, r1
 8025352:	f003 0103 	and.w	r1, r3, #3
 8025356:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802535a:	ee27 0b00 	vmul.f64	d0, d7, d0
 802535e:	ed91 7b00 	vldr	d7, [r1]
 8025362:	ee20 1b00 	vmul.f64	d1, d0, d0
 8025366:	f013 0f02 	tst.w	r3, #2
 802536a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 802536e:	4629      	mov	r1, r5
 8025370:	bf08      	it	eq
 8025372:	4610      	moveq	r0, r2
 8025374:	ee27 0b00 	vmul.f64	d0, d7, d0
 8025378:	e790      	b.n	802529c <sinf+0x44>
 802537a:	b003      	add	sp, #12
 802537c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025380:	f7ff bf31 	b.w	80251e6 <__math_invalidf>
 8025384:	f3af 8000 	nop.w
 8025388:	54442d18 	.word	0x54442d18
 802538c:	3c1921fb 	.word	0x3c1921fb
 8025390:	0802cbb0 	.word	0x0802cbb0
 8025394:	0802cb50 	.word	0x0802cb50

08025398 <abort>:
 8025398:	b508      	push	{r3, lr}
 802539a:	2006      	movs	r0, #6
 802539c:	f000 fc6c 	bl	8025c78 <raise>
 80253a0:	2001      	movs	r0, #1
 80253a2:	f7df f93d 	bl	8004620 <_exit>
	...

080253a8 <__assert_func>:
 80253a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80253aa:	4614      	mov	r4, r2
 80253ac:	461a      	mov	r2, r3
 80253ae:	4b09      	ldr	r3, [pc, #36]	; (80253d4 <__assert_func+0x2c>)
 80253b0:	681b      	ldr	r3, [r3, #0]
 80253b2:	4605      	mov	r5, r0
 80253b4:	68d8      	ldr	r0, [r3, #12]
 80253b6:	b14c      	cbz	r4, 80253cc <__assert_func+0x24>
 80253b8:	4b07      	ldr	r3, [pc, #28]	; (80253d8 <__assert_func+0x30>)
 80253ba:	9100      	str	r1, [sp, #0]
 80253bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80253c0:	4906      	ldr	r1, [pc, #24]	; (80253dc <__assert_func+0x34>)
 80253c2:	462b      	mov	r3, r5
 80253c4:	f000 f828 	bl	8025418 <fiprintf>
 80253c8:	f7ff ffe6 	bl	8025398 <abort>
 80253cc:	4b04      	ldr	r3, [pc, #16]	; (80253e0 <__assert_func+0x38>)
 80253ce:	461c      	mov	r4, r3
 80253d0:	e7f3      	b.n	80253ba <__assert_func+0x12>
 80253d2:	bf00      	nop
 80253d4:	200000e8 	.word	0x200000e8
 80253d8:	0802cc90 	.word	0x0802cc90
 80253dc:	0802cc9d 	.word	0x0802cc9d
 80253e0:	0802cccb 	.word	0x0802cccb

080253e4 <atexit>:
 80253e4:	2300      	movs	r3, #0
 80253e6:	4601      	mov	r1, r0
 80253e8:	461a      	mov	r2, r3
 80253ea:	4618      	mov	r0, r3
 80253ec:	f000 bd32 	b.w	8025e54 <__register_exitproc>

080253f0 <__cxa_atexit>:
 80253f0:	b510      	push	{r4, lr}
 80253f2:	4c05      	ldr	r4, [pc, #20]	; (8025408 <__cxa_atexit+0x18>)
 80253f4:	4613      	mov	r3, r2
 80253f6:	b12c      	cbz	r4, 8025404 <__cxa_atexit+0x14>
 80253f8:	460a      	mov	r2, r1
 80253fa:	4601      	mov	r1, r0
 80253fc:	2002      	movs	r0, #2
 80253fe:	f000 fd29 	bl	8025e54 <__register_exitproc>
 8025402:	bd10      	pop	{r4, pc}
 8025404:	4620      	mov	r0, r4
 8025406:	e7fc      	b.n	8025402 <__cxa_atexit+0x12>
 8025408:	08025e55 	.word	0x08025e55

0802540c <__errno>:
 802540c:	4b01      	ldr	r3, [pc, #4]	; (8025414 <__errno+0x8>)
 802540e:	6818      	ldr	r0, [r3, #0]
 8025410:	4770      	bx	lr
 8025412:	bf00      	nop
 8025414:	200000e8 	.word	0x200000e8

08025418 <fiprintf>:
 8025418:	b40e      	push	{r1, r2, r3}
 802541a:	b503      	push	{r0, r1, lr}
 802541c:	4601      	mov	r1, r0
 802541e:	ab03      	add	r3, sp, #12
 8025420:	4805      	ldr	r0, [pc, #20]	; (8025438 <fiprintf+0x20>)
 8025422:	f853 2b04 	ldr.w	r2, [r3], #4
 8025426:	6800      	ldr	r0, [r0, #0]
 8025428:	9301      	str	r3, [sp, #4]
 802542a:	f000 f929 	bl	8025680 <_vfiprintf_r>
 802542e:	b002      	add	sp, #8
 8025430:	f85d eb04 	ldr.w	lr, [sp], #4
 8025434:	b003      	add	sp, #12
 8025436:	4770      	bx	lr
 8025438:	200000e8 	.word	0x200000e8

0802543c <__libc_init_array>:
 802543c:	b570      	push	{r4, r5, r6, lr}
 802543e:	4d0d      	ldr	r5, [pc, #52]	; (8025474 <__libc_init_array+0x38>)
 8025440:	4c0d      	ldr	r4, [pc, #52]	; (8025478 <__libc_init_array+0x3c>)
 8025442:	1b64      	subs	r4, r4, r5
 8025444:	10a4      	asrs	r4, r4, #2
 8025446:	2600      	movs	r6, #0
 8025448:	42a6      	cmp	r6, r4
 802544a:	d109      	bne.n	8025460 <__libc_init_array+0x24>
 802544c:	4d0b      	ldr	r5, [pc, #44]	; (802547c <__libc_init_array+0x40>)
 802544e:	4c0c      	ldr	r4, [pc, #48]	; (8025480 <__libc_init_array+0x44>)
 8025450:	f001 f836 	bl	80264c0 <_init>
 8025454:	1b64      	subs	r4, r4, r5
 8025456:	10a4      	asrs	r4, r4, #2
 8025458:	2600      	movs	r6, #0
 802545a:	42a6      	cmp	r6, r4
 802545c:	d105      	bne.n	802546a <__libc_init_array+0x2e>
 802545e:	bd70      	pop	{r4, r5, r6, pc}
 8025460:	f855 3b04 	ldr.w	r3, [r5], #4
 8025464:	4798      	blx	r3
 8025466:	3601      	adds	r6, #1
 8025468:	e7ee      	b.n	8025448 <__libc_init_array+0xc>
 802546a:	f855 3b04 	ldr.w	r3, [r5], #4
 802546e:	4798      	blx	r3
 8025470:	3601      	adds	r6, #1
 8025472:	e7f2      	b.n	802545a <__libc_init_array+0x1e>
 8025474:	0802cdac 	.word	0x0802cdac
 8025478:	0802cdac 	.word	0x0802cdac
 802547c:	0802cdac 	.word	0x0802cdac
 8025480:	0802cdc8 	.word	0x0802cdc8

08025484 <__retarget_lock_init_recursive>:
 8025484:	4770      	bx	lr

08025486 <__retarget_lock_acquire_recursive>:
 8025486:	4770      	bx	lr

08025488 <__retarget_lock_release>:
 8025488:	4770      	bx	lr

0802548a <__retarget_lock_release_recursive>:
 802548a:	4770      	bx	lr

0802548c <malloc>:
 802548c:	4b02      	ldr	r3, [pc, #8]	; (8025498 <malloc+0xc>)
 802548e:	4601      	mov	r1, r0
 8025490:	6818      	ldr	r0, [r3, #0]
 8025492:	f000 b871 	b.w	8025578 <_malloc_r>
 8025496:	bf00      	nop
 8025498:	200000e8 	.word	0x200000e8

0802549c <free>:
 802549c:	4b02      	ldr	r3, [pc, #8]	; (80254a8 <free+0xc>)
 802549e:	4601      	mov	r1, r0
 80254a0:	6818      	ldr	r0, [r3, #0]
 80254a2:	f000 b819 	b.w	80254d8 <_free_r>
 80254a6:	bf00      	nop
 80254a8:	200000e8 	.word	0x200000e8

080254ac <memcpy>:
 80254ac:	440a      	add	r2, r1
 80254ae:	4291      	cmp	r1, r2
 80254b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80254b4:	d100      	bne.n	80254b8 <memcpy+0xc>
 80254b6:	4770      	bx	lr
 80254b8:	b510      	push	{r4, lr}
 80254ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80254be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80254c2:	4291      	cmp	r1, r2
 80254c4:	d1f9      	bne.n	80254ba <memcpy+0xe>
 80254c6:	bd10      	pop	{r4, pc}

080254c8 <memset>:
 80254c8:	4402      	add	r2, r0
 80254ca:	4603      	mov	r3, r0
 80254cc:	4293      	cmp	r3, r2
 80254ce:	d100      	bne.n	80254d2 <memset+0xa>
 80254d0:	4770      	bx	lr
 80254d2:	f803 1b01 	strb.w	r1, [r3], #1
 80254d6:	e7f9      	b.n	80254cc <memset+0x4>

080254d8 <_free_r>:
 80254d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80254da:	2900      	cmp	r1, #0
 80254dc:	d048      	beq.n	8025570 <_free_r+0x98>
 80254de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80254e2:	9001      	str	r0, [sp, #4]
 80254e4:	2b00      	cmp	r3, #0
 80254e6:	f1a1 0404 	sub.w	r4, r1, #4
 80254ea:	bfb8      	it	lt
 80254ec:	18e4      	addlt	r4, r4, r3
 80254ee:	f000 ff2f 	bl	8026350 <__malloc_lock>
 80254f2:	4a20      	ldr	r2, [pc, #128]	; (8025574 <_free_r+0x9c>)
 80254f4:	9801      	ldr	r0, [sp, #4]
 80254f6:	6813      	ldr	r3, [r2, #0]
 80254f8:	4615      	mov	r5, r2
 80254fa:	b933      	cbnz	r3, 802550a <_free_r+0x32>
 80254fc:	6063      	str	r3, [r4, #4]
 80254fe:	6014      	str	r4, [r2, #0]
 8025500:	b003      	add	sp, #12
 8025502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025506:	f000 bf29 	b.w	802635c <__malloc_unlock>
 802550a:	42a3      	cmp	r3, r4
 802550c:	d90b      	bls.n	8025526 <_free_r+0x4e>
 802550e:	6821      	ldr	r1, [r4, #0]
 8025510:	1862      	adds	r2, r4, r1
 8025512:	4293      	cmp	r3, r2
 8025514:	bf04      	itt	eq
 8025516:	681a      	ldreq	r2, [r3, #0]
 8025518:	685b      	ldreq	r3, [r3, #4]
 802551a:	6063      	str	r3, [r4, #4]
 802551c:	bf04      	itt	eq
 802551e:	1852      	addeq	r2, r2, r1
 8025520:	6022      	streq	r2, [r4, #0]
 8025522:	602c      	str	r4, [r5, #0]
 8025524:	e7ec      	b.n	8025500 <_free_r+0x28>
 8025526:	461a      	mov	r2, r3
 8025528:	685b      	ldr	r3, [r3, #4]
 802552a:	b10b      	cbz	r3, 8025530 <_free_r+0x58>
 802552c:	42a3      	cmp	r3, r4
 802552e:	d9fa      	bls.n	8025526 <_free_r+0x4e>
 8025530:	6811      	ldr	r1, [r2, #0]
 8025532:	1855      	adds	r5, r2, r1
 8025534:	42a5      	cmp	r5, r4
 8025536:	d10b      	bne.n	8025550 <_free_r+0x78>
 8025538:	6824      	ldr	r4, [r4, #0]
 802553a:	4421      	add	r1, r4
 802553c:	1854      	adds	r4, r2, r1
 802553e:	42a3      	cmp	r3, r4
 8025540:	6011      	str	r1, [r2, #0]
 8025542:	d1dd      	bne.n	8025500 <_free_r+0x28>
 8025544:	681c      	ldr	r4, [r3, #0]
 8025546:	685b      	ldr	r3, [r3, #4]
 8025548:	6053      	str	r3, [r2, #4]
 802554a:	4421      	add	r1, r4
 802554c:	6011      	str	r1, [r2, #0]
 802554e:	e7d7      	b.n	8025500 <_free_r+0x28>
 8025550:	d902      	bls.n	8025558 <_free_r+0x80>
 8025552:	230c      	movs	r3, #12
 8025554:	6003      	str	r3, [r0, #0]
 8025556:	e7d3      	b.n	8025500 <_free_r+0x28>
 8025558:	6825      	ldr	r5, [r4, #0]
 802555a:	1961      	adds	r1, r4, r5
 802555c:	428b      	cmp	r3, r1
 802555e:	bf04      	itt	eq
 8025560:	6819      	ldreq	r1, [r3, #0]
 8025562:	685b      	ldreq	r3, [r3, #4]
 8025564:	6063      	str	r3, [r4, #4]
 8025566:	bf04      	itt	eq
 8025568:	1949      	addeq	r1, r1, r5
 802556a:	6021      	streq	r1, [r4, #0]
 802556c:	6054      	str	r4, [r2, #4]
 802556e:	e7c7      	b.n	8025500 <_free_r+0x28>
 8025570:	b003      	add	sp, #12
 8025572:	bd30      	pop	{r4, r5, pc}
 8025574:	20060d4c 	.word	0x20060d4c

08025578 <_malloc_r>:
 8025578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802557a:	1ccd      	adds	r5, r1, #3
 802557c:	f025 0503 	bic.w	r5, r5, #3
 8025580:	3508      	adds	r5, #8
 8025582:	2d0c      	cmp	r5, #12
 8025584:	bf38      	it	cc
 8025586:	250c      	movcc	r5, #12
 8025588:	2d00      	cmp	r5, #0
 802558a:	4606      	mov	r6, r0
 802558c:	db01      	blt.n	8025592 <_malloc_r+0x1a>
 802558e:	42a9      	cmp	r1, r5
 8025590:	d903      	bls.n	802559a <_malloc_r+0x22>
 8025592:	230c      	movs	r3, #12
 8025594:	6033      	str	r3, [r6, #0]
 8025596:	2000      	movs	r0, #0
 8025598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802559a:	f000 fed9 	bl	8026350 <__malloc_lock>
 802559e:	4921      	ldr	r1, [pc, #132]	; (8025624 <_malloc_r+0xac>)
 80255a0:	680a      	ldr	r2, [r1, #0]
 80255a2:	4614      	mov	r4, r2
 80255a4:	b99c      	cbnz	r4, 80255ce <_malloc_r+0x56>
 80255a6:	4f20      	ldr	r7, [pc, #128]	; (8025628 <_malloc_r+0xb0>)
 80255a8:	683b      	ldr	r3, [r7, #0]
 80255aa:	b923      	cbnz	r3, 80255b6 <_malloc_r+0x3e>
 80255ac:	4621      	mov	r1, r4
 80255ae:	4630      	mov	r0, r6
 80255b0:	f000 fb2a 	bl	8025c08 <_sbrk_r>
 80255b4:	6038      	str	r0, [r7, #0]
 80255b6:	4629      	mov	r1, r5
 80255b8:	4630      	mov	r0, r6
 80255ba:	f000 fb25 	bl	8025c08 <_sbrk_r>
 80255be:	1c43      	adds	r3, r0, #1
 80255c0:	d123      	bne.n	802560a <_malloc_r+0x92>
 80255c2:	230c      	movs	r3, #12
 80255c4:	6033      	str	r3, [r6, #0]
 80255c6:	4630      	mov	r0, r6
 80255c8:	f000 fec8 	bl	802635c <__malloc_unlock>
 80255cc:	e7e3      	b.n	8025596 <_malloc_r+0x1e>
 80255ce:	6823      	ldr	r3, [r4, #0]
 80255d0:	1b5b      	subs	r3, r3, r5
 80255d2:	d417      	bmi.n	8025604 <_malloc_r+0x8c>
 80255d4:	2b0b      	cmp	r3, #11
 80255d6:	d903      	bls.n	80255e0 <_malloc_r+0x68>
 80255d8:	6023      	str	r3, [r4, #0]
 80255da:	441c      	add	r4, r3
 80255dc:	6025      	str	r5, [r4, #0]
 80255de:	e004      	b.n	80255ea <_malloc_r+0x72>
 80255e0:	6863      	ldr	r3, [r4, #4]
 80255e2:	42a2      	cmp	r2, r4
 80255e4:	bf0c      	ite	eq
 80255e6:	600b      	streq	r3, [r1, #0]
 80255e8:	6053      	strne	r3, [r2, #4]
 80255ea:	4630      	mov	r0, r6
 80255ec:	f000 feb6 	bl	802635c <__malloc_unlock>
 80255f0:	f104 000b 	add.w	r0, r4, #11
 80255f4:	1d23      	adds	r3, r4, #4
 80255f6:	f020 0007 	bic.w	r0, r0, #7
 80255fa:	1ac2      	subs	r2, r0, r3
 80255fc:	d0cc      	beq.n	8025598 <_malloc_r+0x20>
 80255fe:	1a1b      	subs	r3, r3, r0
 8025600:	50a3      	str	r3, [r4, r2]
 8025602:	e7c9      	b.n	8025598 <_malloc_r+0x20>
 8025604:	4622      	mov	r2, r4
 8025606:	6864      	ldr	r4, [r4, #4]
 8025608:	e7cc      	b.n	80255a4 <_malloc_r+0x2c>
 802560a:	1cc4      	adds	r4, r0, #3
 802560c:	f024 0403 	bic.w	r4, r4, #3
 8025610:	42a0      	cmp	r0, r4
 8025612:	d0e3      	beq.n	80255dc <_malloc_r+0x64>
 8025614:	1a21      	subs	r1, r4, r0
 8025616:	4630      	mov	r0, r6
 8025618:	f000 faf6 	bl	8025c08 <_sbrk_r>
 802561c:	3001      	adds	r0, #1
 802561e:	d1dd      	bne.n	80255dc <_malloc_r+0x64>
 8025620:	e7cf      	b.n	80255c2 <_malloc_r+0x4a>
 8025622:	bf00      	nop
 8025624:	20060d4c 	.word	0x20060d4c
 8025628:	20060d50 	.word	0x20060d50

0802562c <__sfputc_r>:
 802562c:	6893      	ldr	r3, [r2, #8]
 802562e:	3b01      	subs	r3, #1
 8025630:	2b00      	cmp	r3, #0
 8025632:	b410      	push	{r4}
 8025634:	6093      	str	r3, [r2, #8]
 8025636:	da08      	bge.n	802564a <__sfputc_r+0x1e>
 8025638:	6994      	ldr	r4, [r2, #24]
 802563a:	42a3      	cmp	r3, r4
 802563c:	db01      	blt.n	8025642 <__sfputc_r+0x16>
 802563e:	290a      	cmp	r1, #10
 8025640:	d103      	bne.n	802564a <__sfputc_r+0x1e>
 8025642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025646:	f000 bb45 	b.w	8025cd4 <__swbuf_r>
 802564a:	6813      	ldr	r3, [r2, #0]
 802564c:	1c58      	adds	r0, r3, #1
 802564e:	6010      	str	r0, [r2, #0]
 8025650:	7019      	strb	r1, [r3, #0]
 8025652:	4608      	mov	r0, r1
 8025654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025658:	4770      	bx	lr

0802565a <__sfputs_r>:
 802565a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802565c:	4606      	mov	r6, r0
 802565e:	460f      	mov	r7, r1
 8025660:	4614      	mov	r4, r2
 8025662:	18d5      	adds	r5, r2, r3
 8025664:	42ac      	cmp	r4, r5
 8025666:	d101      	bne.n	802566c <__sfputs_r+0x12>
 8025668:	2000      	movs	r0, #0
 802566a:	e007      	b.n	802567c <__sfputs_r+0x22>
 802566c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025670:	463a      	mov	r2, r7
 8025672:	4630      	mov	r0, r6
 8025674:	f7ff ffda 	bl	802562c <__sfputc_r>
 8025678:	1c43      	adds	r3, r0, #1
 802567a:	d1f3      	bne.n	8025664 <__sfputs_r+0xa>
 802567c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025680 <_vfiprintf_r>:
 8025680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025684:	460d      	mov	r5, r1
 8025686:	b09d      	sub	sp, #116	; 0x74
 8025688:	4614      	mov	r4, r2
 802568a:	4698      	mov	r8, r3
 802568c:	4606      	mov	r6, r0
 802568e:	b118      	cbz	r0, 8025698 <_vfiprintf_r+0x18>
 8025690:	6983      	ldr	r3, [r0, #24]
 8025692:	b90b      	cbnz	r3, 8025698 <_vfiprintf_r+0x18>
 8025694:	f000 fd5a 	bl	802614c <__sinit>
 8025698:	4b89      	ldr	r3, [pc, #548]	; (80258c0 <_vfiprintf_r+0x240>)
 802569a:	429d      	cmp	r5, r3
 802569c:	d11b      	bne.n	80256d6 <_vfiprintf_r+0x56>
 802569e:	6875      	ldr	r5, [r6, #4]
 80256a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80256a2:	07d9      	lsls	r1, r3, #31
 80256a4:	d405      	bmi.n	80256b2 <_vfiprintf_r+0x32>
 80256a6:	89ab      	ldrh	r3, [r5, #12]
 80256a8:	059a      	lsls	r2, r3, #22
 80256aa:	d402      	bmi.n	80256b2 <_vfiprintf_r+0x32>
 80256ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80256ae:	f7ff feea 	bl	8025486 <__retarget_lock_acquire_recursive>
 80256b2:	89ab      	ldrh	r3, [r5, #12]
 80256b4:	071b      	lsls	r3, r3, #28
 80256b6:	d501      	bpl.n	80256bc <_vfiprintf_r+0x3c>
 80256b8:	692b      	ldr	r3, [r5, #16]
 80256ba:	b9eb      	cbnz	r3, 80256f8 <_vfiprintf_r+0x78>
 80256bc:	4629      	mov	r1, r5
 80256be:	4630      	mov	r0, r6
 80256c0:	f000 fb5a 	bl	8025d78 <__swsetup_r>
 80256c4:	b1c0      	cbz	r0, 80256f8 <_vfiprintf_r+0x78>
 80256c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80256c8:	07dc      	lsls	r4, r3, #31
 80256ca:	d50e      	bpl.n	80256ea <_vfiprintf_r+0x6a>
 80256cc:	f04f 30ff 	mov.w	r0, #4294967295
 80256d0:	b01d      	add	sp, #116	; 0x74
 80256d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256d6:	4b7b      	ldr	r3, [pc, #492]	; (80258c4 <_vfiprintf_r+0x244>)
 80256d8:	429d      	cmp	r5, r3
 80256da:	d101      	bne.n	80256e0 <_vfiprintf_r+0x60>
 80256dc:	68b5      	ldr	r5, [r6, #8]
 80256de:	e7df      	b.n	80256a0 <_vfiprintf_r+0x20>
 80256e0:	4b79      	ldr	r3, [pc, #484]	; (80258c8 <_vfiprintf_r+0x248>)
 80256e2:	429d      	cmp	r5, r3
 80256e4:	bf08      	it	eq
 80256e6:	68f5      	ldreq	r5, [r6, #12]
 80256e8:	e7da      	b.n	80256a0 <_vfiprintf_r+0x20>
 80256ea:	89ab      	ldrh	r3, [r5, #12]
 80256ec:	0598      	lsls	r0, r3, #22
 80256ee:	d4ed      	bmi.n	80256cc <_vfiprintf_r+0x4c>
 80256f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80256f2:	f7ff feca 	bl	802548a <__retarget_lock_release_recursive>
 80256f6:	e7e9      	b.n	80256cc <_vfiprintf_r+0x4c>
 80256f8:	2300      	movs	r3, #0
 80256fa:	9309      	str	r3, [sp, #36]	; 0x24
 80256fc:	2320      	movs	r3, #32
 80256fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025702:	f8cd 800c 	str.w	r8, [sp, #12]
 8025706:	2330      	movs	r3, #48	; 0x30
 8025708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80258cc <_vfiprintf_r+0x24c>
 802570c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025710:	f04f 0901 	mov.w	r9, #1
 8025714:	4623      	mov	r3, r4
 8025716:	469a      	mov	sl, r3
 8025718:	f813 2b01 	ldrb.w	r2, [r3], #1
 802571c:	b10a      	cbz	r2, 8025722 <_vfiprintf_r+0xa2>
 802571e:	2a25      	cmp	r2, #37	; 0x25
 8025720:	d1f9      	bne.n	8025716 <_vfiprintf_r+0x96>
 8025722:	ebba 0b04 	subs.w	fp, sl, r4
 8025726:	d00b      	beq.n	8025740 <_vfiprintf_r+0xc0>
 8025728:	465b      	mov	r3, fp
 802572a:	4622      	mov	r2, r4
 802572c:	4629      	mov	r1, r5
 802572e:	4630      	mov	r0, r6
 8025730:	f7ff ff93 	bl	802565a <__sfputs_r>
 8025734:	3001      	adds	r0, #1
 8025736:	f000 80aa 	beq.w	802588e <_vfiprintf_r+0x20e>
 802573a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802573c:	445a      	add	r2, fp
 802573e:	9209      	str	r2, [sp, #36]	; 0x24
 8025740:	f89a 3000 	ldrb.w	r3, [sl]
 8025744:	2b00      	cmp	r3, #0
 8025746:	f000 80a2 	beq.w	802588e <_vfiprintf_r+0x20e>
 802574a:	2300      	movs	r3, #0
 802574c:	f04f 32ff 	mov.w	r2, #4294967295
 8025750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025754:	f10a 0a01 	add.w	sl, sl, #1
 8025758:	9304      	str	r3, [sp, #16]
 802575a:	9307      	str	r3, [sp, #28]
 802575c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025760:	931a      	str	r3, [sp, #104]	; 0x68
 8025762:	4654      	mov	r4, sl
 8025764:	2205      	movs	r2, #5
 8025766:	f814 1b01 	ldrb.w	r1, [r4], #1
 802576a:	4858      	ldr	r0, [pc, #352]	; (80258cc <_vfiprintf_r+0x24c>)
 802576c:	f7da fd68 	bl	8000240 <memchr>
 8025770:	9a04      	ldr	r2, [sp, #16]
 8025772:	b9d8      	cbnz	r0, 80257ac <_vfiprintf_r+0x12c>
 8025774:	06d1      	lsls	r1, r2, #27
 8025776:	bf44      	itt	mi
 8025778:	2320      	movmi	r3, #32
 802577a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802577e:	0713      	lsls	r3, r2, #28
 8025780:	bf44      	itt	mi
 8025782:	232b      	movmi	r3, #43	; 0x2b
 8025784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025788:	f89a 3000 	ldrb.w	r3, [sl]
 802578c:	2b2a      	cmp	r3, #42	; 0x2a
 802578e:	d015      	beq.n	80257bc <_vfiprintf_r+0x13c>
 8025790:	9a07      	ldr	r2, [sp, #28]
 8025792:	4654      	mov	r4, sl
 8025794:	2000      	movs	r0, #0
 8025796:	f04f 0c0a 	mov.w	ip, #10
 802579a:	4621      	mov	r1, r4
 802579c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80257a0:	3b30      	subs	r3, #48	; 0x30
 80257a2:	2b09      	cmp	r3, #9
 80257a4:	d94e      	bls.n	8025844 <_vfiprintf_r+0x1c4>
 80257a6:	b1b0      	cbz	r0, 80257d6 <_vfiprintf_r+0x156>
 80257a8:	9207      	str	r2, [sp, #28]
 80257aa:	e014      	b.n	80257d6 <_vfiprintf_r+0x156>
 80257ac:	eba0 0308 	sub.w	r3, r0, r8
 80257b0:	fa09 f303 	lsl.w	r3, r9, r3
 80257b4:	4313      	orrs	r3, r2
 80257b6:	9304      	str	r3, [sp, #16]
 80257b8:	46a2      	mov	sl, r4
 80257ba:	e7d2      	b.n	8025762 <_vfiprintf_r+0xe2>
 80257bc:	9b03      	ldr	r3, [sp, #12]
 80257be:	1d19      	adds	r1, r3, #4
 80257c0:	681b      	ldr	r3, [r3, #0]
 80257c2:	9103      	str	r1, [sp, #12]
 80257c4:	2b00      	cmp	r3, #0
 80257c6:	bfbb      	ittet	lt
 80257c8:	425b      	neglt	r3, r3
 80257ca:	f042 0202 	orrlt.w	r2, r2, #2
 80257ce:	9307      	strge	r3, [sp, #28]
 80257d0:	9307      	strlt	r3, [sp, #28]
 80257d2:	bfb8      	it	lt
 80257d4:	9204      	strlt	r2, [sp, #16]
 80257d6:	7823      	ldrb	r3, [r4, #0]
 80257d8:	2b2e      	cmp	r3, #46	; 0x2e
 80257da:	d10c      	bne.n	80257f6 <_vfiprintf_r+0x176>
 80257dc:	7863      	ldrb	r3, [r4, #1]
 80257de:	2b2a      	cmp	r3, #42	; 0x2a
 80257e0:	d135      	bne.n	802584e <_vfiprintf_r+0x1ce>
 80257e2:	9b03      	ldr	r3, [sp, #12]
 80257e4:	1d1a      	adds	r2, r3, #4
 80257e6:	681b      	ldr	r3, [r3, #0]
 80257e8:	9203      	str	r2, [sp, #12]
 80257ea:	2b00      	cmp	r3, #0
 80257ec:	bfb8      	it	lt
 80257ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80257f2:	3402      	adds	r4, #2
 80257f4:	9305      	str	r3, [sp, #20]
 80257f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80258dc <_vfiprintf_r+0x25c>
 80257fa:	7821      	ldrb	r1, [r4, #0]
 80257fc:	2203      	movs	r2, #3
 80257fe:	4650      	mov	r0, sl
 8025800:	f7da fd1e 	bl	8000240 <memchr>
 8025804:	b140      	cbz	r0, 8025818 <_vfiprintf_r+0x198>
 8025806:	2340      	movs	r3, #64	; 0x40
 8025808:	eba0 000a 	sub.w	r0, r0, sl
 802580c:	fa03 f000 	lsl.w	r0, r3, r0
 8025810:	9b04      	ldr	r3, [sp, #16]
 8025812:	4303      	orrs	r3, r0
 8025814:	3401      	adds	r4, #1
 8025816:	9304      	str	r3, [sp, #16]
 8025818:	f814 1b01 	ldrb.w	r1, [r4], #1
 802581c:	482c      	ldr	r0, [pc, #176]	; (80258d0 <_vfiprintf_r+0x250>)
 802581e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025822:	2206      	movs	r2, #6
 8025824:	f7da fd0c 	bl	8000240 <memchr>
 8025828:	2800      	cmp	r0, #0
 802582a:	d03f      	beq.n	80258ac <_vfiprintf_r+0x22c>
 802582c:	4b29      	ldr	r3, [pc, #164]	; (80258d4 <_vfiprintf_r+0x254>)
 802582e:	bb1b      	cbnz	r3, 8025878 <_vfiprintf_r+0x1f8>
 8025830:	9b03      	ldr	r3, [sp, #12]
 8025832:	3307      	adds	r3, #7
 8025834:	f023 0307 	bic.w	r3, r3, #7
 8025838:	3308      	adds	r3, #8
 802583a:	9303      	str	r3, [sp, #12]
 802583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802583e:	443b      	add	r3, r7
 8025840:	9309      	str	r3, [sp, #36]	; 0x24
 8025842:	e767      	b.n	8025714 <_vfiprintf_r+0x94>
 8025844:	fb0c 3202 	mla	r2, ip, r2, r3
 8025848:	460c      	mov	r4, r1
 802584a:	2001      	movs	r0, #1
 802584c:	e7a5      	b.n	802579a <_vfiprintf_r+0x11a>
 802584e:	2300      	movs	r3, #0
 8025850:	3401      	adds	r4, #1
 8025852:	9305      	str	r3, [sp, #20]
 8025854:	4619      	mov	r1, r3
 8025856:	f04f 0c0a 	mov.w	ip, #10
 802585a:	4620      	mov	r0, r4
 802585c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025860:	3a30      	subs	r2, #48	; 0x30
 8025862:	2a09      	cmp	r2, #9
 8025864:	d903      	bls.n	802586e <_vfiprintf_r+0x1ee>
 8025866:	2b00      	cmp	r3, #0
 8025868:	d0c5      	beq.n	80257f6 <_vfiprintf_r+0x176>
 802586a:	9105      	str	r1, [sp, #20]
 802586c:	e7c3      	b.n	80257f6 <_vfiprintf_r+0x176>
 802586e:	fb0c 2101 	mla	r1, ip, r1, r2
 8025872:	4604      	mov	r4, r0
 8025874:	2301      	movs	r3, #1
 8025876:	e7f0      	b.n	802585a <_vfiprintf_r+0x1da>
 8025878:	ab03      	add	r3, sp, #12
 802587a:	9300      	str	r3, [sp, #0]
 802587c:	462a      	mov	r2, r5
 802587e:	4b16      	ldr	r3, [pc, #88]	; (80258d8 <_vfiprintf_r+0x258>)
 8025880:	a904      	add	r1, sp, #16
 8025882:	4630      	mov	r0, r6
 8025884:	f3af 8000 	nop.w
 8025888:	4607      	mov	r7, r0
 802588a:	1c78      	adds	r0, r7, #1
 802588c:	d1d6      	bne.n	802583c <_vfiprintf_r+0x1bc>
 802588e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025890:	07d9      	lsls	r1, r3, #31
 8025892:	d405      	bmi.n	80258a0 <_vfiprintf_r+0x220>
 8025894:	89ab      	ldrh	r3, [r5, #12]
 8025896:	059a      	lsls	r2, r3, #22
 8025898:	d402      	bmi.n	80258a0 <_vfiprintf_r+0x220>
 802589a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802589c:	f7ff fdf5 	bl	802548a <__retarget_lock_release_recursive>
 80258a0:	89ab      	ldrh	r3, [r5, #12]
 80258a2:	065b      	lsls	r3, r3, #25
 80258a4:	f53f af12 	bmi.w	80256cc <_vfiprintf_r+0x4c>
 80258a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80258aa:	e711      	b.n	80256d0 <_vfiprintf_r+0x50>
 80258ac:	ab03      	add	r3, sp, #12
 80258ae:	9300      	str	r3, [sp, #0]
 80258b0:	462a      	mov	r2, r5
 80258b2:	4b09      	ldr	r3, [pc, #36]	; (80258d8 <_vfiprintf_r+0x258>)
 80258b4:	a904      	add	r1, sp, #16
 80258b6:	4630      	mov	r0, r6
 80258b8:	f000 f880 	bl	80259bc <_printf_i>
 80258bc:	e7e4      	b.n	8025888 <_vfiprintf_r+0x208>
 80258be:	bf00      	nop
 80258c0:	0802cd28 	.word	0x0802cd28
 80258c4:	0802cd48 	.word	0x0802cd48
 80258c8:	0802cd08 	.word	0x0802cd08
 80258cc:	0802ccd0 	.word	0x0802ccd0
 80258d0:	0802ccda 	.word	0x0802ccda
 80258d4:	00000000 	.word	0x00000000
 80258d8:	0802565b 	.word	0x0802565b
 80258dc:	0802ccd6 	.word	0x0802ccd6

080258e0 <_printf_common>:
 80258e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80258e4:	4616      	mov	r6, r2
 80258e6:	4699      	mov	r9, r3
 80258e8:	688a      	ldr	r2, [r1, #8]
 80258ea:	690b      	ldr	r3, [r1, #16]
 80258ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80258f0:	4293      	cmp	r3, r2
 80258f2:	bfb8      	it	lt
 80258f4:	4613      	movlt	r3, r2
 80258f6:	6033      	str	r3, [r6, #0]
 80258f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80258fc:	4607      	mov	r7, r0
 80258fe:	460c      	mov	r4, r1
 8025900:	b10a      	cbz	r2, 8025906 <_printf_common+0x26>
 8025902:	3301      	adds	r3, #1
 8025904:	6033      	str	r3, [r6, #0]
 8025906:	6823      	ldr	r3, [r4, #0]
 8025908:	0699      	lsls	r1, r3, #26
 802590a:	bf42      	ittt	mi
 802590c:	6833      	ldrmi	r3, [r6, #0]
 802590e:	3302      	addmi	r3, #2
 8025910:	6033      	strmi	r3, [r6, #0]
 8025912:	6825      	ldr	r5, [r4, #0]
 8025914:	f015 0506 	ands.w	r5, r5, #6
 8025918:	d106      	bne.n	8025928 <_printf_common+0x48>
 802591a:	f104 0a19 	add.w	sl, r4, #25
 802591e:	68e3      	ldr	r3, [r4, #12]
 8025920:	6832      	ldr	r2, [r6, #0]
 8025922:	1a9b      	subs	r3, r3, r2
 8025924:	42ab      	cmp	r3, r5
 8025926:	dc26      	bgt.n	8025976 <_printf_common+0x96>
 8025928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802592c:	1e13      	subs	r3, r2, #0
 802592e:	6822      	ldr	r2, [r4, #0]
 8025930:	bf18      	it	ne
 8025932:	2301      	movne	r3, #1
 8025934:	0692      	lsls	r2, r2, #26
 8025936:	d42b      	bmi.n	8025990 <_printf_common+0xb0>
 8025938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802593c:	4649      	mov	r1, r9
 802593e:	4638      	mov	r0, r7
 8025940:	47c0      	blx	r8
 8025942:	3001      	adds	r0, #1
 8025944:	d01e      	beq.n	8025984 <_printf_common+0xa4>
 8025946:	6823      	ldr	r3, [r4, #0]
 8025948:	68e5      	ldr	r5, [r4, #12]
 802594a:	6832      	ldr	r2, [r6, #0]
 802594c:	f003 0306 	and.w	r3, r3, #6
 8025950:	2b04      	cmp	r3, #4
 8025952:	bf08      	it	eq
 8025954:	1aad      	subeq	r5, r5, r2
 8025956:	68a3      	ldr	r3, [r4, #8]
 8025958:	6922      	ldr	r2, [r4, #16]
 802595a:	bf0c      	ite	eq
 802595c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025960:	2500      	movne	r5, #0
 8025962:	4293      	cmp	r3, r2
 8025964:	bfc4      	itt	gt
 8025966:	1a9b      	subgt	r3, r3, r2
 8025968:	18ed      	addgt	r5, r5, r3
 802596a:	2600      	movs	r6, #0
 802596c:	341a      	adds	r4, #26
 802596e:	42b5      	cmp	r5, r6
 8025970:	d11a      	bne.n	80259a8 <_printf_common+0xc8>
 8025972:	2000      	movs	r0, #0
 8025974:	e008      	b.n	8025988 <_printf_common+0xa8>
 8025976:	2301      	movs	r3, #1
 8025978:	4652      	mov	r2, sl
 802597a:	4649      	mov	r1, r9
 802597c:	4638      	mov	r0, r7
 802597e:	47c0      	blx	r8
 8025980:	3001      	adds	r0, #1
 8025982:	d103      	bne.n	802598c <_printf_common+0xac>
 8025984:	f04f 30ff 	mov.w	r0, #4294967295
 8025988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802598c:	3501      	adds	r5, #1
 802598e:	e7c6      	b.n	802591e <_printf_common+0x3e>
 8025990:	18e1      	adds	r1, r4, r3
 8025992:	1c5a      	adds	r2, r3, #1
 8025994:	2030      	movs	r0, #48	; 0x30
 8025996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802599a:	4422      	add	r2, r4
 802599c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80259a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80259a4:	3302      	adds	r3, #2
 80259a6:	e7c7      	b.n	8025938 <_printf_common+0x58>
 80259a8:	2301      	movs	r3, #1
 80259aa:	4622      	mov	r2, r4
 80259ac:	4649      	mov	r1, r9
 80259ae:	4638      	mov	r0, r7
 80259b0:	47c0      	blx	r8
 80259b2:	3001      	adds	r0, #1
 80259b4:	d0e6      	beq.n	8025984 <_printf_common+0xa4>
 80259b6:	3601      	adds	r6, #1
 80259b8:	e7d9      	b.n	802596e <_printf_common+0x8e>
	...

080259bc <_printf_i>:
 80259bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80259c0:	460c      	mov	r4, r1
 80259c2:	4691      	mov	r9, r2
 80259c4:	7e27      	ldrb	r7, [r4, #24]
 80259c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80259c8:	2f78      	cmp	r7, #120	; 0x78
 80259ca:	4680      	mov	r8, r0
 80259cc:	469a      	mov	sl, r3
 80259ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80259d2:	d807      	bhi.n	80259e4 <_printf_i+0x28>
 80259d4:	2f62      	cmp	r7, #98	; 0x62
 80259d6:	d80a      	bhi.n	80259ee <_printf_i+0x32>
 80259d8:	2f00      	cmp	r7, #0
 80259da:	f000 80d8 	beq.w	8025b8e <_printf_i+0x1d2>
 80259de:	2f58      	cmp	r7, #88	; 0x58
 80259e0:	f000 80a3 	beq.w	8025b2a <_printf_i+0x16e>
 80259e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80259e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80259ec:	e03a      	b.n	8025a64 <_printf_i+0xa8>
 80259ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80259f2:	2b15      	cmp	r3, #21
 80259f4:	d8f6      	bhi.n	80259e4 <_printf_i+0x28>
 80259f6:	a001      	add	r0, pc, #4	; (adr r0, 80259fc <_printf_i+0x40>)
 80259f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80259fc:	08025a55 	.word	0x08025a55
 8025a00:	08025a69 	.word	0x08025a69
 8025a04:	080259e5 	.word	0x080259e5
 8025a08:	080259e5 	.word	0x080259e5
 8025a0c:	080259e5 	.word	0x080259e5
 8025a10:	080259e5 	.word	0x080259e5
 8025a14:	08025a69 	.word	0x08025a69
 8025a18:	080259e5 	.word	0x080259e5
 8025a1c:	080259e5 	.word	0x080259e5
 8025a20:	080259e5 	.word	0x080259e5
 8025a24:	080259e5 	.word	0x080259e5
 8025a28:	08025b75 	.word	0x08025b75
 8025a2c:	08025a99 	.word	0x08025a99
 8025a30:	08025b57 	.word	0x08025b57
 8025a34:	080259e5 	.word	0x080259e5
 8025a38:	080259e5 	.word	0x080259e5
 8025a3c:	08025b97 	.word	0x08025b97
 8025a40:	080259e5 	.word	0x080259e5
 8025a44:	08025a99 	.word	0x08025a99
 8025a48:	080259e5 	.word	0x080259e5
 8025a4c:	080259e5 	.word	0x080259e5
 8025a50:	08025b5f 	.word	0x08025b5f
 8025a54:	680b      	ldr	r3, [r1, #0]
 8025a56:	1d1a      	adds	r2, r3, #4
 8025a58:	681b      	ldr	r3, [r3, #0]
 8025a5a:	600a      	str	r2, [r1, #0]
 8025a5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025a64:	2301      	movs	r3, #1
 8025a66:	e0a3      	b.n	8025bb0 <_printf_i+0x1f4>
 8025a68:	6825      	ldr	r5, [r4, #0]
 8025a6a:	6808      	ldr	r0, [r1, #0]
 8025a6c:	062e      	lsls	r6, r5, #24
 8025a6e:	f100 0304 	add.w	r3, r0, #4
 8025a72:	d50a      	bpl.n	8025a8a <_printf_i+0xce>
 8025a74:	6805      	ldr	r5, [r0, #0]
 8025a76:	600b      	str	r3, [r1, #0]
 8025a78:	2d00      	cmp	r5, #0
 8025a7a:	da03      	bge.n	8025a84 <_printf_i+0xc8>
 8025a7c:	232d      	movs	r3, #45	; 0x2d
 8025a7e:	426d      	negs	r5, r5
 8025a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025a84:	485e      	ldr	r0, [pc, #376]	; (8025c00 <_printf_i+0x244>)
 8025a86:	230a      	movs	r3, #10
 8025a88:	e019      	b.n	8025abe <_printf_i+0x102>
 8025a8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8025a8e:	6805      	ldr	r5, [r0, #0]
 8025a90:	600b      	str	r3, [r1, #0]
 8025a92:	bf18      	it	ne
 8025a94:	b22d      	sxthne	r5, r5
 8025a96:	e7ef      	b.n	8025a78 <_printf_i+0xbc>
 8025a98:	680b      	ldr	r3, [r1, #0]
 8025a9a:	6825      	ldr	r5, [r4, #0]
 8025a9c:	1d18      	adds	r0, r3, #4
 8025a9e:	6008      	str	r0, [r1, #0]
 8025aa0:	0628      	lsls	r0, r5, #24
 8025aa2:	d501      	bpl.n	8025aa8 <_printf_i+0xec>
 8025aa4:	681d      	ldr	r5, [r3, #0]
 8025aa6:	e002      	b.n	8025aae <_printf_i+0xf2>
 8025aa8:	0669      	lsls	r1, r5, #25
 8025aaa:	d5fb      	bpl.n	8025aa4 <_printf_i+0xe8>
 8025aac:	881d      	ldrh	r5, [r3, #0]
 8025aae:	4854      	ldr	r0, [pc, #336]	; (8025c00 <_printf_i+0x244>)
 8025ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8025ab2:	bf0c      	ite	eq
 8025ab4:	2308      	moveq	r3, #8
 8025ab6:	230a      	movne	r3, #10
 8025ab8:	2100      	movs	r1, #0
 8025aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025abe:	6866      	ldr	r6, [r4, #4]
 8025ac0:	60a6      	str	r6, [r4, #8]
 8025ac2:	2e00      	cmp	r6, #0
 8025ac4:	bfa2      	ittt	ge
 8025ac6:	6821      	ldrge	r1, [r4, #0]
 8025ac8:	f021 0104 	bicge.w	r1, r1, #4
 8025acc:	6021      	strge	r1, [r4, #0]
 8025ace:	b90d      	cbnz	r5, 8025ad4 <_printf_i+0x118>
 8025ad0:	2e00      	cmp	r6, #0
 8025ad2:	d04d      	beq.n	8025b70 <_printf_i+0x1b4>
 8025ad4:	4616      	mov	r6, r2
 8025ad6:	fbb5 f1f3 	udiv	r1, r5, r3
 8025ada:	fb03 5711 	mls	r7, r3, r1, r5
 8025ade:	5dc7      	ldrb	r7, [r0, r7]
 8025ae0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025ae4:	462f      	mov	r7, r5
 8025ae6:	42bb      	cmp	r3, r7
 8025ae8:	460d      	mov	r5, r1
 8025aea:	d9f4      	bls.n	8025ad6 <_printf_i+0x11a>
 8025aec:	2b08      	cmp	r3, #8
 8025aee:	d10b      	bne.n	8025b08 <_printf_i+0x14c>
 8025af0:	6823      	ldr	r3, [r4, #0]
 8025af2:	07df      	lsls	r7, r3, #31
 8025af4:	d508      	bpl.n	8025b08 <_printf_i+0x14c>
 8025af6:	6923      	ldr	r3, [r4, #16]
 8025af8:	6861      	ldr	r1, [r4, #4]
 8025afa:	4299      	cmp	r1, r3
 8025afc:	bfde      	ittt	le
 8025afe:	2330      	movle	r3, #48	; 0x30
 8025b00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025b04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025b08:	1b92      	subs	r2, r2, r6
 8025b0a:	6122      	str	r2, [r4, #16]
 8025b0c:	f8cd a000 	str.w	sl, [sp]
 8025b10:	464b      	mov	r3, r9
 8025b12:	aa03      	add	r2, sp, #12
 8025b14:	4621      	mov	r1, r4
 8025b16:	4640      	mov	r0, r8
 8025b18:	f7ff fee2 	bl	80258e0 <_printf_common>
 8025b1c:	3001      	adds	r0, #1
 8025b1e:	d14c      	bne.n	8025bba <_printf_i+0x1fe>
 8025b20:	f04f 30ff 	mov.w	r0, #4294967295
 8025b24:	b004      	add	sp, #16
 8025b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b2a:	4835      	ldr	r0, [pc, #212]	; (8025c00 <_printf_i+0x244>)
 8025b2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025b30:	6823      	ldr	r3, [r4, #0]
 8025b32:	680e      	ldr	r6, [r1, #0]
 8025b34:	061f      	lsls	r7, r3, #24
 8025b36:	f856 5b04 	ldr.w	r5, [r6], #4
 8025b3a:	600e      	str	r6, [r1, #0]
 8025b3c:	d514      	bpl.n	8025b68 <_printf_i+0x1ac>
 8025b3e:	07d9      	lsls	r1, r3, #31
 8025b40:	bf44      	itt	mi
 8025b42:	f043 0320 	orrmi.w	r3, r3, #32
 8025b46:	6023      	strmi	r3, [r4, #0]
 8025b48:	b91d      	cbnz	r5, 8025b52 <_printf_i+0x196>
 8025b4a:	6823      	ldr	r3, [r4, #0]
 8025b4c:	f023 0320 	bic.w	r3, r3, #32
 8025b50:	6023      	str	r3, [r4, #0]
 8025b52:	2310      	movs	r3, #16
 8025b54:	e7b0      	b.n	8025ab8 <_printf_i+0xfc>
 8025b56:	6823      	ldr	r3, [r4, #0]
 8025b58:	f043 0320 	orr.w	r3, r3, #32
 8025b5c:	6023      	str	r3, [r4, #0]
 8025b5e:	2378      	movs	r3, #120	; 0x78
 8025b60:	4828      	ldr	r0, [pc, #160]	; (8025c04 <_printf_i+0x248>)
 8025b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025b66:	e7e3      	b.n	8025b30 <_printf_i+0x174>
 8025b68:	065e      	lsls	r6, r3, #25
 8025b6a:	bf48      	it	mi
 8025b6c:	b2ad      	uxthmi	r5, r5
 8025b6e:	e7e6      	b.n	8025b3e <_printf_i+0x182>
 8025b70:	4616      	mov	r6, r2
 8025b72:	e7bb      	b.n	8025aec <_printf_i+0x130>
 8025b74:	680b      	ldr	r3, [r1, #0]
 8025b76:	6826      	ldr	r6, [r4, #0]
 8025b78:	6960      	ldr	r0, [r4, #20]
 8025b7a:	1d1d      	adds	r5, r3, #4
 8025b7c:	600d      	str	r5, [r1, #0]
 8025b7e:	0635      	lsls	r5, r6, #24
 8025b80:	681b      	ldr	r3, [r3, #0]
 8025b82:	d501      	bpl.n	8025b88 <_printf_i+0x1cc>
 8025b84:	6018      	str	r0, [r3, #0]
 8025b86:	e002      	b.n	8025b8e <_printf_i+0x1d2>
 8025b88:	0671      	lsls	r1, r6, #25
 8025b8a:	d5fb      	bpl.n	8025b84 <_printf_i+0x1c8>
 8025b8c:	8018      	strh	r0, [r3, #0]
 8025b8e:	2300      	movs	r3, #0
 8025b90:	6123      	str	r3, [r4, #16]
 8025b92:	4616      	mov	r6, r2
 8025b94:	e7ba      	b.n	8025b0c <_printf_i+0x150>
 8025b96:	680b      	ldr	r3, [r1, #0]
 8025b98:	1d1a      	adds	r2, r3, #4
 8025b9a:	600a      	str	r2, [r1, #0]
 8025b9c:	681e      	ldr	r6, [r3, #0]
 8025b9e:	6862      	ldr	r2, [r4, #4]
 8025ba0:	2100      	movs	r1, #0
 8025ba2:	4630      	mov	r0, r6
 8025ba4:	f7da fb4c 	bl	8000240 <memchr>
 8025ba8:	b108      	cbz	r0, 8025bae <_printf_i+0x1f2>
 8025baa:	1b80      	subs	r0, r0, r6
 8025bac:	6060      	str	r0, [r4, #4]
 8025bae:	6863      	ldr	r3, [r4, #4]
 8025bb0:	6123      	str	r3, [r4, #16]
 8025bb2:	2300      	movs	r3, #0
 8025bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025bb8:	e7a8      	b.n	8025b0c <_printf_i+0x150>
 8025bba:	6923      	ldr	r3, [r4, #16]
 8025bbc:	4632      	mov	r2, r6
 8025bbe:	4649      	mov	r1, r9
 8025bc0:	4640      	mov	r0, r8
 8025bc2:	47d0      	blx	sl
 8025bc4:	3001      	adds	r0, #1
 8025bc6:	d0ab      	beq.n	8025b20 <_printf_i+0x164>
 8025bc8:	6823      	ldr	r3, [r4, #0]
 8025bca:	079b      	lsls	r3, r3, #30
 8025bcc:	d413      	bmi.n	8025bf6 <_printf_i+0x23a>
 8025bce:	68e0      	ldr	r0, [r4, #12]
 8025bd0:	9b03      	ldr	r3, [sp, #12]
 8025bd2:	4298      	cmp	r0, r3
 8025bd4:	bfb8      	it	lt
 8025bd6:	4618      	movlt	r0, r3
 8025bd8:	e7a4      	b.n	8025b24 <_printf_i+0x168>
 8025bda:	2301      	movs	r3, #1
 8025bdc:	4632      	mov	r2, r6
 8025bde:	4649      	mov	r1, r9
 8025be0:	4640      	mov	r0, r8
 8025be2:	47d0      	blx	sl
 8025be4:	3001      	adds	r0, #1
 8025be6:	d09b      	beq.n	8025b20 <_printf_i+0x164>
 8025be8:	3501      	adds	r5, #1
 8025bea:	68e3      	ldr	r3, [r4, #12]
 8025bec:	9903      	ldr	r1, [sp, #12]
 8025bee:	1a5b      	subs	r3, r3, r1
 8025bf0:	42ab      	cmp	r3, r5
 8025bf2:	dcf2      	bgt.n	8025bda <_printf_i+0x21e>
 8025bf4:	e7eb      	b.n	8025bce <_printf_i+0x212>
 8025bf6:	2500      	movs	r5, #0
 8025bf8:	f104 0619 	add.w	r6, r4, #25
 8025bfc:	e7f5      	b.n	8025bea <_printf_i+0x22e>
 8025bfe:	bf00      	nop
 8025c00:	0802cce1 	.word	0x0802cce1
 8025c04:	0802ccf2 	.word	0x0802ccf2

08025c08 <_sbrk_r>:
 8025c08:	b538      	push	{r3, r4, r5, lr}
 8025c0a:	4d06      	ldr	r5, [pc, #24]	; (8025c24 <_sbrk_r+0x1c>)
 8025c0c:	2300      	movs	r3, #0
 8025c0e:	4604      	mov	r4, r0
 8025c10:	4608      	mov	r0, r1
 8025c12:	602b      	str	r3, [r5, #0]
 8025c14:	f7de fd30 	bl	8004678 <_sbrk>
 8025c18:	1c43      	adds	r3, r0, #1
 8025c1a:	d102      	bne.n	8025c22 <_sbrk_r+0x1a>
 8025c1c:	682b      	ldr	r3, [r5, #0]
 8025c1e:	b103      	cbz	r3, 8025c22 <_sbrk_r+0x1a>
 8025c20:	6023      	str	r3, [r4, #0]
 8025c22:	bd38      	pop	{r3, r4, r5, pc}
 8025c24:	200613b0 	.word	0x200613b0

08025c28 <_raise_r>:
 8025c28:	291f      	cmp	r1, #31
 8025c2a:	b538      	push	{r3, r4, r5, lr}
 8025c2c:	4604      	mov	r4, r0
 8025c2e:	460d      	mov	r5, r1
 8025c30:	d904      	bls.n	8025c3c <_raise_r+0x14>
 8025c32:	2316      	movs	r3, #22
 8025c34:	6003      	str	r3, [r0, #0]
 8025c36:	f04f 30ff 	mov.w	r0, #4294967295
 8025c3a:	bd38      	pop	{r3, r4, r5, pc}
 8025c3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025c3e:	b112      	cbz	r2, 8025c46 <_raise_r+0x1e>
 8025c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025c44:	b94b      	cbnz	r3, 8025c5a <_raise_r+0x32>
 8025c46:	4620      	mov	r0, r4
 8025c48:	f000 f830 	bl	8025cac <_getpid_r>
 8025c4c:	462a      	mov	r2, r5
 8025c4e:	4601      	mov	r1, r0
 8025c50:	4620      	mov	r0, r4
 8025c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025c56:	f000 b817 	b.w	8025c88 <_kill_r>
 8025c5a:	2b01      	cmp	r3, #1
 8025c5c:	d00a      	beq.n	8025c74 <_raise_r+0x4c>
 8025c5e:	1c59      	adds	r1, r3, #1
 8025c60:	d103      	bne.n	8025c6a <_raise_r+0x42>
 8025c62:	2316      	movs	r3, #22
 8025c64:	6003      	str	r3, [r0, #0]
 8025c66:	2001      	movs	r0, #1
 8025c68:	e7e7      	b.n	8025c3a <_raise_r+0x12>
 8025c6a:	2400      	movs	r4, #0
 8025c6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025c70:	4628      	mov	r0, r5
 8025c72:	4798      	blx	r3
 8025c74:	2000      	movs	r0, #0
 8025c76:	e7e0      	b.n	8025c3a <_raise_r+0x12>

08025c78 <raise>:
 8025c78:	4b02      	ldr	r3, [pc, #8]	; (8025c84 <raise+0xc>)
 8025c7a:	4601      	mov	r1, r0
 8025c7c:	6818      	ldr	r0, [r3, #0]
 8025c7e:	f7ff bfd3 	b.w	8025c28 <_raise_r>
 8025c82:	bf00      	nop
 8025c84:	200000e8 	.word	0x200000e8

08025c88 <_kill_r>:
 8025c88:	b538      	push	{r3, r4, r5, lr}
 8025c8a:	4d07      	ldr	r5, [pc, #28]	; (8025ca8 <_kill_r+0x20>)
 8025c8c:	2300      	movs	r3, #0
 8025c8e:	4604      	mov	r4, r0
 8025c90:	4608      	mov	r0, r1
 8025c92:	4611      	mov	r1, r2
 8025c94:	602b      	str	r3, [r5, #0]
 8025c96:	f7de fcbb 	bl	8004610 <_kill>
 8025c9a:	1c43      	adds	r3, r0, #1
 8025c9c:	d102      	bne.n	8025ca4 <_kill_r+0x1c>
 8025c9e:	682b      	ldr	r3, [r5, #0]
 8025ca0:	b103      	cbz	r3, 8025ca4 <_kill_r+0x1c>
 8025ca2:	6023      	str	r3, [r4, #0]
 8025ca4:	bd38      	pop	{r3, r4, r5, pc}
 8025ca6:	bf00      	nop
 8025ca8:	200613b0 	.word	0x200613b0

08025cac <_getpid_r>:
 8025cac:	f7de bcae 	b.w	800460c <_getpid>

08025cb0 <strncmp>:
 8025cb0:	b510      	push	{r4, lr}
 8025cb2:	b16a      	cbz	r2, 8025cd0 <strncmp+0x20>
 8025cb4:	3901      	subs	r1, #1
 8025cb6:	1884      	adds	r4, r0, r2
 8025cb8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8025cbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8025cc0:	4293      	cmp	r3, r2
 8025cc2:	d103      	bne.n	8025ccc <strncmp+0x1c>
 8025cc4:	42a0      	cmp	r0, r4
 8025cc6:	d001      	beq.n	8025ccc <strncmp+0x1c>
 8025cc8:	2b00      	cmp	r3, #0
 8025cca:	d1f5      	bne.n	8025cb8 <strncmp+0x8>
 8025ccc:	1a98      	subs	r0, r3, r2
 8025cce:	bd10      	pop	{r4, pc}
 8025cd0:	4610      	mov	r0, r2
 8025cd2:	e7fc      	b.n	8025cce <strncmp+0x1e>

08025cd4 <__swbuf_r>:
 8025cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025cd6:	460e      	mov	r6, r1
 8025cd8:	4614      	mov	r4, r2
 8025cda:	4605      	mov	r5, r0
 8025cdc:	b118      	cbz	r0, 8025ce6 <__swbuf_r+0x12>
 8025cde:	6983      	ldr	r3, [r0, #24]
 8025ce0:	b90b      	cbnz	r3, 8025ce6 <__swbuf_r+0x12>
 8025ce2:	f000 fa33 	bl	802614c <__sinit>
 8025ce6:	4b21      	ldr	r3, [pc, #132]	; (8025d6c <__swbuf_r+0x98>)
 8025ce8:	429c      	cmp	r4, r3
 8025cea:	d12b      	bne.n	8025d44 <__swbuf_r+0x70>
 8025cec:	686c      	ldr	r4, [r5, #4]
 8025cee:	69a3      	ldr	r3, [r4, #24]
 8025cf0:	60a3      	str	r3, [r4, #8]
 8025cf2:	89a3      	ldrh	r3, [r4, #12]
 8025cf4:	071a      	lsls	r2, r3, #28
 8025cf6:	d52f      	bpl.n	8025d58 <__swbuf_r+0x84>
 8025cf8:	6923      	ldr	r3, [r4, #16]
 8025cfa:	b36b      	cbz	r3, 8025d58 <__swbuf_r+0x84>
 8025cfc:	6923      	ldr	r3, [r4, #16]
 8025cfe:	6820      	ldr	r0, [r4, #0]
 8025d00:	1ac0      	subs	r0, r0, r3
 8025d02:	6963      	ldr	r3, [r4, #20]
 8025d04:	b2f6      	uxtb	r6, r6
 8025d06:	4283      	cmp	r3, r0
 8025d08:	4637      	mov	r7, r6
 8025d0a:	dc04      	bgt.n	8025d16 <__swbuf_r+0x42>
 8025d0c:	4621      	mov	r1, r4
 8025d0e:	4628      	mov	r0, r5
 8025d10:	f000 f988 	bl	8026024 <_fflush_r>
 8025d14:	bb30      	cbnz	r0, 8025d64 <__swbuf_r+0x90>
 8025d16:	68a3      	ldr	r3, [r4, #8]
 8025d18:	3b01      	subs	r3, #1
 8025d1a:	60a3      	str	r3, [r4, #8]
 8025d1c:	6823      	ldr	r3, [r4, #0]
 8025d1e:	1c5a      	adds	r2, r3, #1
 8025d20:	6022      	str	r2, [r4, #0]
 8025d22:	701e      	strb	r6, [r3, #0]
 8025d24:	6963      	ldr	r3, [r4, #20]
 8025d26:	3001      	adds	r0, #1
 8025d28:	4283      	cmp	r3, r0
 8025d2a:	d004      	beq.n	8025d36 <__swbuf_r+0x62>
 8025d2c:	89a3      	ldrh	r3, [r4, #12]
 8025d2e:	07db      	lsls	r3, r3, #31
 8025d30:	d506      	bpl.n	8025d40 <__swbuf_r+0x6c>
 8025d32:	2e0a      	cmp	r6, #10
 8025d34:	d104      	bne.n	8025d40 <__swbuf_r+0x6c>
 8025d36:	4621      	mov	r1, r4
 8025d38:	4628      	mov	r0, r5
 8025d3a:	f000 f973 	bl	8026024 <_fflush_r>
 8025d3e:	b988      	cbnz	r0, 8025d64 <__swbuf_r+0x90>
 8025d40:	4638      	mov	r0, r7
 8025d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d44:	4b0a      	ldr	r3, [pc, #40]	; (8025d70 <__swbuf_r+0x9c>)
 8025d46:	429c      	cmp	r4, r3
 8025d48:	d101      	bne.n	8025d4e <__swbuf_r+0x7a>
 8025d4a:	68ac      	ldr	r4, [r5, #8]
 8025d4c:	e7cf      	b.n	8025cee <__swbuf_r+0x1a>
 8025d4e:	4b09      	ldr	r3, [pc, #36]	; (8025d74 <__swbuf_r+0xa0>)
 8025d50:	429c      	cmp	r4, r3
 8025d52:	bf08      	it	eq
 8025d54:	68ec      	ldreq	r4, [r5, #12]
 8025d56:	e7ca      	b.n	8025cee <__swbuf_r+0x1a>
 8025d58:	4621      	mov	r1, r4
 8025d5a:	4628      	mov	r0, r5
 8025d5c:	f000 f80c 	bl	8025d78 <__swsetup_r>
 8025d60:	2800      	cmp	r0, #0
 8025d62:	d0cb      	beq.n	8025cfc <__swbuf_r+0x28>
 8025d64:	f04f 37ff 	mov.w	r7, #4294967295
 8025d68:	e7ea      	b.n	8025d40 <__swbuf_r+0x6c>
 8025d6a:	bf00      	nop
 8025d6c:	0802cd28 	.word	0x0802cd28
 8025d70:	0802cd48 	.word	0x0802cd48
 8025d74:	0802cd08 	.word	0x0802cd08

08025d78 <__swsetup_r>:
 8025d78:	4b32      	ldr	r3, [pc, #200]	; (8025e44 <__swsetup_r+0xcc>)
 8025d7a:	b570      	push	{r4, r5, r6, lr}
 8025d7c:	681d      	ldr	r5, [r3, #0]
 8025d7e:	4606      	mov	r6, r0
 8025d80:	460c      	mov	r4, r1
 8025d82:	b125      	cbz	r5, 8025d8e <__swsetup_r+0x16>
 8025d84:	69ab      	ldr	r3, [r5, #24]
 8025d86:	b913      	cbnz	r3, 8025d8e <__swsetup_r+0x16>
 8025d88:	4628      	mov	r0, r5
 8025d8a:	f000 f9df 	bl	802614c <__sinit>
 8025d8e:	4b2e      	ldr	r3, [pc, #184]	; (8025e48 <__swsetup_r+0xd0>)
 8025d90:	429c      	cmp	r4, r3
 8025d92:	d10f      	bne.n	8025db4 <__swsetup_r+0x3c>
 8025d94:	686c      	ldr	r4, [r5, #4]
 8025d96:	89a3      	ldrh	r3, [r4, #12]
 8025d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025d9c:	0719      	lsls	r1, r3, #28
 8025d9e:	d42c      	bmi.n	8025dfa <__swsetup_r+0x82>
 8025da0:	06dd      	lsls	r5, r3, #27
 8025da2:	d411      	bmi.n	8025dc8 <__swsetup_r+0x50>
 8025da4:	2309      	movs	r3, #9
 8025da6:	6033      	str	r3, [r6, #0]
 8025da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025dac:	81a3      	strh	r3, [r4, #12]
 8025dae:	f04f 30ff 	mov.w	r0, #4294967295
 8025db2:	e03e      	b.n	8025e32 <__swsetup_r+0xba>
 8025db4:	4b25      	ldr	r3, [pc, #148]	; (8025e4c <__swsetup_r+0xd4>)
 8025db6:	429c      	cmp	r4, r3
 8025db8:	d101      	bne.n	8025dbe <__swsetup_r+0x46>
 8025dba:	68ac      	ldr	r4, [r5, #8]
 8025dbc:	e7eb      	b.n	8025d96 <__swsetup_r+0x1e>
 8025dbe:	4b24      	ldr	r3, [pc, #144]	; (8025e50 <__swsetup_r+0xd8>)
 8025dc0:	429c      	cmp	r4, r3
 8025dc2:	bf08      	it	eq
 8025dc4:	68ec      	ldreq	r4, [r5, #12]
 8025dc6:	e7e6      	b.n	8025d96 <__swsetup_r+0x1e>
 8025dc8:	0758      	lsls	r0, r3, #29
 8025dca:	d512      	bpl.n	8025df2 <__swsetup_r+0x7a>
 8025dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025dce:	b141      	cbz	r1, 8025de2 <__swsetup_r+0x6a>
 8025dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025dd4:	4299      	cmp	r1, r3
 8025dd6:	d002      	beq.n	8025dde <__swsetup_r+0x66>
 8025dd8:	4630      	mov	r0, r6
 8025dda:	f7ff fb7d 	bl	80254d8 <_free_r>
 8025dde:	2300      	movs	r3, #0
 8025de0:	6363      	str	r3, [r4, #52]	; 0x34
 8025de2:	89a3      	ldrh	r3, [r4, #12]
 8025de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025de8:	81a3      	strh	r3, [r4, #12]
 8025dea:	2300      	movs	r3, #0
 8025dec:	6063      	str	r3, [r4, #4]
 8025dee:	6923      	ldr	r3, [r4, #16]
 8025df0:	6023      	str	r3, [r4, #0]
 8025df2:	89a3      	ldrh	r3, [r4, #12]
 8025df4:	f043 0308 	orr.w	r3, r3, #8
 8025df8:	81a3      	strh	r3, [r4, #12]
 8025dfa:	6923      	ldr	r3, [r4, #16]
 8025dfc:	b94b      	cbnz	r3, 8025e12 <__swsetup_r+0x9a>
 8025dfe:	89a3      	ldrh	r3, [r4, #12]
 8025e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025e08:	d003      	beq.n	8025e12 <__swsetup_r+0x9a>
 8025e0a:	4621      	mov	r1, r4
 8025e0c:	4630      	mov	r0, r6
 8025e0e:	f000 fa5f 	bl	80262d0 <__smakebuf_r>
 8025e12:	89a0      	ldrh	r0, [r4, #12]
 8025e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025e18:	f010 0301 	ands.w	r3, r0, #1
 8025e1c:	d00a      	beq.n	8025e34 <__swsetup_r+0xbc>
 8025e1e:	2300      	movs	r3, #0
 8025e20:	60a3      	str	r3, [r4, #8]
 8025e22:	6963      	ldr	r3, [r4, #20]
 8025e24:	425b      	negs	r3, r3
 8025e26:	61a3      	str	r3, [r4, #24]
 8025e28:	6923      	ldr	r3, [r4, #16]
 8025e2a:	b943      	cbnz	r3, 8025e3e <__swsetup_r+0xc6>
 8025e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025e30:	d1ba      	bne.n	8025da8 <__swsetup_r+0x30>
 8025e32:	bd70      	pop	{r4, r5, r6, pc}
 8025e34:	0781      	lsls	r1, r0, #30
 8025e36:	bf58      	it	pl
 8025e38:	6963      	ldrpl	r3, [r4, #20]
 8025e3a:	60a3      	str	r3, [r4, #8]
 8025e3c:	e7f4      	b.n	8025e28 <__swsetup_r+0xb0>
 8025e3e:	2000      	movs	r0, #0
 8025e40:	e7f7      	b.n	8025e32 <__swsetup_r+0xba>
 8025e42:	bf00      	nop
 8025e44:	200000e8 	.word	0x200000e8
 8025e48:	0802cd28 	.word	0x0802cd28
 8025e4c:	0802cd48 	.word	0x0802cd48
 8025e50:	0802cd08 	.word	0x0802cd08

08025e54 <__register_exitproc>:
 8025e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025e58:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025f14 <__register_exitproc+0xc0>
 8025e5c:	4606      	mov	r6, r0
 8025e5e:	f8d8 0000 	ldr.w	r0, [r8]
 8025e62:	461f      	mov	r7, r3
 8025e64:	460d      	mov	r5, r1
 8025e66:	4691      	mov	r9, r2
 8025e68:	f7ff fb0d 	bl	8025486 <__retarget_lock_acquire_recursive>
 8025e6c:	4b25      	ldr	r3, [pc, #148]	; (8025f04 <__register_exitproc+0xb0>)
 8025e6e:	681c      	ldr	r4, [r3, #0]
 8025e70:	b934      	cbnz	r4, 8025e80 <__register_exitproc+0x2c>
 8025e72:	4c25      	ldr	r4, [pc, #148]	; (8025f08 <__register_exitproc+0xb4>)
 8025e74:	601c      	str	r4, [r3, #0]
 8025e76:	4b25      	ldr	r3, [pc, #148]	; (8025f0c <__register_exitproc+0xb8>)
 8025e78:	b113      	cbz	r3, 8025e80 <__register_exitproc+0x2c>
 8025e7a:	681b      	ldr	r3, [r3, #0]
 8025e7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025e80:	6863      	ldr	r3, [r4, #4]
 8025e82:	2b1f      	cmp	r3, #31
 8025e84:	dd07      	ble.n	8025e96 <__register_exitproc+0x42>
 8025e86:	f8d8 0000 	ldr.w	r0, [r8]
 8025e8a:	f7ff fafe 	bl	802548a <__retarget_lock_release_recursive>
 8025e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8025e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025e96:	b34e      	cbz	r6, 8025eec <__register_exitproc+0x98>
 8025e98:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025e9c:	b988      	cbnz	r0, 8025ec2 <__register_exitproc+0x6e>
 8025e9e:	4b1c      	ldr	r3, [pc, #112]	; (8025f10 <__register_exitproc+0xbc>)
 8025ea0:	b923      	cbnz	r3, 8025eac <__register_exitproc+0x58>
 8025ea2:	f8d8 0000 	ldr.w	r0, [r8]
 8025ea6:	f7ff faef 	bl	8025488 <__retarget_lock_release>
 8025eaa:	e7f0      	b.n	8025e8e <__register_exitproc+0x3a>
 8025eac:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025eb0:	f7ff faec 	bl	802548c <malloc>
 8025eb4:	2800      	cmp	r0, #0
 8025eb6:	d0f4      	beq.n	8025ea2 <__register_exitproc+0x4e>
 8025eb8:	2300      	movs	r3, #0
 8025eba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025ebe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025ec2:	6863      	ldr	r3, [r4, #4]
 8025ec4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025ec8:	2201      	movs	r2, #1
 8025eca:	409a      	lsls	r2, r3
 8025ecc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025ed0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025ed4:	4313      	orrs	r3, r2
 8025ed6:	2e02      	cmp	r6, #2
 8025ed8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025edc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025ee0:	bf02      	ittt	eq
 8025ee2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025ee6:	431a      	orreq	r2, r3
 8025ee8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8025eec:	6863      	ldr	r3, [r4, #4]
 8025eee:	f8d8 0000 	ldr.w	r0, [r8]
 8025ef2:	1c5a      	adds	r2, r3, #1
 8025ef4:	3302      	adds	r3, #2
 8025ef6:	6062      	str	r2, [r4, #4]
 8025ef8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025efc:	f7ff fac5 	bl	802548a <__retarget_lock_release_recursive>
 8025f00:	2000      	movs	r0, #0
 8025f02:	e7c6      	b.n	8025e92 <__register_exitproc+0x3e>
 8025f04:	20060ee8 	.word	0x20060ee8
 8025f08:	20060e5c 	.word	0x20060e5c
 8025f0c:	0802cd04 	.word	0x0802cd04
 8025f10:	0802548d 	.word	0x0802548d
 8025f14:	2000014c 	.word	0x2000014c

08025f18 <__sflush_r>:
 8025f18:	898a      	ldrh	r2, [r1, #12]
 8025f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f1e:	4605      	mov	r5, r0
 8025f20:	0710      	lsls	r0, r2, #28
 8025f22:	460c      	mov	r4, r1
 8025f24:	d458      	bmi.n	8025fd8 <__sflush_r+0xc0>
 8025f26:	684b      	ldr	r3, [r1, #4]
 8025f28:	2b00      	cmp	r3, #0
 8025f2a:	dc05      	bgt.n	8025f38 <__sflush_r+0x20>
 8025f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025f2e:	2b00      	cmp	r3, #0
 8025f30:	dc02      	bgt.n	8025f38 <__sflush_r+0x20>
 8025f32:	2000      	movs	r0, #0
 8025f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025f3a:	2e00      	cmp	r6, #0
 8025f3c:	d0f9      	beq.n	8025f32 <__sflush_r+0x1a>
 8025f3e:	2300      	movs	r3, #0
 8025f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025f44:	682f      	ldr	r7, [r5, #0]
 8025f46:	602b      	str	r3, [r5, #0]
 8025f48:	d032      	beq.n	8025fb0 <__sflush_r+0x98>
 8025f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025f4c:	89a3      	ldrh	r3, [r4, #12]
 8025f4e:	075a      	lsls	r2, r3, #29
 8025f50:	d505      	bpl.n	8025f5e <__sflush_r+0x46>
 8025f52:	6863      	ldr	r3, [r4, #4]
 8025f54:	1ac0      	subs	r0, r0, r3
 8025f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025f58:	b10b      	cbz	r3, 8025f5e <__sflush_r+0x46>
 8025f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025f5c:	1ac0      	subs	r0, r0, r3
 8025f5e:	2300      	movs	r3, #0
 8025f60:	4602      	mov	r2, r0
 8025f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025f64:	6a21      	ldr	r1, [r4, #32]
 8025f66:	4628      	mov	r0, r5
 8025f68:	47b0      	blx	r6
 8025f6a:	1c43      	adds	r3, r0, #1
 8025f6c:	89a3      	ldrh	r3, [r4, #12]
 8025f6e:	d106      	bne.n	8025f7e <__sflush_r+0x66>
 8025f70:	6829      	ldr	r1, [r5, #0]
 8025f72:	291d      	cmp	r1, #29
 8025f74:	d82c      	bhi.n	8025fd0 <__sflush_r+0xb8>
 8025f76:	4a2a      	ldr	r2, [pc, #168]	; (8026020 <__sflush_r+0x108>)
 8025f78:	40ca      	lsrs	r2, r1
 8025f7a:	07d6      	lsls	r6, r2, #31
 8025f7c:	d528      	bpl.n	8025fd0 <__sflush_r+0xb8>
 8025f7e:	2200      	movs	r2, #0
 8025f80:	6062      	str	r2, [r4, #4]
 8025f82:	04d9      	lsls	r1, r3, #19
 8025f84:	6922      	ldr	r2, [r4, #16]
 8025f86:	6022      	str	r2, [r4, #0]
 8025f88:	d504      	bpl.n	8025f94 <__sflush_r+0x7c>
 8025f8a:	1c42      	adds	r2, r0, #1
 8025f8c:	d101      	bne.n	8025f92 <__sflush_r+0x7a>
 8025f8e:	682b      	ldr	r3, [r5, #0]
 8025f90:	b903      	cbnz	r3, 8025f94 <__sflush_r+0x7c>
 8025f92:	6560      	str	r0, [r4, #84]	; 0x54
 8025f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025f96:	602f      	str	r7, [r5, #0]
 8025f98:	2900      	cmp	r1, #0
 8025f9a:	d0ca      	beq.n	8025f32 <__sflush_r+0x1a>
 8025f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025fa0:	4299      	cmp	r1, r3
 8025fa2:	d002      	beq.n	8025faa <__sflush_r+0x92>
 8025fa4:	4628      	mov	r0, r5
 8025fa6:	f7ff fa97 	bl	80254d8 <_free_r>
 8025faa:	2000      	movs	r0, #0
 8025fac:	6360      	str	r0, [r4, #52]	; 0x34
 8025fae:	e7c1      	b.n	8025f34 <__sflush_r+0x1c>
 8025fb0:	6a21      	ldr	r1, [r4, #32]
 8025fb2:	2301      	movs	r3, #1
 8025fb4:	4628      	mov	r0, r5
 8025fb6:	47b0      	blx	r6
 8025fb8:	1c41      	adds	r1, r0, #1
 8025fba:	d1c7      	bne.n	8025f4c <__sflush_r+0x34>
 8025fbc:	682b      	ldr	r3, [r5, #0]
 8025fbe:	2b00      	cmp	r3, #0
 8025fc0:	d0c4      	beq.n	8025f4c <__sflush_r+0x34>
 8025fc2:	2b1d      	cmp	r3, #29
 8025fc4:	d001      	beq.n	8025fca <__sflush_r+0xb2>
 8025fc6:	2b16      	cmp	r3, #22
 8025fc8:	d101      	bne.n	8025fce <__sflush_r+0xb6>
 8025fca:	602f      	str	r7, [r5, #0]
 8025fcc:	e7b1      	b.n	8025f32 <__sflush_r+0x1a>
 8025fce:	89a3      	ldrh	r3, [r4, #12]
 8025fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025fd4:	81a3      	strh	r3, [r4, #12]
 8025fd6:	e7ad      	b.n	8025f34 <__sflush_r+0x1c>
 8025fd8:	690f      	ldr	r7, [r1, #16]
 8025fda:	2f00      	cmp	r7, #0
 8025fdc:	d0a9      	beq.n	8025f32 <__sflush_r+0x1a>
 8025fde:	0793      	lsls	r3, r2, #30
 8025fe0:	680e      	ldr	r6, [r1, #0]
 8025fe2:	bf08      	it	eq
 8025fe4:	694b      	ldreq	r3, [r1, #20]
 8025fe6:	600f      	str	r7, [r1, #0]
 8025fe8:	bf18      	it	ne
 8025fea:	2300      	movne	r3, #0
 8025fec:	eba6 0807 	sub.w	r8, r6, r7
 8025ff0:	608b      	str	r3, [r1, #8]
 8025ff2:	f1b8 0f00 	cmp.w	r8, #0
 8025ff6:	dd9c      	ble.n	8025f32 <__sflush_r+0x1a>
 8025ff8:	6a21      	ldr	r1, [r4, #32]
 8025ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025ffc:	4643      	mov	r3, r8
 8025ffe:	463a      	mov	r2, r7
 8026000:	4628      	mov	r0, r5
 8026002:	47b0      	blx	r6
 8026004:	2800      	cmp	r0, #0
 8026006:	dc06      	bgt.n	8026016 <__sflush_r+0xfe>
 8026008:	89a3      	ldrh	r3, [r4, #12]
 802600a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802600e:	81a3      	strh	r3, [r4, #12]
 8026010:	f04f 30ff 	mov.w	r0, #4294967295
 8026014:	e78e      	b.n	8025f34 <__sflush_r+0x1c>
 8026016:	4407      	add	r7, r0
 8026018:	eba8 0800 	sub.w	r8, r8, r0
 802601c:	e7e9      	b.n	8025ff2 <__sflush_r+0xda>
 802601e:	bf00      	nop
 8026020:	20400001 	.word	0x20400001

08026024 <_fflush_r>:
 8026024:	b538      	push	{r3, r4, r5, lr}
 8026026:	690b      	ldr	r3, [r1, #16]
 8026028:	4605      	mov	r5, r0
 802602a:	460c      	mov	r4, r1
 802602c:	b913      	cbnz	r3, 8026034 <_fflush_r+0x10>
 802602e:	2500      	movs	r5, #0
 8026030:	4628      	mov	r0, r5
 8026032:	bd38      	pop	{r3, r4, r5, pc}
 8026034:	b118      	cbz	r0, 802603e <_fflush_r+0x1a>
 8026036:	6983      	ldr	r3, [r0, #24]
 8026038:	b90b      	cbnz	r3, 802603e <_fflush_r+0x1a>
 802603a:	f000 f887 	bl	802614c <__sinit>
 802603e:	4b14      	ldr	r3, [pc, #80]	; (8026090 <_fflush_r+0x6c>)
 8026040:	429c      	cmp	r4, r3
 8026042:	d11b      	bne.n	802607c <_fflush_r+0x58>
 8026044:	686c      	ldr	r4, [r5, #4]
 8026046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802604a:	2b00      	cmp	r3, #0
 802604c:	d0ef      	beq.n	802602e <_fflush_r+0xa>
 802604e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026050:	07d0      	lsls	r0, r2, #31
 8026052:	d404      	bmi.n	802605e <_fflush_r+0x3a>
 8026054:	0599      	lsls	r1, r3, #22
 8026056:	d402      	bmi.n	802605e <_fflush_r+0x3a>
 8026058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802605a:	f7ff fa14 	bl	8025486 <__retarget_lock_acquire_recursive>
 802605e:	4628      	mov	r0, r5
 8026060:	4621      	mov	r1, r4
 8026062:	f7ff ff59 	bl	8025f18 <__sflush_r>
 8026066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026068:	07da      	lsls	r2, r3, #31
 802606a:	4605      	mov	r5, r0
 802606c:	d4e0      	bmi.n	8026030 <_fflush_r+0xc>
 802606e:	89a3      	ldrh	r3, [r4, #12]
 8026070:	059b      	lsls	r3, r3, #22
 8026072:	d4dd      	bmi.n	8026030 <_fflush_r+0xc>
 8026074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026076:	f7ff fa08 	bl	802548a <__retarget_lock_release_recursive>
 802607a:	e7d9      	b.n	8026030 <_fflush_r+0xc>
 802607c:	4b05      	ldr	r3, [pc, #20]	; (8026094 <_fflush_r+0x70>)
 802607e:	429c      	cmp	r4, r3
 8026080:	d101      	bne.n	8026086 <_fflush_r+0x62>
 8026082:	68ac      	ldr	r4, [r5, #8]
 8026084:	e7df      	b.n	8026046 <_fflush_r+0x22>
 8026086:	4b04      	ldr	r3, [pc, #16]	; (8026098 <_fflush_r+0x74>)
 8026088:	429c      	cmp	r4, r3
 802608a:	bf08      	it	eq
 802608c:	68ec      	ldreq	r4, [r5, #12]
 802608e:	e7da      	b.n	8026046 <_fflush_r+0x22>
 8026090:	0802cd28 	.word	0x0802cd28
 8026094:	0802cd48 	.word	0x0802cd48
 8026098:	0802cd08 	.word	0x0802cd08

0802609c <std>:
 802609c:	2300      	movs	r3, #0
 802609e:	b510      	push	{r4, lr}
 80260a0:	4604      	mov	r4, r0
 80260a2:	e9c0 3300 	strd	r3, r3, [r0]
 80260a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80260aa:	6083      	str	r3, [r0, #8]
 80260ac:	8181      	strh	r1, [r0, #12]
 80260ae:	6643      	str	r3, [r0, #100]	; 0x64
 80260b0:	81c2      	strh	r2, [r0, #14]
 80260b2:	6183      	str	r3, [r0, #24]
 80260b4:	4619      	mov	r1, r3
 80260b6:	2208      	movs	r2, #8
 80260b8:	305c      	adds	r0, #92	; 0x5c
 80260ba:	f7ff fa05 	bl	80254c8 <memset>
 80260be:	4b05      	ldr	r3, [pc, #20]	; (80260d4 <std+0x38>)
 80260c0:	6263      	str	r3, [r4, #36]	; 0x24
 80260c2:	4b05      	ldr	r3, [pc, #20]	; (80260d8 <std+0x3c>)
 80260c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80260c6:	4b05      	ldr	r3, [pc, #20]	; (80260dc <std+0x40>)
 80260c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80260ca:	4b05      	ldr	r3, [pc, #20]	; (80260e0 <std+0x44>)
 80260cc:	6224      	str	r4, [r4, #32]
 80260ce:	6323      	str	r3, [r4, #48]	; 0x30
 80260d0:	bd10      	pop	{r4, pc}
 80260d2:	bf00      	nop
 80260d4:	08026369 	.word	0x08026369
 80260d8:	0802638b 	.word	0x0802638b
 80260dc:	080263c3 	.word	0x080263c3
 80260e0:	080263e7 	.word	0x080263e7

080260e4 <_cleanup_r>:
 80260e4:	4901      	ldr	r1, [pc, #4]	; (80260ec <_cleanup_r+0x8>)
 80260e6:	f000 b8af 	b.w	8026248 <_fwalk_reent>
 80260ea:	bf00      	nop
 80260ec:	08026025 	.word	0x08026025

080260f0 <__sfmoreglue>:
 80260f0:	b570      	push	{r4, r5, r6, lr}
 80260f2:	1e4a      	subs	r2, r1, #1
 80260f4:	2568      	movs	r5, #104	; 0x68
 80260f6:	4355      	muls	r5, r2
 80260f8:	460e      	mov	r6, r1
 80260fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80260fe:	f7ff fa3b 	bl	8025578 <_malloc_r>
 8026102:	4604      	mov	r4, r0
 8026104:	b140      	cbz	r0, 8026118 <__sfmoreglue+0x28>
 8026106:	2100      	movs	r1, #0
 8026108:	e9c0 1600 	strd	r1, r6, [r0]
 802610c:	300c      	adds	r0, #12
 802610e:	60a0      	str	r0, [r4, #8]
 8026110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026114:	f7ff f9d8 	bl	80254c8 <memset>
 8026118:	4620      	mov	r0, r4
 802611a:	bd70      	pop	{r4, r5, r6, pc}

0802611c <__sfp_lock_acquire>:
 802611c:	4801      	ldr	r0, [pc, #4]	; (8026124 <__sfp_lock_acquire+0x8>)
 802611e:	f7ff b9b2 	b.w	8025486 <__retarget_lock_acquire_recursive>
 8026122:	bf00      	nop
 8026124:	200613ac 	.word	0x200613ac

08026128 <__sfp_lock_release>:
 8026128:	4801      	ldr	r0, [pc, #4]	; (8026130 <__sfp_lock_release+0x8>)
 802612a:	f7ff b9ae 	b.w	802548a <__retarget_lock_release_recursive>
 802612e:	bf00      	nop
 8026130:	200613ac 	.word	0x200613ac

08026134 <__sinit_lock_acquire>:
 8026134:	4801      	ldr	r0, [pc, #4]	; (802613c <__sinit_lock_acquire+0x8>)
 8026136:	f7ff b9a6 	b.w	8025486 <__retarget_lock_acquire_recursive>
 802613a:	bf00      	nop
 802613c:	200613a7 	.word	0x200613a7

08026140 <__sinit_lock_release>:
 8026140:	4801      	ldr	r0, [pc, #4]	; (8026148 <__sinit_lock_release+0x8>)
 8026142:	f7ff b9a2 	b.w	802548a <__retarget_lock_release_recursive>
 8026146:	bf00      	nop
 8026148:	200613a7 	.word	0x200613a7

0802614c <__sinit>:
 802614c:	b510      	push	{r4, lr}
 802614e:	4604      	mov	r4, r0
 8026150:	f7ff fff0 	bl	8026134 <__sinit_lock_acquire>
 8026154:	69a3      	ldr	r3, [r4, #24]
 8026156:	b11b      	cbz	r3, 8026160 <__sinit+0x14>
 8026158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802615c:	f7ff bff0 	b.w	8026140 <__sinit_lock_release>
 8026160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026164:	6523      	str	r3, [r4, #80]	; 0x50
 8026166:	4b13      	ldr	r3, [pc, #76]	; (80261b4 <__sinit+0x68>)
 8026168:	4a13      	ldr	r2, [pc, #76]	; (80261b8 <__sinit+0x6c>)
 802616a:	681b      	ldr	r3, [r3, #0]
 802616c:	62a2      	str	r2, [r4, #40]	; 0x28
 802616e:	42a3      	cmp	r3, r4
 8026170:	bf04      	itt	eq
 8026172:	2301      	moveq	r3, #1
 8026174:	61a3      	streq	r3, [r4, #24]
 8026176:	4620      	mov	r0, r4
 8026178:	f000 f820 	bl	80261bc <__sfp>
 802617c:	6060      	str	r0, [r4, #4]
 802617e:	4620      	mov	r0, r4
 8026180:	f000 f81c 	bl	80261bc <__sfp>
 8026184:	60a0      	str	r0, [r4, #8]
 8026186:	4620      	mov	r0, r4
 8026188:	f000 f818 	bl	80261bc <__sfp>
 802618c:	2200      	movs	r2, #0
 802618e:	60e0      	str	r0, [r4, #12]
 8026190:	2104      	movs	r1, #4
 8026192:	6860      	ldr	r0, [r4, #4]
 8026194:	f7ff ff82 	bl	802609c <std>
 8026198:	68a0      	ldr	r0, [r4, #8]
 802619a:	2201      	movs	r2, #1
 802619c:	2109      	movs	r1, #9
 802619e:	f7ff ff7d 	bl	802609c <std>
 80261a2:	68e0      	ldr	r0, [r4, #12]
 80261a4:	2202      	movs	r2, #2
 80261a6:	2112      	movs	r1, #18
 80261a8:	f7ff ff78 	bl	802609c <std>
 80261ac:	2301      	movs	r3, #1
 80261ae:	61a3      	str	r3, [r4, #24]
 80261b0:	e7d2      	b.n	8026158 <__sinit+0xc>
 80261b2:	bf00      	nop
 80261b4:	0802cccc 	.word	0x0802cccc
 80261b8:	080260e5 	.word	0x080260e5

080261bc <__sfp>:
 80261bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261be:	4607      	mov	r7, r0
 80261c0:	f7ff ffac 	bl	802611c <__sfp_lock_acquire>
 80261c4:	4b1e      	ldr	r3, [pc, #120]	; (8026240 <__sfp+0x84>)
 80261c6:	681e      	ldr	r6, [r3, #0]
 80261c8:	69b3      	ldr	r3, [r6, #24]
 80261ca:	b913      	cbnz	r3, 80261d2 <__sfp+0x16>
 80261cc:	4630      	mov	r0, r6
 80261ce:	f7ff ffbd 	bl	802614c <__sinit>
 80261d2:	3648      	adds	r6, #72	; 0x48
 80261d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80261d8:	3b01      	subs	r3, #1
 80261da:	d503      	bpl.n	80261e4 <__sfp+0x28>
 80261dc:	6833      	ldr	r3, [r6, #0]
 80261de:	b30b      	cbz	r3, 8026224 <__sfp+0x68>
 80261e0:	6836      	ldr	r6, [r6, #0]
 80261e2:	e7f7      	b.n	80261d4 <__sfp+0x18>
 80261e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80261e8:	b9d5      	cbnz	r5, 8026220 <__sfp+0x64>
 80261ea:	4b16      	ldr	r3, [pc, #88]	; (8026244 <__sfp+0x88>)
 80261ec:	60e3      	str	r3, [r4, #12]
 80261ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80261f2:	6665      	str	r5, [r4, #100]	; 0x64
 80261f4:	f7ff f946 	bl	8025484 <__retarget_lock_init_recursive>
 80261f8:	f7ff ff96 	bl	8026128 <__sfp_lock_release>
 80261fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026204:	6025      	str	r5, [r4, #0]
 8026206:	61a5      	str	r5, [r4, #24]
 8026208:	2208      	movs	r2, #8
 802620a:	4629      	mov	r1, r5
 802620c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026210:	f7ff f95a 	bl	80254c8 <memset>
 8026214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802621c:	4620      	mov	r0, r4
 802621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026220:	3468      	adds	r4, #104	; 0x68
 8026222:	e7d9      	b.n	80261d8 <__sfp+0x1c>
 8026224:	2104      	movs	r1, #4
 8026226:	4638      	mov	r0, r7
 8026228:	f7ff ff62 	bl	80260f0 <__sfmoreglue>
 802622c:	4604      	mov	r4, r0
 802622e:	6030      	str	r0, [r6, #0]
 8026230:	2800      	cmp	r0, #0
 8026232:	d1d5      	bne.n	80261e0 <__sfp+0x24>
 8026234:	f7ff ff78 	bl	8026128 <__sfp_lock_release>
 8026238:	230c      	movs	r3, #12
 802623a:	603b      	str	r3, [r7, #0]
 802623c:	e7ee      	b.n	802621c <__sfp+0x60>
 802623e:	bf00      	nop
 8026240:	0802cccc 	.word	0x0802cccc
 8026244:	ffff0001 	.word	0xffff0001

08026248 <_fwalk_reent>:
 8026248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802624c:	4606      	mov	r6, r0
 802624e:	4688      	mov	r8, r1
 8026250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026254:	2700      	movs	r7, #0
 8026256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802625a:	f1b9 0901 	subs.w	r9, r9, #1
 802625e:	d505      	bpl.n	802626c <_fwalk_reent+0x24>
 8026260:	6824      	ldr	r4, [r4, #0]
 8026262:	2c00      	cmp	r4, #0
 8026264:	d1f7      	bne.n	8026256 <_fwalk_reent+0xe>
 8026266:	4638      	mov	r0, r7
 8026268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802626c:	89ab      	ldrh	r3, [r5, #12]
 802626e:	2b01      	cmp	r3, #1
 8026270:	d907      	bls.n	8026282 <_fwalk_reent+0x3a>
 8026272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026276:	3301      	adds	r3, #1
 8026278:	d003      	beq.n	8026282 <_fwalk_reent+0x3a>
 802627a:	4629      	mov	r1, r5
 802627c:	4630      	mov	r0, r6
 802627e:	47c0      	blx	r8
 8026280:	4307      	orrs	r7, r0
 8026282:	3568      	adds	r5, #104	; 0x68
 8026284:	e7e9      	b.n	802625a <_fwalk_reent+0x12>

08026286 <__swhatbuf_r>:
 8026286:	b570      	push	{r4, r5, r6, lr}
 8026288:	460e      	mov	r6, r1
 802628a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802628e:	2900      	cmp	r1, #0
 8026290:	b096      	sub	sp, #88	; 0x58
 8026292:	4614      	mov	r4, r2
 8026294:	461d      	mov	r5, r3
 8026296:	da07      	bge.n	80262a8 <__swhatbuf_r+0x22>
 8026298:	2300      	movs	r3, #0
 802629a:	602b      	str	r3, [r5, #0]
 802629c:	89b3      	ldrh	r3, [r6, #12]
 802629e:	061a      	lsls	r2, r3, #24
 80262a0:	d410      	bmi.n	80262c4 <__swhatbuf_r+0x3e>
 80262a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80262a6:	e00e      	b.n	80262c6 <__swhatbuf_r+0x40>
 80262a8:	466a      	mov	r2, sp
 80262aa:	f000 f8c3 	bl	8026434 <_fstat_r>
 80262ae:	2800      	cmp	r0, #0
 80262b0:	dbf2      	blt.n	8026298 <__swhatbuf_r+0x12>
 80262b2:	9a01      	ldr	r2, [sp, #4]
 80262b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80262b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80262bc:	425a      	negs	r2, r3
 80262be:	415a      	adcs	r2, r3
 80262c0:	602a      	str	r2, [r5, #0]
 80262c2:	e7ee      	b.n	80262a2 <__swhatbuf_r+0x1c>
 80262c4:	2340      	movs	r3, #64	; 0x40
 80262c6:	2000      	movs	r0, #0
 80262c8:	6023      	str	r3, [r4, #0]
 80262ca:	b016      	add	sp, #88	; 0x58
 80262cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080262d0 <__smakebuf_r>:
 80262d0:	898b      	ldrh	r3, [r1, #12]
 80262d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80262d4:	079d      	lsls	r5, r3, #30
 80262d6:	4606      	mov	r6, r0
 80262d8:	460c      	mov	r4, r1
 80262da:	d507      	bpl.n	80262ec <__smakebuf_r+0x1c>
 80262dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80262e0:	6023      	str	r3, [r4, #0]
 80262e2:	6123      	str	r3, [r4, #16]
 80262e4:	2301      	movs	r3, #1
 80262e6:	6163      	str	r3, [r4, #20]
 80262e8:	b002      	add	sp, #8
 80262ea:	bd70      	pop	{r4, r5, r6, pc}
 80262ec:	ab01      	add	r3, sp, #4
 80262ee:	466a      	mov	r2, sp
 80262f0:	f7ff ffc9 	bl	8026286 <__swhatbuf_r>
 80262f4:	9900      	ldr	r1, [sp, #0]
 80262f6:	4605      	mov	r5, r0
 80262f8:	4630      	mov	r0, r6
 80262fa:	f7ff f93d 	bl	8025578 <_malloc_r>
 80262fe:	b948      	cbnz	r0, 8026314 <__smakebuf_r+0x44>
 8026300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026304:	059a      	lsls	r2, r3, #22
 8026306:	d4ef      	bmi.n	80262e8 <__smakebuf_r+0x18>
 8026308:	f023 0303 	bic.w	r3, r3, #3
 802630c:	f043 0302 	orr.w	r3, r3, #2
 8026310:	81a3      	strh	r3, [r4, #12]
 8026312:	e7e3      	b.n	80262dc <__smakebuf_r+0xc>
 8026314:	4b0d      	ldr	r3, [pc, #52]	; (802634c <__smakebuf_r+0x7c>)
 8026316:	62b3      	str	r3, [r6, #40]	; 0x28
 8026318:	89a3      	ldrh	r3, [r4, #12]
 802631a:	6020      	str	r0, [r4, #0]
 802631c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026320:	81a3      	strh	r3, [r4, #12]
 8026322:	9b00      	ldr	r3, [sp, #0]
 8026324:	6163      	str	r3, [r4, #20]
 8026326:	9b01      	ldr	r3, [sp, #4]
 8026328:	6120      	str	r0, [r4, #16]
 802632a:	b15b      	cbz	r3, 8026344 <__smakebuf_r+0x74>
 802632c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026330:	4630      	mov	r0, r6
 8026332:	f000 f891 	bl	8026458 <_isatty_r>
 8026336:	b128      	cbz	r0, 8026344 <__smakebuf_r+0x74>
 8026338:	89a3      	ldrh	r3, [r4, #12]
 802633a:	f023 0303 	bic.w	r3, r3, #3
 802633e:	f043 0301 	orr.w	r3, r3, #1
 8026342:	81a3      	strh	r3, [r4, #12]
 8026344:	89a0      	ldrh	r0, [r4, #12]
 8026346:	4305      	orrs	r5, r0
 8026348:	81a5      	strh	r5, [r4, #12]
 802634a:	e7cd      	b.n	80262e8 <__smakebuf_r+0x18>
 802634c:	080260e5 	.word	0x080260e5

08026350 <__malloc_lock>:
 8026350:	4801      	ldr	r0, [pc, #4]	; (8026358 <__malloc_lock+0x8>)
 8026352:	f7ff b898 	b.w	8025486 <__retarget_lock_acquire_recursive>
 8026356:	bf00      	nop
 8026358:	200613a8 	.word	0x200613a8

0802635c <__malloc_unlock>:
 802635c:	4801      	ldr	r0, [pc, #4]	; (8026364 <__malloc_unlock+0x8>)
 802635e:	f7ff b894 	b.w	802548a <__retarget_lock_release_recursive>
 8026362:	bf00      	nop
 8026364:	200613a8 	.word	0x200613a8

08026368 <__sread>:
 8026368:	b510      	push	{r4, lr}
 802636a:	460c      	mov	r4, r1
 802636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026370:	f000 f894 	bl	802649c <_read_r>
 8026374:	2800      	cmp	r0, #0
 8026376:	bfab      	itete	ge
 8026378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802637a:	89a3      	ldrhlt	r3, [r4, #12]
 802637c:	181b      	addge	r3, r3, r0
 802637e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026382:	bfac      	ite	ge
 8026384:	6563      	strge	r3, [r4, #84]	; 0x54
 8026386:	81a3      	strhlt	r3, [r4, #12]
 8026388:	bd10      	pop	{r4, pc}

0802638a <__swrite>:
 802638a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802638e:	461f      	mov	r7, r3
 8026390:	898b      	ldrh	r3, [r1, #12]
 8026392:	05db      	lsls	r3, r3, #23
 8026394:	4605      	mov	r5, r0
 8026396:	460c      	mov	r4, r1
 8026398:	4616      	mov	r6, r2
 802639a:	d505      	bpl.n	80263a8 <__swrite+0x1e>
 802639c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80263a0:	2302      	movs	r3, #2
 80263a2:	2200      	movs	r2, #0
 80263a4:	f000 f868 	bl	8026478 <_lseek_r>
 80263a8:	89a3      	ldrh	r3, [r4, #12]
 80263aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80263ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80263b2:	81a3      	strh	r3, [r4, #12]
 80263b4:	4632      	mov	r2, r6
 80263b6:	463b      	mov	r3, r7
 80263b8:	4628      	mov	r0, r5
 80263ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80263be:	f000 b817 	b.w	80263f0 <_write_r>

080263c2 <__sseek>:
 80263c2:	b510      	push	{r4, lr}
 80263c4:	460c      	mov	r4, r1
 80263c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80263ca:	f000 f855 	bl	8026478 <_lseek_r>
 80263ce:	1c43      	adds	r3, r0, #1
 80263d0:	89a3      	ldrh	r3, [r4, #12]
 80263d2:	bf15      	itete	ne
 80263d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80263d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80263da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80263de:	81a3      	strheq	r3, [r4, #12]
 80263e0:	bf18      	it	ne
 80263e2:	81a3      	strhne	r3, [r4, #12]
 80263e4:	bd10      	pop	{r4, pc}

080263e6 <__sclose>:
 80263e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80263ea:	f000 b813 	b.w	8026414 <_close_r>
	...

080263f0 <_write_r>:
 80263f0:	b538      	push	{r3, r4, r5, lr}
 80263f2:	4d07      	ldr	r5, [pc, #28]	; (8026410 <_write_r+0x20>)
 80263f4:	4604      	mov	r4, r0
 80263f6:	4608      	mov	r0, r1
 80263f8:	4611      	mov	r1, r2
 80263fa:	2200      	movs	r2, #0
 80263fc:	602a      	str	r2, [r5, #0]
 80263fe:	461a      	mov	r2, r3
 8026400:	f7de f921 	bl	8004646 <_write>
 8026404:	1c43      	adds	r3, r0, #1
 8026406:	d102      	bne.n	802640e <_write_r+0x1e>
 8026408:	682b      	ldr	r3, [r5, #0]
 802640a:	b103      	cbz	r3, 802640e <_write_r+0x1e>
 802640c:	6023      	str	r3, [r4, #0]
 802640e:	bd38      	pop	{r3, r4, r5, pc}
 8026410:	200613b0 	.word	0x200613b0

08026414 <_close_r>:
 8026414:	b538      	push	{r3, r4, r5, lr}
 8026416:	4d06      	ldr	r5, [pc, #24]	; (8026430 <_close_r+0x1c>)
 8026418:	2300      	movs	r3, #0
 802641a:	4604      	mov	r4, r0
 802641c:	4608      	mov	r0, r1
 802641e:	602b      	str	r3, [r5, #0]
 8026420:	f7de f91e 	bl	8004660 <_close>
 8026424:	1c43      	adds	r3, r0, #1
 8026426:	d102      	bne.n	802642e <_close_r+0x1a>
 8026428:	682b      	ldr	r3, [r5, #0]
 802642a:	b103      	cbz	r3, 802642e <_close_r+0x1a>
 802642c:	6023      	str	r3, [r4, #0]
 802642e:	bd38      	pop	{r3, r4, r5, pc}
 8026430:	200613b0 	.word	0x200613b0

08026434 <_fstat_r>:
 8026434:	b538      	push	{r3, r4, r5, lr}
 8026436:	4d07      	ldr	r5, [pc, #28]	; (8026454 <_fstat_r+0x20>)
 8026438:	2300      	movs	r3, #0
 802643a:	4604      	mov	r4, r0
 802643c:	4608      	mov	r0, r1
 802643e:	4611      	mov	r1, r2
 8026440:	602b      	str	r3, [r5, #0]
 8026442:	f7de f910 	bl	8004666 <_fstat>
 8026446:	1c43      	adds	r3, r0, #1
 8026448:	d102      	bne.n	8026450 <_fstat_r+0x1c>
 802644a:	682b      	ldr	r3, [r5, #0]
 802644c:	b103      	cbz	r3, 8026450 <_fstat_r+0x1c>
 802644e:	6023      	str	r3, [r4, #0]
 8026450:	bd38      	pop	{r3, r4, r5, pc}
 8026452:	bf00      	nop
 8026454:	200613b0 	.word	0x200613b0

08026458 <_isatty_r>:
 8026458:	b538      	push	{r3, r4, r5, lr}
 802645a:	4d06      	ldr	r5, [pc, #24]	; (8026474 <_isatty_r+0x1c>)
 802645c:	2300      	movs	r3, #0
 802645e:	4604      	mov	r4, r0
 8026460:	4608      	mov	r0, r1
 8026462:	602b      	str	r3, [r5, #0]
 8026464:	f7de f904 	bl	8004670 <_isatty>
 8026468:	1c43      	adds	r3, r0, #1
 802646a:	d102      	bne.n	8026472 <_isatty_r+0x1a>
 802646c:	682b      	ldr	r3, [r5, #0]
 802646e:	b103      	cbz	r3, 8026472 <_isatty_r+0x1a>
 8026470:	6023      	str	r3, [r4, #0]
 8026472:	bd38      	pop	{r3, r4, r5, pc}
 8026474:	200613b0 	.word	0x200613b0

08026478 <_lseek_r>:
 8026478:	b538      	push	{r3, r4, r5, lr}
 802647a:	4d07      	ldr	r5, [pc, #28]	; (8026498 <_lseek_r+0x20>)
 802647c:	4604      	mov	r4, r0
 802647e:	4608      	mov	r0, r1
 8026480:	4611      	mov	r1, r2
 8026482:	2200      	movs	r2, #0
 8026484:	602a      	str	r2, [r5, #0]
 8026486:	461a      	mov	r2, r3
 8026488:	f7de f8f4 	bl	8004674 <_lseek>
 802648c:	1c43      	adds	r3, r0, #1
 802648e:	d102      	bne.n	8026496 <_lseek_r+0x1e>
 8026490:	682b      	ldr	r3, [r5, #0]
 8026492:	b103      	cbz	r3, 8026496 <_lseek_r+0x1e>
 8026494:	6023      	str	r3, [r4, #0]
 8026496:	bd38      	pop	{r3, r4, r5, pc}
 8026498:	200613b0 	.word	0x200613b0

0802649c <_read_r>:
 802649c:	b538      	push	{r3, r4, r5, lr}
 802649e:	4d07      	ldr	r5, [pc, #28]	; (80264bc <_read_r+0x20>)
 80264a0:	4604      	mov	r4, r0
 80264a2:	4608      	mov	r0, r1
 80264a4:	4611      	mov	r1, r2
 80264a6:	2200      	movs	r2, #0
 80264a8:	602a      	str	r2, [r5, #0]
 80264aa:	461a      	mov	r2, r3
 80264ac:	f7de f8be 	bl	800462c <_read>
 80264b0:	1c43      	adds	r3, r0, #1
 80264b2:	d102      	bne.n	80264ba <_read_r+0x1e>
 80264b4:	682b      	ldr	r3, [r5, #0]
 80264b6:	b103      	cbz	r3, 80264ba <_read_r+0x1e>
 80264b8:	6023      	str	r3, [r4, #0]
 80264ba:	bd38      	pop	{r3, r4, r5, pc}
 80264bc:	200613b0 	.word	0x200613b0

080264c0 <_init>:
 80264c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264c2:	bf00      	nop
 80264c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80264c6:	bc08      	pop	{r3}
 80264c8:	469e      	mov	lr, r3
 80264ca:	4770      	bx	lr

080264cc <_fini>:
 80264cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264ce:	bf00      	nop
 80264d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80264d2:	bc08      	pop	{r3}
 80264d4:	469e      	mov	lr, r3
 80264d6:	4770      	bx	lr
